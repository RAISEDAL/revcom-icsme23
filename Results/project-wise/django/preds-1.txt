Looking at the code changes below in the middleware, I also see no clear reason for not returning a new token here to stay a little bit more compatible to with what we had before.
Yes, but I have to ask why? I get that there is a side effect, but how much of a problem is this? I can potentially see the problem if you do the following: ```python def view(request): ... wrapped_view = no_append_slash(wrapped_view) # Now both ``view`` and ``wrapped_view`` have ``should_append_slash`` set which # means using ``view`` might not do what you expect. ``` But typically you're going to do the following: ```python @no_append_slash def view(request): ... ``` Which would be no different to assigning the attribute directly after the function is created if not using a wrapper function: ```python def view(request): ... view.should_append_slash = False ``` I was concerned that there may be an issue if you wanted to do something like the following, but it turns out that `functools.wraps()` also copies attributes other than `__name__` and `__doc__` so this works fine: ```python @csrf_exempt @no_append_slash def view(request): ... ``` But it also effectively translates to having to call three functions, the outer two which have no benefit other than to have copies of all of the attributes of the functions within them. This has some call overhead and, if there are many decorated functions, excess memory use to store all these additional function objects and extra attributes as they bubble up.
Arf, this is also not optimal either. `pre_save` can have side-effects, like `django.db.models.fields.files.FileField.pre_save` does 😕 We probably don't want to trigger those here. I mean, serendipitously it would work for the `FileField` because even if the returned value is still the same (so we don't add the `field.name` to `updated_fields`), we actually triggered the side-effect committing the file 😂 However, that seems pretty brittle 😅 I'm not sure what the cleanest/Djangoest approach would be here 🤔 We could add an attribute on the Field class, like `Field.has_pre_save: bool`, but that creates a precedent and users/libs must update their code accordingly. But at least, we would know _for sure_ which fields need to be added and which don't. Any other suggestion is very welcome!
I would do: ``` def check_and_update_obj(obj): if not isinstance(obj, self.model): raise TypeError("'%s' instance expected" % self.model._meta.object_name) if obj._state.adding or obj._state.db != db: raise ValueError("%r instance isn't saved. You must save the object first." % obj) setattr(obj, self.content_type_field_name, self.content_type) setattr(obj, self.object_id_field_name, self.pk_val) ```
@felixxm that's a tricky one for sure. We could adjust MySQL's `allows_group_by_pk` feature to be based of `not ONLY_FULL_GROUP_BY` but that would likely incur a large performance hit which is definitely not suitable for a backport. I guess we could always skip the test on MySQL for now.
"nonexistent" would be the word
Nitpick but `dict.get` default value for a missing key is already `None`.
The other option is to wrap the file with something like: ``` from django.core.files import File class ChunkedFile(File): DEFAULT_CHUNK_SIZE = 4096 def __iter__(self): return self.chunks() return StreamingResponse(ChunkedFile(open(fullpath, 'rb'))) ``` I considered using this wrapper for FileResponse.
line saver? ``` format_string = '%%H:%%M:%%f' if db_type == 'time' else '%%Y-%%m-%%d %%H:%%M:%%f' extra_context['format_string'] = format_string ```
We do this twice, so I'd move `joined_column_names` above the first `index_name` creation.
This can just be `pass` since the functionality doesn't matter.
These check should respect `required_db_features`, so we need to omit checking conditions for `UniqueConstraint`\`s if `connection.features.supports_partial_indexes or 'supports_partial_indexes' in cls._meta.required_db_features`.
Since you don't actually need the instances of all those models, can you use `WindowTestModel.objects.bulk_create()` please.
Looks like Windows isn't happy with the dots. I think something like 'nonexistent' should work.
This is never executed.
``` Superuser creation skipped due to not running in a TTY. You can run `manage.py createsuperuser` in your project to create one manually. ```
no restructured text (:class:) in docstrings please
don't add this blank line.
Could you please keep the cross-app reference that we had before.
Use `setUpTestData` now that two models will be used by two methods.
I think that you could move the slicing inside `DebugLexer._tag_re_split()` and then `DebugLexer.tokenize()` will be even closer to `Lexer.tokenize()`: ```suggestion for bit, position in self._tag_re_split(): ``` Maybe with these changes it makes sense to rename `DebugLexer._tag_re_split()` to something like `.split()` and add the same method to `Lexer` with something like: ```python def split(): yield from ((bit, None) for bit in tag_re.split(self.template_string)) ``` Then you should be able to ditch `DebugLexer.tokenize()` entirely and inherit it.
Both `with` should fit on the same line, `with self.subTest(value=value), self.assertRaisesMessage(ValidationError, "'Enter a number.'"):`
The reason was that we’d end up with a 500 server error in this case, whereas now we get a validation error. An alternative that we could use here is the old approach ‘cl.result_list’, which we know is sensibily limited to just one page. Either that, or since it's invalid POST data, bail out here and report the error to the user. (That's a little bit more work though; I haven't yet thought what that looks like.)
Yes, just be careful not to mess up the `else:` case below
I think you could use `self.assertSequenceEqual` rather than this.
```suggestion self.assertEqual(a.headline, 'Default headline') ```
Yeah, this is a good point, reuse an ordering if possible (maybe even force it)
`self.real_apps` is always a set, `set()` is unnecessary (here and in many other lines).
If `django.__file__` contains non-ASCII characters, this will raise an exception. `is_ascii(force_text(django.__file__))` or catching the encoding exception in the is_ascii function would be safer approach. (This would be incorrect if `django.__file__` is a relative path, of course.)
Since `separate_logs` seems like a higher-level mode that does multiple things, maybe you can make it so the mode doesn't need to be stored as an attribute. For example, the following line could write to a `self.output_stream` that defaults to `os.devnull`. When running in script mode, it could be set to `self.stdout`. It would also eliminate the need for an `if` statement.
These could be alphabetized.
I had to change this to `template_params['subquery'], sql_params = self.subquery.query.get_compiler(connection=connection).as_sql()` in order to compile correctly when using a database other than the `DEFAULT_DB_ALIAS`.
This is not only about constraints but also about noop `ALTER FIELD` operations. Field alteration can cause many DDL changes. > We could just compare the old and new field. That's exactly what we're doing here, we compare fields but without attributes that don't impact schema changes.
chop "Check that"
I'm afraid isort insists on the backslash version
`fields` is always specified by callers, no need to have a default value
I'd use hanging indent as we do for Python code: ``` WHEN EXISTS ( SELECT 1 FROM user_indexes WHERE user_indexes.index_name = user_constraints.index_name AND user_indexes.uniqueness = 'UNIQUE' ) ```
Here too -- I'd prefer to see `raw_converter` replace `e` in the exception message
"or in UTC."
Use `if isinstance(d, list)` to handle subclasses which are likely to be unhashable as well.
I think the `= true` is a byproduct of filter requiring a left and right hand side. This can be fixed when that restriction is removed via filter/expressions.
`assertTrue(value)` will pass for `bool(value) is True` which is different than checking for `True`.
Please wrap at 79 chars.
"foreign key id" may not be the best wording. For example, this also applies to subclasses like OneToOneField.
These check should respect `required_db_features`, so we need to omit checking conditions for `UniqueConstraint`\`s if `connection.features.supports_partial_indexes or 'supports_partial_indexes' in cls._meta.required_db_features`.
yeah, i don't think instance patching requires cleanup, that instance goes away at the end of the test
This works without the patch and should be moved to a separate commit. I'd also move it to a separate test method: ```python def test_defer_only_clear(self): self.assert_delayed(qs.only('name').defer('name')[0], 0) self.assert_delayed(qs.defer('name').only('name')[0], 0) ```
I suggest renaming the variable to `validators`.
I know this was copied from below but there's no point in not using `get()` directly. ``` python qs = self.get_queryset(instance=instance) # Assuming the database enforces foreign keys, this won't fail. return qs.get(self.field.get_reverse_related_filter(instance)) ```
We can also import `include()` from `django.urls` instead of `django.conf.urls`.
`VACUUM INTO` was [added in 3.27.0](https://sqlite.org/releaselog/3_27_0.html). This would bump requirements in `databases.txt` and `check_sqlite_version()` check in `django/db/backends/sqlite3/base.py`
When you do `iri.decode(encoding)` you are getting unicode, so effectively you sometime have unicode, sometime bytes. If the caller needs bytes, it can encode in whatever encoding it desires .
We cannot make serial pk assumption: ```diff diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py index 8b54611010..ea68a105d6 100644 --- a/tests/model_forms/tests.py +++ b/tests/model_forms/tests.py @@ -1765,10 +1765,12 @@ class ModelMultipleChoiceFieldTests(TestCase): f.clean([c6.id]) def test_model_multiple_choice_field_validate_choices_called_properly(self): + c1 = self.c1 + class CustomModelMultipleChoiceField(forms.ModelMultipleChoiceField, TestCase): def validate_choices(self, queryset, field_name, selected_choices): self.assertIsInstance(queryset, models.QuerySet) - self.assertQuerysetEqual(queryset.order_by('id'), [1], lambda a: a.id) + self.assertSequenceEqual(queryset, [c1]) self.assertIsInstance(field_name, str) self.assertEqual(field_name, 'pk') self.assertIsInstance(selected_choices, frozenset) ```
missing some trailing commas
The test data should be defined so it isn't necessary to call `strip()`.
While longer, this avoids creating the extra list, string building and "complex" range calculations: ```suggestion i = None try: while i := lang_code.rindex('-', 0, i): possible_lang_codes.append(lang_code[:i]) except ValueError: pass ``` I know it also uses the walrus operator, but Django 4.0 is targeting Python 3.8+, so it is available to us. It seems much more readable to me. (If this isn't a performance critical path then `contextlib.suppress()` could be used to shave off two lines.)
We'd likely want to accept `renderer=None` here and default to `get_default_renderer()`.
We can add a control assertion to confirm that a `house` is cached for the `room`: ```suggestion self.assertIs(Room.house.is_cached(self.room), True) with self.assertNumQueries(0): ```
I wonder if 25 should be defined in the [SQL constants module](https://github.com/django/django/blob/master/django/db/models/sql/constants.py)? I am afraid changing 25 in the code might not be changed here, so the test would silently become obsolete.
I'm not sure this is needed since class doesn't have a custom `__repr__()`, we're just testing the base class.
I'm reluctant to pass a `Template` to the `Engine` because that creates a circular relation between the two classes. If you keep this design, you must at least rename `compile_string`, because it no longer accepts a string in argument. In fact I would add a new method and deprecate `compile_string`.
You can remove the `keys()` call as `iter(dict.keys())` yields the same results as `iter(dict)`. That is `update(base.__dict__)`.
I guess `mark_safe()` is needed because the empty string is considered "unsafe"? In that case, it might be easier to understand the intention with: `mark_safe('').join(...)`
`DatabaseFailureError` is not declared, it should be a subclass of `AssertionError`.
You'll want to branch off `< 3.6`.
``` python # the following time is equivalent to UTC 2014-03-13 05:34:23.24000 ```
I added warning to docs.
Any reason not to do the following? ```python return ( clean_lookup in valid_lookups or LOOKUP_SEP.join(relation_parts + [part]) in valid_lookups ) ``` A better approach would be to make `valid_lookups` a `set()` in the first place (using `add` instead of `append` above) and do: ```python clean_lookups = {LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part])} return clean_lookups & valid_lookups ```
The layout should be something along those lines ``` python for enclosure in item.get("enclosures") or []: handler.addQuickElement("link", "", { "rel": "enclosure", "href": enclosure.url, "length": enclosure.length, "type": enclosure.mime_type }) ```
`CURRENT_DIR` is already a `Path` object, so we could join this with the `/` operator. ```suggestion html_template_path = CURRENT_DIR / 'templates' / 'technical_500.html' ```
Please move [standard library imports](http://www.python.org/dev/peps/pep-0008/#imports) with the [other ones](https://github.com/ezequielsz/django/blob/90a9140051aeeb84ab9d46c6209f42c5c3820908/tests/regressiontests/mail/tests.py#L4-L11).
The last parenthesis should be moved to the next line due to hanging indentation.
`not statement` is used several times above, so need to be consistent in code style.
Sounds good. Feel free to submit that as a separate pull request. We can probably merge that first and then rebase this.
Add a trailing comma so if more items are added later we don't have to modify this line again.
I'd omit the blank line since the ) on its own line provides space.
Move the exists assertions to another test.
Where is it taken care of that a `Ref` will already exist in the inner query? Might be nice to have that information here.
The rest of Django's test use `@mock.patch` so I think we should use that.
In cases like this, we prefer to include a trailing comma so if more items are later added, we don't need to modify this line again.
The reason for this is that your for loop is running on both dbs, at first `allow_migrate()` returns `True` for the first db (`default`) thus setting `connection`, `allowed_len`, `db_alias` accordingly, but you are not terminating the loop, making it try `other` db with `allow_migrate()`, returning `True` and setting the variables again.
@MarkusH Cleaning up all the tests like this makes sense of course, but since this particular test is not yet committed and the change is rather trivial - it can be done before commit as well (and serve as an example of a good test later). Besides, cleanup may happen but it might not as well for a plenty of reasons (no resources, unexpected difficulties, etc), so imo it's better to do this now with this particular test. Why should one commit something that already needs cleanup? Hope this makes sense.
Not sure these asserts bring value ... they seem to test that `override_settings` works.
Return (chop 's')
You may change the others if you like, but please make it a separate commit.
Trailing zeros are unnecessary. Also, it'd be more readable to keep MySQL and MariaDB in separate branches, e.g.: ```python if self.connection.mysql_is_mariadb: return self.connection.mysql_version >= (10, 8) return self.connection.mysql_version >= (8, 0, 1) ```
I wonder, maybe in future we should introduce a `django.conf` setting for this regexp
I don't see the need to refetch the object from the database. `self.assertEqual(res.context['object'], self.author)` should work fine for all these assertions. Maybe the original test author didn't realize that model equality only compares primary keys.
I don't like the idea of reading from stdin; that's unlike how any other management command works. Let's take this part out, I think it's YAGNI.
longer lines here are okay, we try to avoid non-multiple of 4 indents
These notes are unnecessary.
You can use `@modify_settings`, e.g. ```suggestion @modify_settings(MIDDLEWARE={ 'prepend': 'test_client.tests.urlconf_override_middleware', }) def test_resolver_match_when_urlconf_modified_by_middleware(self): response = self.client.get('/') ```
Missing `cls.cls_atomics` argument.
Can you include latin-1, non-ASCII characters? `café` is one of the few English words matching this requirement. `Just latin-1 :)` will encode identically in ASCII, latin-1 and utf-8, making the tests much less interesting.
Silenced the output. The `create_default_site` method deserves a more basic test, but there's more to it than the output, could be another ticket I guess (this one is pretty convolved as is). Here's a [sketch of a test](https://github.com/wrwrwr/django/commit/8927a52a4271ab8208783ce4c2af31814314a6c8).
```suggestion if not isinstance(perm_list, (list, tuple)): ValueError('perm_list must be a list or tuple.') ```
This is already tested in `tests.migrations/test_operations.OperationTests.test_rename_field_with_db_column`, see 7f4c9222dfe2f28ff8a7ffc56c28ccbadf19cf6f. I will revert this change.
No need for `keys()` here.
remove "should", e.g. "debug() bubbles up exceptions before cleanup."
Please use 4 space hanging indent style as seen elsewhere in this file such as `cls.superuser = ...`
`# Check that ...`
Need to test how many times `update_contenttypes` was called and test arguments which passed to it.
True, but they test the behavior of the respective operations. It's true that `test_state.py` has a few tests that check for the correct `state_forwards()` behavior, though those tests are focused on the bigger picture of how `ProjectState` and `ModelState` work. Whereas `test_operations.py` tests for the particular implementations of the different migration operations, and as such should hold (regression) tests that focus on a particular implementation of such an migration operation. Thus, `test_operations.py` sounds like the right choice to me.
We can drop meta ordering and add it to the queryset: ``` self.assert_pickles(c.concrete_events.order_by('event)) ```
You can remove parentheses.
Please test for all of the extra registered range types - you should be able to make use of `self.subTest()`.
And this can be reverted.
Makes sense, let's stick with `raise e`.
Use `self.assertIs(cache.touch('something'), True)` since `assertTrue()` passes if `bool(value) is True`.
spelling / typo: parentheses
comma after tuple
The main question is what to do with these tests? We should analyze them one by one and prepare alternative versions only with `unique_together` (if necessary). I'm afraid that we cannot simply remove them when deprecation ends because we will end with many not covered scenarios. For example: ```python diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py index 547e0b32c5..4c19a34d7f 100644 --- a/tests/migrations/test_autodetector.py +++ b/tests/migrations/test_autodetector.py @@ -2441,10 +2441,10 @@ class AutodetectorTests(TestCase): self.assertNumberMigrations(changes, "testapp", 1) self.assertOperationTypes(changes, "testapp", 0, ["AlterField"]) + # RemovedInDjango51Warning: When deprecation ends rename to + # test_empty_unique_together(). + @ignore_warnings(category=RemovedInDjango51Warning) def test_empty_foo_together(self): - """ - #23452 - Empty unique/index_together shouldn't generate a migration. - """ # Explicitly testing for not specified, since this is the case after # a CreateModel operation w/o any definition on the original model model_state_not_specified = ModelState( @@ -2457,7 +2457,7 @@ class AutodetectorTests(TestCase): "model", [("id", models.AutoField(primary_key=True))], { - "index_together": None, + "index_together": None, # RemovedInDjango51Warning "unique_together": None, }, ) @@ -2468,7 +2468,7 @@ class AutodetectorTests(TestCase): "model", [("id", models.AutoField(primary_key=True))], { - "index_together": set(), + "index_together": set(), # RemovedInDjango51Warning "unique_together": set(), }, ) ```
I'd say omitting `__class__.__name__` is more useful as it'll include the `app_label`. I would just omit `'.ModelAdmin'` if the string ends with that, since that's probably `register()` without a `ModelAdmin` subclass. So in case 1, the error would look like: The model %s is already registered with app 'admin_registration'. In case 2: The model %s is already registered with 'admin_registration.PersonAdmin'.
This docstring is unnecessary ```suggestion ```
To prevent unexpected `FieldDoesNotExist` exceptions raised in `if field.attname == field_name:` to be silennced. It's generally good practice to restrict the `try` body to the only parts expected to raise the exception.
This can be single-lined.
This now raises a warning, so I adjusted to use a view.
AdminSelect used to take the related model. It now takes the field.
move ) to next line for consistency
I find `assertEqual` preferable since `asserTrue` checks `bool(expr) is True` which could pass for a result we don't want here. Well, I guess what we actually want is `assertIs(expr, True)` as described in the Python docs.
```suggestion msg = f"Cannot use 'default_bounds' with {field_class_name}." with self.assertRaisesMessage(TypeError, msg): ```
😮 I see that we have a similar condition here `django.db.models.expressions.Exists.as_sql`: ``` features = compiler.connection.features if not features.supports_boolean_expr_in_select_clause: return "1=1", () return compiler.compile(Value(True)) ``` Would it make sense to somehow move them to the same piece of logic? We could either have `compile(Value(True))` determine if it should generate a `1=1`, but it have other side-effects I think 😕
Reading below, I see that Flask has an "any" converter that does something more complicated. Creating a converter with the same name but a different behavior doesn't sound good.
Only this parameter is unnecessary, rest of them is necessary to hide std outputs.
Please use the same order as in `--help` output, i.e. `--version`, `--verbosity`, `--settings`, `--pythonpath`, `--traceback`, `--no-color`, and `--force-color`.
can import go at top of file? also, `test_utils` seems like an odd place for these tests. Generally that module is for testing `django.utils`.
Surely you want all of the password hashes in the list of available ones so that people can log in with them? Of course argon2 is unlikely to be out there in the wild, but if someone tried it and then decided to switch back they wouldn't be able to do so by deleting the settings, they'd have to copy/paste the default and re-add it. There's little harm in including it by default afaik. You might not want to have something other than PBKDF2 to be the default though, people might accidently have bcrypt or argon2 installed and not realize it and end up unable to log in if they deploy. Not sure if that's a big worry or not though.
`value` or `return_value`? or maybe we should swap these lines: ```python if ( not timezone._is_pytz_zone(current_timezone) and timezone._datetime_ambiguous_or_imaginary(value, current_timezone) ): raise ValueError('Ambiguous or non-existent time.') return timezone.make_aware(value, current_timezone) ``` :thinking:
You don't need the trailing \ here. EDIT: I see you just moved that code, that's fine.
It's fine to manually substituting parameters here.
Can't this case be handled by calling related model's meta.get_field(link_field_name)? If that is the case, then the `for field in self.through._meta.fields` loop would be much simplified.
I wonder if it would be simpler and more efficient to filter out all empty querysets. from self and other_qs, then use `qs[0].self._combinator_query('union', qs[1:], all=all)`, accounting for the case where qs might have zero or one elements.
No need to multiline statements like this which will fit on a single line.
isort rewrites this to `convert_exception_to_response, get_exception_response,`
This can be moved outside of `try...except...`.
I wonder if this might be bit more readable: `model = type('A' * 101, (models.Model,), {'__module__': self.__module__})`
chop blank line
Can you please rename it to `ModelManagerSerializer`. I think you just missed it.
`clean` is not only for validation, but also for data modification in a form.
To make this a better test, use multiple values and varying case. E.g. `'No-Cache, No-Store, Max-age=0'`.
Historic moment! I don't see a reason why we shouldn't use them.
Appreciate what you've done with the tests but I think they're harder to comprehend now. As a Django dev I can jump in and read model classes, but the helpers are obscuring things a bit to me. Also you now have multiple tests per test method now - ideally there should just be a handful of classes per test and some assertions. I guess you can split based on overriding, non-overriding, etc.
I think we also need to exclude [conditional constraints](https://docs.djangoproject.com/en/3.0/ref/models/constraints/#condition) here.
You should be able to pass `is_active=False` to `create_user()`.
`serial` columns in PostgreSQL have a `NOT NULL` constraint. You may want to force `null` to be `False`
me too :+1:
Blank lines aren't needed.
I would rename it to `kwargs` ```suggestion kwargs = {} ```
This usage looks a bit magic to me, but I think it can stay as it is. The module level deprecation warnings in https://github.com/django/django/commit/f59fd15c4928caf3dfcbd50f6ab47be409a43b01 are different than this, so stacklevel=2 can be removed in the following locations: - https://github.com/django/django/commit/f59fd15c4928caf3dfcbd50f6ab47be409a43b01#diff-9e264d0b47bfdd60be1698bca9bae281R19 - https://github.com/django/django/commit/f59fd15c4928caf3dfcbd50f6ab47be409a43b01#diff-68395a4996a48dd1b3cd34ddd9efe762R12
indent style: ``` self.assertEqual( rendered, '...' '...' ) ```
A None check would be required here (and not just look for truthiness of self._secret_fallbacks). I.e. using `SECRET_KEY_FALLBACKS = ['a']` and setting `generator.secret_fallbacks = []` would make the getter `generator.secret_fallbacks` return `['a']` and not `[]`.
Small nitpick, I would use `bulk_create` here. ``` python Article.objects.bulk_create( Article(pub_date=pub_datetime.date(), pub_datetime=pub_datetime) for pub_datetime in pub_datetimes ) ```
I think we should add this to the opclasses as well then.
It might be smarter to validate the token first and only modify the session + redirect if it's valid. Otherwise it makes it really easy to create a session just by GET'ing a url (possible DoS vector). It also means you can't pass `accounts/password_reset` as the token and take advantage of our `request.path.replace()` code. It probably means validating the token twice, which is slightly slower. Seems fine to me if an invalid token gets leaked.
you can just `del` it instead, it will then fall back to the class level attribute, and save space on pickled state objects
Note that I didn't plea for keeping the functionality. I just said that if we remove that, it should be done properly (backwards incompatibility note, separate commit).
IMO we should check options against PostreSQL names.
Don't sqlite have the same issue as illustrated by `test_field_database_defaults_sqlite`? Once solution might be to use `STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW')` on sqlite but it appears like it only supports 3 digits when the expected precision is 6.
Can you use `['indexes']` here? If not, the list comprehensions in the next lines have a `not in None` and will fail.
`# Store ... warning message.`
It's not a good practice to manually assign primary keys like this. It can cause problems with database sequences.
This is compliant with the PEP8 rules that we care about, let's not make the diff bigger than needed.
The import should be conditional and the test skipped if enum isn't installed.
Also, I don't think we should collect this in `to_report`. We can fail immediately with `self.fail('Form is valid')`.
Should we also have a pointer here of the form ```suggestion with self.assertRaisesMessage(FieldError, "Cannot distinct on 'other_rating' alias. Use annotate to promote it"): ```
This should just be `template_params = kwargs`. The `extra` in the signature that was removed is acting like a `kwargs` anyway.
I think leave the original `widget = widget or self.field.widget` here. Then do the `isinstance()` check, so that we're no repeating ourselves in the `else` block. `widgets` might then be clearer as `subwidgets`. (Or such.)
Add a blank line. ```suggestion base_table_class = BaseTable ```
You can reuse `resolve_model_field_relations()`.
`'Big serial'` (`BigIntegerField` has `'Big (8 byte) integer'`, but I think we can keep this description simple.)
It'd be great we if we could avoid creating 5 new tables to reproduce the issue. Existing ones should be reusable somehow.
Move the exists assertions to another test.
then you should be able to remove [0] from django/contrib/gis/db/backends/oracle/operations.py too (just so we stay consistent) (same for spatiallite)
only need 'coding' if there are non-ascii chars in the file
There is no need to mix these tests with `.extra()` we can use existing columns, e.g. ```python values = Number.objects.values_list('num', 'other_num', named=True).get() ```
Please add trailing comma.
`ExpressionList.__repr__()` can be removed because `Func.__repr__()` works in the same way.
```suggestion def _select_on_conflict(self, ignore_conflicts, update_conflicts, update_fields, unique_fields): ```
`cls.staff_user = User.objects.create_user(username='user', password='secret', email='user@example.com', is_staff=True)`
It won't necessarily - the queue means it'll be unloaded as it's loaded - but I do wonder if giving the queue an explicit length and using normal `put()`, or some similar way of _limiting_ the amount of memory used, would be sensible.
We shouldn't use the same chain on `replace()` in multiple places, use `quote_value()` instead.
but its standard too have a doc string
Lets also test that `values_list()` throws the same error. You can do it in the same test method.
I meant changing the signature of `apply_converters()` to: ``` @staticmethod def apply_converters(self, connection, rows, converters): ``` I guess that change doesn't make much sense given `apply_converters()` is called in some other places.
I don't see much value in this docstring.
I don't see much value in this docstring, please remove it.
return directly, no need for `path` variable.
`as defined by the arguments` is not really telling me anything. I would either add a longer more descriptive doc string or none.
@felixxm that's a tricky one for sure. We could adjust MySQL's `allows_group_by_pk` feature to be based of `not ONLY_FULL_GROUP_BY` but that would likely incur a large performance hit which is definitely not suitable for a backport. I guess we could always skip the test on MySQL for now.
Pretty sure we can't drop the `order_by` based on 779e615e362108862f1681f965ee9e4f1d0ae6d2 which explicitly deals with this `annotate` / `FieldError` issue.
Are you sure? Should this not be consistent with `SHORT_DATETIME_FORMAT`, i.e. `SHORT_DATE_FORMAT = 'j N Y'`.
You could, just seemed easier not to have nested if statements.
Use [PEP 257](https://www.python.org/dev/peps/pep-0257/) verb style: "Update..."
I was thinking about the same, but without any static list we cannot perform a proper validation. A wildcard approach is fine IMO, we can add a small warning in the docs, e.g. ``` .. warning: Rasters with names starting with `/vsi*/` will be treated as rasters from the GDAL virtual filesystems. Django doesn't perform any extra validation. ```
According to [Wolfram Alpha](http://bit.ly/29bAENj) that's the same as this and slightly more understandable? ``` python (not old_field.db_index and not old_field.unique and new_field.db_index) or (not old_field.unique and new_field.unique) ```
"cannot" is one word. add period.
Please revert the whitespace addition.
`extra` filed is assigned by user. for example: ```python class ChoiceInline(admin.StackedInline): model = Choice extra = 3 ``` ref: https://docs.djangoproject.com/en/3.1/intro/tutorial07/#writing-your-first-django-app-part-7 I'am sorry that I think `EXTRA_FORM_COUNT = TOTAL_FORM_COUNT - max(INITIAL_FORM_COUNT, MIN_NUM_FORM_COUNT)` is incorrect.
I thought you wanted to remove `return`. Nevertheless I'd also leave the `else` as it increases readability.
This class is unnecessary.
I think using a semantic name would help here, e.g. `lookup_kwarg_null`
Inner import is not necessary: ```python from django.core.mail import ( DNS_NAME, EmailMessage, EmailMultiAlternatives, mail_admins, mail_managers, send_mail, send_mass_mail, ) ```
chop extra space after period, chop "we".
Do we need to call `str()` on `contraint_sql`? ```suggestion if contraint_sql: schema_editor.execute(constraint_sql + ' NOT VALID') ```
```suggestion # Reversal. ```
I'd suggest to check `response.context[REDIRECT_FIELD_NAME]` instead.
I wasn't familiar with `assertFormError` actually. Guess the main difference is that `assertFormError` is a single field. Happy to leave that though, the nicer `assertFormValid` is useful in itself.
This is the way lookups (and SQL in general throughout the ORM) is written currently. We could pick some other way (and the latter one is clearly more readable), but it is best to keep this file consistent with the rest of the code base.
`Also include shadowed fields of the parent class.` (can move to previous line I think)
That shouldn't be an issue (see a workaround for `|`).
Do we need to call `list(fields)` here? :thinking:
Please make this `IntegerField` instead of `PositiveIntegerField`. Similar to `AutoField`, which uses `serial`, although the field usually increments from `1`, it is not forbidden to store zero or negative values. Indeed, this is sometimes useful.
I guess this needs to be something like `inherited_attributes |= set(base.__dict__.keys())` to work on Python 2.
Right so I think the skip condition in order to avoid false failures should be: `@unittest.skipIf(connection.ops.max_name_length() > 74` but it would be better if we could keep the skip condition as it is so the test is run on all databases and automatically generate a model that has a field name with length `connection.ops.max_name_length() + 1` If you're still unsure about this, let's sync up on IRC.
``` # If the database returns a Decimal, convert it to a float as expected # by the Python geometric objects. ```
might as well use `setdefault` in the test as well
This is better. I didn't think about the problem with variables that can change values. I have one concern, though. The same `render_context` instance is shared across nodes in the `Template.render()` call, so `template_name` isn't a very safe key to use. The potential arises to clash with other nodes. Maybe we could adjust the approach a bit? My thought is to create a cache dict in the `render_context` using `self` as a key. For example: ``` cache = context.render_context.setdefault(self, {}) template = cache.get(template_name) cache[template_name] = template ``` Alternatively, you could use a unique, uncommon key rather than `self`. The benefit here is that multiple `IncludeNode` instances could share the same cache. That means a template like below would only parse `template.html` once: ``` {% include "template.html" %} {% include "template.html" %} {% include "template.html" %} ``` That seems appropriate in this case.
No, they are not supported, because `BOOLEAN` datatype is available only in PL/SQL on Oracle, so `SELECT` clause cannot return it.
No, I was thinking about `'input'` an `'widget'` strings, e.g. - `MultipleHiddenInput` -> `multiplehidden`, - `SplitHiddenDateTimeWidget` -> `splithiddendatetime`, - `PasswordInput` -> `password`. Does it make sense? :thinking:
This test data seems wrong to me. For example, you have verbosity `1` leading to level `DEBUG`, which means that logging at a level of `DEBUG` should result in output per the logic below (since `logging_level >= level` appends `output = True`). That isn't right though, since verbosity `1` shouldn't show `DEBUG`. The test would be a lot easier to understand and update if it was simply a hard-coded, sorted list of tuples, e.g. ```python cases = [ (0, None, False), (0, logging.DEBUG, False), (0, logging.INFO, False), (0, logging.WARNING, False), ... ] ``` Including `level=None` will serve to check the default case. Also, you don't need to check `level=logging.NOTSET` since that's not a level that anyone would ever pass when logging a message. That level is more for when reading what level is set on a configured logger. Having the correct test should help with getting your logic correct in the `log()` method above.
Moved fail_on_restricted to the next line and use hanging indentation.
please use periods
In general, I think the `get` / `set` style APIs are familiar enough that we don't need to use keyword arguments with every call. But I don't feel strongly about it.
Quick link: https://github.com/django/django/pull/8714/files
To catch this as a `IntegrityError` on Oracle we need to add `ORA-00001` to the wrapper: ```diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py index 4d2f5b51f1..3908aebda1 100644 --- a/django/db/backends/oracle/base.py +++ b/django/db/backends/oracle/base.py @@ -73,7 +73,7 @@ def wrap_oracle_errors(): # _C00102056) violated - parent key not found' # Convert that case to Django's IntegrityError exception. x = e.args[0] - if hasattr(x, 'code') and hasattr(x, 'message') and x.code == 2091 and 'ORA-02291' in x.message: + if hasattr(x, 'code') and hasattr(x, 'message') and x.code == 2091 and ('ORA-02291' in x.message or 'ORA-00001' in x.message): raise IntegrityError(*tuple(e.args)) raise ```
It would be a bit more clear like: ``` {field_name: (field_name_other_table, other_table) for field_name, other_table, field_name_other_table in self.get_key_columns(cursor, table_name)} ```
Chop "Helper function that" "Return ..." (use PEP 257 verb style)
No need for `keys()` here.
I made a few edits and squashed commits but before I push those updates I wanted to ask if this test is really needed. None of the changes seem related to verbosity so this test seems unnecessary to me.
Maybe `# If the expression can be used in a WHERE-clause.`.
I'd do: ``` kwargs['separators'] = kwargs.get('separators', (',', ':')) ``` On Wed, Aug 21, 2013 at 8:06 PM, Tim Graham notifications@github.comwrote: > In django/contrib/messages/storage/session.py: > > > ``` > > else: > > self.request.session.pop(self.session_key, None) > > return [] > > ``` > > > > + > > - def serialize_messages(self, messages): > > - encoder = MessageEncoder(separators=(',', ':')) > > look ok? https://gist.github.com/timgraham/dc1cc1abe202d3830eab > > — > Reply to this email directly or view it on GitHubhttps://github.com/django/django/pull/1488/files#r5903355 > .
I think the idea is `sortable_by = None` is the default case of all fields sortable and `sortable_by = ()` means no fields are sortable.
Is this check only applicable to the `if request is None` branch? I'm not sure.
It allows many new schemes that weren't allowed before.
The only place I can vaguely remember `repr` being used is during the migrations. If you have the `AddIndex/RemoveIndex` operation in your migrations file, it shows this representation when the migrations are run. Since it is very common that a dev might want to create multiple gin indexes in the same table, it is necessary to have the `fields` of the index as well to distinguish the representation of these indexes. So, my decision would be based on how commonly devs have two gin indexes in the same model with the same fields but with different values of `fastupdate` or `gin_pending_list_limit`. If it is a very common case we might want to keep them in `repr`.
You need to make the changes.
I think it's okay to use the variable, IMO, especially since it's used twice further down.
I'm in the habit of including an trailing , for all QuerySet filter kwargs.
Do we need to call `render()`? It looks unnecessary.
Or even go so far as to split them into three tests - one assertion per test. Then if one fails it won't prevent the other two from passing, etc.
A list comprehension is preferable here as `str.join()` converts to list internally anyway. ```suggestion ', '.join([ f'{field} = EXCLUDED.{field}' for field in map(self.quote_name, update_fields) ]), ```
Is this branching necessary? I can see how using `model.objects.none()` as a query holder could be problematic since it's not necessarily the same `QuerySet` class as the one from which `query` was extracted. Does the following work: ``` python def __getstate__(self): state = self.__dict__.copy() if isinstance(self.rhs, QuerySet): state['rhs'] = self.rhs.query return state ```
Replace "items" with "values"
`for (app_label, model_name), through in sorted(self.new_through_models.items()):` saves you the next line and is still readable.
I don't see a need for the `ingredients` variable.
Don't use `.items()` if you don't need the values. ```suggestion # Set timeout for each key individually as .mset() doesn't support # setting the timeout for all keys at the same time. for key in data: if timeout is None: client.persist(key) else: client.expire(key, timeout) ```
Since this is only being used in one test case class, I would put it right before that test case class. If it turns out to be useful for other tests, it could always be moved to a more central location and modified as needed, etc.
We can remove the `elif`s and `else here: ```suggestion if lookup_type == 'week_day': return (dt.isoweekday() % 7) + 1 if lookup_type == 'iso_week_day': return dt.isoweekday() if lookup_type == 'week': return dt.isocalendar()[1] if lookup_type == 'quarter': return ceil(dt.month / 3) if lookup_type == 'iso_year': return dt.isocalendar()[0] return getattr(dt, lookup_type) ``` We'll have to wait until we're Python 3.9+ only to use `.week` and `.year` on the result of `dt.isocalendar()`.
`str` -> `six.string_types` for compatibility with Python 2.
Please wrap at 79 chars.
What about m2m and reverse relationships? Something like `Q(cities=3)` will also produce the join.
We can move the test that involves `login()` to the other pull request.
Shouldn't this be `return isinstance(x, collections.Iterator)` instead? Actually we should replace all reference to this function by a `collection.Iterator` instance check.
``` # Environment variables are ignored in non-interactive mode, if provided. ```
Can we move this function up by `get_traceback_highlighter`. (That way we keep the two related helper functions next to each other.)
```suggestion f"App '{app_label}' does not have migrations." ```
use: `any(name for app, name ... )`
Do we need this mapping? We could redirect to a `HttpResponse` with the `status_code`, e.g. `HttpResponse(status_code=r.redirect_type)`.
`CANONICAL_RANGE_BOUNDS` is unnecessary: ```suggestion def __init__(self, *args, default_bounds='[)', **kwargs): ```
I'd reverse the ordering and say "use list instead of []"
No need to construct a new `dict` and call `dict.update()` here. Also the key ought to exist in the map or something has gone drastically wrong, so no need to use `dict.get()`. ```python return_dict[key_map[key]] = value ```
The existing text looks correct to me. If validation is skipped (skip_validation=True), the calling code should call validate_consistency() to do that instead of having this method do it.
I think a test for this change is missing. This would probably go in `admin_views` whereever the other tests for the `delete_view` are.
I think that's fine.
I think wrapping in `Point()` is causing the test crash.
We don't need this skip.
If I can bring a little bit of nuance to my position. Yes, Python supports aware time. However, the majority opinion in Django contributions (AFAIK) is that using this feature is likely to result in worse design than not using it. Many users aren't experts able to delineate narrow sets of circumstances under which code manipulating aware times is more likely to be correct (e.g. "my code will never be used outside HK and HK will never introduce DST [alternative: I will write a unit test that fails if HK ever introduces DST]"). The recommendation would be to manage the time and the timezone in separate objects. There are other cases where Django diverges from Python's standard behavior. For example, I have found the transaction behavior mandated by PEP 249 less than helpful for most users and I have decided to default to autocommit in Django instead.
You can pass `verbosity=0` instead to completely silence the command instead of creating an unused `StringIO` container.
Move that below the `csrf_processing_done` -- we do not need to do extra work in that case.
suggested format: #19820 - Deserializer should give a helpful error message ....
Please move it above `'tr'`.
In Thailand it’s customary to use the [Thai solar calendar](https://en.wikipedia.org/wiki/Thai_solar_calendar) system (as it’s the official legal calendar in Thailand). Dates and months are the same as the common Gregorian Calendar, but years are in Buddhist Era instead of the Christian/Common Era. Just add 543 to the year number when displaying, and subtract 543 from the year number when parsing.
Use `self.assertIs` and `self.assertIsNot` as these boolean expressions are noop.
a single line is fine here (up to 119 chars is okay if it helps readability)
`str(self.band)` doesn't seem like a realistic value for the message.
I guess this should be more specific like `CheckTemplateSettingsAppDirsTests`
This -> These
simpler: "must be a string"
`print('Aborting: --%s must be a top-level module.' % opt_name.replace('_', '-'))`
You are leaking information about whether somebody has access or something doesn't exist.
This seems like an odd place to put this... between the logging of test database creation and the actual creation. Actually, it might be possible to call `connection.creation.mark_expected_failures_and_skips()` in `runtests.py`. That would be cleaner and eliminate the need for the environment variable.
An optimized `__bool__` definitely makes sense. On the other hand (as mentioned in the ticket), the queryset is (now, since 1.11) only shared per form instance, and not per form class. Given that, an alternative approach would be to remove the `.all()` in `__iter__`, and indeed reuse the queryset for the lifetime of the form-instance.
Actually removing the trailing parentheses (e.g. `CURRENT_TIMESTAMP`) should work on all backends including SQLite.
Interesting. I just tried it. This returns 2. ``` def func(): try: return 1 finally: return 2 ```
`assertRaisesMessage()` (this test is broken) as it doesn't pass` on_conflict='ignore'`.
could move this to the previous line while you're here
We shouldn't silently change passed parameters. IMO it better to raise an exception like we do now: ``` $ export DJANGO_SETTINGS_MODULE=test_oracle $ ./runtests.py queries --parallel=2 Testing against Django installed in '/django/django' with up to 2 processes Found 416 test(s). Creating test database for alias 'default'... Creating test user... Cloning test database for alias 'default'... Traceback (most recent call last): File "./runtests.py", line 659, in <module> failures = django_tests( File "./runtests.py", line 385, in django_tests failures = test_runner.run_tests(test_labels) File "/django/django/test/runner.py", line 881, in run_tests old_config = self.setup_databases( File "/django/django/test/runner.py", line 787, in setup_databases return _setup_databases( File "/django/django/test/utils.py", line 217, in setup_databases connection.creation.clone_test_db( File "/django/django/db/backends/base/creation.py", line 239, in clone_test_db self._clone_test_db(suffix, verbosity, keepdb) File "/django/django/db/backends/base/creation.py", line 255, in _clone_test_db raise NotImplementedError( NotImplementedError: The database backend doesn't support cloning databases. Disable the option to run tests in parallel processes. ```
```suggestion for table_name, table_rows in rows: ```
extra space after [
We want to avoid a `GETS ` here. What's the rationale for not simply returning `self._cache.delete(key)`? This is prone to race conditions anyway.
prefer hanging style: ``` return { self.fk_field: ..., } ```
I'm not exactly sure what "straight away" means here. I wonder if something like this could be an improvement: ``` # Registering new type handlers cannot be done before the extension is # installed, otherwise a subsequent data migration would use the same # connection. ```
IMO, we can use `assertEqual` instead of `assertAlmostEqual` in all tests.
The main difference is that `integer_validator` is not used internally. `int_list_validator` is used in (deprecated) `CommaSeparatedIntegerField` and it's recommended as a validator for `CharField` that can be used instead. Unfortunately, values are not cast to `int()`, so non-ASCII digits can cause issues. We can change both :thinking:
Use single quotes for the names.
The rest of Django's test use `@mock.patch` so I think we should use that.
You might append this to the `using` sql passed to `super()` to fix the test failure on Jenkins (due to usage of TABLESPACE).
What about `prefetch_related()`? It's a new method so we should raise `ValueError` when `aiterator()` is used after `prefetch_related()`, e.g. ```python async def aiterator(self, chunk_size=2000): if chunk_size is None: if self._prefetch_related_lookups: raise ValueError( "chunk_size must be provided when using QuerySet.iterator() after " "prefetch_related()." ) elif chunk_size <= 0: .... ```
```suggestion **kwargs, ) ```
We can revert this unrelated change.
It would clear ambiguity if you added some parentheses here and on the next line: `(' LIMIT %d' % limit) if limit ...`. Initially, I thought the grouping was `% (limit if limit else '')`.
I don't think that SQLite can pass kwargs, so I think that this can be replaced by `if None in args`.
I am just going to make this docstring a bit more descriptive.
Silencing far more exceptions than previously (where it was `ImportError`) ... is this intentional, and will it lead to people having a harder time debugging when their app config goes wrong? I guess it'd be somewhere higher up the chained stack traces, maybe? Same expansion of caught exceptions (`ImportError` -> `Exception`) happens at the `import_string` so I assume the answer to this also answers that.
Right (actually there's a bug in that code, the `ImproperlyConfigured` can never be raised).
It feels like unrolling the loop by accessing `where.children[]` and inlining `_test` like in other tests do would make the actual assertions simpler to interpret in the case of future failures. I'll let the committer make the last call here though since the assertions are actually correct.
I don't think that we need this check. I would rather remove from docs [note](https://github.com/django/django/blob/77d335e5abec889b15323975187a8d5b10bfcb0f/docs/topics/db/queries.txt#L965-L979) about setting `id` to `None`. That is outdated after this patch. \cc @spookylukey
Despite the existing style of the first test, I would remove the intermediate `f` variable in the new tests as it'll help balance line lengths and make things more readable.
skip the blank line
Use single quotes consistently.
The trailing space can be removed.
without the blank lines would be more readable, I think
You are right here as well. Your version is clearer for people that understand bitwise operators the flags structure, plus its shorter. For me he more "explicit" version is easier to follow, and probably true too for other people that do not have experience with the postgis bites structure or bitwise operators. But the conciseness of your version is convincing so lets use it.
Here's a regression test that passes on master but crashes with the new version (after the deprecation warning is silenced): ``` diff diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py index 4677962..b2845ff 100644 --- a/tests/model_fields/tests.py +++ b/tests/model_fields/tests.py @@ -31,6 +31,11 @@ from .models import ( class BasicFieldTests(test.TestCase): + + def test_get_val_from_obj(self): + f = BooleanModel() + self.assertEqual(f._meta.get_field('string')._get_val_from_obj(None), 'abc') + def test_show_hidden_initial(self): """ Regression test for #12913. Make sure fields with choices respectdiff --git a/tests/model_fields/tests.py ```
I have to admit that this still feels a bit odd to me 🤔 Especially since the tests above are expecting the initial value to be None, and we are perhaps lacking a bit of explanation why this is the case here.
This could work: it's only the `current-app`, `current-model`, `current-page` attribute values that are dependent on `request`, and for the index page app list they're always not set anyway, so it's only when the side bar is set that `request` is serving any purpose.
Use `assertNotIn` instead.
I don't have a strong feeling about either, this approach avoids an unnecessary intermediary list creation though.
This docstring is the same as for `wait_page_loaded()`. Do we even need it in either case? Or perhaps the docstring should explain the difference between these two methods.
similar to `get()` above, I appreciate the code reuse, but I personally would prefer if `get()` and `delete()` were not touched.
This isn't great and invites test state leakage - it's directly touching the internals of the code under test and not resetting it to the way it was after the tests. It would be best if a copy of `all_sites` was made and then in `tearDown` it was reset to the original state, at least Possibly fixed by #6980 anyway
```suggestion # Validate app_label. ```
We can chop this docstring.
Can you explain why it's okay to move `patch_vary_headers()`? (I know nothing about it and am just reading about it now.) Also, remove (I think) the failing test.
We can ignore `name`, `path`, and `args`, e.g. `*_, kwargs = field.deconstruct()`
The closing parenthesis should always go on the next line.
No need for `Value` wrapping since 1e38f1191de21b6e96736f58df57dfb851a28c1f ```suggestion is_book=1, ``` Ditto for all `Values` uses below.
Chop blank line.
Don't add a blank line.
Please wrap at 79 chars.
Please revert unrelated blank line. ```suggestion ```
I think this change really indicates the need for a second test for wrapping a non-string object.
I think this error message isn't very helpful (i.e. it's not actionable), and it leaks an internal detail, that we monkey-patch response objects with a `templates` attribute). What happened is a detail, what we need to know is **why** it happened, so we can fix it.
I don't think this is necessary - this is a developer only message - it will never be displayed to end users.
@charettes thanks for the idea. I made PR #7755 with regression fix.
drop 'this will" / "it will"
You're right :+1:. I missed that.
Instead of passing in `db_type` and `internal_type`, I would suggest just passing the field and the connection. That way, the method can extract the pieces of information it needs, which may be different for different backends.
As the checks are performed against `model_class._default_manager` the `connections[router.db_for_read(model_class)]` connection should be used.
I think a docstrings explaining what `prefix_gen` generates would be good.
This line can be removed :thinking:.
`clean` is not only for validation, but also for data modification in a form.
~~I changed this to an assertion for the only file that is affected by the second round of post-processing i.e. `cached/relative.css`.~~
I wonder if this might be bit more readable: `model = type('A' * 101, (models.Model,), {'__module__': self.__module__})`
`always_text` is gone.
This docstring isn't necessary as the method name is should be clear enough. ```suggestion ```
```python objs_to_clear = {field: items - objs for field, items in self.restricted_objects.get(model, {}).items()} ```
Normally these objects will appear in a correct order because `serialize_db_to_string()` sorts dependencies. I've changed this to `Object` and `ObjectReference` with circular dependencies to create a real-life test.
What do you think about assigning `has_lookups` to the `transform_function` and be more explicit here? ```suggestion and not getattr(transform_function, "has_lookups", False) ``` and ```diff diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index 7e43ec254d..58ccb8f923 100644 --- a/django/db/models/sql/query.py +++ b/django/db/models/sql/query.py @@ -1820,6 +1820,7 @@ class Query(BaseExpression): final_transformer = functools.partial( transform, name=name, previous=final_transformer ) + final_transformer.has_lookups = True # Then, add the path to the query's joins. Note that we can't trim # joins at this stage - we will need the information about join type # of the trimmed joins. ```
I think that `2**31 - 1` instead of `2147483647` is more readable.
You're calling `model_name.lower()` twice in most cases
I don't think it's worth it. Someone using a non-browser name doesn't seem like a common mistake.
Quote from [PEP-257](https://www.python.org/dev/peps/pep-0257/): > The docstring is a phrase ending in a period. It prescribes the function or method's effect as a command ("Do this", "Return that"), not as a description; e.g. don't write "Returns the pathname ...".
Please use single quotes.
True, this message is unused since its introduction in d725cc9734272f867d41f7236235c28b3931a1b2. I think we can remove `_parse_header()` hook, see #15802.
Using messages might work.
We can remove `'book_join'` from `order_by()`.
Please wrap at 79 chars.
can include more than one parameter on each line as noted above
If I understand correctly, when the first field is indexed in descending order (like `-fieldname`) and the DB supports it, we will return `None` for this function. 1/ MySQL doesn't drop the implicit FK index when another index has as first field the FK in descending order, is that correct? 2/ The naming of the function is not _entirely_ accurate with respect to the behaviour, since we'll return None even though one would expect to get the first field name.
My spellcheck tool of choice (languagetool) suggests a little change. ```suggestion """Email this user and return the number of emails sent.""" ```
You can simplify the rest of the method by doing: ```python if self.verbosity == 1 and level is not None and level < logging.INFO: return print(msg) ``` (This is what I meant when I said the `logging_level` variable could be eliminated.)
We usually prefer `assertIs` here as it will also catch issues with an invalid return type ```suggestion self.assertIs(is_open, False) ```
`raster_model` or even just `r` is probably fine.
`codename %= ...`
well, I'd suggest to revert this change entirely as it's unrelated to the patch.
I'm favoring contractions lately, e.g. "Don't", "shouldn't".
All tests ensure expected behavior ;-). Our preference is to use test docstrings to state and explain the expected behavior.
I would remove the quotes, typically we only use a lazy reference if necessary.
My spellcheck tool of choice (languagetool) suggests a little change. ```suggestion """Email this user and return the number of emails sent.""" ```
I don't think that we want to split a string using shell-like syntax. We should rather use `smart_split()` and `unescape_string_literal()` like proposed in the ticket, e.g. ```python for bit in smart_split(search_term): bit = unescape_string_literal(bit) if bit.startswith(('"', "'")) else bit ... ``` ```
I would remove the quotes, typically we only use a lazy reference if necessary.
`cls.__name__.lower()` is the same as `self.model_name`. I guess `model_name` would probably be a better placeholder name.
I think the `@property` syntax would be more readable here.
You'll want to store the original routers and restore them in `tearDownClass` to preserve test isolation.
`from django.test import mock` -- this uses the package on Python 2 or the built-in version on Python 3.
This attribute does not exist if `isolation_level` has not been specified in `OPTIONS`, AFAICT
```suggestion path = '%s/' % request.path ``` :thinking:
Please drop this docstring, I don't see much value in copying it from `base/schema.py`.
```suggestion self.assertNotIn('CSRF_COOKIE', request.META) self.assertNotIn('CSRF_COOKIE_NEEDS_UPDATE', request.META) ```
I'd move this line to the top of `__init__()` so it isn't lost below all the conditional logic.
Please use f-strings as Python 3.6+ is now the requirement More information is available including some benchmarks. https://cito.github.io/blog/f-strings/
We usually avoid creating new models when we can reuse existing ones as it slowdown the test suite startup. In this case it looks like there's many candidate that could be reused here.
Here's a ticket if you have interest in trying to do the implementation: https://code.djangoproject.com/ticket/24476
Is this necessary? I'm sure that `psql` defaults to `postgres` if `dbname` is unspecified. ```suggestion ```
Do we need to re-fetch an author? ```suggestion self.assertEqual(res.context['object'], self.author) self.assertEqual(res.context['author'], self.author) ```
Was just thinking through what this means for ordering of arguments. `function` is a defaulted argument that may be passed positionally *or* by keyword. So `action(permissions=..., function=...)` worked. I think what we'd want ideally is `def action(function=None, /, permissions=None, description=None):`, making `function` positional only with a default, but that's only available on Python 3.8+. Anyway, just a curiousity really, I think the signature is fine as-is and unlikely to cause problems since the other arguments are named-only.
+1, keep self.verbosity because third-party packages will assume ```self.verbosity``` is part of DiscoverRunner. This is a breaking change that's out of the scope of the PR.
"Considre case" > "Consider the case".
Can this be simplified to ```suggestion # Collation change? elif getattr(old_field, 'db_collation', None) != getattr(new_field, 'db_collation', None): new_collation = getattr(new_field, 'db_collation', None) fragment = self._alter_column_collation_sql(new_field, new_type, new_collation) actions.append(fragment) ``` Or maybe we want to keep the old code to support field type and collation change at the same time (e.g. `CharField(db_collation='foo') -> TextField(db_collation='bar')`).
In this case the current state of things is preferrable to this pull request. :-1:
I don't think you need this check here. This case will be handled in the for loop. Otherwise you can skip the first item in `cls.mro()` as well.
You don't know what a docstring is? Trying googling "python docstring".
```suggestion # JSON ```
The test failure is a non-deterministic dict ordering issue within "field".
The other option is to wrap the file with something like: ``` from django.core.files import File class ChunkedFile(File): DEFAULT_CHUNK_SIZE = 4096 def __iter__(self): return self.chunks() return StreamingResponse(ChunkedFile(open(fullpath, 'rb'))) ``` I considered using this wrapper for FileResponse.
Give the new `FieldInfo` a different name. Or give the standard `FieldInfo` a different name (`import ..., FieldInfo as BaseFieldInfo, ...`), if you're sure all use of this `FieldInfo` is local and it is never passed to generic methods.
Use the indentation style of the other tests. Actually, you can use `assertCountEqual()` instead. Maybe it makes sense to create another Article with a different year to test that the results are correct and not just returning everything.
```suggestion """PO files are unchanged unless there are new changes.""" ```
Ah, I realized these are E128 which we are ignoring in the flake8 section of setup.cfg. I don't mind the changes, but we are ignoring it because there are 2K+ violations and seemingly not a lot of value in fixing them.
```suggestion raise self.exception_class(f'The connection {alias!r} doesn't exist.') ```
I think a list comprehension would be more readable.
Please use a single quote.
Thanks! I see that you included `maxmem` in a string returned by `encode`. Is there any reason it should be there? `maxmem` should not affect a hash
This seemed to include svg as well but django does not accept svg file input.
I believe it's a reference to `ContentTypeManager`'s `get_for_*` methods cache. The actual `get_for_id()` call happens through `self.get_content_type()` below.
As noted elsewhere, put the trailing space on this line rather than the next (and in the message below).
I'm not sure about the `backend` terminology here. I think naming this function `get_password_validators` would be more consistent with the rest of the the code.
New docstrings should use PEP257 verb style "Returns -> Return". I'd write something like "On backends that supported it (memcached), return a list of keys that failed insertion."
@arthurio sorry for the delay here. We really want to be executing operations inside the loop as you suggested here and referred to as LNR, DFS. Else, as you've described, you could end up in a situation where the content types and permissions are missing.
single quotes please
`CANONICAL_RANGE_BOUNDS` is unnecessary: ```suggestion def __init__(self, *args, default_bounds='[)', **kwargs): ```
Can be simplified to `ItalianRestaurant.objects.only('serves_gnocchi').get(pk=italian_restaurant.pk)`.
setUp/tearDown should go at the top of the class.
Add a trailing comma.
We try to avoid accessing the database connections when not necessary, so I'd move `db_features`: ```suggestion if ignore_conflicts and update_conflicts: raise ValueError( 'ignore_conflicts and update_conflicts are mutually exclusive.' ) db_features = connections[self.db].features ```
This could possibly be split into additional simple wrappers based on `parameter.kind` if it were `POSITIONAL_ONLY` or `KEYWORD_ONLY`? Then you could have simple conditions: ```python if has_multiple_parameters: def wrapper(*args, **kwargs): if any( isinstance(arg, Promise) for arg in itertools.chain(args, kwargs.values()) ): return lazy_func(*args, **kwargs) return func(*args, **kwargs) elif parameter.kind == parameter.POSITIONAL_ONLY: def wrapper(*args, **kwargs): if isinstance(args[0], Promise): return lazy_func(*args, **kwargs) return func(*args, **kwargs) elif parameter.kind == parameter.KEYWORD_ONLY: def wrapper(*args, **kwargs): if isinstance(kwargs[first_parameter.name], Promise): return lazy_func(*args, **kwargs) return func(*args, **kwargs) else: # parameter.POSITIONAL_OR_KEYWORD def wrapper(*args, **kwargs): if (args and isinstance(args[0], Promise)) or ( first_parameter.name in kwargs and isinstance(kwargs[first_parameter.name], Promise) ): return lazy_func(*args, **kwargs) return func(*args, **kwargs) return wraps(func)(wrapper) ``` Although maybe that is overkill if we just simplify the last case: ```python def wrapper(*args, **kwargs): arg = args[0] if args else kwargs[first_parameter.name] if isinstance(arg, Promise): return lazy_func(*args, **kwargs) return func(*args, **kwargs) ``` (Note that we can assume it exists in `kwargs` if `args` was empty and drop the additional containment check.)
Don't use `.items()` if you don't need the values. ```suggestion # Set timeout for each key individually as .mset() doesn't support # setting the timeout for all keys at the same time. for key in data: if timeout is None: client.persist(key) else: client.expire(key, timeout) ```
Ahhh, yes, thanks!
Probably not a bad idea, but it does make the implementation slightly more complicated.
this line should be: `def __init__(self, *args, **kwargs):`
Since the deprecation is in the constructor, shouldn't it specify `django.db.models.sql.aggregates.Aggregate`? **Edit:** Instead of `Aggregate` you could use `self.__class__.__name__` so it works for subclasses. Alternatively you may deprecate the whole module at module level.
I don't see any need for this attribute.
Use a single line. Our [style guide](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style) allows lines up to 119 characters if it helps readability.
I think the prompt should still happen if `destination_path` is None since we don't check existence in that case. Only skip the prompt if we're certain the destination doesn't exist.
> Yes they do, but I think on restarting and being presented with confirm on top of a blank screen, most people would just click "yes, resubmit". Resubmit raises 403 in such case, so I don't think it's an issue: https://user-images.githubusercontent.com/2865885/160332701-2a502657-ebe6-4a37-97d7-fa625856e9c9.mp4
Possibly. In general we've been moving toward `SimpleTestCase` but I don't know if requiring it is worth the effort.
Maybe _"The 'no_color' and 'force_color' cannot be used together."_.
@morganwahl yes please!
To my mind the real issue here is that we shouldn't be using `update_wrapper` at all (here or above in line 76). `view` is not in any way wrapped by `cls.dispatch` or `cls`. We just happen to want to achieve something similar to what we would want to achieve if we were wrapping a function. By using `update_wrapper` we're setting the `__wrapped__` attribute, so when we call `inspect.signature` it thinks that this function is the decorator, and that the function we're actually interested in is `cls.dispatch`. That's the reason why it returns the signature from `dispatch`. We should just do the thing we want to do directly. Something along the lines of: ``` for attr in functools.WRAPPER_ASSIGNMENTS: # I'm not sure which of these we actually want try: value = getattr(cls, attr) except AttributeError: pass else: setattr(view, attr, value) view.__dict__.update(cls.dispatch.__dict__) ```
@lothemar I realized that previous assertions were correct. The current tests work even without this patch. I will restore them, sorry.
I don't expect index names to change radically in the future, if at all, but even if it does, I think simplifying the test is worth the "risk" of having to update it in the future, which seems like no big deal.
@ramiro .. and `else` is unnecessary :smile:
This doesn't depend on anything above, so use a separate test: `test_middleware_subclasses`
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
> Yes they do, but I think on restarting and being presented with confirm on top of a blank screen, most people would just click "yes, resubmit". Resubmit raises 403 in such case, so I don't think it's an issue: https://user-images.githubusercontent.com/2865885/160332701-2a502657-ebe6-4a37-97d7-fa625856e9c9.mp4
me too :+1:
That'll be an interesting one to address when we move the schema editor to use model states instead. A problem for later :)
This assertion is not necessary.
Thanks @MatthewWilkes. It was only that sentence/paragraph that needs fixing here, since it's adding the new value that will be unpacked. Any other clean up can wait.
Python functions implicitly return `None` if return is not called. I feel being explicit is better for a test.
I think these are too internal, I would rather check that `MultiValueDict` is pickleable: ```python pickle.loads(pickle.dumps(...)) ```
Fixed in 67e7dffe9543aff259f63c8f12d15642fe7be100.
I wonder if this could be addressed by adding a `MultiColSource` method that returns `self`
The parentheses around `','` are unnecessary.
@smithdc1 it does thanks!
Since the behaviour of the `autocapitalize` attribute has nothing to do with django itself, you'll probably have to write some sort of a test that the field/widget renders that attribute.
I don't mind either way, it just took a second to spot the differences between the groups.
In Thailand it’s customary to use the [Thai solar calendar](https://en.wikipedia.org/wiki/Thai_solar_calendar) system (as it’s the official legal calendar in Thailand). Dates and months are the same as the common Gregorian Calendar, but years are in Buddhist Era instead of the Christian/Common Era. Just add 543 to the year number when displaying, and subtract 543 from the year number when parsing.
@hannseman Thanks :+1: > I prefer it over the mixin approach. Yes me too :+1: . We can move `Value()` wrapping to the `__init__()` and simplify it a bit, e.g.: ```python class SearchConfig(Expression): def __init__(self, config): super().__init__(output_field=None) if not (config and hasattr(config, 'resolve_expression')): config = Value(config) self.config = config def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False): resolved = super().resolve_expression(query, allow_joins, reuse, summarize, for_save) resolved.config = self.config.resolve_expression(query, allow_joins, reuse, summarize, for_save) return resolved def as_sql(self, compiler, connection): sql, params = compiler.compile(self.config) return '%s::regconfig' % sql, params ``` Please move introducing a `SearchConfig` expression to the separate commit, or even PR.
```python kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins} if isinstance(value, F): kwargs['simple_col'] = simple_col value = value.resolve_expression(self, **kwargs) ```
Can replace `**dict(through_defaults, **{…})` and use unpacking generalisations: `**{**through_defaults, **{…}}`.
`"""` -> `'`
I don't think we need to have a strict policy on `/` vs. `.joinpath()`. I'd prefer `/` but when readability hurts we can also use `.joinpath()` :shrug:
I guess we could introduce `django.utils.zoneinfo` like we did with `simplejson` back in the time. We could start deprecating the module when we drop support for Python 3.8.
I would move it to the `ManageRunserver` class.
Use hanging indent: ``` msg = ( "..." ) ``` Are the new messages tested? I think you could avoid the repetition of the two branches by interpolating "keyword " in the message and varying args/kwargs in the params with a variable.
no need for super calls
I guess there is a fair amount of wasted effort for the majority(?) of projects that aren't using admindocs, so perhaps we could have a ticket for it to investigate the possibility of moving the admindocs specific-stuff out.
It looks like should use `f.get_attname()` instead of rebuilding that here.
`VACUUM INTO` was [added in 3.27.0](https://sqlite.org/releaselog/3_27_0.html). This would bump requirements in `databases.txt` and `check_sqlite_version()` check in `django/db/backends/sqlite3/base.py`
There is no need to simplify paths for private APIs that we will never use in migrations. Please revert changes to the `TemporalSubtraction`, `DurationExpression`, `CombinedExpression`, `Expression`, `SQLiteNumericMixin`, `ResolvedOuterRef`, `ExpressionList`, `Col`, `Ref`, etc.
@sdil Can you take a look? Thanks!
> Yes they do, but I think on restarting and being presented with confirm on top of a blank screen, most people would just click "yes, resubmit". Resubmit raises 403 in such case, so I don't think it's an issue: https://user-images.githubusercontent.com/2865885/160332701-2a502657-ebe6-4a37-97d7-fa625856e9c9.mp4
Unneeded, I think.
I find it problematic we’d make it possible to override the `aria-describedby` for two reasons: - If the `help_text` is used, then I don’t think it would be appropriate for its content to be missing from the input’s description as computed from `aria-describedby`. - Assuming we implement the other fix for #32819 by adding the field’s error(s) in `aria-describedby`, it would also be inappropriate for that to be missing because of a customization. In both cases I guess this would be ok if the customization included the ids for the help text and error message when needed, but that doesn’t seem very convenient. --- So we could make it possible to customize `aria-describedby`, but if we did in my opinion it should be in addition to Django automatically populating it for `help_text` and field errors: ```suggestion if self.field.help_text and id_for_label: helptext_id = '%s_helptext' % id_for_label if 'aria-describedby' in widget.attrs: attrs['aria-describedby'] = f"{helptext_id} {attrs['aria-describedby']}" else: attrs['aria-describedby'] = helptext_id ``` I’m not too sold on this either because then we’re having to assume the order of the different descriptions. It gets more problematic if we had errors in there too: ```python attrs['aria-describedby'] = f"{helptext_id} {errors_id} {attrs['aria-describedby']}" ```
This collation doesn't work for me: ``` django.db.utils.ProgrammingError: collation "en_US" for encoding "UTF8" does not exist ``` I've changed to the `en-x-icu`.
"Raise ValidationError if the address is invalid."
We're a couple months away (Jan. 15) from dropping Python 2 so it would be nice to avoid adding more work to do when dropping it. Have an invalid secret key seems like such an obscure issue, I don't know if it justifies all the time we're spending on it. Maybe we can just update the docs and be done with it.
I think you should use `type` not `__class__`. At least in python 2 this will break if the class does not inherit from `object`.
```suggestion def _is_default_auto_field_overridden(self): ```
This conditional is not required anymore given the check above.
We can remove `'book_join'` from `order_by()`.
I suggest you use the `for`/`else` construct here. ``` python for validator in validators: if isinstance(validator, validators.MinValueValidator) and validator.limit_value <= min_value: break else: validators.append(validators.MinValueValidator(min_value)) ```
It's slower, about 10 times.
Since everything inherits from `IntegerField` it should be enough to only register lookup for it. In short `models.BigIntegerField.register_lookup(RangeContainedBy)` is redundant.
I guess Article/Category deletes aren't doing anything since you already asserted exists() -> False. Anyway, I think I'd put this in a separate method. `test_loading_with_exclude_app` / `test_loading_with_exclude_model`
can you call `sort` on the invalid_apps before joining them, please.
I'd probably combine that with the outer `if`: `if not rendered and hasattr(...) and callable(...):`
> @felixxm in my view, below test code is our expected result. No, it's not. `1 != NULL` so why it's expected that `number` is excluded? see 512da9d5855 and ticket-23797 for more details.
This error no longer makes sense with multiple-arg aggregates. You'll either need to join the output of all source expressions so the error produces: > Cannot compute Sum(arg1, arg2): 'X' is an agggregate # (where X is either arg1 or arg2) Or you'll need a different error message for the case of `len(args) > 1`. There may be another solution (like ditching this message altogether) but I'll let you experiment with that if you like.
Frankly, I don't remember the details here, and I only have time to glimpse the PR now, but it seems that there may be two cases where multiple rows of returned values may be expected: `bulk_create()` on one hand, and an `UPDATE` statement on the other (you wouldn't need to returned values in an ORM `update()` call, but you would need them in the lower-level API).
would it make sense to lazy-load uuid as most projects won't need it? It could be done with just one more line of code in this file and in django/forms/fields.py
I think wrapping in `Point()` is causing the test crash.
Start the sentence "Duration's number of days..." Also, add a trailing period.
I'd only use mock as a last resort and instead pass some email that will be affected by the normalization.
I would multiline: ``` field.attname for field in self.lookup_opts.fields if field.unique and not field.null ```
Wrap lines at 79: ``` "The value of 'list_filter[0]' refers to 'RandomClass', which " "does not refer to a Field.", ```
Fair enough, I assumed it was a small tweak to the stdlib version.
chop first comma
You are leaking information about whether somebody has access or something doesn't exist.
You can you use the `cached_property` decorator here.
I don't think that it is a proper solution because `get_order_dir()` returns only field name and direction, so it will not properly in case of using database functions in `meta.ordering`. I think we should fix this in `find_ordering_name()`, e.g. ```diff diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py index a44adfc760..fb2a4b23b1 100644 --- a/django/db/models/sql/compiler.py +++ b/django/db/models/sql/compiler.py @@ -716,6 +716,9 @@ class SQLCompiler: results = [] for item in opts.ordering: + if isinstance(item, OrderBy): + results.append((item, False)) + continue results.extend(self.find_ordering_name(item, opts, alias, order, already_seen)) return results ```
Should this be cached? The number of times validators are instantiated, and the associated cost with loading in the 1000 most common passwords each time strongly suggests that it should be.
Is there a reason `edit` was chosen instead of `change`. It's the only pattern that differs from it's name.
I would remove the quotes, typically we only use a lazy reference if necessary.
The issue here is that we can't do the proper permission check (`if not self.has_perm(request) ...`) until after we've assigned `self.model_admin`, which we return from this method. _Maybe_ it's OK. But… it seems like we have the exact kind of _"Folks can probe the autocomplete view to find out the structure of the application"_ issue that we spend a lot of time thinking about and trying to avoid. If we just raise `PermissionDenied` for all of these cases we don't leak any info. Such exceptions are logged and a developer can use that to debug. Given that this is an ajax view, they're not going to see the debug output page anyway (without taking steps). I'm not convinced the different status code is worth the additional exposure (or even the effort justifying why it's OK). > 🤷 Yes. 🙂
`source` will be **always** `None` so it is not a proper solution.
put closing ) on next lin
Only literal values of functions with literal values arguments should be allowed here. No _resolving_ phase should be necessary if an expression is provided, the only requirement should be an `as_sql` function that gets passed a `compiler` and a `connection` through `compiler.compile`. The way it's currently defined is too lax because it allows field references and event JOINs
I think at least the latter is worth it - it's confusing to submit two files and be told "the" file is empty.
We don't use `self.value.value` anymore so we don't need to serialize it, we should use name instead, i.e. ```python v_string, v_imports = serializer_factory(self.value.name).serialize() imports = {'import %s' % module, *v_imports} return "%s.%s[%s]" % (module, enum_class.__name__, v_string), imports ```
`HTTPS` is not necessary, so I removed this line.
Oooooh. _/me grabs shovel, digs hole, hides_
I think usual formatting is: ``` # -*- coding: utf-8 -*- from __future__ import unicode_literals import os import sys from wsgiref.simple_server ... ``` (wsgiref is a built-in so it goes with os/sys)
Minor but I think a warning will be raised here as this is passing a naive datetime will timezone support is enabled.
Also, maybe just call this `post_error` as "to raise" is redundant.
You can have a look at 9bf652dfd6a738fd841471f6abd71cba1b206d9f as an example of how we introduced object level permission to authentication backends.
Can you describe the reason for using 'singular' here and (as an example) not 'plural'? Code looks fine style-wise; I'm trying to understand the issue a bit more since translation isn't my expertise (If you want a review about that).
please use hanging indent to make better use of space, e.g. `context = Context({'content': '<b>"Escaped" content to try \'force_escape\ argument & check for errors.</b>'})` might be good here
This will always return the same as `self.db_type()` which is not intended. I added `__mro__[1:]` to fix this.
Hey @codingjoe — so I think I would restructure this section slightly, through to line 59. * I'd create a method to configure three attributes on self: `source_field`, `model_admin`, and `to_field_name`. It'd need to take the `request`. In there I'd include all the `try:except:` blocks and raise an `AutoCompleteSetupError` (or similar) if any of them occur. * Outside that method I would have a single `try:except:` to log the error, and return the JSON 403 response. (I'm thinking about how I'd debug this if there's no logging, and all I have to go on is a 403...) I think we should also move the `has_perm() -> 403` check **above** the `get_search_fields() -> 404`. (That last if nicely informative for users but we shouldn't hand out that info to someone without the permissions to access the modeladmin at all… 🤔)
Chop blank line.
Please use f-strings as Python 3.6+ is now the requirement More information is available including some benchmarks. https://cito.github.io/blog/f-strings/
If ...., the locked row is skipped resulting in Person.DoesNotExist.
I think it's more readable (and readability is crucial in the ORM) with the opposite of `alternate_output_field` e.g. `source_output_field`: ```python def get_col(self, alias, output_field=None): source_output_field = output_field is None if source_output_field: output_field = self if ( alias != self.model._meta.db_table or (not source_output_field and output_field != self) ): from django.db.models.expressions import Col return Col(alias, self, output_field) else: return self.cached_col ```
Yes this would be a good idea
Drop the docstring I think,
Please drop this docstring, I don't see much value in copying it from `base/schema.py`.
You may change the others if you like, but please make it a separate commit.
My concern with adding `copy()` is that it is adding in redundant work for most cases to appease a small subset of very specific use cases.
`pk` is twice. I think the last `and pk` can be removed.
NotContains always makes me nervous since it's fragile (a typo or a change in the way we generate the HTML could make it pass). Could we make `class="inlinechangelink">Change</a>` a constant and use it in all 3 of the new tests? That would help alleviate those concerns.
I think we can drop the empty line here.
I think we should `warnings.warn('...', category=RemovedInDjango40Warning)` here.
This seems a bit redundant. I believe that the feature flags should be used as much as possible, instead of checking against vendor names.
aaah, ok, now I get it.
`for data in json.loads(...):`
"... doesn't look like a path to a module attribute", "... doesn't look like a path to an object". It isn't supposed to be a module.
Oh, that surprises me too...
Use list and remove unnecessary whitespace ```suggestion fields = [('name', 'position')] ```
```suggestion timeout=60, ``` "60" on its own looks a bit weird. Also, it surely doesn't need to be as long as 60 seconds if `DELAY_AFTER_FAILED_LOGIN` is so much smaller? What if `DELAY_AFTER_FAILED_LOGIN > 60`? Maybe this should be: ```suggestion timeout=self.DELAY_AFTER_FAILED_LOGIN + 10, ```
That docstring doesn't add much info. It isn't useful to paraphrase a function's signature!
These could be alphabetized.
Meanwhile, I merged a conflicting patch. I think you just need to remove the quotes from around the star.
I think we should copy `fields_cache`: ```suggestion state['_state'].fields_cache = state['_state'].fields_cache.copy() ``` because a copy of model instance can use the same values and we don't need to fetch it again.
Alternatively, you could handle this where `fields` is updated with `new_class.declared fields` like so: ``` for field_name, field in new_class.declared_fields.iteritems(): if opts.exclude and field_name in opts.exclude: continue if opts.fields and field_name not in opts.fields: continue fields[field_name] = field ```
has been -> is
> Is there any reason to explicitly prefer lowercase? Well, not really anything critical. Elements, attributes, etc. in HTML tend to be case insensitive and I tend to lowercase the lot - more similarity leads to better compression in transit. Granted this isn't going to make much difference for such a short string, and your point about implementation detail is fair. (Hence I didn't press for it...)
```suggestion msg = 'Slice stop must be greater than slice start.' ```
I added this missing change to the first commit.
This inner import is a syndrom of the circular dependency between `Manager` and `QuerySet`. Could we avoid it by moving this code inside `_Manager`? `Manager` would know how to create a subclass of itself with the methods of a given `QuerySet`.
I think that we can squash this to two cases, i.e.: ```python if not self and other: return copy.deepcopy(other) elif not other: return copy.deepcopy(self) ```
can you explicitly wrap them in brackets: `args += ["-U", user]` please. That makes it clearer to understand the code.
Use single quotes consistently.
We don't need to mock `django.db.migrations.questioner.sys.stdout` anymore.
Single quote strings ```suggestion module = types.ModuleType('test_module') ```
Could you annotate the regex similar to: ``` tld_re = ( '\.' # dot '(?!-)' # can't start with a dash '(?:[a-z' + ul + '-]{2,63}' # domain label '|xn--[a-z0-9]{1,59})' # or punycode label '(?<!-)' # can't end with a dash '\.?' # may have a trailing dot ) ```
Please use assertRaisesMessage to verify this is the ValueError we expect.
using `Lower` seems more readable
Collapse this list to one line - we allow up to 119 chars.
```suggestion # Validate app_label. ```
prefer a longer line for readability
`RETURNING` from `UPDATE` is out of this ticket scope.
Can we move the default value? ```python def __init__(self, include_html=False, email_backend=None, reporter_class=None): ... self.reporter_class = import_string(reporter_class or 'django.views.debug.ExceptionReporter') ```
The variable name doesn't need to be / shouldn't be changed, IMO. (My suggestion in the ticket for a variable name was for the string argument, if that was going to be tested separately.)
Use `settings.ALLOWED_HOSTS = settings.ALLOWED_HOSTS + ['testserver']` to avoid altering the original list assigned to `request._original_allowed_hosts` above.
`ChoiceFormSet` -> `ArticleFormSet` You mixed `Article` with `Choice` in few places.
I'm not sure whether it should be considered part of a separate clean up across all cases of this in the code base or whether we can handle this here for all of the adjacent lines, but it would be nice to fix the indentation: ```python self.management_form_html + ( '<tr><th>Choice:</th><td><input type="text" name="choices-0-choice" value="Calexico"></td></tr>' '<tr><th>Votes:</th><td><input type="number" name="choices-0-votes" value="100"></td></tr>' ) ```
The last parenthesis should be moved to the next line due to hanging indentation.
Really really minor nitpick; if flake8 etc do not complain maybe move `entropy.` up one line; looks really ugly like this especially if the code below is longer :)
Ditto about the `for`/`else` construct.
I understand what you meant, however this message can be difficult for most of folks. Unfortunately, I don't have a better wording (at least for now).
```python kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins} if isinstance(value, F): kwargs['simple_col'] = simple_col value = value.resolve_expression(self, **kwargs) ```
I think you can remove temporary `msg`, also dot is missing and probably `preceding` should be uppercased and `n` should be lowercased. ```python raise NotSupportedError( 'PostgreSQL does not support RANGE BETWEEN n PRECEDING AND n ' 'FOLLOWING.' ) ```
Wrap at 79 chars.
You should use `self.m2m_db_table` instead of `self.db_table`.
I think I would not mix the tests and better create a separate test, if possible.
``` py template_name = getattr(context, "template_name", "unknown") ```
Please remove, it's redundant.
But `any()` always returns a bool? https://docs.python.org/3/library/functions.html#any
Clarify "might"? Or simply say `# Silence "Truncated incorrect CHAR(1) value: 'Bob'".`
use parentheses to avoid backslashes and I would also try to keep the comprehension on a single line as breaking it up like this makes readability more difficult IMO.
```suggestion help=( 'Shuffle the order of test cases to help check that tests are ' 'properly isolated.' ), ) ```
```suggestion # __spec__ may not exist, e.g. when running in a Conda env. ```
didn't knew about RegexURLPattern having the same method.. reading the docstring I'm thinking both should do this: ``` python # .. if isinstance(func, functools.partial): while isinstance(func, functools.partial): func = func.func # ... ``` shouldn't it ? again that's my wild guess here, I don't have read more about the context of how this method is used (nor the other one), etc.. So I could be simply wrong.
I think we can reuse `rels_to_update`.
I take this back and have a deeper look at the tests.
I guess `name` would be another one.
That seems unfortunate. Not sure I have any good suggestions though.
Actually I think it might be possible to reuse most of `super()._create_index_sql` by using `expressions=[RawSQL(...)]` instead of `columns` to avoid heavy duplication between both methods.
suggested wording: ``` Strip quotes off of quoted table names to make them safe for use in index names, sequence names, etc. For example '"USER"."TABLE"' (an Oracle naming scheme) becomes 'USER"."TABLE'. ```
If the `edges.get(None, ())` call above works comparing `key` to `None` here should also be working. I also don't know any other Python object which `str()` representation is `'None'` that are not `None` itself.
What about indexes and constraints based on `expressions`? For example: ```python Index(F('author'), F('title'), name='author_title_index') ```
I don't think it's worth it. Someone using a non-browser name doesn't seem like a common mistake.
I think it's enough to test `None` and `''`.
```suggestion # Validate app_label. ```
Also `django.core.checks.migrations` should be imported in `django/core/checks/__init__.py`.
Yes, I do. Ending statements with semicolons is redundant at best (as used here); if followed by whitespace, the semicolons can actually break things. Code in tests serves as example, and so shouldn't include them. This is essentially like pep8 issues -- you don't have to clean up old code, but please avoid introducing new ones.
This test passes when testing against an SQLite or MySQL backend as long as psycopg2 is also installed. For this test case, I think the check `connection.vendor == 'postgresql'` skips the test too aggressively.
Chop blank line.
We can move `get_migration_name_timestamp()` call to `if`.
built-in imports like unittest should go above django imports, separate by a newline. e.g. ``` from __future__ import unicode_literals import unittest from django ... ```
Positional arguments cannot follow keyword arguments.
If it has some readability benefits, it could be done in a separate PR. This looks okay for now.
Wouldn't the following work here: ``` python except MiddlewareNotUsed: if settings.DEBUG: logger.warning('MiddlewareNotUsed: %r', middleware_path, exc_info=True) ```
OK, so here I'm expecting to just call a backend function — `as_sql_str()` or something. (_Naming!_) * The base implementation would just do the existing `sql % params` — although that's the suboptimal(?) "return something that looks valid but isn't" strategy discussed above. * Then each backend overrides appropriately. The `mogrify` call is then just in the Postgres version. ([There's a wontfix on Python for adding similar to pysqlite](https://bugs.python.org/issue9506).)
Just curious if there is a reason for the `runTest` name instead of the usual non-camel case name.
Returns -> Return use period
I think a test could go in a new file: `tests/model_regress/test_state.py`.
I'm not sure if these docstrings are adding much value.
Please chop unnecessary blank lines.
We should take keys into account (like in `__eq__()`), so maybe: ```suggestion if hasattr(self, 'error_dict'): return hash(tuple(sorted(make_hashable(self.error_dict)))) return hash(tuple(sorted(self))) ```
```suggestion def insert_statement(self, on_conflict=None): ``` Also ensure that this change of signature, from `ignore_conflicts=False` → `on_conflict=None`, is mentioned in backward incompatible changes to database backends in the release notes.
Putting all queries on their own newline should help readability: `'...queries were:\n%s'`.
```suggestion errors_on_separate_row=True, ```
Make sure you reference your ticket number in the docstring (see the other tests in the file).
```suggestion processed_adjustable_paths = {} ```
I don't think there isn't a better alternative. Talking about "positive integers" means we still defer thinking about positive and negative ints to the end user. ``` path('articles/<posint:year>/', views.year_archive), ``` ... isn't at all as nice. Since MOST people still won't have to care about negative ints, I still think keeping "int" as the name is a good default, even though not 100% accurate. Also: there seems to be a common case for negative FLOATS, namely coordinates. But since the DEP says floats shouldn't be included that use-case is nicely sidestepped. There's also two nice workarounds to all this: just specify str as type and do the typecasting in the template, or specify your own type that supports negative floats/ints.
Yes it should be `R.p`, we didn't take into account nested protected relations in the ab3cbd8b9a315911248227208630a020cedca08f (probably my fault). Also casting to list is not necessary anymore after this change.
``` # Unmanaged origin model that is a table. ```
I would prefer checking `_fields` ```suggestion if self._fields is not None: ```
```suggestion # The Widget.get_context() attrs argument overrides self.attrs. ```
If changing the messages, please update them in `docs/ref/checks.txt` as well.
Is this still simulating a read-only database if the mocking is removed? This test might be obsolete considering the exception catching in `check_migrations()` is removed. Some low level tests for the modified `MigrationRecorder` methods might be in order instead.
Ah right. You noted on the ticket that's not the case with the 'spawn' mode, but I guess we shouldn't concern ourselves with that right now, as the test runner doesn't support that. @Valze - maybe make a note for your spawn-mode GSoC project? 😉
Thanks for the patch. Clean and simple. Maybe that's just nitpicking but what about changing that `if` to `elif`? Because since `MEDIA_URL` must always explicitly end in slash, we might not want to add a slash if a trailing one is missing from it.
```suggestion *app.split("."), "migrations", "0001_initial.py" ```
What about m2m and reverse relationships? Something like `Q(cities=3)` will also produce the join.
same thing here about assuming `is_active` exists and `not user.is_active` -- probably need some tests for that case.
I think `assertNotEqual` is sufficient -- that would be if display_name is None.
I would consider tuple unpacking in the line before: `constraint_table, constraint_column = constraint['foreign_key']`.
Slow or not, it is kinda pointless to do since we do not need the data -- so yeah, we should not count here
Any disadvantage to making it a separate test method instead? I guess the signal connecting might be better is `setUpClass` at that point.
Merged in 1e0dcd6c8bfa4519c21014c73eb510620dd1a000.
Perhaps a nice alternative is: ``` result = json.loads(Question.answer_set.field.value_to_string(question)) self.assertCountEqual(result, [answer1.pk, answer2.pk]) ```
``` # Environment variables are ignored in non-interactive mode, if provided. ```
Nit: `test_loader_patterns_not_mutated` (with an "s")
I'd only use mock as a last resort and instead pass some email that will be affected by the normalization.
Chop blank line.
``` When the object has a ManyToManyField to Site, redirect to the current site only if it's attached to the object.
python3 tests failed because `six.iteritems(old_test_settings)`.
This conditional is not required anymore given the check above.
This is a separate cleanup, so please move it do a separate commit.
I would put the arguments all on this line
I would filter that first, via a generator. I think this might be more readable. ```python lists = (lst for lst in lists if lst) ``` or ```python lists = filter(None, lists) ```
In cases like this, we prefer to include a trailing comma so if more items are later added, we don't need to modify this line again.
You should just check for the presence of the attribute. See tests in #11070.
It seems like `name` is never stored. Are you missing a `self.name = name or func.__name__`.
`targets` is an empty list when `MIGRATE` is `False`: ```suggestion executor.migrate([], plan=[]) ```
```suggestion 1. (?P<a>\w+)/b/(?:\w+)c(?:\w+) => (?P<a>\\w+)/b/c ```
> It's compiled once on import no? Yes, but do we need to compile it at all? In most of cases it's not necessary because `boundary` is already parsed in `opts`.
Use hanging indent: ``` call_command( 'flush', verbosity=0, interactive=False, database=self.connection.alias, reset_sequences=True, inhibit_post_migrate=True, ) ```
```suggestion self.asserCountEqual(queryset, [self.django_book, self.bio_book, self.djangonaut_book]) ```
My intuition would be to make this raise `NotImplemented` instead.
remove "should", e.g. "debug() bubbles up exceptions before cleanup."
return directly, no need for `path` variable.
On second thoughts creating a URL with to_field isn't required to test this issue – so the string interpolation can simply be removed: ```suggestion admin_user_change_url = reverse( "admin:%s_%s_change" % (user._meta.app_label, user._meta.model_name), args=(user.username,), ) ```
I saw that you're now handling this at the database level. It makes more sense to me.
This is only possible if the database allows multiple constraints on the same fields so we can also check the `allows_multiple_constraints_on_same_fields` feature flag.
Define a `CookieSessionTests.test_session_save_does_not_resurrect_session_logged_out_in_other_context` method decorated with `unittest.skip` instead to keep `SessionTestsMixin` backend agnostic. See #6203.
Does `serializers.serialize` write bytes or text to the stream? In the case of the later we should probably use codecs.open or similar (for py2 at least)
Python < 3.6.
Ah yes I see. Exists being a subclass of Subquery.
if a case is only used in 1 file like `FinderTestCase`, I'd put it there.
Do we need this check? All tests pass without it.
IMO this check is unnecessary.
When considering my above point please now target 4.1.
follow -> following
Does this check make sense now that we only handle it if it starts with a relative path? (ie if the prefix where there it would start with a slash anyways)
Because of Python's support for [short-circuiting](https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not) boolean operators, the tests are failing here as sometimes `[]` is being returned. The fix is easy: ```suggestion return bool( ```
Actually `assertContains` checks the `status_code` too, so the other assertion is redundant.
IMO this tests should be moved to the `tests.backends.tests.BackendTestCase`, also we don't need to mock a database, checking for a `connection.alias` in a logger should be enough, e.g. ```diff diff --git a/tests/backends/tests.py b/tests/backends/tests.py index da20d94442..5f6e02d91d 100644 --- a/tests/backends/tests.py +++ b/tests/backends/tests.py @@ -3,6 +3,7 @@ import datetime import threading import unittest import warnings +from unittest import mock from django.core.management.color import no_style from django.db import ( @@ -492,6 +493,23 @@ class BackendTestCase(TransactionTestCase): BaseDatabaseWrapper.queries_limit = old_queries_limit new_connection.close() + @mock.patch('django.db.backends.utils.logger') + @override_settings(DEBUG=True) + def test_queries_logger(self, mocked_logger): + sql = 'SELECT 1' + connection.features.bare_select_suffix + with connection.cursor() as cursor: + cursor.execute(sql) + params, kwargs = mocked_logger.debug.call_args + self.assertIn('; alias=%s', params[0]) + self.assertEqual(params[2], sql) + self.assertEqual(params[3], None) + self.assertEqual(params[4], connection.alias) + self.assertEqual( + list(kwargs['extra']), + ['duration', 'sql', 'params', 'alias'], + ) + self.assertEqual(tuple(kwargs['extra'].values()), params[1:]) + def test_timezone_none_use_tz_false(self): connection.ensure_connection() with self.settings(TIME_ZONE=None, USE_TZ=False): ```
Fine. They're gone. 😀
```suggestion if match := time_re.match(value): ```
can not -> cannot (we usually opt for "can't")
This could become: `# IndexError error is used for historical reasons.`
Something is wrong with the indentation here, you might want to use `flake8` from the top directory to spot warnings.
`HTTPS` is not necessary, so I removed this line.
Yes. Adding `?:` makes it a non-capturing group which allows for use of `m.groups()` below. Otherwise it'd need to be `... = m[1], m[2], m[4]`.
I wonder if adding a similar `assertDetails` helper would be worthwhile to reduce verbosity here.
```suggestion "Cannot aggregate over the 'other_age' alias. Use annotate() to promote it" ```
I would separate each `with` statement with a line break. right now it looks like a huge block of stuff.
Can you explain why it's okay to move `patch_vary_headers()`? (I know nothing about it and am just reading about it now.) Also, remove (I think) the failing test.
put closing ) on next lin
This check is also redundant.
I don't think there is any requirement for `default` to be a sequence. Previously, this code would work: ``` python >>> MISSING = object() >>> foo = MultiValueDict().getlist('foo', MISSING) >>> foo is MISSING True ``` Following the patch: ``` python >>> MISSING = object() >>> foo = MultiValueDict().getlist('foo', MISSING) Traceback (most recent call last): File "<console>", line 1, in <module> File "/tmp/venv/src/django/django/utils/datastructures.py", line 149, in getlist return list(self._getlist(key, default)) TypeError: 'object' object is not iterable ``` I think we perhaps need to do something like this: ``` python def _getlist(self, key, default=None, force_list=False): try: values = super(MultiValueDict, self).__getitem__(key) except KeyError: if default is None: return [] return default else: if force_list: values = list(values) return values def getlist(self, key, default=None): """ Returns the list of values for the passed key. If key doesn't exist, then a default value is returned. """ return self._getlist(key, default, True) ```
We can do much better here. We don't need to regenerate the `LIMIT 1` snippet for every table, as it never changes. The `AS has_rows` is unnecessary. ```suggestion limit = self.connection.ops.limit_offset_sql(0, 1) sql = ' UNION '.join([ "(SELECT '%s' FROM %s %s)" % (table, self.connection.ops.quote_name(table), limit) for table in tables ]) with self.connection.cursor() as cursor: cursor.execute(sql) return [row[0] for row in cursor.fetchall()] ``` I'm also wondering whether we should pass the table names string literals in the `SELECT` as params to avoid any sniff of SQL injection. I honestly don't know if there is a real risk here. The advantage of keeping it like this is that we don't need to batch for SQLite and the overridden version there can be removed.
, keeping a reference to the cyptes object so that the vsimem file...
I'd use `assertIsNone`
Would be better to do unrelated cleanups like this (I saw another rename in schema.py) in another commit.
We need idempotent functions that work reliably between python 2 and python 3. Then if the caller has specific needs, they can take care of their own edge cases. Whatever goes in `utils/encoding.py` should be considered "library" grade, just like werkzeug.
`VACUUM INTO` was [added in 3.27.0](https://sqlite.org/releaselog/3_27_0.html). This would bump requirements in `databases.txt` and `check_sqlite_version()` check in `django/db/backends/sqlite3/base.py`
Can you reference the ticket number in the docstring, please.
I see, thanks for your answer. I really don't want to hold the template based widget stuff from landing any longer. I suppose this is something we could refactor later on.
I stand corrected. Thanks. I didn't expect that ``` $ python -m timeit 'tuple(i for i in range(10000000))' 1 loop, best of 5: 620 msec per loop $ python -m timeit 'tuple([i for i in range(10000000)])' 1 loop, best of 5: 556 msec per loop ```
Still I think `'&nbsp;<strong>%s</strong>'` could be factored as a variable and `<a href=...` interpolated inside that. Let's use `format_html` instead of `escape`. This return could go in the `else` block of `try/except/else`.
This seems a bit redundant. I believe that the feature flags should be used as much as possible, instead of checking against vendor names.
I'd use the preferred style so at least future tests might copy it.
I think we should add this format to the `DATE_INPUT_FORMATS` for backward compatibility.
```suggestion elif databases[DEFAULT_DB_ALIAS] == {}: ```
`clean` is not only for validation, but also for data modification in a form.
I think this is just as readable on a single line: `(internal_size, desc[4] or 0, desc[5] or 0,) +`
Yes, please rebase the branch and remove the try/fail pattern as done in 6729b96d8a15048b2295c916c5b881a59d9417a0. If you're unfamiliar with the process you might find https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/working-with-git/#rebasing-branches helpful.
`response.request.method` would be more idiomatic.
```suggestion @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'}) ```
you don't need `nulls_last=True` here because it's a PK you're ordering by, which is non-nullable
Similarly, I don't see much advantage to creating indirection with a method.
should be indented as in other places
I'm torn whether or not this copy is necessary. When we resolve the expression we do a copy of the subquery anyway. Even if the queryset was cached and evaluated, the resolving will copy a new queryset anyway. ```python qs = Model.objects.whatever() sq = SubQuery(qs) list(qs) # this evaluates the queryset that subquery is holding onto OtherModel.objects.annotate(subq=sq) # queryset is copied here anyway, previous eval doesn't matter ``` Let me know if you can poke holes in my reasoning (it is new years day after all...).
Languages are ordered by `code`, so this should be above `'tr'`.
I don't usually include a blank line here.
use `unittest.skipIf` decorator on the class
omit the intermediate variables: ``` self.assertEqual(model.check(), [ ]) ```
IMO we should refactored out `test_rename_field_index_together()`.
This could be replaced by `self.remote_field.model._meta.label_lower` https://github.com/django/django/blob/c1b24718e05ea474955777d7bc4d9d5634560cd5/django/db/models/options.py#L136-L138
These kind of changes are not related and should be reverted, IMO. They're also based on a `MiddlewareMixin` behavior that we can remove in the future, that's why I would prefer to keep `process_request()`/`process_response()` tests.
the active language's
I think keeping the explicit `process_response()` call here would make sense. By changing to `__call__()` we're running through `process_request()`, which is not a no-op, which is perhaps fine but it's subtly changing the intent/behaviour of the test. (I guess this is something we'd have to think about removing the `process_x()` hooks, but not in this PR) Same for line 677 below. **Update**: Tests in `csrf_tests` are more explicit about this... (So maybe the small change here is OK)
Surely you want all of the password hashes in the list of available ones so that people can log in with them? Of course argon2 is unlikely to be out there in the wild, but if someone tried it and then decided to switch back they wouldn't be able to do so by deleting the settings, they'd have to copy/paste the default and re-add it. There's little harm in including it by default afaik. You might not want to have something other than PBKDF2 to be the default though, people might accidently have bcrypt or argon2 installed and not realize it and end up unable to log in if they deploy. Not sure if that's a big worry or not though.
The only place I can vaguely remember `repr` being used is during the migrations. If you have the `AddIndex/RemoveIndex` operation in your migrations file, it shows this representation when the migrations are run. Since it is very common that a dev might want to create multiple gin indexes in the same table, it is necessary to have the `fields` of the index as well to distinguish the representation of these indexes. So, my decision would be based on how commonly devs have two gin indexes in the same model with the same fields but with different values of `fastupdate` or `gin_pending_list_limit`. If it is a very common case we might want to keep them in `repr`.
Consider using a single test and `subTest()` to avoid the same boilerplate in each test.
I don't have a strong opinion about the quote style but use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
> Current PR (Allows user to specify suffix - consistent with posgresql backend): Users cannot specify `prefix` it is an option that Django uses internally. I think we should keep the current prefix `_id` for backward compatibility.
For Polish no change is needed. `X days ago` is `X dni temu` and `X days from now` is `za X dni`. Those prefix and suffix doesn't change for any number of days.
, -> . (for consistency with same message in operations/models.py)
The parameter to this method seems odd to me. As it stands, no caller is explicitly using the parameter in a call to the method and I can't see many legitimate uses for it in derived classes. I think you're effectively just using the default value as a space to store a class-scope variable. Would it be simpler to just assign a member on the class? Or on the instance, if you prefer.
can you explicitly wrap them in brackets: `args += ["-U", user]` please. That makes it clearer to understand the code.
I think I would put `change_message = []` below the new code so it's not separated from where it's used.
Reading below, I see that Flask has an "any" converter that does something more complicated. Creating a converter with the same name but a different behavior doesn't sound good.
Propose to clean this up in https://github.com/django/django/pull/8008.
I don't think we need to have a strict policy on `/` vs. `.joinpath()`. I'd prefer `/` but when readability hurts we can also use `.joinpath()` :shrug:
I think we are missing the `call_command()` here.
Also, if you are using a context manager, it seems like you want to assert calling `is_usable()` right before you close (so after the context manager closes).
This is not necessary.
```python kwargs['max_value'] = min(value, kwargs.get('max_value', value)) ```
What if a view based on `DeleteView` overrides `delete` method to actually handle requests with HTTP `DELETE` method? For them this warning would be a false positive.
Yeah, multicolumn case is what I am interested in, the results will not be correct for cases where the first column match, the second is smaller and we use __lt. So, error out in multicolumn case for now, then lets think if we can make this work properly (for some DBs the DB itself knows how to implement (a, b) < (val1, val2)).
I wonder if we could support running `runtests.py` from different directories :thinking: like we do for dotted module names, e.g. ```bash ~/repo/django> ./tests/runtests.py backends.postgresql ``` works fine, but ```bash ~/repo/django> ./tests/runtests.py backends/postgresql/ .... File "./tests/runtests.py", line 155, in get_label_module rel_path = path.relative_to(RUNTESTS_DIR) File "/usr/lib/python3.8/pathlib.py", line 904, in relative_to raise ValueError("{!r} does not start with {!r}" ValueError: '/repo/django/backends/postgresql' does not start with '/repo/django/tests' ``` crashes. I tried to fix this with: ```python # Otherwise, interpret the label as a path. if not path.is_absolute(): return path.parts[0] else: path = path.absolute() rel_path = path.relative_to(RUNTESTS_DIR) return rel_path.parts[0] ``` but it crashes with `ModuleNotFoundError` (like without this patch): ``` ====================================================================== ERROR: backends/postgresql (unittest.loader._FailedTest) ---------------------------------------------------------------------- ImportError: Failed to import test module: backends/postgresql Traceback (most recent call last): File "/usr/lib/python3.8/unittest/loader.py", line 154, in loadTestsFromName module = __import__(module_name) ModuleNotFoundError: No module named 'backends/postgresql' ```
Feels like `--ignore-conflicts` would be a better fit if we want to move forward with this option.
I think we should have a test and handling for the case where `mimetypes.guess_type()` returns `None` as done in `_create_attachment()`.
yeah you got it
```suggestion if field_name == '_order': field_name = self.options.get('order_with_respect_to', field_name) ```
This is a much better test that visibly demonstrates things _should_ work again, nice. :) I don't know the stylistic preferences @felixxm _et al_ might have around using `assertEqual` vs. `assertJSONEqual` here, so I'll leave this as a note for highlighting.
We should support both `db` and `database`, e.g. ```python database = settings_dict['OPTIONS'].get( 'database', settings_dict['OPTIONS'].get('db', settings_dict['NAME']), ) ```
True, just thought I mention it.
I think we always want the input on the `>>` side of the operator to be able to utilise any indexes. So we get the following SQL: ```sql SELECT t, t <->> 'word' AS dist FROM test_trgm ORDER BY dist; ``` That should mean that we want `arg_joiner = ' <->> '`. <details> <summary>Index operator classes query where LHS is the indexed value</summary> <code> SELECT am.amname AS index_method, opf.opfname AS opfamily_name, amop.amopopr::regoperator AS opfamily_operator FROM pg_am am, pg_opfamily opf, pg_amop amop WHERE opf.opfmethod = am.oid AND amop.amopfamily = opf.oid AND opf.opfname IN ('gist_trgm_ops', 'gin_trgm_ops') ORDER BY index_method, opfamily_name, opfamily_operator; </code> </details> ``` index_method | opfamily_name | opfamily_operator --------------+---------------+------------------- gin | gin_trgm_ops | ~(text,text) gin | gin_trgm_ops | ~~(text,text) gin | gin_trgm_ops | ~*(text,text) gin | gin_trgm_ops | ~~*(text,text) gin | gin_trgm_ops | %(text,text) gin | gin_trgm_ops | %>(text,text) gin | gin_trgm_ops | %>>(text,text) gist | gist_trgm_ops | ~(text,text) gist | gist_trgm_ops | ~~(text,text) gist | gist_trgm_ops | ~*(text,text) gist | gist_trgm_ops | ~~*(text,text) gist | gist_trgm_ops | %(text,text) gist | gist_trgm_ops | %>(text,text) gist | gist_trgm_ops | <->(text,text) gist | gist_trgm_ops | <->>(text,text) gist | gist_trgm_ops | %>>(text,text) gist | gist_trgm_ops | <->>>(text,text) (17 rows) ```
chop trailing ,
```suggestion self.assertNotContains(response, '<nav aria-label="Breadcrumbs">') ```
Please use single quotes.
or `_('Add %s')`
```suggestion squashed_migrations_with_deleted_replaced_migrations = [ migration_key for migration_key, migration_obj in executor.loader.replacements.items() if any(replaced in to_prune for replaced in migration_obj.replaces) ] ```
Thanks for your effort :+1:. It is a kindly request for the first option. Trailing dot should be at the end of a sentence but there is no point in doing unrelated refactoring of existing code.
I would like a test that fails if this is removed from the try block.
Maybe: ```suggestion setting = getattr(settings, 'FILE_UPLOAD_TEMP_DIR', None) if setting and not Path(setting).is_dir(): return [Error( f"The FILE_UPLOAD_TEMP_DIR setting refers to the nonexistent " f"directory '{setting}'.", id='files.E001', )] ```
Mhm that is what I was trying to avoid, because for most hasher a salt length is just that and `must_update` should easily be able to handle that globally if it is returned from `decode`. What this PR certainly misses (and what will show you the existing problems) is a test for the behavior of the `bcrypt` hasher. I think now it's `must_update` will *always* return `True` and set a salt *every* time.
`resolve_expression_parameter` maybe? You're not really dealing with combinables here (even though they are also combinable), so just go with expression based names I think.
Can you use `['indexes']` here? If not, the list comprehensions in the next lines have a `not in None` and will fail.
Move the exists assertions to another test.
Why is this way preferable to ```suggestion def _check_token_present(self, response, csrf_secret=TEST_SECRET): ```
please limit docstrings to 79 characters and add period
This is already tested in `test_args_kwargs_request_on_self()`, I'm going to remove these assertions.
This test won't pass when pytz isn't installed. For consistency with the timezone tests, you should declare: ``` python requires_pytz = skipIf(pytz is None, "this test requires pytz") ``` and then decorate it with `@requires_pytz`. This is a minor concern since the docs now encourage installing all optional dependencies before running the test suite, but I suppose it could save some headaches to people running the test suite without a virtualenv. on or systems that don't have `time.tzset` (that is, Windows). Have
TextInput -> Input? I suppose a `test_input.py` file would be better. I wasn't sure about the `test_no_trailing_newline_in_attrs` test -- it's meant to test a template rather than Python code -- probably I could have clarified that. `strict=True` isn't needed since the newline isn't being tested.
Use a single line throughout where possible.
A better way to do this is with `{self.name!r}`.
@lukaszb which contrib/admin file are you talking about? Notice [how contrib/admin/options.py](https://github.com/django/django/blob/master/django/contrib/admin/options.py#L1860) doesn't have the missing new line icon. Make sure not to add two newlines, just put your cursor right where the missing new line icon is and press ENTER once.
Can you combine the model states to have 3 fields: `DateField`, `DateTimeField`, and `TimeField`.
This change is backwards incompatible for someone having subclassed the widget and customized `none_value`. We might let `none_value` as is, and simply update `none_value` in `__init__` (I'm open to arguments...).
`print('Aborting: --%s must be a top-level module.' % opt_name.replace('_', '-'))`
this line is very hard to read maybe you should do something like this: ``` python builtins = 'builtins' if six.PY3 else '__builtin__' if module == builtins: ... ```
I'm not sure about using `globals()` :thinking: What do you think about moving `__dir__()` at the end of the file and using `dir()` instead of `globals()`: ```python # RemovedInDjango50Warning. _DIR = dir() def __dir__(): return sorted([*_DIR, "utc"]) ``` we would avoid adding `_DIR`, `__warningregistry__`, and `__dir__` to the `dir(timezone)`.
`CANONICAL_RANGE_BOUNDS` is unnecessary: ```suggestion def __init__(self, *args, default_bounds='[)', **kwargs): ```
OK, it's necessary, see `migrations.test_commands.MigrateTests.test_showmigrations_no_migrations`.
I wasn't expecting this additional check to be added in all these cases. In the default case, there's no change and it doesn't seem very DRY to require both.
We don't use `self.value.value` anymore so we don't need to serialize it, we should use name instead, i.e. ```python v_string, v_imports = serializer_factory(self.value.name).serialize() imports = {'import %s' % module, *v_imports} return "%s.%s[%s]" % (module, enum_class.__name__, v_string), imports ```
We can add a control assertion to confirm that a `house` is cached for the `room`: ```suggestion self.assertIs(Room.house.is_cached(self.room), True) with self.assertNumQueries(0): ```
@tchaumeny reverted fa534b9 here.
```suggestion f'{cls.__qualname__}() got both positional and keyword ' ```
I wonder why it works without `list()` on PostgreSQL :thinking:
@sdil Can you take a look? Thanks!
"Always return False if the field is disabled since self.bound_data always uses the initial value in that case."
single line here is okay (lines up to 119 chars are fine when it improves readability)
The URL may be incorrectly encoded....
Nit: `test_loader_patterns_not_mutated` (with an "s")
The problem here is that you can't just use `Value('')` for the default. If you're doing `GREATEST(date_field, other_date_field)` then coalescing a date type with a char type is going to produce an error. The type itself will probably have to accept a default. ``` sentinel = object() def __init__(self, *expressions, **kwargs): ifnull = kwargs.pop('ifnull', sentinel) if ifnull == sentinel: raise ValueError('ifnull is required') if ifnull is None: # user has asked NOT to use coalesce else: self.ifnull = self._parse_expression(ifnull) ``` And then you would use `Coalesce(expression, self.ifnull)` in the coalesce method, or completely skip calling the coalesce method if `ifnull is None`. This is just one idea, but probably the best one I have right now. I don't really like forcing a user to provide an `ifnull` though, because it feels like we're disadvantaging the user. Another idea would be to use a backend feature. Something like `greatest_least_uses_nulls`, and then the tests could switch on that feature flag to provide different test results. I'd probably like to get a rough consensus on which way to go here.
I don't think we need parentheses and `Note:`. Also, there is no need to use `!`. Maybe: ```suggestion 'Ignore for now. Existing rows that contain NULL values ' 'will have to be handled manually, for example with a ' 'RunPython or RunSQL operation.', ``` ```
these aren't necessary, you can pass `StringIO`s for `stdout` and `stdin` to `call_command` instead. there are lots of examples in existing tests e.g. https://github.com/django/django/blob/master/tests/i18n/test_compilation.py#L41
Can you explain why it's okay to move `patch_vary_headers()`? (I know nothing about it and am just reading about it now.) Also, remove (I think) the failing test.
Not sure that's needed (it's the implicit default) -- anyway, as noted above, it's never executed.
Add a trailing comma.
Please add a trailing comma: ```suggestion [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'], ```
Was going to suggest the same, but see that @charettes got there first. > Yes, but IMHO it's worse for readability. Fair enough.
Maybe: `return ("%" + str(arg)) % (str(value) if isinstance(value, tuple) else value)`
`date=rfc850date` isn't needed in the `subTest()` -- since will appear if the assertion fails.
``` When the object has a ManyToManyField to Site, redirect to the current site only if it's attached to the object.
count(*) means it will count all records i.e each and every cell BUT count(1) means it will add one pseudo column with value 1 and returns count of all records is it correct? http://stackoverflow.com/a/280605
This implementation is repeated 5 times in this file. I think it should be taken up to Operation (or at least to a new sub-parent "OneModelOperation").
No need to assign this to `self`, since it's not used outside this one method.
We could just use f-strings here: ```suggestion errno.EACCES: f"You don't have permission to access port {self.port}.", errno.EADDRINUSE: f"Port {self.port} is already in use.", errno.EADDRNOTAVAIL: f"IP address {self.addr!r} can't be assigned to.", ``` (I know this means generating three strings when we'll only show one, but it isn't really going to add any significant overhead.)
Keep the style the same here and below
```suggestion self.assertEqual( columns['duration'][0], connection.features.introspected_field_types['DurationField'], ) ```
`it's django-generated` --> `it's a Django-generated`
Don't add a blank line.
I wouldn't edit this just to change the quote style.
TBH I don't much value in testing Python's error messages, `self.assertRaises(TypeError)` should be enough.
Collapse this decorator into a single line.
A bit odd that this test has a doc string and the others don't.
Also, what if we have a huge number of very short 'name=value's? This will create a dictionary with lots of small strings -- again lots of memory.
Adding `time_keeper` as the 3rd argument can cause issues for people that rely on the current signature and do not use keyword args.
I'd put `for key, value in kwargs.items()` on the next line to decrease length a bit.
You can reuse `resolve_model_field_relations()`.
I feel like there should be some dependencies declared on the operation here - the one that comes to mind is that it should depend on creation of its model, and delete model should depend on it.
I think it should be quoted in all cases.
This test would be better if we updated the whole model with the expression, like in the PR
Is this branching necessary? I can see how using `model.objects.none()` as a query holder could be problematic since it's not necessarily the same `QuerySet` class as the one from which `query` was extracted. Does the following work: ``` python def __getstate__(self): state = self.__dict__.copy() if isinstance(self.rhs, QuerySet): state['rhs'] = self.rhs.query return state ```
I don't think we want to subclass `base.Deserializer`. Instead, we can just do `self.object_list = object_list` and use that instead of `self.stream` below.
What's the rationale for defaulting charset to 'us-ascii'? Given the way the default is calculated in cpython, it seems like this could result in a behavior change when we remove `SafeMIMEText.__init__()` when our workarounds are no longer needed.
not sure if this really passes the django style guide, compared to plain if/else statements
Wrap lines at 79: ``` "The value of 'list_filter[0]' refers to 'RandomClass', which " "does not refer to a Field.", ```
Use `hash()` instead of `__hash__()`, e.g. ```suggestion self.assertNotEqual(hash(exception_str), hash(exception_list)) ```
```suggestion 1. (?P<a>\w+)/b/(?:\w+)c(?:\w+) => (?P<a>\\w+)/b/c ```
I think 1 needs to be '1'. Try it calling `manage.py createsuperuser`: ``` Username: 1 Error: email instance with pk '1' does not exist. ``` even though: ``` >>> Email.objects.values('pk') [{'pk': 1}] ```
Right, sorry, forget about `encoding`, should be `gzip.open(str(password_list_path), mode='rt')` according to [the doc](https://docs.python.org/3.7/library/gzip.html#gzip.open). (Notice it's `rt`, not the usual `r`).
Here's a regression test that passes on master but crashes with the new version (after the deprecation warning is silenced): ``` diff diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py index 4677962..b2845ff 100644 --- a/tests/model_fields/tests.py +++ b/tests/model_fields/tests.py @@ -31,6 +31,11 @@ from .models import ( class BasicFieldTests(test.TestCase): + + def test_get_val_from_obj(self): + f = BooleanModel() + self.assertEqual(f._meta.get_field('string')._get_val_from_obj(None), 'abc') + def test_show_hidden_initial(self): """ Regression test for #12913. Make sure fields with choices respectdiff --git a/tests/model_fields/tests.py ```
Correctly indent the bracket to match the `return` indentation.
I'd drop the intermediate variable
We need to use inline imports or move all Selenium imports to the `try ... except` block (another separate commit) because tests shouldn't crash without it.
```suggestion # LiveServerTestCase's change to ALLOWED_HOSTS should be reverted. ```
Same as above, I'd revert to the simpler version. The main idea behind `decode` for me is a consistent interface where it makes sense, we don't have to bend backwards just to use it.
please use slightly longer lines such as here (move `EXTENDS_HISTORY_CONTEXT_KEY)` up) when it improves readability
Maybe we should move this directly to the `RelatedLookupMixin` :thinking:, I don't have a ready answer.
You don't need this `pass` anymore.
without any arguments
Add a trailing comma.
Let's call this `non_existent`, please.
Yes. Adding `?:` makes it a non-capturing group which allows for use of `m.groups()` below. Otherwise it'd need to be `... = m[1], m[2], m[4]`.
```suggestion poly = Polygon(((0, 0), (0, 1), (1, 1), (1, 0), (0, 0))) ```
I'd use generic setting names to make it clear what's going to raise the exception and to avoid adjusting these settings if we ever get rid/deprecate one of these settings.
I don't see much value in this docstring.
maybe I'm being a stickler, but I'd make extra assertions on the log record's level and message
no dash in "email"
save is not needed : objects.create returns an already saved instance. Tests succeed without the save
I don't use login rate limiting myself at the moment, but I can see that people might want to use more sophisticated schemes (e.g. exponential delays). So I think it would be good to allow people to opt-out of this feature.
Wrap at 79 chars: ``` "'choices' must be an iterable containing (actual value, " "human readable name) tuples.", ```
`0` is unnecessary: ```suggestion return (10, 2) else: return (5, 7) ```
`assertEqual` -> `assertTrue`
I would rename it to `kwargs` ```suggestion kwargs = {} ```
Why move this line? There's no behaviour change no? I think revert this please.
You'd need to either include both `f.name` and `f.attname` or use `self.model._meta.get_field(name)` for each `defaults` which I think supports both form e.g. ```python get_field = self.model._meta.get_field update_defaults = True for default in defaults: try: field = get_field(default) except FieldError: break if not field.concrete: break else: update_defaults = False ```
I think the test fails as it is as you're no longer passing `self.timeout` to `smtplib.SMTP_SSL`. I don't think Django should specify a default of 60. Instead it should be `None` and only passed to the SMTP connection if the user specifies it. Here's a quick sketch of what I have in mind (plus some cleanup): ``` python # If local_hostname is not specified, socket.getfqdn() gets used. # For performance, we use the cached FQDN for local_hostname. connection_class = smtplib.SMTP_SSL if self.use_ssl else smtplib.SMTP connection_params = { 'local_hostname': DNS_NAME.get_fqdn(), } if self.timeout is not None: connection_params['timeout'] = self.timeout self.connection = connection_class(self.host, self.port, **connection_params) # TLS/SSL are mutually exclusive, so only attempt TLS over # non-secure connections. if not self.use_ssl and self.use_tls: self.connection.ehlo() self.connection.starttls() self.connection.ehlo() ``` For the test you'd subclass `EmailBackend` and verify the connection has the timeout use specified.
Let's rename these test methods to be `test_html_autocomplete_attributes`.
I wonder if something like `self.PO_FILE_KO.replace('/ko/', '_do_not_pick`)` would make that a bit more resilient to future changes. No strong feeling either way.
Only this parameter is unnecessary, rest of them is necessary to hide std outputs.
```suggestion class ScalarParent(models.Model): foo = 1 class ScalarOverride(ScalarParent): foo = models.IntegerField() self.assertEqual(type(ScalarOverride.foo), DeferredAttribute) ```
`Company` doesn't have a default ordering so we need to use `assertCountEqual()` or add `.order_by(...)`.
I think we should ignore inherited PKs and check them only in parents, see #13925.
Use a single line. Our [style guide](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style) allows lines up to 119 characters if it helps readability.
DatabaseError is raised if a ....
Following the existing docstring pattern of wording like "Hook for..." seems useful.
I think this should also check for a condition on the constraint, since UniqueConstraints without conditions are always supported.
I had a similar thought though I wasn't sure if the change would be an improvement or not. "pr" me think "pull request". I haven't reviewed this in detail yet.
Minor spelling tweak - "must contain a", not "must contains a".
Once (field_name, model_name) expand I doubt it'll fit in 80chars even above. Good catch on the quote inconsistency.
> Hmm, imho set serialization and key item assignment (as for dicts) have slightly different mechanics. Not sure, which one works better here. Doesnt key assignment have the risk of falling back to the hash(value) (identity) evaluation for complex types in cpython, that dont implement __eq__ properly (equality)? Both `set` and `set` rely on the same `__hash__` logic you are referring to so if you are worried about Python/SQL incoherence about using `Counter` you should be equally worried about using `set`. The problem is the same as ticket-25544 though (see 86eccdc8b67728d84440a46e5bf62c78f2eddf6d) it's possible that `model.pk` is not hashable and we must account for it one way or another.
"In Django 5.0" :+1:
It would be more readable to raise an error explicitly (like previously), e.g. ```python db_features = connections[self.db].features if ignore_conflicts and not db_features.supports_ignore_conflicts: raise NotSupportedError('This database backend does not support ignoring conflicts.') if update_conflicts: if not db_feature.supports_update_conflicts: raise NotSupportedError( 'This database backend does not support updating conflicts.' ) if unique_fields and not db_features.supports_update_conflicts_with_target: raise NotSupportedError( 'This database backend does not support updating conflicts with ' 'specifying unique fields that will trigger the upsert.' ) ``` (I used new feature flags.)
I fixed this issue in fe0ddbc84e4d8836ce8d27a1218d360c5482c2be.
We use hanging indent and try to avoid non-multiple of 4 space indent, something like: ``` warnings.warn( "Access to manager '%s' defined on non-abstract base " "class '%s' from child class '%s' is deprecated." % (self.manager.name, self.model.__name__, cls.__name__), .... ) ``` Add something like: "Add the manager to the child class to silence this warning."
I thought about it, but it has some value to test this explicitly.
I'd move it below the `__init__()`.
And this: ```suggestion parameters = self._get_test_db_params(suffix) ```
In the current state, it's not reusable for other lists of expressions, so I would rename it to the `IndexExpressions`
Fine by me. I think we could probably omit the keywords in a lot of places and include them only where it's potentially confusing, but probably that's already what you're doing.
I wonder if we could support running `runtests.py` from different directories :thinking: like we do for dotted module names, e.g. ```bash ~/repo/django> ./tests/runtests.py backends.postgresql ``` works fine, but ```bash ~/repo/django> ./tests/runtests.py backends/postgresql/ .... File "./tests/runtests.py", line 155, in get_label_module rel_path = path.relative_to(RUNTESTS_DIR) File "/usr/lib/python3.8/pathlib.py", line 904, in relative_to raise ValueError("{!r} does not start with {!r}" ValueError: '/repo/django/backends/postgresql' does not start with '/repo/django/tests' ``` crashes. I tried to fix this with: ```python # Otherwise, interpret the label as a path. if not path.is_absolute(): return path.parts[0] else: path = path.absolute() rel_path = path.relative_to(RUNTESTS_DIR) return rel_path.parts[0] ``` but it crashes with `ModuleNotFoundError` (like without this patch): ``` ====================================================================== ERROR: backends/postgresql (unittest.loader._FailedTest) ---------------------------------------------------------------------- ImportError: Failed to import test module: backends/postgresql Traceback (most recent call last): File "/usr/lib/python3.8/unittest/loader.py", line 154, in loadTestsFromName module = __import__(module_name) ModuleNotFoundError: No module named 'backends/postgresql' ```
no need to specify `obj=None` I believe.
And I would rename this attribute `superusers` as it's meant to contain multiple users.
I remember looking at this test when merging 233c70f0479beb3bff9027e6cff680882978fd4d. I just tested this now and if you use `with register_lookup(field, Exactly, lookup_name='exact'):`, then this is the state at the end of the test: ``` >>> Author._meta.get_field('birthdate').get_lookup('exact') <class 'custom_lookups.tests.Exactly'> ``` With the current code, the output is `<class 'django.db.models.lookups.Exact'>` which looks correct to me. So I'd leave this as is and remove the unused `CustomExactLookup`.
Unnecessary `()` wrapping I believe.
FWIW +1 to doing it as a separate clean up. IMO it'll be much clearer what change was where looking back that way.
The thing is that even if the ORM doesn't have support for it yet using `distinct()` to implement `(UNION|INTERSECT) ALL` might prevent us from adding proper support in the future. What I suggest doing here is setting `query.combinator.all = kwargs['all']` and preventing using `distinct()` on `CombinedQuerySet`. The difference between ordering and combination operation is that the former operates on the _combined_ set of rows while the latter operates on how these rows are combined. I would suggest that options related to combination be passed as `kwargs` (such as `all`) and actions operating of the combined result (`CombinedQuerySet` instances) be added as methods (`order_by`, _slicing_).
Same as above, (simply `postgis`)
Despite the existing style of the first test, I would remove the intermediate `f` variable in the new tests as it'll help balance line lengths and make things more readable.
Missing a test that fails if `(?i)` is removed. Actually as little as `r'^[a-z]+:'` will allow the tests to pass.
Rather than `get_num_test_processes()`, I wonder if something like `get_max_test_processes()` might be a better name. This is because the number of test processes can wind up being smaller, e.g. if there are fewer `TestCase` classes. (You also assign to `max_parallel` elsewhere, so there is an awareness of this meaning / caveat.)
Use `self.assertIs(cache.touch('something'), True)` since `assertTrue()` passes if `bool(value) is True`.
Same as above; let's leave it alone for now.
Please don't change all the other unaffected lines.
Maybe you've missed `if summarize` branch (below).
e.g. I think this should either be a warning or an error.
IMO we can remove this line.
I find `assertEqual` preferable since `asserTrue` checks `bool(expr) is True` which could pass for a result we don't want here. Well, I guess what we actually want is `assertIs(expr, True)` as described in the Python docs.
@MarkusH I don't have a strong opinion on this, but I wouldn't classify this change as a backwards-incompatible, I guess. @rebkwok Maybe we can keep previous indentation i.e.: ``` python deletable_objects, model_count, perms_needed, protected = modeladmin.get_deleted_objects( queryset, opts, request, using) ```
Do we need the `tzinfo` bit for the test? I'm worried relying on `get_current_timezone` could make the test flaky.
Shouldn't this be along the lines of ```python def iterator(self, chunked_fetch=None): if chunked_fetch is None: chunked_fetch = connections[self.db].settings_dict.get('ENABLE_SERVER_SIDE_CURSORS', True) return iter(self._iterable_class(self, chunked_fetch=chunked_fetch)) ```
This is unlikely to be enough as JSON can have an array or string as it's top-level data type.
That shouldn't be an issue (see a workaround for `|`).
I think that we can squash this to two cases, i.e.: ```python if not self and other: return copy.deepcopy(other) elif not other: return copy.deepcopy(self) ```
Chop blank line.
```suggestion # Normalize an exception raised by the underlying client library to # ValueError in the event of a nonexistent key when calling incr(). ```
This has been mentioned previously, we can't do it because updating the set in place would update the inherited tags as well. e.g. ```python @tag('foo') class Foo: pass @tag('bar') class Bar(Foo) pass ``` Using `update` would add `'bar'` to `Foo.tags`.
Could you also update `logger.warning` to `logger.debug`. You may want to wait for confirmation from a core developer before change it. Thanks!
The `table` variable is actually a `models.Model` instance so it might be good to rename it to `model`. In the case of auto-created models `model._meta.auto_created` will be pointing at the model at the origin of the creation else it will be `False`. When it's `False` the resulting message should be of the form `(opts.app_label, opts.object_name)` else it should be of the form `(opts.app_label, opts.object_name, field.name)` where `field` is retrieved from iterating over `model._meta.auto_created._meta.many_to_many` where `field.remote_field.through is model`.
Chop blank line.
Do we have any plan on how & when to upgrade those as time passes by? (ie like we have for pbkdf2)
There is no need to declare `warning_message` or `msg`: ```suggestion self.assertEqual(check_file_based_cache_is_absolute(None), [ Warning( "Your 'default' ...", id='caches.W003', ), ]) ```
When calling `on_commit` there are basically two modes: - there is no transaction in progress, so we execute the function right away - we are in an atomic block, so we register the function to execute it later (`self.run_on_commit.append(`) The first case is handled by the PR, but not the second one. And I'd think that we would need to handle a robust execution in the second case too. Does that make it clearer? :)
Does it also work if you leave away the wrapping DIV? It isn't obvious to me that the issue from the ticket (`'<a/><b/>'` should be contained by `'<a/><b/><c/>'`) is being addressed by this change.
Oh I realize that asserting against the results is problematic given all the engines we're testing against support foreign keys. In this case yes, using the same `JOIN` check against `captured_query` should do!
Oh. Interesting :-| Bisecting the regression on Django's master branch with your test will show where the regression happened. Depending on what this reveals, a backport could be in order, even if the regression is old.
I think you could skip the views file and use `lambda req: HttpResponse('OK')` instead.
```suggestion msg = ... with self.assertRaisesMessage(ValueError, msg): ```
Please use single quotes.
I guess this should be more specific like `CheckTemplateSettingsAppDirsTests`
What's the purpose of these lines? When I run the script, the suffix is always ".js" so this condition is always True.
I'm not following the expected usage here. Surely (?) I'm only applying this to filters `needs_autoescape=True` (It seems overly complex…)
`to_python()` (add parens)
```suggestion return "<%s vendor='%s' alias='%s'>" % ( ```
have this line use 8 space indent and the `raise` line use 4 space.
Use single quotes unless a string contains double quotes. Also, this looks fine to fine on the line above.
Can you issue a `RuntimeWarning` here telling the user that Django falls back and it might be time to clean up using `squashmigrations` and link to https://docs.djangoproject.com/en/dev/topics/migrations/#squashing-migrations.
Whilst we can't show the signal name, I suggest using `Signal.send_robust()` in the message, to provide a little more context: ```suggestion 'Error calling %s in Signal.send_robust() (%s)', ```
This method returns a list and not a dict.
you should accumulate all warnings into a list and return that at the end of the function. At the moment this returns early, if there are two non-unique names in use, only the first one will get a warning. If the user fixes that, they run the checks again, and get a new warning about the second non-unique name. Not a great workflow if there are many to fix.
The docs say, "For performance reasons, `from_db_value` is not implemented as a no-op on fields which do not require it (all Django fields)."
```suggestion widget=MultiWidget(widgets=[TextInput(), TextInput()]), ```
`'rb'` flags are unnecessary.
Could probably use an f-string here and in the following branches. ```suggestion return f'{lhs}[%s:%s]', params + [self.start, self.end] ```
Stray `,` at the end of the help text.
Sure, so two extra fields - one to handle `0` and `None`, the other to handle `False`.
Interesting thought. But if a key is compromised one would switch from one key in the list to still one key (the new one) because you wouldn't want to keep the compromised key active. So in the case of a compromise I'd always expect the list to stay constant in length because the offending key would be replace with a new one (independent of other keys probably). Either way for the majority of cases (ie under normal operation) I'd expect just one key in there (or always two if one rotates a key every $x weeks)
I believe this was meant to be a `references` check instead of a `reduce` check? Since `reduce` returns operations, not a boolean. Something like "`not op.references(other)`" so that we can ensure that `other` can properly be pulled forwards
`Delete` sounds better to me, because we delete rows from the `django_migrations` table. Maybe: ```suggestion help='Deletes nonexistent migrations from the django_migrations table.', ```
Suggestion: "Found duplicate value %s in CreateModel managers/fields/bases argument."
The change is fine, I'm just asking that it be a be separate commit similar to 31098e3288595c13f165935f2579f1af744e5240 so that the refactoring isn't mixed in with the new feature.
I think this migration should always start with `from django.db import migrations` and I would find that assertion much simpler.
I've checked and `icontains` is not affected, we can remove this test. Sorry I should checked this first.
You don't need to mock, it will return `False` for a bad file descriptor.
"its" add period
This check is redundant. `skipUnless` already guarantees that we have MySQL. You can remove the `try ... except` leaving only `import`.
I think it's fine to leave it inside a `try` block.
good catch, the second is fixed in https://github.com/fcurella/django/pull/1
As long as you use `except Exception` and not a bare `except` this should be good.
This should be replaced with `@isolate_apps()` as done in a08fda2111d811aa53f11218fa03f3300dfff4cb.
This one as well
I believe you can simplify all this stuff to lines like: ``` assertFieldType('pos_big_int_field', 'models.%s() % connection.features.introspected_field_types['PositiveBigIntegerField']) ``` I don't think the if statements are needed anymore (similar elsewhere in this file).
I think `assertIsNotNone(req.session.get(CSRF_SESSION_KEY))` would better express the existence assertion here.
We don't wrap at 80 chars, anything below 100 chars is generally fine. Also we shy away from backslashes.
Please use single quotes consistently in new code.
This is compliant with the PEP8 rules that we care about, let's not make the diff bigger than needed.
You don't need this `pass` anymore.
You can use `Path.is_absolute()`.
I'm not sure if there are lookups where it's not the case, but comparisons such as `Choice.objects.filter(votes__gte='2')` seem to work fine with the value as a string so the "transform" stuff seems unnecessary, at this for the first version of this.
Fine. Yes. (I had a play: there's no actual logic error, since it's pulling the value from the parent scope...) Ta.
Use hanging indent: ``` special_people = models.ManyToManyField( 'Person', through='ProxiedIndividualCompetitor', related_name='special_event_set', ) ```
Diff will be smaller without this unnecessary change.
trailing comma here and next line
I'm not seeing what the benefit of that would be. `self.addCleanup(self.temp_dir.cleanup)` calls `cleanup()` which removes the finalizer so there isn't a warning.
This is the failing assertion on Windows. I think it might have to do with the file being written with Windows vs. Unix line endings. If you remove the assertion, the rest of the test passes.
This can be single-lined ```suggestion '<ul class="errorlist nonform"><li>Please submit at most 1 form.</li></ul>', ```
Put this on the previous line.
Rename this variable to `readonly_fields`. Let's not pollute the code with three things that mean the same thing, i.e. the `uneditable_fields` here and the aforementioned `viewonly_fields`.
Valid point. Feel free to change the decorator in a separate commit.
I know it was already like this, but I prefer including the trailing comma in dictionaries so that if more items are added later, we don't have to modify the line again (keeps diffs and git blame cleaner)
I think we can safely remove this. It was overlooked in the post-deprecation removal of `django.core.cache.get_cache()` in d038c547b5. We should do that in a separate commit w/ `Refs #21012 -- ...`.
`CANONICAL_RANGE_BOUNDS` is unnecessary: ```suggestion def __init__(self, *args, default_bounds='[)', **kwargs): ```
Welcome to the wonderful world of `contenttypes` where clearing a GFK (even an optional one) actually deletes the objects.
Although the test works fine, this will fail admin checks: `fkuser.CustomUser: (auth.E003) 'CustomUser.username' must be unique because it is named as the 'USERNAME_FIELD'.` so might as well fix that.
Yes, I had checked on master, which doesn't make sense. I get the same result on this branch.
With a non-English LANGUAGE_CODE and if the active language is ....
You are right I missed the fast that exceptions raised during `__enter__` are not going to go through `__exit__` sorry for that. That makes these tests unnecessary.
Maybe: ```suggestion def get_primary_key_columns(self, cursor, table_name): ```
Can replace `**dict(through_defaults, **{…})` and use unpacking generalisations: `**{**through_defaults, **{…}}`.
directly after _get_called_qs().
To verify this is the expected import error, I'd do something like: `self.assertRaisesMessage(ImportError, 'nonexistent')`
``` if name is None: name = self._create_index_name(*args, **kwargs) return self.quote_name(name) ```
I thought you wanted to remove `return`. Nevertheless I'd also leave the `else` as it increases readability.
Migrations are applied and recorded atomically.
When considering my own approach for this same problem, I specifically avoided using xor as when using it on printable characters, you wind up with lots of unprintables you probably don't want to put in your page. Two approaches I considered were: 1. restricting tokens to hex ascii, and xoring their binary forms 2. using a "caeser cipher" approach, where each char is offset in the list of valid chars by the corresponding char in the random pad. [modulo the list of chars, of course]
We should support both `db` and `database`, e.g. ```python database = settings_dict['OPTIONS'].get( 'database', settings_dict['OPTIONS'].get('db', settings_dict['NAME']), ) ```
Should be able to fix it when committing, just making a note of it. Thanks for the patch; I happen onto the problem from time to time as well. :-)
is the helper method a stylistic change only? makes review difficult.
This test passes when testing against an SQLite or MySQL backend as long as psycopg2 is also installed. For this test case, I think the check `connection.vendor == 'postgresql'` skips the test too aggressively.
Chop blank line.
We should use key that fails only on a prefix check.
We can't really make this backend dependent if we want to store the index name as part of migrations. Migrations are potentially run on any db backend and should work on any.
Chop blank lines.
```suggestion with self.time_keeper.timed('Total database setup'): ```
yeah having an `Expression.nullable` flag that is also present on `Col` instance based on the `Field.null` they resolve would be useful for a few other things I've worked on in the past.
Need to test how many times `update_contenttypes` was called and test arguments which passed to it.
This should probably be updated with the new gdalinfo, which basically includes one more line in the coordinate system: `AUTHORITY["EPSG","3086"]]`
I would use ```python exc_type, *_ = sys.exc_info() ``` or ```python exc_type, _, _ = sys.exc_info() ``` :thinking:
I think we usually avoid _should_ wording in test docstrings.
@timgraham that's neat but that looks really fragile. Think `return Signal(providing_args=["app_config", "verbosity", "interactive", "using", "apps", "plan"])` where the name would end up being `'return Signal(providing_args'`) which can lead to more confusion than the actual situation. We could also make `assertSignalSent` accept a `msg` argument (like other `assert` methods do) to allow the user to disambiguate the origin of the failure. From my point of view the traceback is explicit enough to point the users at the correct location in their code base and figure out which signal was unexpectedly sent or not.
Instead of ``` choices = list(filterspec.choices(changelist)) self.assertEqual(len(choices), len(expected_displays)) for i, display in enumerate(expected_displays): self.assertEqual(choices[i]['display'], display) ``` you can write ``` choices = tuple(c['display'] for c in filterspec.choices(changelist)) self.assertEqual(choices, expected_displays) ```
As multiple addresses are allowed, I suggest "to one or more addresses specified ...".
Use only ``` if PY: # python2 specific code else: # python >= 3 specific code ```
Pre-computing the updates by moving lines 501-513 before line 500 would reduce the length of a time the transaction is open for, which is a good thing for database throughput
Is `tz` necessary here ? elsewhere `self.timezone` is passed without it.
Trailing dot is missing.
Ah. It is because we are pre-populating `self.records` before the `yield` in the context manager. Changing to `defaultdict` means that the key only gets added after when the context manager is exiting and we do `self.records[name].append(end_time)`. This means that nested uses of `time_keeper.timed()` - as we do in the database setup -- end up being out of order.
> For the sqlite3 case the connection will never close (it can't) so the test will fail. The bug can only be reproduced with postgresql oracle and mysql so testing sqlite is pointless to me. Keep in mind that while the default test settings use an in memory SQLite database running the suite with a file based SQLite database is a valid setup that should be accounted for.
Ah right. You noted on the ticket that's not the case with the 'spawn' mode, but I guess we shouldn't concern ourselves with that right now, as the test runner doesn't support that. @Valze - maybe make a note for your spawn-mode GSoC project? 😉
I guess I would say something like "The inner CharField is missing a max_length."
there's no need to "cleanup" by logging out as each test creates a new test client
I'm favoring contractions lately, e.g. "Don't", "shouldn't".
Also, doesn't this fail on Windows? Best use `python -m pip ...` to be safe...
You had a `if not model and not hints` here before. Any reason why this is gone? The only thing I can think of, routers have to take care of `model=None` anyways, so this "precaution" isn't necessary anymore.
I wasn't suggested that, but perhaps it would make the test more readable/clear, lest someone copy the current pattern.
That link appears to be Python 2.7, correct? Python 3.3+ looks to behave differently.
A minor matter of style, but "GO below this line" isn't needed. All you need is the section header. I'd also suggest making the header more prominent - precede and follow the header text line with a line of `####` that goes the full width (or to col 76, anyway - 1 indent back from max line length) of the code. ``` ########################################################################### # Deprecated methods ########################################################################### ```
Is this still simulating a read-only database if the mocking is removed? This test might be obsolete considering the exception catching in `check_migrations()` is removed. Some low level tests for the modified `MigrationRecorder` methods might be in order instead.
`has_key` is deprecated, use `if 'origin' in ds_input:` instead. Also please replace other occurrences in the patch.
Please check test coverage carefully. I didn't spot a test for this change.
If changing the messages, please update them in `docs/ref/checks.txt` as well.
use single quotes
```suggestion return f'Remove collation {self.name}' ```
This doesn't work with many conditions, e.g. `a ^ b ^ c` see `XorLookupsTests.test_filter_negated()`.
`fake_user_data` is not passed to the `create_superuser()`.
Please put the test in `AdminActionsTest`.
`regex` will be clunky. IMO unnecessary `JOIN`'s are acceptable in this case, there is not much we can do.
I'd vote for making `returning` a `property` instead of a stealth field option at least for now because this is not something we've done in the past. ```python @property def returning(self): return hasattr(self.default, 'as_sql') AutoField.returning = True ``` That would make `DateTimeField(default=Now)` work and avoid the ambiguity of `default=Now, returning=False`. We'd still have to deal with backends that don't support returning fields.
Why this solution doesn't use `capi.copy_ds()`? :thinking:
Doesn't exist in 1.5, be careful when backporting
I think we should revert the logging changes as it appears we're adding additional logging calls where they didn't exist before.
Yes it should be `R.p`, we didn't take into account nested protected relations in the ab3cbd8b9a315911248227208630a020cedca08f (probably my fault). Also casting to list is not necessary anymore after this change.
this doesn't need a separate test class, insert the test after `test_name_contains_double_underscores` which tests E024
`ChoiceFormSet` -> `ArticleFormSet` You mixed `Article` with `Choice` in few places.
I think we want to avoid altering `self.extra` here and pass `db_type` as a kwag to `super().as_sql()`.
IMO both cleanup should be added in `_start_server_thread()`, i.e.: ```python @classmethod def _start_server_thread(cls): cls._live_server_modified_settings = modify_settings( ALLOWED_HOSTS={'append': cls.allowed_host}, ) cls._live_server_modified_settings.enable() cls.addClassCleanup(cls._live_server_modified_settings.disable) ... cls.server_thread.start() cls.addClassCleanup(cls._terminate_thread) ... ```
btw `reversed(x)` doesn't actually iterate the whole list in reverse in python 3, you just get a `list_reverseiterator`... ``` In [1]: reversed([1]) Out[1]: <list_reverseiterator at 0x105098b70> ``` :)
Please revert this change, `verbosity` is necessary.
an INSERT a RETURNING
`tempfile.TemporaryDirectory()` can be used as a context manager: ```suggestion with tempfile.TemporaryDirectory() as temp_dir: ``` The other tests were cleaned up in #13211.
The test won't run if it's in the database router.
@adamchainz Does it work for you? :point_up:
Yeah, I think that falls into YAGNI territory. Better to just do the simpler and faster thing for now, and add indirection later if/when we actually need it.
add trailing comma on kwargs
I had suggested doing this before computing `good_origin`: https://github.com/django/django/pull/13829#discussion_r579863426 That way you can avoid the two method calls and string construction in favor of a set membership check.
Use `django.utils.datastructures.OrderedSet` to make it clear what you are using this datastructure for.
If it has some readability benefits, it could be done in a separate PR. This looks okay for now.
I don't think try/except/fail is a good pattern. See 071801ccff970682a799ce754431a3c3ce3d6902 for the reasoning.
The only allowed values for `view_on_site` are a boolean or a callable thus you can safely use the `self.view_on_site` conditional here.
I guess this means that the line below could be replaced when only Python 3.5+ is supported. It would be nice to be more explicit about that.
I think connection is a bad name to use because of database connections `django.db.connection`.
missing space after : (check code with flake8)
types -> type
```suggestion with self.assertRaises((OperationalError, ProgrammingError)): ```
I think it's something like: 'browser' contains the first browser to run the tests against and 'browsers' will contain the rest of the browsers (if more than one are requested).
use same indent style as previous item
One solution here would be to make `enable`/`disable` idempotent by having a class level `enabled = False` attribute that gets set/unset and checked for early return in both methods or to override `__exit__` to deal with `exc_value == self.enable_exception` in a special way.
According to the `Node.render` docstring it should "Return the node rendered as a string" so if we really wanted to optimise for speed, we could potentially forgo the `str` as well, but I think probably better safe than sorry here, so better to leave it in.
this should probably stay, as we don't want `max_length` to suddenly show up somewhere in between states.
This change turns this into a confusing/possibly-useless test. What is the response content? What assertion can we make about it? The universe of "things which are not the empty string" is very large, and includes many things which would be wrong.
This and similar assertions added for `bloom`, `btree`, `hash`, `gist`, and `spgist` are not related with this patch, and they're unnecessary. Index types are already checked in ``` self.assertEqual(constraints[index_name]["type"], ...) ``` Please remove them.
this doesn't pass flake8, I'd probably create a separate variable so you don't need funky indentation. ``` file_storage_settings = ( 'MEDIA_ROOT', ... ) ```
Since we don't have to support old python versions anymore, you can use the `@property` syntax, which I think is more readable.
The main question is what to do with these tests? We should analyze them one by one and prepare alternative versions only with `unique_together` (if necessary). I'm afraid that we cannot simply remove them when deprecation ends because we will end with many not covered scenarios. For example: ```python diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py index 547e0b32c5..4c19a34d7f 100644 --- a/tests/migrations/test_autodetector.py +++ b/tests/migrations/test_autodetector.py @@ -2441,10 +2441,10 @@ class AutodetectorTests(TestCase): self.assertNumberMigrations(changes, "testapp", 1) self.assertOperationTypes(changes, "testapp", 0, ["AlterField"]) + # RemovedInDjango51Warning: When deprecation ends rename to + # test_empty_unique_together(). + @ignore_warnings(category=RemovedInDjango51Warning) def test_empty_foo_together(self): - """ - #23452 - Empty unique/index_together shouldn't generate a migration. - """ # Explicitly testing for not specified, since this is the case after # a CreateModel operation w/o any definition on the original model model_state_not_specified = ModelState( @@ -2457,7 +2457,7 @@ class AutodetectorTests(TestCase): "model", [("id", models.AutoField(primary_key=True))], { - "index_together": None, + "index_together": None, # RemovedInDjango51Warning "unique_together": None, }, ) @@ -2468,7 +2468,7 @@ class AutodetectorTests(TestCase): "model", [("id", models.AutoField(primary_key=True))], { - "index_together": set(), + "index_together": set(), # RemovedInDjango51Warning "unique_together": set(), }, ) ```
You probably don't want this to be a class-level attribute, because they are exactly that (class-level, not object-level). The better approach is to accept an optional timeout argument to `__init__` and store that on `self` to later be passed in to `smtplib.SMTP`.
```suggestion self.resolve_model_field_relations(model_key, name, old_field) ```
Glad to see this gone.
repetitive with method docstring
"... doesn't look like a path to a module attribute", "... doesn't look like a path to an object". It isn't supposed to be a module.
This can be single-lined. Also, please use hanging indentation as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style). ```suggestion custom_libraries = conf.get('OPTIONS', {}).get('libraries', {}) ```
I would prefer to wrap value with `Value()` and compile `options` separately.
```suggestion self.assertEqual( ```
I'd tend toward checking at the boundaries rather than some random value.
removing unnecessary multilines like this will make it nicer.
What about ```suggestion self.assertNotIn('is_book', books.values().first()) ```
Few naming suggestions: `ordering_element` -> `expr` `ord_sql` -> `expr_sql` `ord_sql_params` -> `expr_params` `additional_sql_params` -> `ordering_params` `ord_clauses` -> `ordering_expr_sql`
Switching to `assertTrue()` seems incorrect.
more than one automatically generated field.? sounds better and more natural with the changes.
Maybe we just need to not call `str(alias)` here? If `alias` already works as a key in `connections`, why do we need to change it? That will avoid having to put `str()` calls everywhere.
We want to change whitespaces in the traceback, so we should test these changes e.g. ```python self.assertIn( ' File "generated", line 2, in funcName\n' ' <source code not available>', text, ) ```
We are actually only removing a single model, not multiple.
Also `4x8.png` is left on the file system when the tests conclude.
I'm a bit worried about the side effect of reloading this module given how much stuff depend on it indirectly. Tests are passing which is a good sign but that'll make yet another global side effect to think about when debugging weird issues with the test suite. I don't have any other idea of how to test this in another way but maybe raising the error on `DatabaseWrapper.__init__` instead could bring the same benefit while being easier to test? FWIW [we haven't tested such errors](https://github.com/django/django/blob/88619e6129fd8c6668242f1acc1465ca175d2948/django/db/backends/mysql/base.py#L35-L36) in the past and I would be ok with doing the same here.
I'd use a semantic test name like `test_error_raised_on_filter_with_dictionary`
Seems to fine on a single line.
This message shouldn't be used when constraint is defined with `expressions`.
Since this only works for instances with an pk, do you think that `bulk_update` would be a better name? The regular `save()` method can either create or update depending on pk status which may confuse users here.
1. Add this import: from {{ project_name }} import views
don't add this blank line.
`has_select_for_no_key_update` -> `has_select_for_update_no_key`
not sure if this really passes the django style guide, compared to plain if/else statements
Yup, new version is better.
The variable name doesn't need to be / shouldn't be changed, IMO. (My suggestion in the ticket for a variable name was for the string argument, if that was going to be tested separately.)
This seems a bit redundant. I believe that the feature flags should be used as much as possible, instead of checking against vendor names.
This isn't passing on any backends. SQLite, for example: `OperationalError: misuse of aggregate function COUNT()`.
It seems like it would be more consistent if the methods were prefixed with `get_` as `get_view_on_site_url` is. Without the prefix, I'd expect a name like `admin_index_url` to be a property. I don't see the usefulness of `admin_viewonsite_url` as a layer of indirection to `get_view_on_site_url()`.
You are right here as well. Your version is clearer for people that understand bitwise operators the flags structure, plus its shorter. For me he more "explicit" version is easier to follow, and probably true too for other people that do not have experience with the postgis bites structure or bitwise operators. But the conciseness of your version is convincing so lets use it.
I'd probably change this hunk in the diff to: ``` python if getattr(field, 'auto_now', False) or getattr(field, 'auto_now_add', False): default = timezone.now() internal_type = field.get_internal_type() if internal_type == 'DateField': default = default.date() elif internal_type == 'TimeField': default = default.time() # DateTimeField already has correct default now ```
"cannot" is one word. add period.
```suggestion functions.FromWKT(Value(g.wkt)), ```
Please wrap at 79 chars.
Could we possibly skip the detection feature `if Database.sqlite_version_info >= (3, 29, 0)`? Since this is only present on macOS [could we branch off `platform.platform`](https://docs.python.org/3/library/platform.html?highlight=darwin#platform.platform)? I think this would partially address @claudep's concerns.
I don't see much value in this docstring.
Please don't change all the other unaffected lines.
`seprate` -> `Separate`, also trailing dot is missing.
Both approaches work but I wonder if we'd want to be a bit more liberal here and simply return `copy` if no `output_field` can be retrieved. ```suggestion field = getattr(copy.lhs, 'output_field', None) if field is None: return copy ``` It would also avoid having to specify an explicit `output_field` when using a `Func` and `RawSQL` when users usually know what they are doing.
prefer hanging indent style: ``` GDAL_TO_CTYPES = [ None, ... .... ] ```
IPAddressField is removed from Django so shouldn't be listed.
This seems suboptimal for a number of reasons: - It's doing `len(text)` twice. - If `len(text) == length` it's slicing unnecessarily instead of returning `text`. - Using `fill_text * length` is too much as we'll only ever need `lengrh - len(text)`. Maybe the following would be better: ```suggestion delta = length - len(text) if delta == 0: return text if delta < 0: return text[:length] return (fill_text * delta)[:delta] + text ``` If `fill_text` is more than one character, `fill_text * delta` still generates too much, so we still need to `[:delta]`. Offhand, I'm not sure I can think of anything better that wouldn't be slower.
```suggestion geom_type = gdal.OGRGeomType(self.attrs['geom_type']) ```
I think the warning should happen in this case, since we didn't check if files exist or not, it's better to be safe.
This test name mentions multi-table inheritance but the body of the test has nothing to do with it.
When Python 2 needs a bytestring and Python 3 a normal str, the current usage in Django is to use `force_str()`, which by default encodes in UTF-8 (on Python 2 only).
Use hanging indentation ```python raise FieldError( 'Expression contains mixed types: %s, %s. You must set ' 'output_field to %s.' % ( output_field.__class__.__name__, source.__class__.__name__, source.__class__.__name__, ) ) ```
`self._test_scrypt_upgrade('parallelism', 'parallelism', 2)` fails, it seems we shouldn't take `parallelism` into account.
I think we can add `settings.LANGUAGE_CODE` directly into `E001` (like in `core/checks/caches.py`) and leave this method unchanged.
This branch in untested :thinking:
This is minor, but the double exclamation point feels a little overblown. I'm not sure any exclamation points are needed at all; the text should suffice.
`'rb'` flags are unnecessary.
Same here? ```suggestion __T = r'(?P<hour>[01][0-9]|2[0-3]):(?P<min>[0-5][0-9]):(?P<sec>[0-5][0-9])' ``` Maybe this is a bad idea because of leap seconds 🤷🏻‍♂️
Is this necessary? If not I don't see much harm in changing the type to a list internally or even to always convert it to a `tuple` to avoid hashing errors down the line.
`... Using multi as True` and `...imports as multi`
I don't think it's important to mention PostgreSQL version details in the docstring.
``` class A: __print = cached_property(print, '__print') ``` This will not work and we can easily detect it too.
Use single lines for all these asserts -- we allow up to 119 characters when it improves readability.
I think it would be helpful if this were instead named `invalid_token_re`. The reason is that I coincidentally happened to be reading `csrf.py` and was confused by these lines: https://github.com/django/django/blob/b746596f5f0e1fcac791b0f7c8bfc3d69dfef2ff/django/middleware/csrf.py#L111-L112 The reason this was confusing is that this isn't a regex that matches tokens. It matches invalid tokens. And then I saw this was changed in this PR only a few days ago.
Instead of putting timeout in the `__init__` method, make it a class attribute. Here's an example change where we use this same technique: 8b0014869f666b44cd20692e38073ec0a0a8cb08
this class has a bunch of details of WSGI environ so I think it more accurately belongs in `django.http.request`
This can be single-lined.
This list of registrations was roughly in order of the definitions above, I think we should preserve that
Use single quotes consistently (could be done above and below also).
`git pull --rebase` on your branch should be enough.
I would typically put the "and"s on the previous line
Could you annotate the regex similar to: ``` tld_re = ( '\.' # dot '(?!-)' # can't start with a dash '(?:[a-z' + ul + '-]{2,63}' # domain label '|xn--[a-z0-9]{1,59})' # or punycode label '(?<!-)' # can't end with a dash '\.?' # may have a trailing dot ) ```
master is only supporting Python 2.7 and 3.4+
Might want to join both branches now that they are mostly similar. ```python select_list = [] cols = self.query.default_cols or self.query.select for col in cols: select_list.append(select_idx) select.append((col, None)) select_idx += 1 klass_info = { 'model': self.query.model, 'select_fields': select_list, } ```
I think what Anssi is asking you to do is prove that the following produces LEFT OUTER joins rather than INNER JOINs. ``` class Timestamp(models.Model): at_time = models.DateTimeField() class Event(models.Model): start = models.ForeignKey(Timestamp, null=True) end = models.ForeignKey(Timestamp, null=True) actual = models.DateTimeField() start_datetime = datetime.datetime(2016, 6, 2) end_datetime = datetime.datetime(2016, 6, 4) actual = datetime.datetime(2016, 6, 3) t1 = Timestamp.objects.create(at_time=start_datetime) t2 = Timestamp.objects.create(at_time=end_datetime) Event.objects.create(start=t1, end=t2, actual=actual) Event.objects.create(start=t1, end=None, actual=actual) Event.objects.create(start=None, end=t2, actual=actual) Event.objects.create(start=None, end=None, actual=actual) # this should produce LEFT OUTER JOINS, not INNER JOIN Event.objects.filter(actual__range=[F('start__at_time'), F('end__at_time')]) ``` I'm not sure what those results will be, but the joins should be LEFT OUTER.
either that or leave the attribute name alone and define a `db_column='CaTeGoRy'` to put more emphasis on it.
try to avoid "we", e.g. "Because it's a parent link, all the data is available in the instance, ...
This is not a functional change, it's just a simplification.
Is there a specific reason to `insert(0...` instead of `append`? `basedirs` is transformed to a set just below, so I think ordering really doesn't matter here.
```suggestion self.assertCountEqual(queryset, [self.guitar_book]) ```
Thanks @MatthewWilkes. It was only that sentence/paragraph that needs fixing here, since it's adding the new value that will be unpacked. Any other clean up can wait.
This should be added only if column is nullable: ```python if isinstance(value, Col) and self.is_nullable(value.target): clause.add(lookup_class(value, False), AND) ```
I think we can add `settings.LANGUAGE_CODE` directly into `E001` (like in `core/checks/caches.py`) and leave this method unchanged.
If `formfield.queryset` is already filtered both the outer query and the subquery will have this filter applied which is unnecessary ```suggestion Exists(formfield.queryset.model._base_manager.filter(complex_filter)), ```
use set comprehension (I guess it might be better to defer this task to a separate commit)
better name? `get_filter_kargs_for_object()`
Might want to only run `replace` on `str` params or use `str(param).replace('-', '')`.
I suggest you use the `hint` kwarg for the `'perhaps you forgot a trailing comma?'` part.
`for data in json.loads(...):`
I think we should add this format to the `DATE_INPUT_FORMATS` for backward compatibility.
I've never seen underscores in model names before, since I don't think we are testing that behavior, it may make sense to remove them. Also, please use double quotes for docstrings, I believe that's what the majority of Django uses.
It might be smarter to validate the token first and only modify the session + redirect if it's valid. Otherwise it makes it really easy to create a session just by GET'ing a url (possible DoS vector). It also means you can't pass `accounts/password_reset` as the token and take advantage of our `request.path.replace()` code. It probably means validating the token twice, which is slightly slower. Seems fine to me if an invalid token gets leaked.
You can drop `(object)` as master only supports Python3.
I don't think that it is a proper solution because `get_order_dir()` returns only field name and direction, so it will not properly in case of using database functions in `meta.ordering`. I think we should fix this in `find_ordering_name()`, e.g. ```diff diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py index a44adfc760..fb2a4b23b1 100644 --- a/django/db/models/sql/compiler.py +++ b/django/db/models/sql/compiler.py @@ -716,6 +716,9 @@ class SQLCompiler: results = [] for item in opts.ordering: + if isinstance(item, OrderBy): + results.append((item, False)) + continue results.extend(self.find_ordering_name(item, opts, alias, order, already_seen)) return results ```
```suggestion return '-' + value if neg else value ```
Please remove type annotations. We don't currently use them in Django.
This line can be removed :thinking:.
Nit: I would call this "saved" or "original" patterns, because technically it might not be the default.
I think you missed this one in your recent updates.
proxy model and won't ...
Remove one of these blank lines (should only be two total). (`tests/file_storage/tests.py:454:1: E303 too many blank lines (3)`)
Let me put this differently :-) Is this required to make the test suite pass? If not, I'd prefer we do not include it. If yes, I'd like to look at the failing tests, because they must be weird.
Use list and remove unnecessary whitespace ```suggestion fields = [('name', 'position')] ```
The thing is that even if the ORM doesn't have support for it yet using `distinct()` to implement `(UNION|INTERSECT) ALL` might prevent us from adding proper support in the future. What I suggest doing here is setting `query.combinator.all = kwargs['all']` and preventing using `distinct()` on `CombinedQuerySet`. The difference between ordering and combination operation is that the former operates on the _combined_ set of rows while the latter operates on how these rows are combined. I would suggest that options related to combination be passed as `kwargs` (such as `all`) and actions operating of the combined result (`CombinedQuerySet` instances) be added as methods (`order_by`, _slicing_).
Should this be? ```suggestion for_where=False): ```
Simplify to the following? ```python columns = ['%s.%s' % (self.quote_name(f.model._meta.db_table), self.quote_name(f.column)) for f in fields] params = tuple(InsertVar(f) for f in fields) ```
@akulakov `passed_check` is to check if list is not empty. if it is not empty, method will return no error, otherwise error will be returned (`[] if passed_check else [W020]`).
This can be single-lined ```suggestion '<ul class="errorlist nonform"><li>Please submit at most 1 form.</li></ul>', ```
True about the ML. Regarding the naming for `related_objects/related_m2m` vs `reverse_rel/reverse_m2m`, that's a new API so there isn't historical names to preserve (unlike `many_to_many` vs `m2m`), we just need to pick the best names to represent the relations.
I would like a test that fails if this is removed from the try block.
Well, we _could_ make `on_delete` an actually-required arg to `ForeignObject` right now, and move it even before `from_fields` and `to_fields`, but that would require duplicating the deprecation warning in both `ForeignKey` and `OneToOneField`.
I think we should revert the logging changes as it appears we're adding additional logging calls where they didn't exist before.
It also needs to account about usage of boolean expressions such as lookups (e.g. `Q(Exact('field', 134))`); not all rhs are tuples of the form `(lookup: str, value: Any)` as `Q.__init__(*args)` also ends up in `Q.children`. https://github.com/django/django/blob/a69b0e9cfe0af7cd2deaf55c069453c4c4598604/django/db/models/query_utils.py#L48-L50
`date=rfc850date` isn't needed in the `subTest()` -- since will appear if the assertion fails.
I guess "@" is some convention I don't know about.
Makes sense, let's stick with `raise e`.
Generally we would rather expand the docstring with sufficient explanation rather than include a ticket reference (or at least keep the mention limited to a simple "(#18247)" as in tests).
Please chop all unnecessary blank lines.
It seems the original value of the class should be stored by setUp and then restored here in case the default value of 5 changes.
Use a descriptive name, not Ticket22550.
I suggested that because `annotation_select` now contains expressions other than aggregates. But I didn't notice the method was in the AggregateCompiler, so it probably is just aggregates in that dict. Not worth worrying about I guess.
This could be a bare `super()`.
This could be moved closer to where it's used or even eliminated as an intermediate variable.
```suggestion path = '%s/' % request.path ``` :thinking:
Could we possibly skip the detection feature `if Database.sqlite_version_info >= (3, 29, 0)`? Since this is only present on macOS [could we branch off `platform.platform`](https://docs.python.org/3/library/platform.html?highlight=darwin#platform.platform)? I think this would partially address @claudep's concerns.
I think `request` should be optional.
@felixxm I was thinking about only specifying `css` OR `js` – the default values are empty datastructures which are falsy as well. There's no point in iterating through `_js_lists` or `_css_lists` to find whether an empty datastructure already exists in there. But it's probably a pointless microoptimization.
`value` or `return_value`? or maybe we should swap these lines: ```python if ( not timezone._is_pytz_zone(current_timezone) and timezone._datetime_ambiguous_or_imaginary(value, current_timezone) ): raise ValueError('Ambiguous or non-existent time.') return timezone.make_aware(value, current_timezone) ``` :thinking:
Maybe: ```python for name, value in self.scope.get('headers', []): corrected_name = name.decode('latin1').upper().replace('-', '_') if corrected_name not in ('CONTENT_LENGTH', 'CONTENT_TYPE') corrected_name = 'HTTP_%s' corrected_name ```
use a single line here -- lines up to 119 characters are preferred when it helps readability.
We should probably keep this class. I think I'd call it `SitemapIndexItem`, and give it a docstring. 🤔 I guess deprecating the `__str__()` usage will keep everyone on the same page. (Without something like this, we're still passing a list of pair or dicts or ... — given that we have the class already, we may as well keep it.)
Yeah, this is a good point, reuse an ordering if possible (maybe even force it)
We can remove `'book_join'` from `order_by()`.
Shouldn't we replace `and` with `or`? what about a file with a path like `'/vsimem/nonexistent.tif'`
@charettes, any reply here? I guess we shouldn't block the patch about the issue with backwards migrations if we can't find a simple solution.
Note that this code is most probably going away in the next (post 1.10) version of Django.
You can remove parentheses.
Do we need to check `removal_value`? It should be enough to check that `new_value` is not en empty set, I cannot imagine a different scenario :thinking: ```suggestion if new_value: ```
They should always be the same but you might want to use `model._meta.object_name` instead.
I would also consider turning that into an instance method called something like `get_runner()` and starting each test method with `runner = self.get_runner()`. The reason is that instantiating a runner is "cheap." You also don't have to think / worry about whether the runner has state that you might unwittingly be carrying from one test to the other (e.g. attributes set when a method is executed).
Can you just add the managers and admins including their names, please. I think that I'd expect the names to show up in the message if I define them in my settings.py
The latin1 encoding mess is a WSGI thing, Django wasn't always a WSGI framework, and who knows what will be the next best thing in the future. When these things were contained in the WSGIHandler that made sense, but if we extract a reusable function it shouldn't be tied to such specifics.
Another vote for moving this logic into apps as a private method.
This version works fine, however it's a bit confusing that we concatenate escaped and unescaped string. I would use `middle` for both, e.g. ```python punctuation_count = len(middle_unescaped) - len(stripped) trail = middle[-punctuation_count:] + trail middle = middle[:-punctuation_count] ```
I would also consider turning that into an instance method called something like `get_runner()` and starting each test method with `runner = self.get_runner()`. The reason is that instantiating a runner is "cheap." You also don't have to think / worry about whether the runner has state that you might unwittingly be carrying from one test to the other (e.g. attributes set when a method is executed).
Seems wrong to hard code this list when Django fully supports user-written commands.
For a gzip file, I believe this will cause the browser to unzip it. ``` $ python3 >>> import mimetypes >>> mimetypes.guess_type('f.tar.gz') ('application/x-tar', 'gzip') ``` But I'm guessing the user wants the mime type to be `application/gzip` (or similar) with no encoding. [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding) > The Content-Encoding entity header is used to compress the media-type. When present, its value indicates which encodings were applied to the entity-body. It lets the client know, how to decode in order to obtain the media-type referenced by the Content-Type header. I know of at least one third party Django app that has this issue: https://github.com/johnsensible/django-sendfile/issues/38
Or you can still use f-strings for this too: ```python number = f'{number:_.{decimal_pos}f}' ```
Combining this commit with the next one seems fine. It works the same as override_settings, but you can use `with self.settings`.
rather than custom caching with a dict, this might be clearer with a module-level function using `@lru_cache(maxsize=2)`, with the current value of `USE_TZ` as the only argument. It would save some lines and clarify it's a cache.
I wouldn't create the postgis_topology extension, as AFAIK it is not used currently in Django.
`Company` doesn't have a default ordering so we need to use `assertCountEqual()` or add `.order_by(...)`.
oh that's what i've missed. thats true there is something wrong on that line
In such case we will need to calculate this multiple times because it is inside a loop. Moreover `if` is for a deprecated usage, so ...
I think that `ValidationError` is only raised out of `Field.to_python()`, not `Widget.value_from_datadict()`, so this can be simplified: ```suggestion widget = field.hidden_widget() value = self.form._widget_data_value(widget, self.html_initial_name) try: initial_value = field.to_python(value) ```
I think the prompt should still happen if `destination_path` is None since we don't check existence in that case. Only skip the prompt if we're certain the destination doesn't exist.
~~Should we check `posix` instead?~~ ```suggestion if sys.platform != 'win32': ```
This docstring doesn't have much value, please remove it.
I think this should be a `ValueError`
blank line not needed
I'd prefer something that makes it slightly more obvious where the exceptions are expected to happen: ``` python try: site = getattr(obj, field.name) except Site.DoesNotExist: pass if site is not None: object_domain = site.domain ``` This is a slightly different issue, but it's not clear if `Site.DoesNotExist` can actually happen (no tests fail if it's removed).
single line please
"Test checks MySQL query syntax"
`__str__` is not necessary.
We don't need to add the `_` prefix to the new methods. They are considered a private API even without it.
Please don't change all the other unaffected lines.
yeah I don't see a reason why the imports are not top-level and we don't call the functions directly.
I think that should be `hire_date` (two words).
If POSTGIS_TEMPLATE exists, it will be a string, not a tuple. So you'd better make the tuple in the execute method below instead.
Use meaningful test names, e.g. `test_no_arguments`. Also I would have 3 tests and use a loop a `subTest()` to test the three cases for each template. For example: ``` tests = (('0', 'votes'), ...) for value, expected in tests: with self.subTest(value=value): output = self.engine.render_to_string('pluralize01', {'value': value}) self.assertEqual(output, expected) ```
multi-line as other messages: ``` "The model cannot have more than one field with " "'primary_key=True'.", ```
I think `f.remote_field.through` should always be available.
might as well use `setdefault` in the test as well
Please use single quotes.
This can be moved outside of `try...except...`.
I second Tim. Unless a very specific use case, mixins should be on the left.
However, I think it's worth to keep it for backends without built-in converters.
How about making these two flags `False` by default, thus making the feature not causing backwards incompatible changes.
`depth a recursive subquery references adds` → `depth recursive subquery references add`
We can leave an assertion for `value()`, but the two above assertions should also be added. It's not enough to check that `as_p()` is not `None`.
This looks to be incorrect, there should be if not os.path.exists() protection, or better yet, have _createdir() do (very pseudocodish) try: makedirs(); except: if already-exists: pass; else raise EDIT: Sorry, was reading the old version of _createdir()...
version -> pickled_version `current_version = get_version()` (so we don't have to call it multiple times) check `if version:` first so we can skip `get_version()` if no version on pickled model.
Given the logic of this method, I'd reverse the conjuncts here: ``` If the lookup is simple (no double underscores) and the node is carrying generic foreign key lookup... ``` Also, the project doesn't make use of `:param lookup:` and `:return:` annotations.
You can have a look at 9bf652dfd6a738fd841471f6abd71cba1b206d9f as an example of how we introduced object level permission to authentication backends.
`This test` is unnecessary. Please write `skipUnless` in one line e.g. `@unittest.skipUnless(connection.vendor == 'mysql', 'MySQL specific test.')`.
To catch this as a `IntegrityError` on Oracle we need to add `ORA-00001` to the wrapper: ```diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py index 4d2f5b51f1..3908aebda1 100644 --- a/django/db/backends/oracle/base.py +++ b/django/db/backends/oracle/base.py @@ -73,7 +73,7 @@ def wrap_oracle_errors(): # _C00102056) violated - parent key not found' # Convert that case to Django's IntegrityError exception. x = e.args[0] - if hasattr(x, 'code') and hasattr(x, 'message') and x.code == 2091 and 'ORA-02291' in x.message: + if hasattr(x, 'code') and hasattr(x, 'message') and x.code == 2091 and ('ORA-02291' in x.message or 'ORA-00001' in x.message): raise IntegrityError(*tuple(e.args)) raise ```
Can you use `['indexes']` here? If not, the list comprehensions in the next lines have a `not in None` and will fail.
I see. Any thoughts about passing the _local_ field instead of the remote one and the model it's from? e.g. in the case of tests below `field_name` would be `'uuid'` instead of `'question_with_to_field'`. That's how the other `to_field` enabled admin views work and what `to_field_allowed` expects. It also feels like a nicer API to me and would allow you to stop passing `app_label` and `model_name`.
I will move this test to the `model_forms/tests.py`.
Add trailing comma.
Something is wrong with the indentation here, you might want to use `flake8` from the top directory to spot warnings.
You've added seven asserts, but only two are related with this fix, so I think it will be better to send: ```python self.assertEqual(stringformat([1, None], 's'), '[1, None]') self.assertEqual(stringformat({1, 2}, 's'), '{1, 2}') self.assertEqual(stringformat({1: 2, 2: 3}, 's'), '{1: 2, 2: 3}') ... self.assertEqual(stringformat(object(), 'd'), '') self.assertEqual(stringformat(None, 'd'), '') ``` in advance in a separate PR.
Just make it: ``` if len(expressions) < 2: ``` That avoids problems with sqlite and mysql. GREATEST(x) is always x on backends that support single arguments anyway.
Use single quotes consistently.
Does it work if you use `override_settings` for this too? That would be cleaner.
No trailing comma (see also 83a36ac49a98d5d8801ed8428612e9a56aeb8699).
This seems a bit redundant. I believe that the feature flags should be used as much as possible, instead of checking against vendor names.
This is the same as the previous assertion. I'd think only 1 assertionis needed since all the `as_*` methods use `_html_output()`.
Chop blank line.
Hi, I was looking for a domain validator in Django and I've found this PR. I think a domain name should also be checked against a max length, as `URLValidator` does (https://github.com/django/django/blob/master/django/core/validators.py#L137).
`~` is not a supported operator, this should be `-`.
use single quotes for consistency
We use `new_default` only when `old_field.null and not new_field.null` so IMO it's fine to use ```diff diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py index bfccf5e8fb..8cd5e11bbf 100644 --- a/django/db/backends/base/schema.py +++ b/django/db/backends/base/schema.py @@ -675,17 +675,17 @@ class BaseDatabaseSchemaEditor: # 3. Replace NULL constraint with NOT NULL # 4. Drop the default again. # Default change? - old_default = self.effective_default(old_field) - new_default = self.effective_default(new_field) - needs_database_default = ( - old_field.null and - not new_field.null and - old_default != new_default and - new_default is not None and - not self.skip_default(new_field) - ) - if needs_database_default: - actions.append(self._alter_column_default_sql(model, old_field, new_field)) + needs_database_default = False + if old_field.null and not new_field.null: + old_default = self.effective_default(old_field) + new_default = self.effective_default(new_field) + if ( + not self.skip_default(new_field) and + old_default != new_default and + new_default is not None + ): + needs_database_default = True + actions.append(self._alter_column_default_sql(model, old_field, new_field)) # Nullability change? if old_field.null != new_field.null: fragment = self._alter_column_null_sql(model, old_field, new_field) ```
`ERROR` in `assertLogs()` is still missing: ```python with self.assertLogs('django.dispatch.dispatcher', 'ERROR') as cm: ```
Is there a reason to add a `pass` statement here? The docstring should be enough, you can take a look at [Why does python allow an empty function (with doc-string) body without a “pass” statement? (stackoverflow)](https://stackoverflow.com/a/17735171).
This should probably be updated with the new gdalinfo, which basically includes one more line in the coordinate system: `AUTHORITY["EPSG","3086"]]`
Why `stacklevel=2`? :thinking: IMO we can remove it.
Should also include `block_size` and `parallelism`
It should give 'Modification de Title et Historique.'. I guess a gettext call is missing inside the `LogEntry.get_change_message`.
```suggestion return ''.join([ self.handle_word(word) for word in words ]) ``` I changed `handle_word` to return `word` in remaining cases.
I think `assertIs` was used because `assertTrue(1)` doesn't fail.
On second thoughts creating a URL with to_field isn't required to test this issue – so the string interpolation can simply be removed: ```suggestion admin_user_change_url = reverse( "admin:%s_%s_change" % (user._meta.app_label, user._meta.model_name), args=(user.username,), ) ```
`acquire_lock` was added for internal usage in 6448dd833524ac3fc503506b624841c9d642de8a, so I don't see a need for a deprecation.
This logic could be consolidated to avoid repeating the same conditionals twice. Just check both `max_num` and `absolute_max` independently for `None` and set default as needed, then once they are both set, check that `absolute_max > max_num`. The minor difference in error message here doesn't justify all the repeated logic, IMO; a simple "absolute_max must be greater than max_num" is fine.
I think we should avoid writing new test suites that use fixtures. Fixture loading is extremely slow, and it's actually harder, IMO, to follow what the data should look like once you've aggregated it. I would suggest either creating all the data in a setUp method, or creating the data you need at the top of each test.
Why is this way preferable to ```suggestion def _check_token_present(self, response, csrf_secret=TEST_SECRET): ```
Not sure we want to use `settings.CSRF_COOKIE_NAME` for this. What about `CSRF_SESSION_KEY = '_csrf_token'` just like we do with `LANGUAGE_SESSION_KEY`.
We should mark all tests and model states that use `index_together` in `tests/migrations/test_autodetector.py` for removal. We can also move them to a common class for easier remove when deprecation ends.
This is the failing assertion on Windows. I think it might have to do with the file being written with Windows vs. Unix line endings. If you remove the assertion, the rest of the test passes.
This docstring is the same as for `wait_page_loaded()`. Do we even need it in either case? Or perhaps the docstring should explain the difference between these two methods.
Manipulating `second` here is not strictly necessary, `first.save()` raises the `IntegrityError`. I believe the reason for `second` to be manipulated here is to show the difference with initially deferred constraints behavior. If that's the case, perhaps a function could show that the same code passes under initially deferred constraints but not under immediate constraints. Something like: ```diff diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py index 067b38cfb6..b3257b6789 100644 --- a/tests/constraints/tests.py +++ b/tests/constraints/tests.py @@ -196,17 +196,17 @@ class UniqueConstraintTests(TestCase): first = Product.objects.create(name='First', shelf='Front') second = Product.objects.create(name='Second', shelf='Back') + def swap(): + first.shelf = 'Back' + second.shelf = 'Front' + first.save() + second.save() + with self.assertRaises(IntegrityError): with set_constraints(unique_shelf=IMMEDIATE): - first.shelf = 'Back' - second.shelf = 'Front' - first.save() - second.save() + swap() - first.shelf = 'Back' - second.shelf = 'Front' - first.save() - second.save() + swap() first.refresh_from_db() self.assertEqual(first.shelf, 'Back') ```
> Please leave feedback on my solution, why it was not good enough, if it's possible? It's unnecessarily complicated.
Ah yes, and if we `lru_cache` the main `get_srid_info`, we can get rid of that caching.
`0` is unnecessary: ```suggestion return (10, 2) else: return (5, 7) ```
This should use longer lines (up to 119 characters) or hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
Wrap at 80 characters.
I think we should raise a more descriptive error, maybe the same as in `add()` and `set()`.
We would fallback to an empty `bytes` string as well ```suggestion boundary = opts.get('boundary', b'') ```
I think you can remove temporary `msg`, also dot is missing and probably `preceding` should be uppercased and `n` should be lowercased. ```python raise NotSupportedError( 'PostgreSQL does not support RANGE BETWEEN n PRECEDING AND n ' 'FOLLOWING.' ) ```
Probably, I don't think the benefit is worth the cognitive load of someone looking at the test and wondering about it.
could we inspect `query.order_by` instead? Maybe it's fine as-is, but that seems a bit less fragile.
`test_changed_message_uses_form_lables`? The test case is already called `...HistoryView...`
I think it's fine to leave it inside a `try` block.
I would revert these changes, a string representation of `condition` and `deferrable` doesn't need and extra quotes.
quit() .... to avoid a dead.... (chop "we" stuff)
``` return datetime.datetime(1970, 1, 1, tzinfo=timezone.utc) ```
I would add `('availability', BooleanFieldListFilter)` to the `BookAdminWithTupleBooleanFilter` instead of creating a separate class.
This condition is problematic on databases that use random rather than serial pk values (failure observed on CockroachDB).
`return HttpResponseNotAllowed()` should be all that's required.
The use of Empty that is imported from models.fields looks very weird until one looks at its definition. Can't you use object() directly? Edit: No, you can't, Python2 won't let you. Still, the use of a class imported from fields feels hackish.
As above -- it seems somewhat useless to implement this test for every subclass. At the least, maybe there could be a base test class that implements some common tests if that's warranted.
create_initial_data and create_big_data below
Any problem with allowing `self.model = None`. I think conditional attributes which require `hasattr` isn't the best design.
I'd put this after `_check_unique_together` here, so it's grouped with the other callers of `_check_local_fields`
Please add a docstring explaining this.
This leaves a "dummy" SQLite database on the filesystem after running the tests.
Could move `executable = '/usr/bin/python'` to a class attribute.
Need to test that result is as expected, not only calling it.
Wrap docstring at 79 chars
Can we replace this with `ELLIPSIS = '…'` rather than some unrelated marker character? This makes it easier for consumers of the new paginator to use the correct character.
Please use assertRaisesMessage to verify this is the ValueError we expect.
``` "...when `extra_context` is passed to all admin urls." ```
Please chop the comma here.
This second assertion isn't what you want (It'll pass before and after the code change I believe.) Instead, you should be setting `INSTALLED_APPS` to a tuple with duplicates and using `with self.assertRaises(ImproperlyConfigured)`
The fact only a single result is returned is a strong enough assertion here. Some database backend could translate `__isnull` to some different SQL.
You can drop this assertion, the way `from_date` is constructed and that this branch is behind the `if day` one makes it impossible to reach.
We should keep both assertions: ```suggestion self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False) self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True) ```
Use [PEP 257](https://www.python.org/dev/peps/pep-0257/) verb style: "Update..."
I think you should use `type` not `__class__`. At least in python 2 this will break if the class does not inherit from `object`.
The last parenthesis should be moved to the next line (as in the `test_dense_rank`).
When calling `on_commit` there are basically two modes: - there is no transaction in progress, so we execute the function right away - we are in an atomic block, so we register the function to execute it later (`self.run_on_commit.append(`) The first case is handled by the PR, but not the second one. And I'd think that we would need to handle a robust execution in the second case too. Does that make it clearer? :)
Super — let me give that a run. Thanks @felixxm
I'm torn whether or not this copy is necessary. When we resolve the expression we do a copy of the subquery anyway. Even if the queryset was cached and evaluated, the resolving will copy a new queryset anyway. ```python qs = Model.objects.whatever() sq = SubQuery(qs) list(qs) # this evaluates the queryset that subquery is holding onto OtherModel.objects.annotate(subq=sq) # queryset is copied here anyway, previous eval doesn't matter ``` Let me know if you can poke holes in my reasoning (it is new years day after all...).
```suggestion ''', [os.devnull]) ```
Committed this change in ab643cd63402ef8ed4776faebc0ed4f00b933e1d because @apollo13 also stumbled on it.
I think we should wrap this in a `try... except...` in order to catch any final lingerers: ``` try: from django.utils.deprecation import RemovedInDjango40Warning except ImportError: raise Exception( 'django-admin.py was deprecated in Django 3.1 and removed in Django ' '4.0. Please manually remove this script from your venv and use ' 'django-admin instead.' ) ``` (Since a `pip install -U Django` isn't ever going to actually delete it.)
I think we don't need to define `msg` variable: ```suggestion with self.assertRaisesMessage(ValidationError, 'This field is required.'): ```
If I can bring a little bit of nuance to my position. Yes, Python supports aware time. However, the majority opinion in Django contributions (AFAIK) is that using this feature is likely to result in worse design than not using it. Many users aren't experts able to delineate narrow sets of circumstances under which code manipulating aware times is more likely to be correct (e.g. "my code will never be used outside HK and HK will never introduce DST [alternative: I will write a unit test that fails if HK ever introduces DST]"). The recommendation would be to manage the time and the timezone in separate objects. There are other cases where Django diverges from Python's standard behavior. For example, I have found the transaction behavior mandated by PEP 249 less than helpful for most users and I have decided to default to autocommit in Django instead.
When considering my own approach for this same problem, I specifically avoided using xor as when using it on printable characters, you wind up with lots of unprintables you probably don't want to put in your page. Two approaches I considered were: 1. restricting tokens to hex ascii, and xoring their binary forms 2. using a "caeser cipher" approach, where each char is offset in the list of valid chars by the corresponding char in the random pad. [modulo the list of chars, of course]
I'd use `*args, **kwargs` for arguments that are simply passed-on without being accessed or modified, to reduce the number of places that a change in signature would need to be reflected, and to avoid having to repeat the same default values. We've had issues in the past in Django (in forms/formsets, IIRC) where the default value for some parameter to a superclass method changed, or a new optional argument was added, but nobody remembered to update subclass method signatures accordingly, causing bugs.
I think you mean `ByteType`
Ticket describes an issue when `USE_L10N` is off, so I think we should check both combination: ```python with self.settings(USE_L10N=True, DECIMAL_SEPARATOR=','): ... with self.settings(USE_L10N=False, DECIMAL_SEPARATOR=','): ... ``` Please move tests for a thousand separator to a separate commit because they work without this patch.
I think the `_module_exists` and argument name could be improved. What about ```suggestion def _contains_subclass(subclass_path, candidate_paths): ```
I think it's better to use `module_file` and don't override builtins.
Use this style: ``` self.assertEqual(field.check(), [ ]) ```
I'm not sure if there's much benefit to this warning. Removing it would allow third-party apps that set it to have warning free backwards-compatibility.
could you limit line length to 120 characters so horizontal scrolling isn't required in GitHub? missing whitespace for: `{% autoescape on%}`
Doesn't seem required now that the test is skipped on non-Oracle.
Please add a trailing comma: ```suggestion [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'], ```
adding trailing comma
I think we prefer a different indentation style in docstrings, i.e.: ```python """ A Q object with an empty condition should be rejected as the conditional expression in a Case(). """ ```
Hey @felixxm. In the end we went for not having the "or subclassed" so these changes will disappear. (`checks.txt` did previously have this adjustment, but it's gone now. These are just leftovers to be removed.)
`Backend` supports negative precision, `SQLite` does not: ```suggestion raise ValueError('SQLite does not support negative precision.') ```
I moved a cleanup part to a separate commit.
I didn't dig much into this ticket, but is it still possible to have a value type not in the list handled in `_resolve_output_field`? If yes, could we keep a test for such a value (maybe in expressions tests).
add trailing comma
The thing is that even if the ORM doesn't have support for it yet using `distinct()` to implement `(UNION|INTERSECT) ALL` might prevent us from adding proper support in the future. What I suggest doing here is setting `query.combinator.all = kwargs['all']` and preventing using `distinct()` on `CombinedQuerySet`. The difference between ordering and combination operation is that the former operates on the _combined_ set of rows while the latter operates on how these rows are combined. I would suggest that options related to combination be passed as `kwargs` (such as `all`) and actions operating of the combined result (`CombinedQuerySet` instances) be added as methods (`order_by`, _slicing_).
URL should be capitalized
`related_manager_name` not `related_model_name`
override `__init__()` instead. after `super()` then `self.style = no_style()`
I think it's the right class: ``` In [38]: class desc: ...: def __get__(self, instance, cls): ...: if instance is None: ...: return self ...: return instance.__dict__['_%s__mangled' % cls.__name__] In [39]: class A: ...: d = desc() ...: ...: def __init__(self): ...: self.__mangled = 42 ...: In [40]: A().d Out[40]: 42 ```
Actually, I think we can skip the router stuff and just use `django.db.connection`. These tests aren't run with custom routers so this'll always be run on the default database. (so we can move the skip condition to `test_long_column_name`).
I think we can reuse `rels_to_update`.
`return '%s-%s-%s' % (y or 0, m or 0, d or 0)` can be moved here.
Is `plan` meant as the second argument? Looks like we're missing a test for this branch.
``` "...when `extra_context` is passed to all admin urls." ```
This bit wasn't broken before, right? So, there should be already tests covering this behavior.
We can't assume six is installed; Django bundles it. This line needs to be `from django.utils import six` instead.
In each of the three cases, can you change `False` to `None` and add a trailing comma. (I think we *could* also move the placeholder line to the top to allow it to be overridden by the context, but it may not be worth it as I'm not sure the attributes passed down can be specified for each select individually...)
plus use hanging indentation, e.g. ``` Person.objects.get_or_create( first_name="George", defaults={"last_name": "Harrison", "birthday": lambda: date(1943, 2, 25)}, ) ```
`GenericForeignKey` or `GenericRelation`? Shouldn't we move this logic to the `ReverseGenericManyToOneDescriptor`? :thinking:
Drop the comma/space in `[FakeFieldFile(), ]`
Can we wrap this line after the comma.
Do we need to swap arguments? IMO we want to keep the same order as in `SIMILARITY()` calls. ```suggestion class TrigramWordSimilarity(TrigramBase): function = 'WORD_SIMILARITY' ``` e.g. - `TrigramWordSimilarity('Cat sat on mat.', 'cat')` should be equal to `0.30769232` instead of `1` - `TrigramWordDistance('Cat sat on mat.', 'cat')` should be equal to `0.6923077` instead of `0`
I'm not sure if the included traceback will give enough information to debug this, but it seems like a message something like "Rendering `<template name>` raised an exception, so {% include %} will render as an empty string." might be more helpful.
Have a look at the `IntegerField` how it's done there. This has the advantage, that your `StepSizeValidator` can be reused. And it shall be reused, because `step` can also be applied to an `IntegerField`.
I can have a look after lunch @adamchainz — thanks for your work! 🏅
We shouldn't raise errors about private APIs, we can error nicely when using `Prefetch` with `raw()`, e.g. ```python if queryset is not None: if isinstance(queryset, RawQuerySet) or ( hasattr(queryset, '_iterable_class') and not issubclass(queryset._iterable_class, ModelIterable) ): raise AttributeError('Prefetch querysets cannot use raw() and values().') ```
Should this be cached? The number of times validators are instantiated, and the associated cost with loading in the 1000 most common passwords each time strongly suggests that it should be.
This error is raised when instantiating so we don't need to include a `route` in the message.
I think these temporary variables and blank lines are unnecessary, maybe sth like that: ```python return self.window_frame_start(start), self.window_frame_end(end) ```
This isn't really a state you can end up with, because you have two leaf nodes in one app. `manage.py migrate` will not work: https://github.com/django/django/blob/master/django/core/management/commands/migrate.py#L78
I'm not completely convinced we should have this as a lookup. The API feels very strange, and we have the `TrigramDistance` expression which feels more similar to other things. `trigram_similar` is fine.
I think a `Warning` is more appropriate here, something like "URL namespace {} is not unique, you may not be able to reverse all URLs in this namespace". Errors prevent management commands from running, which is a bit severe for this case.
The other option is to wrap the file with something like: ``` from django.core.files import File class ChunkedFile(File): DEFAULT_CHUNK_SIZE = 4096 def __iter__(self): return self.chunks() return StreamingResponse(ChunkedFile(open(fullpath, 'rb'))) ``` I considered using this wrapper for FileResponse.
I don't think it's worth it. Someone using a non-browser name doesn't seem like a common mistake.
```suggestion reg_key_value, _ = winreg.QueryValueEx(reg_key, 'VirtualTerminalLevel') ```
This formatting change is not related with a bug fix, please revert.
I suggested that because `annotation_select` now contains expressions other than aggregates. But I didn't notice the method was in the AggregateCompiler, so it probably is just aggregates in that dict. Not worth worrying about I guess.
Doesn't matter much, but something like `AuthenticationMiddlewareSubclass` would be more descriptive about the purpose.
Could we call this `BaseManager` instead? That's what it is now...
I'd add `HAS_CX_ORACLE` flag to use it here: ```python try: import oracledb except ImportError: import cx_Oracle as oracledb HAS_CX_ORACLE = True else: HAS_CX_ORACLE = False ... @cached_property def data_types_reverse(self): # RemovedInDjango51Warning. if HAS_CX_ORACLE and self.connection.cx_oracle_version < (8,): ```
Ah, yes. Good observation. 🙂
You can just say `expected`. (It's clear from the next line.)
`remove_index()` accepts `concurrently`, moreover `self.allow_migrate_model()` check `self.allow_migrate_model()` check is missing, IMO we should use ```python if self.allow_migrate_model(schema_editor.connection.alias, model): schema_editor.remove_index(model, self.index, concurrently=True) ```
Despite the existing style of the first test, I would remove the intermediate `f` variable in the new tests as it'll help balance line lengths and make things more readable.
Not sure which of `defer` or `deferrable` makes more sense. The latter might be preferable if we choose the `Deferrable(Enum)` solution.
Use `no_color=True` to about matching against escape sequences. It looks like `verbosity=2` is also unnecessary? ```suggestion call_command("showmigrations", format='list', stdout=out, no_color=True) ```
Positional arguments cannot follow keyword arguments.
@lothemar I realized that previous assertions were correct. The current tests work even without this patch. I will restore them, sorry.
Imports should be wrapped at 79 chars. Please move `Choice` to the next line: ```python Bookmark, Box, Category, Chapter, ChapterXtra1, Child, ChildOfReferer, Choice, City, Collector, Color, Color2, ComplexSortedPerson, CoverLetter, ```
While my tests suggest that iterating a set is ~8% slower in this case, it is a negligible difference once you look at the whole `_expire_cache` function.
I think it would be better to use the same parameter formatting style as the `save()` method below.
I'd rather not pollute the global namespace. Could you use a temporary `Apps` (e.g. https://github.com/django/django/blob/master/tests/migrations/models.py#L24)
Please use a hanging indentation: ``` python self.assertEqual( set(...), {...}, ) ```
the active language's
Can you add a `call_count` check, please: https://github.com/django/django/pull/4901/files#diff-c11e6432df7086eda3dfb9ab8e5b2839R1491
can you explicitly wrap them in brackets: `args += ["-U", user]` please. That makes it clearer to understand the code.
parenthesis to next line
I thought the if style of the old PR was a bit better (with more equal line lengths).
`from django.core import signing`
We cannot make serial pk assumption: ```diff diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py index 8b54611010..ea68a105d6 100644 --- a/tests/model_forms/tests.py +++ b/tests/model_forms/tests.py @@ -1765,10 +1765,12 @@ class ModelMultipleChoiceFieldTests(TestCase): f.clean([c6.id]) def test_model_multiple_choice_field_validate_choices_called_properly(self): + c1 = self.c1 + class CustomModelMultipleChoiceField(forms.ModelMultipleChoiceField, TestCase): def validate_choices(self, queryset, field_name, selected_choices): self.assertIsInstance(queryset, models.QuerySet) - self.assertQuerysetEqual(queryset.order_by('id'), [1], lambda a: a.id) + self.assertSequenceEqual(queryset, [c1]) self.assertIsInstance(field_name, str) self.assertEqual(field_name, 'pk') self.assertIsInstance(selected_choices, frozenset) ```
This looks unnecessary.
So, I've been hemming and hawing on whether to mention it, because it conceptually works when in the error message, but it still seems slightly _'off'_ to me that the warning would say `SECRET_KEY_FALLBACK` when the setting is `SECRET_KEY_FALLBACKS` (plural). I guess if we're not going to say _which_ one errored (which _we could_, using hints) I think it'd make more sense to say `One of your SECRET_KEY_FALLBACKS has less ...`
I would directly check against `argon2.low_level.ARGON2_VERSION`. What I want to prevent is a new argon version increasing the version number and we have to issue a new django release to take advantage of that.
looks to me like it could actually be a set comprehension for more speed again since it's only used for N `not in` checks below
Besides, this change doesn't improve speed. From experience, any change will slow down reviews and hinder this from being merged ;)
_"Use single quotes for strings, or a double quote if the string contains a single quote. Don’t waste time doing unrelated refactoring of existing code to conform to this style."_
I would stick with the one line if/else statements. The style guide says, "Don’t limit lines of code to 79 characters if it means the code looks significantly uglier or is harder to read."
It should be enough to use `lru_cache` instead, e.g.: ```python @functools.lru_cache(maxsize=128) def import_string(dotted_path): ... ```
`Test passing` is unnecessary, IMO, maybe: ```suggestion # A token of length CSRF_SECRET_LENGTH. ```
Please remove this unrelated change.
The `('443' if self.is_secure() else '80')` block is repeated twice - can we extract it to a variable at the start? ``` port_in_x_fw_host = False default_port = ('443' if self.is_secure() else '80') ```
Ok, I don't think it needs to be skipped on sqlite (since it passes). A note in the docstring that it's only a problem on certain databases would be helpful.
You should be able to pass `is_active=False` to `create_user()`.
```suggestion self.resolve_model_field_relations(model_key, name, field) ```
Instead of this file dance, it would be easier to use a `tempfile.NamedTemporaryFile`. It is also safer wrt parallel test runs.
I searched a bit and couldn't find the exact ticket but the reported issue had something to do with Django's `lazy` logic and could be triggered even with ASCII only chars.
Removing this code now requires us to pass a backend into `force_login` if multiple authentication backends are configured. Was that intentional? It doesn't seem like this requirement is in line with what `force_login` is meant to be. After updating to 1.10, I now have hundreds of calls to `force_login` in my unit tests that need updating. This is an easy mechanical update, but was this commit intended to be a test-code-breaking change in this way? If not, I'm happy to go file a bug...
`depth a recursive subquery references adds` → `depth recursive subquery references add`
has the side effect of shortening... (no dash needed)
prefer `setUpTestData` since that executes once per test class instead of once for every method
I would add a flag to `Index`, e.g. `is_functional` that could be used here together with `supports_expression_indexes` to skip such indexes, e.g. ```python if not index.is_functional or self.connection.features.supports_expression_indexes: output.append(index.create_sql(model, self)) ``` Also we should return `None` in `_create_index_sql()` and `_delete_index_sql` if `index.is_functional` and `self.connection.features.supports_expression_indexes`
The thing is that even if the ORM doesn't have support for it yet using `distinct()` to implement `(UNION|INTERSECT) ALL` might prevent us from adding proper support in the future. What I suggest doing here is setting `query.combinator.all = kwargs['all']` and preventing using `distinct()` on `CombinedQuerySet`. The difference between ordering and combination operation is that the former operates on the _combined_ set of rows while the latter operates on how these rows are combined. I would suggest that options related to combination be passed as `kwargs` (such as `all`) and actions operating of the combined result (`CombinedQuerySet` instances) be added as methods (`order_by`, _slicing_).
```suggestion # RemovedInDjango50Warning: when the deprecation ends, remove # mark_safe() call. ```
Having `self.validate_number` being called twice doesn't matter too much, I think.
This is inconsistent but I think the patch can land as is and the test be modified later on based on the direction of [#24082](https://code.djangoproject.com/ticket/24082).
`not 100 < status < 599` might look simpler
I think this is a bit vague. Perhaps `_check_single_primary_key`.
Wrap at 79 chars.
Yes, consistency matters :-) Maybe @timgraham can bring his expertise here.
I've checked and `icontains` is not affected, we can remove this test. Sorry I should checked this first.
Maybe `client_servers` without a docstring.
I wonder if the `isinstance()`condition results in any performance savings? I tend to think always casting might be simpler.
We can reuse `Author` model. If we need two `CharField`s then we can add e.g. `alias` to the `Author`.
This should be display when `verbosity > 0`.
Please use a hanging indentation: ``` python self.assertEqual( set(...), {...}, ) ```
Make it a "private" method: `_initialize_signal_car` just to make it obvious it's not a test method.
Can you reference the ticket number in the docstring, please.
Yes only `BigInteger` breaks alphabetical order (in all backends), I don't want to break it more.
We should check if this statement works instead of returning `name` field, e.g. ```python def test_raw_sql_with_inherited_field(self): DepartmentStore.objects.create( name='Angus & Robinson', original_opening=datetime.date(2014, 3, 8), friday_night_closing=datetime.time(21), chain='Westfield', ) tests = ( ('name', 'Angus & Robinson'), ("case when name='Angus & Robinson' then chain else name end", 'Westfield'), ) for sql, expected_name in tests: with self.subTest(sql=sql): self.assertSequenceEqual( DepartmentStore.objects.annotate( title=RawSQL(sql, ()), ).values_list('title', flat=True), [expected_name], ) ```
Some checks require database access e.g. mysql.W002 ( https://docs.djangoproject.com/en/3.0/ref/checks/#database ) , django-mysql's checks ( https://django-mysql.readthedocs.io/en/latest/checks.html ). Those I've linked to don't strictly need access to an existing schema but I think changing this could be considered a breaking change.
Welcome to the wonderful world of `contenttypes` where clearing a GFK (even an optional one) actually deletes the objects.
I've removed an extra newline that caused a flake8 error.
`IS_DST_PASSED` is confusing, maybe `NOT_PROVIDED`.
`Test passing` is unnecessary, IMO, maybe: ```suggestion # A token of length CSRF_SECRET_LENGTH. ```
Fair enough if there is precedence for it. I thought `ImproperlyConfigured` was usually used for settings or something affected by a setting being incorrect.
I'm not sure about the `backend` terminology here. I think naming this function `get_password_validators` would be more consistent with the rest of the the code.
repetitive with method docstring
You could just do this: ```suggestion JOIN pg_namespace nsp ON nsp.oid = c.relnamespace AND nsp.nspname = current_schema() ```
Better to rewrite docstrings in a separate commit.
Please test the entire message.
comparisons with `False`, `True`, and `None` should use `is` or `is not`, rather than `==` or `!=`
This should use `assertEqual` and not `assertCountEqual`, otherwise there is no point in entirely recreating the expected warning, you could just hardcode 1 or 0.
`s/_managed/_unmanaged/` I think.
my preferred style is: "#17903 -- Inactive users shouldn't have permissions..."
Interesting. I just tried it. This returns 2. ``` def func(): try: return 1 finally: return 2 ```
Please revert whitespace change.
I think you can use `with self.assertRaisesMessage` equivalently here (context manager form is much easier to read IMO)
```suggestion def _is_default_auto_field_overridden(self): ```
The closing ) goes on the next line.
I don't think it's worth it. Someone using a non-browser name doesn't seem like a common mistake.
Ahh, that's gonna be more interesting. You'd need to look at `self.migrations_module(x[0]) is not None` for whether there are migrations for that particular app or if they are disabled.
It would be fine to call the function with `None` since `r` isn't used. Again, use `self.settings` to verify that `settings.LANGUAGE_CODE` is returned.
I think you can remove temporary `msg`, also dot is missing and probably `preceding` should be uppercased and `n` should be lowercased. ```python raise NotSupportedError( 'PostgreSQL does not support RANGE BETWEEN n PRECEDING AND n ' 'FOLLOWING.' ) ```
You can reuse `resolve_model_field_relations()`.
I removed it.
How about more simply: "Found duplicate <field/base/manager> '%s' in CreateModel operation." Maybe you could create a helper function so we don't have to repeat a similar loop 3 times.
Follow existing style and don't include a blank line at the start of each test.
Slightly simpler: ```suggestion passed_check = ( isinstance(settings.ALLOWED_HOSTS, (list, tuple)) and all(isinstance(element, str) for element in settings.ALLOWED_HOSTS) ) ``` `else False` reminds me of: https://adamj.eu/tech/2020/01/17/simplify-your-ifs-that-return-booleans/
Is there a good reason to order the data like this? I'd personally expect the hash to be at the end, so it could include a `$` .
I see what you mean - with tests being run so often it's only a matter of time. To resolve it we can call `random.seed(seed + i)` in the for loop before the string is created. And set `seed = 42`(or some other int) outside the loop. This way we'll have a set of known good random strings that aren't the same. Since if they are the same the zlib compression will detect the duplication and compress them efficiently, since the messages are stored in a single cookie which is processed all at once. BTW I tested with the initial `seed =42` and it passes the messages tests.
I'd go with `ValueError` and possibly add a check `isinstance(pages_per_range, int)`: ```python if pages_per_range is not None and not (isinstance(pages_per_range, int) and pages_per_range > 0): raise ValueError('pages_per_range must be None or a positive integer for BRIN indexes') ```
I would assert `len(warns) == 1`.
And a another alternative in #11642
I see. Any thoughts about passing the _local_ field instead of the remote one and the model it's from? e.g. in the case of tests below `field_name` would be `'uuid'` instead of `'question_with_to_field'`. That's how the other `to_field` enabled admin views work and what `to_field_allowed` expects. It also feels like a nicer API to me and would allow you to stop passing `app_label` and `model_name`.
This file is mostly for unit testing the `LogEntry` model, so I would limit the tests to `LogEntryManager.log_action()`. Similarly, could you try to unit test the `ModelAdmin` methods rather than having complete request/response tests? Maybe in `tests/modeladmin`. p.s. when sending or updating a pull request, please also update the ticket as I just did.
Hi All, I was a little surprised to see a get_uneditable_fields method in addition to get_readonly_fields. I suppose that provides the best backward compatibility, though it was a little confusing on first glance to have _two_ methods with very similar names. I don't really have a better suggestion though. _Maybe_ a get_field_names() that handles the possibility of declared_fieldsets, and a can_edit() that checks add and change permissions. It makes the code more complicated, but it might be a little more intuitive. Just a thought.
or "don't necessarily" -> "may not"
`# TODO: Remove when dropping support for PY37.`
`%(expressions)s)` not `%(expression)s)`. You're missing the `s` at the end of `expressions`
What about erroring if `options` is non-empty at this point? Subclasses should have already consumed their arguments from it, and if there's anything left it's probably a mistake, like `explain(formatt='json')`
You could skip these, but I thought that the rewording read better. I guess if you go for the proposed `Renderable` then they'd be moved anyway and then it doesn't hurt to update them. (Also note that the docstring for `BaseFormSet.as_ul()` neglected to mention that it isn't wrapped in `<ul>`.) 🤷🏻‍♂️
with -> the
You also needs to "unmock" this method in a try/finally block. Maybe we can first decide on a resolution about using mock (#23289) so we don't have to add more of this cruft though.
Also put `self.adduser` back in front of `self.changeuser`...
This inner import is a syndrom of the circular dependency between `Manager` and `QuerySet`. Could we avoid it by moving this code inside `_Manager`? `Manager` would know how to create a subclass of itself with the methods of a given `QuerySet`.
yeah, `request.session.get` would return none for the token and this wouldn't pass the comparision (which would be perfectly fine)
Ah, well then we can use `@cached_property` 😉
I'm not sure what you have in mind, but `django/contrib/admin/utils.py` doesn't contain any public APIs (and this code doesn't seem to be admin-specific). I think to make it a public API (e.g. in django.forms) we would want to see it used outside the admin.
You can use `self.fail('Cyclic reference in Exception Reporter.get_traceback_frames()')`
You can't assume the presence of `self.name` here
IMO we should check options against PostreSQL names.
You should use `fetch_redirect_response=False` instead of `target_status_code=404`. It seems to be an outdated pattern used in a few places and I'll probably clean it up soon.
This isn't great and invites test state leakage - it's directly touching the internals of the code under test and not resetting it to the way it was after the tests. It would be best if a copy of `all_sites` was made and then in `tearDown` it was reset to the original state, at least Possibly fixed by #6980 anyway
```suggestion # LiveServerTestCase's change to ALLOWED_HOSTS should be reverted. ```
Chop blank line.
`__str__` is not necessary.
Small nitpick, please use the following indentation: ``` python User.objects.create_superuser( username='admin', password='something', email='test@test.org' ) ```
OK, it was just a shot in the dark :dart:
Hah. Had the same thought before I got here. See the caveats mentioned above.
This one as well.
quit() .... to avoid a dead.... (chop "we" stuff)
I added a temporary storage.
I'd omit this blank line.
This test won't pass when pytz isn't installed. For consistency with the timezone tests, you should declare: ``` python requires_pytz = skipIf(pytz is None, "this test requires pytz") ``` and then decorate it with `@requires_pytz`. This is a minor concern since the docs now encourage installing all optional dependencies before running the test suite, but I suppose it could save some headaches to people running the test suite without a virtualenv. on or systems that don't have `time.tzset` (that is, Windows). Have
You don't need `record` here.
Something like `test_header_omitted_for_no_to_recipients` may be more descriptive.
No guarantees doesn't mean no efforts :-) However let others chime in and tell their opinion on this.
`msg = None` then only warn if msg is set.
We define the same class in the `django.contrib.sessions.serializers`. Maybe we could move it (in a separate PR/commit) to the `django/core/serializers/base.py` and re-use in both places :thinking:
Remove this line as `opts` is already added by `ctx = Context(context)`.
`order_by` only needs to check for slice thus it can call this method like `check_queryset_method_allowed('order_by', combinator_check=False)`
The last parenthesis should be moved to the next line due to hanging indentation.
How about more simply: "Found duplicate <field/base/manager> '%s' in CreateModel operation." Maybe you could create a helper function so we don't have to repeat a similar loop 3 times.
I'm not sure that it makes any sense checking the registry. There is no guarantee that you are using a terminal that uses this. So it could just result in a blanket "on" if this is set. It would be better to take the `ctypes` approach mentioned to check whether currently enabled for the actual terminal in use.
Reading below, I see that Flask has an "any" converter that does something more complicated. Creating a converter with the same name but a different behavior doesn't sound good.
I don't think we need to have a strict policy on `/` vs. `.joinpath()`. I'd prefer `/` but when readability hurts we can also use `.joinpath()` :shrug:
Oh, of course, sorry. Totally missed the loop somehow. Ignore this, I think it's fine as-is.
We need to `run_formatters()` on new files, see d113b5a837f726d1c638d76c4e88445e6cd59fd5.
Do we need to check `removal_value`? It should be enough to check that `new_value` is not en empty set, I cannot imagine a different scenario :thinking: ```suggestion if new_value: ```
`pos_list` could be changed to be a generator now that it is only unpacked into `itemgetter`: ```diff -pos_list = [row_pos for _, _, row_pos in reorder_map] -self.reorder_for_init = operator.itemgetter(*pos_list) +self.reorder_for_init = operator.itemgetter(*(v[2] for v in reorder_map)) ```
Are you sure? Should this not be consistent with `SHORT_DATETIME_FORMAT`, i.e. `SHORT_DATE_FORMAT = 'j N Y'`.
It would probably be less confusing if this were `dict(greeting='Hello!')` so we don't have so many parts called "extra_email_context".
Please use single quotes consistently in new code.
Use double quote docstrtings.
Passing `lead` and `trail` to the `trim_punctuation()` looks unnecessary. This method is called only here so we always pass `('', word, '')`. Maybe: ```suggestion lead, middle, trail = self.trim_punctuation(word) ``` and ```python def trim_punctuation(self, word): """ Trim trailing and wrapping punctuation from `word`. Return the items of the new state. """ lead, middle, trail = '', word, '' ... return lead, middle, trail ```
Please add a trailing comma.
single line is okay here (we allow longer lines up to 119 characters if it helps readability)
Same as below, I think I'd prefer a loop that breaks early.
This isn't related to your changes, but I'm intrigued by Django's behavior here. I would expect `|escape` to give `&amp;` and `|escape|force_escape` to give `&amp;amp;`. Not that this construct makes much sense anyway...
Fine. Super. Thanks for the clarification. (In that case, leave it as it is, because we want the test for the issue...)
What about `prefetch_related()`? It's a new method so we should raise `ValueError` when `aiterator()` is used after `prefetch_related()`, e.g. ```python async def aiterator(self, chunk_size=2000): if chunk_size is None: if self._prefetch_related_lookups: raise ValueError( "chunk_size must be provided when using QuerySet.iterator() after " "prefetch_related()." ) elif chunk_size <= 0: .... ```
simpler: "must be a string"
How about more simply: "Found duplicate <field/base/manager> '%s' in CreateModel operation." Maybe you could create a helper function so we don't have to repeat a similar loop 3 times.
Please use the helper methods `self.assertOperationType()` et. al.
Same here? ```suggestion __T = r'(?P<hour>[01][0-9]|2[0-3]):(?P<min>[0-5][0-9]):(?P<sec>[0-5][0-9])' ``` Maybe this is a bad idea because of leap seconds 🤷🏻‍♂️
I think this category can be dropped
I'm in two minds on this. On one hand, yes, @carltongibson is right. On the other hand, a lot of this code treats `CSRF_USE_SESSIONS` as an afterthought (which, historically, it is, but...). Maybe this way is more consistent with the rest, and changing the not-necessarily-correct references to cookies (e.g. `request.META['CSRF_COOKIE']`) into something more befitting the dual use should be the subject of a separate refactoring, if we want it. Perhaps when we remove the distinction between the cookie/token and the secret, we should rename this to `_set_secret()`. Perhaps a good name now is `_set_masked_secret()`. Not sure. Whatever choice is picked here, should also apply to `_add_new_csrf_cookie()` above.
`all(f.name != db_field for f in fields)` (not sure if it's bettter/worse than the current version)
IMO, `%r` might be an improvement (to avoid quoting integers) except for the `u''` prefix that would be added for strings on Python 2...
Please use single quotes throughout the patch except if the string contains a single quote.
This should be: ```python try: cursor.execute('SET standard_conforming_strings TO ON;') ... finally: cursor.execute('...') ``` so that if the assertion fails, the "tear down" in finally still happens. The second query shouldn't assume the original value of standard_conforming_strings is "on".
I would put "decode" into quotes or so (@felixxm can certainly tell us what the proper syntax is)
This test belongs with the tests for the delete action in `tests/admin_views/test_actions.py`.
I think we should add this format to the `DATE_INPUT_FORMATS` for backward compatibility.
I would rename `self.model_name` -> `self.name` (like in `CreateModel`, `DeleteModel`, or `RenameModel`).
Don't think we need to repeat the docstrings from individual methods.
override `__init__()` instead. after `super()` then `self.style = no_style()`
```suggestion self.temp_app_path.joinpath("__init__.py").touch() ```
Here's the style we usually use for long messages: ``` msg = ( '....' '....' ) with self.assertRaisesMessage(ImproperlyConfigured, msg): ```
Catching `AttributeError` like this may mask errors raised from inside `as_sql()` and make debugging difficult. I'd suggest: ```suggestion elif hasattr(node, "as_sql"): sql, params = node.as_sql(self, self.connection) else: sql, params = None, (node,) ```
```python self.assertHTMLEqual( field.widget.render('name', []), ( '<ul>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="entertainment">Entertainment</label></li>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="test">A test</label></li>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="third-test">Third</label></li>' '</ul>' ) % (self.c1.pk, self.c2.pk, self.c3.pk), ) ```
I don't think there's a use case for `settings.AUTHENTICATION_BACKENDS` without any backends that have a `get_user()` method.
Add trailing commas in call_commands.
Please add trailing comma.
This seems suboptimal for a number of reasons: - It's doing `len(text)` twice. - If `len(text) == length` it's slicing unnecessarily instead of returning `text`. - Using `fill_text * length` is too much as we'll only ever need `lengrh - len(text)`. Maybe the following would be better: ```suggestion delta = length - len(text) if delta == 0: return text if delta < 0: return text[:length] return (fill_text * delta)[:delta] + text ``` If `fill_text` is more than one character, `fill_text * delta` still generates too much, so we still need to `[:delta]`. Offhand, I'm not sure I can think of anything better that wouldn't be slower.
https://www.postgresql.org/message-id/6721.1357856188%40sss.pgh.pa.us So probably the whole debate about touching the introspection for expressions should be closed. I could only get `pg_get_expr` to output whatever I used for `CREATE INDEX .. ON (lower(body), lower(title))` where `lower(body), lower(title)` would be returned by `pg_get_expr`.
I remember looking at this test when merging 233c70f0479beb3bff9027e6cff680882978fd4d. I just tested this now and if you use `with register_lookup(field, Exactly, lookup_name='exact'):`, then this is the state at the end of the test: ``` >>> Author._meta.get_field('birthdate').get_lookup('exact') <class 'custom_lookups.tests.Exactly'> ``` With the current code, the output is `<class 'django.db.models.lookups.Exact'>` which looks correct to me. So I'd leave this as is and remove the unused `CustomExactLookup`.
I'd prefer to keep the docstring consistent with those in the rest of the file (which don't have the extra line).
As far as I'm concerned this should impact only `307` and `308` redirects, so maybe: ```diff diff --git a/django/test/client.py b/django/test/client.py index b26504f762..e4201bead4 100644 --- a/django/test/client.py +++ b/django/test/client.py @@ -827,7 +827,10 @@ class Client(ClientMixin, RequestFactory): if response.status_code in (HTTPStatus.TEMPORARY_REDIRECT, HTTPStatus.PERMANENT_REDIRECT): # Preserve request method post-redirect for 307/308 responses. - request_method = getattr(self, response.request['REQUEST_METHOD'].lower()) + request_method = response.request['REQUEST_METHOD'].lower() + if request_method != 'get': + extra['QUERY_STRING'] = url.query + request_method = getattr(self, request_method) else: request_method = self.get data = QueryDict(url.query) ```
In such case we will need to calculate this multiple times because it is inside a loop. Moreover `if` is for a deprecated usage, so ...
You should be able to reuse an existing model, e.g. `Number`.
I think you can use `django.utils.deconstruct` to decorate the class, the `path` argument can be passed explicitly. Since Django 2.0+ is Python 3 only, you can use keyword-only arguments with `*, arg1=None, arg2=None`.
I don't think this is needed (probably accidentally copied from line 327).
I think we want to crash here if `bases` is not iterable.
please use longer/more descriptive names than `f` and `k`, like `f_obj` and `slice`
What happens if the pk field isn't in the self.query.select? I think using self.query.get_initial_alias() instead of self.query.get_meta().db_table should fix this issue.
Use normal dictionary access instead of `.get()`. It is fine for us to blow up with a `KeyError` here and helps debugging because it is clearer whether the attribute is missing or the value is incorrect.
I tried to use a generated condition the `WHERE` clause and it works fine, so IMO we can safely assume that it's an Oracle caveat :smile:
the try/except needs to be added back
Using `self.connection.features`: ```suggestion elif ( on_conflict == OnConflict.Update and self.connection.features.supports_update_conflicts_with_target ): ```
Perhaps the following? ```python collections.deque(self.result, maxlen=0) # consume iterator quickly. ``` Some performance numbers: ``` Python 3.7.0 (default, Sep 15 2018, 19:13:07) Type 'copyright', 'credits' or 'license' for more information IPython 6.5.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: from collections import deque ...: from itertools import repeat ...: n = 10000 ...: %timeit -n1000 [__ for __ in repeat(0, n)] ...: %timeit -n1000 for __ in repeat(0, n): pass ...: %timeit -n1000 list(repeat(0, n)) ...: %timeit -n1000 deque(repeat(0, n), maxlen=0) 195 µs ± 5.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 74.3 µs ± 204 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each) 53.2 µs ± 4.66 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 43 µs ± 428 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each) ``` So even calling `list()` seems better than an empty loop, and `collections.deque()` is fastest because it is written in C.
Don't hardcode a primary key (or `Model.__str__()`). Wrap strings at 79 characters.
Since index name generation is deterministic, I don't think this is needed. `test_name_auto_generation` already checks for a specific name. If this index is truncated is some different way, then it would be okay to keep it but check for the actual name rather than testing the length.
could you fix the other test cases in this file and make it a separate commit? I see at least `BooleanFieldTests` that has database activity but uses `unittest.TestCase`.
This is not used only by `get_or_create`.
If I understand correctly "let's delegate..." -> "that will be done in instance.full_clean()"? I'd like to check a few more things later today so you can hold off on that update until I finish review.
I don't like how this entire if block looks. Is `plan` allowed to be `None` considering the check/assignment on line 73 and 74? I'd prefer to call out that it can not be forwards and backwards by doing something like: ``` if all_forwards == all_backards: raise.. # this may not be correct if `plan` can be `None` elif all_forwards: migrate_forwards() else: migrate_backwards() ``` I feel this highlights the invariant, and avoids potential problems of misreading the bool combinations in the original code.
That looks awesome @hannseman 💯 🏅 Regarding `django.contrib.postgres.indexes.OpClass` I guess we could add a `IndexedExpressionWrapper.register_wrapper` and have `django.contrib.postgres.apps.PostgresApp.ready` register `OpClass` to avoid coupling there.
why cast this into a list, normal brackets (generator) will do
No need for `keys()` here.
I thought about it, but it has some value to test this explicitly.
```suggestion 'related_name has no effect on ManyToManyField with ' 'a symmetrical relationship to "self".', ```
```suggestion self, (app_label, model_name), (old_name, found), ```
May be he wanted to catch system exiting exceptions - BaseException, SystemExit, KeyboardInterrupt and GeneratorExit. But i fail to see the reason for this
`json_dumps_params` should be after `safe` (reordering keywords could be backwards incompatible if passing them by argument).
remove first comma (also as someone not intimately familiar with the ORM, I'm not quite sure what "default select" means (I assume it's a reference to `default_cols` -- maybe no further explanation is needed).
Should this be cached? The number of times validators are instantiated, and the associated cost with loading in the 1000 most common passwords each time strongly suggests that it should be.
I would rather create a custom model with field that has `db_column`, e.g. ```python project_state = self.apply_operations('test_rfwdbc', ProjectState(), operations=[ migrations.CreateModel('Pony', fields=[ ('id', models.AutoField(primary_key=True)), ('field', models.IntegerField(db_column='db_field')), ]), ]) operation = migrations.RenameField('Pony', 'field', 'renamed_field') new_state = project_state.clone() operation.state_forwards('test_rfwdbc', new_state) ```
I suggest you use a constant to refer to the default `template_name`. Have a look at how it was dealt with in #5577.
We use triple quotes for new docstrings.
In fact, unless you have a special sequence like \n, \r, \t, the raw prefix is not strictly necessary. But for consistency, it's better to always add it to indicate that none of the escaped letters have to be interpreted as special-meaning sequences.
According to the `Node.render` docstring it should "Return the node rendered as a string" so if we really wanted to optimise for speed, we could potentially forgo the `str` as well, but I think probably better safe than sorry here, so better to leave it in.
This check is redundant. `skipUnless` already guarantees that we have MySQL. You can remove the `try ... except` leaving only `import`.
I think the test should be split into multiple test methods, one per thing-being-tested, as above
beautiful, assuming it works
Surely you want all of the password hashes in the list of available ones so that people can log in with them? Of course argon2 is unlikely to be out there in the wild, but if someone tried it and then decided to switch back they wouldn't be able to do so by deleting the settings, they'd have to copy/paste the default and re-add it. There's little harm in including it by default afaik. You might not want to have something other than PBKDF2 to be the default though, people might accidently have bcrypt or argon2 installed and not realize it and end up unable to log in if they deploy. Not sure if that's a big worry or not though.
However, I think it's worth to keep it for backends without built-in converters.
Use a `set` if this value is only used for containment checks ```suggestion local_action_names = {self.get_action(action)[1] for action in self.actions} if self.actions else set() ```
Check constraints don't seem to be related with this issue, moreover `unique` is `False` for all check constraints. Please revert this unrelated change.
`self.assertEqual(f.choices), [])` looks simpler to me (plus if the list isn't empty, another debugging step isn't needed to see what the list contains).
Yes, f-strings should use only plain variable and property access as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
As discussed, we can simplify this a bit, also benefiting from the `min(0, ...)` in `get_backend_timeout()`: ```suggestion if timeout == 0: if ret := bool(client.set(key, value, nx=True)) client.delete(key) return ret else: return bool(client.set(key, value, ex=timeout, nx=True)) ```
Please revert unrelated changes.
Return the readonly fields for a given AdminForm. (following verb style of PEP 0257) -- similar for other docstrings
Is it possible to use something from `connection.ops` or similar to avoid a vendor check? Otherwise, looks good.
Another vote for moving this logic into apps as a private method.
_Gut feeling_ says that this ought to be a _clone_, so as not to leak the _original_ (un-negated) mutable expression out. e.g something like: ``` return self.expression.copy() ``` Currently you've got a test for `self.assertEqual(~~c, c)` which I would _guess_ (reading the diff only) would also pass with `assertIs` where I presume it oughtn't.
Hehe :D Thanks, I'll approve now and merge later today after a final testrun
Again, the `os.sep` bit here will be stripped off when passed to `Path()`: ```suggestion cwd_prefix = os.curdir ``` It's probably worth reviewing this whole section.
I like to include a trailing comma in a list of `kwargs` so if more are added later, you don't need to modify the line again (keeps and diff and git blame cleaner as I mentioned before)
Actually you should use `assertNotContains(response, '"/test_admin/admin/r/%s/1/"' % content_type_pk)` to also account for `byte` response content on py3.
This is fine as is.
Why do you continue here? `app_label` might still be invalid.
still seems like we're missing this type of query: `filter(tags__content_type=ctype)`
You could do this setup in Python. `self.school.students.add(...)`
I don't see much value in this check.
Combining this commit with the next one seems fine. It works the same as override_settings, but you can use `with self.settings`.
But `any()` always returns a bool? https://docs.python.org/3/library/functions.html#any
I don't think it's terribly important as both checks use the same code path (although this could obviously be refactored later at which point that argument would fail...).
I'd drop it, and reintroduce the test later on in branches where we'll be able to backport #9383.
First we should verify this passes before we toggle `is_active` to False.
I would chop `simply`.
Please add a trailing comma to this line.
```suggestion raise NotSupportedError( 'This database backend does not support updating ' 'conflicts with specifying unique fields that will ' 'trigger the upsert.' ) ```
This is already done in the super method, so undo: ```suggestion self.get_response = get_response ```
`step` attribute should only be added if `self.localized is False`
```suggestion path = '%s/' % request.path ``` :thinking:
Is `test_doesnt_work_with_init_subclass` meant to test this change? I still don't see any test failures if this change is reverted.
unchecked -> unselected
The interesting test case is this: ``` season_2009 = Season.objects.create(year=2009, gt=111) season_2009.games.create(home="Houston Astros", away="St. Louis Cardinals") season_2009.games.create(home="Houston Astros", away="Chicago Cubs") season_2009.games.create(home="St. Louis Cardinals", away="Houston Atros") season_2010 = Season.objects.create(year=2010, gt=222) season_2010.games.create(home="Houston Astros", away="Chicago Cubs") qs1 = Season.objects.exclude(games__home__contains='Houston') qs2 = Season.objects.exclude(lookups.Contains(F('games__home'), 'Houston')) ``` where the qs1 and qs2 objects should match. The encouraging thing is that the code is trying to call split_exclude(). It might be hard to make this test actually work, the split_exclude() code is pretty big hack, and especially if the expression creates joins to multiple different relations it will be hard to make the current code work properly. But, if I recall correctly, we don't support .filter(games__away__contains=F('games__home')) either.
Excellent. Happy with that. So, as I have above, without any `__qualname__`-mangling, should do the trick.
So do we need to generate SQL with the same config in the `ts_headline` and an inline `tsquery`? (that's my main question) ```sql ts_headline('french'::regconfig, ..., tsquery(..., 'french'::regconfig), ...) ``` If not then I would prefer to leave config only in `tsquery` and don't duplicate its logic in `SearchHeadline`.
Could you write the test without using fixtures? I think it would be a lot simpler.
I wonder if you might add an assertion that the `_iterable_class` for `Teacher.objects_custom.all()` is `ModelIterableSubclass` just to be sure that isn't inadvertently refactored away in some future change.
Instead of defining `success`, just return directly in the above code. I think it is simple enough.
This assertion is not necessary.
@djackson-saa and I investigated the `PermissionError` and it was only added to Python in version 3.3 as a subclass of `OSError` and **not** available in Python2.7. In order to make this Python2.7 compatible, we are going to change the class we are excepting to `OSError` to cover all bases.
Please add trailing comma.
Do we really need this test? seems it doesn't relate to this change.
Careful, you're mutating `self.config` rather than a copy of it. If you hang onto an instance of `SearchVector` and reuse it then resolve_expression will be called on it twice. You'd be better off figuring out a way to add `config` via `self.set_source_expressions()` rather than overriding resolve_expression and `as_sql`. Even if that means using private expressions to build the components.
Maybe test it in `tearDownClass()` then? That method is executed after all tests.
This needs an update following 831358f23d545b8dba017c6b26bd295ba9f6c17d.
I think it's the right class: ``` In [38]: class desc: ...: def __get__(self, instance, cls): ...: if instance is None: ...: return self ...: return instance.__dict__['_%s__mangled' % cls.__name__] In [39]: class A: ...: d = desc() ...: ...: def __init__(self): ...: self.__mangled = 42 ...: In [40]: A().d Out[40]: 42 ```
This test doesn't fail with or without the patch applied so it's likely unnecessary.
It should be enough to use `lru_cache` instead, e.g.: ```python @functools.lru_cache(maxsize=128) def import_string(dotted_path): ... ```
They can be empty for subclasses, I think we can leave it that way.
Similarly, I don't see much advantage to creating indirection with a method.
Do we need to re-fetch an author? ```suggestion self.assertEqual(res.context['object'], self.author) self.assertEqual(res.context['author'], self.author) ```
Chop the ticket number `(#25253)`.
```suggestion return '-' + value if neg else int(value) ```
I don't see a reason for modifying a source exception, you can use: ```python raise ValueError(...) from e ``` Also `blew up` is not a appropriate wording and a new exception is not more informative because it refers to the field class `... the field <django.db.models.fields.CharField>` instead of `<app_label>.<model_name>.<field_name>`, maybe: ```python raise ValueError('Error during %s serializing: %s' % (field, e)) from e ``` I don't have a quick answer how to get a field path.
You can drop this assertion, the way `from_date` is constructed and that this branch is behind the `if day` one makes it impossible to reach.
Use `assertContains()/assertNotContains()` instead.
Use a single line. Our [style guide](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style) allows lines up to 119 characters if it helps readability.
You should use `self.m2m_db_table` instead of `self.db_table`.
IMO this line is unnecessary, and above `iter()` call can be removed.
```python cache_params['LOCATION'] = Path(self.dirname) ```
chop blank line
`assertTrue(value)` will pass for `bool(value) is True` which is different than checking for `True`.
Hey @felixxm. In the end we went for not having the "or subclassed" so these changes will disappear. (`checks.txt` did previously have this adjustment, but it's gone now. These are just leftovers to be removed.)
```suggestion is_same_domain(request_netloc, host) for host in self.allowed_origin_subdomains.get(request_scheme, ()) ```
The code I proposed sets the same content in the variable with the same length. It's not a major change, just a small improvement. IMO
Chop blank line.
I'd use a semantic test name like `test_error_raised_on_filter_with_dictionary`
In cases like this, we prefer to include a trailing comma so if more items are later added, we don't need to modify this line again.
Since this might not be obvious from the method implementation, it's probably worth spelling out with another sentence in the docstring: "A verbosity of 1 logs INFO (the default level) or above, and verbosity 2 or higher logs all levels" (can go on a separate line).
Please use the helper methods `self.assertOperationType()` et. al.
@hannseman Thanks :+1: > I prefer it over the mixin approach. Yes me too :+1: . We can move `Value()` wrapping to the `__init__()` and simplify it a bit, e.g.: ```python class SearchConfig(Expression): def __init__(self, config): super().__init__(output_field=None) if not (config and hasattr(config, 'resolve_expression')): config = Value(config) self.config = config def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False): resolved = super().resolve_expression(query, allow_joins, reuse, summarize, for_save) resolved.config = self.config.resolve_expression(query, allow_joins, reuse, summarize, for_save) return resolved def as_sql(self, compiler, connection): sql, params = compiler.compile(self.config) return '%s::regconfig' % sql, params ``` Please move introducing a `SearchConfig` expression to the separate commit, or even PR.
I don't think this is necessary - this is a developer only message - it will never be displayed to end users.
You can define an `as_sqlite` method for this case.
The log message makes no sense. You are trying to normalize (or rather kludge) something that should be a locale to be a language code/tag, to then convert to a locale. But you are saying the locale has been normalized to a language code/tag which is incorrect. A language code/tag is not a locale, and here we *should be providing a locale*, hence my misgivings already stated about this whole thing. Regardless, you probably want to do this: ```python def normalize_locale(original, stdout): """ Normalizes incorrect locale strings, e.g. zh-cn, zh_cn, ZH-CN are converted to zh_CN. """ corrected = to_locale(original.lower().replace('_', '-')) if original != corrected: stdout.write('Normalized %s to %s.' % (original, corrected)) return corrected ```
check flake8 ("missing whitespace around operator" here)
the wording used for similar options is simply "Can be used multiple times."
FWIW I made sure we don't forget to remove these methods [when we drop support for Python 2](https://code.djangoproject.com/ticket/23919).
Ahh, right, so :wink: : ```python for error in _search_form.errors.values(): ```
I know this is just a test, but to increase future readability I would suggest using talking names and not single characters (e.g. `c`, `t`, `x`) to store variables, and I would also remove unnecessary blank lines
Fine. Super. Thanks for the clarification. (In that case, leave it as it is, because we want the test for the issue...)
I think we should revert the logging changes as it appears we're adding additional logging calls where they didn't exist before.
I should have been clearer but `firstname` and `lastname` can be omited as they'll default to `''` if missing.
```suggestion """ ```
The primary key attribute can only be retrieved on certain databases, this will not work on Oracle or MySQL.
I don't think it really make sense to pass recipient_list... the point of using `email_user` is to send mail to `AbstractUser.email`
```suggestion Update a queryset using order_by on a unique constraint. ```
There should be a sane API through `schema` ( A SchemaEditor, I presume) to do this.
comma after tuple
This is unlikely to be enough as JSON can have an array or string as it's top-level data type.
Yeah, screw that :D in the worst case make it an attribute on the CSRF class, so a user can override it if we go down the route with an extra class.
Given `self.inner_votes` is an instance of `collections.Counter` this could be simplified to `self.inner_votes.update(inner_votes)`.
I wasn't suggested that, but perhaps it would make the test more readable/clear, lest someone copy the current pattern.
would be fine to use double quotes so you don't have to escape the single
@codingjoe unless I'm missing something that would require stopping to use a list comprehension. I guess the `alias` checking could be broken to a new line ```python expressions = [pk] + [ expr for expr in expressions if expr in having or ( getattr(expr, 'alias', None) is not None and expr.alias not in pk_aliases ) ] ```
This is already checked in `user_commands.tests.CommandTests.test_call_command_no_checks()`. I will remove this test.
prefer hanging indent: ``` self.assertEqual( len(calls), 1, "..." ) ```
What I'd prefer is a proper enum type, but we don't have one that we've adopted for use in Django. Lacking that, I don't think there's really much difference between True/False/PROXY_PARENTS and ALL/NONE/PROXY_PARENTS.
What about m2m and reverse relationships? Something like `Q(cities=3)` will also produce the join.
Note to self: the DEP specifies a delayed deprecation.
Since `separate_logs` seems like a higher-level mode that does multiple things, maybe you can make it so the mode doesn't need to be stored as an attribute. For example, the following line could write to a `self.output_stream` that defaults to `os.devnull`. When running in script mode, it could be set to `self.stdout`. It would also eliminate the need for an `if` statement.
This can be single-lined. Also, please use hanging indentation as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style). ```suggestion custom_libraries = conf.get('OPTIONS', {}).get('libraries', {}) ```
> Although... _Does_ TextInput support datetimes? Yes, with TextInput, the date is serialized like this: 2014-05-09 14:08:21.805873 and you can manually edit any part, including microseconds.
This is clearly incorrect: * This will blow up if you don't have exactly two parameters. * If you had two, the output would probably be something like `?['a', 1]=['b', 2]` * The issue is due to the generator in the arguments to `str.join()`. * Why a list comprehension? I think it should remain a generator expression. A correct fix would be: ```python ('%s=%s' % (k, v) for k, v in params.items()), ```
However, I think it's worth to keep it for backends without built-in converters.
Should this be cached? The number of times validators are instantiated, and the associated cost with loading in the 1000 most common passwords each time strongly suggests that it should be.
Same here, it may just drive complexity.
Similarly, it seems like `DiscoverRunner` shouldn't have to know about details like `suite.initial_settings`, `suite.serialized_contents`, and `multiprocessing.get_start_method()`. One alternative would be to make this a method of `ParallelTestSuite` called something like `initialize_suite()`. Then, inside `run_suite()` and before calling `runner.run(suite)`, `DiscoverRunner` could do a `hasattr` check for that method and call it if present.
The current names are misleading, e.g. `RenderableForm` is not really a render-able form it's a mixin which makes the form render-able. I would rename these classes: - `Renderable` to `RenderableMixin`, - `RenderableForm` to `RenderableFormMixin`, - `RenderableError` to `RenderableErrorMixin`.
As above, leave the docstring and change to deprecation to 2.0.
OK, good. Thanks. I think it's fine as it is. 👍
actually I think the preferred solution is to omit the u'' prefix, even on Python 2. The output already includes `from __future__ import unicode_literals` so there shouldn't be a problem without it.
`assertEqual` (the version you have now is a deprecated alias)
Any reason not to do the following? ```python return ( clean_lookup in valid_lookups or LOOKUP_SEP.join(relation_parts + [part]) in valid_lookups ) ``` A better approach would be to make `valid_lookups` a `set()` in the first place (using `add` instead of `append` above) and do: ```python clean_lookups = {LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part])} return clean_lookups & valid_lookups ```
I think a test for this change is missing. This would probably go in `admin_views` whereever the other tests for the `delete_view` are.
an app containing a locale folder
I don't think this change is needed. It seems to have been applied to ensure that `CallableChoiceIterator` is used on a copied `ChoiceField`, but if it were needed then the field we are copying would already have a `CallableChoiceIterator`, which we will be copying. So the `callable(value)` if statement in `_set_choices` will never happen. In any case, it would be much nicer to write this as `result.choices = ...` rather than manually using the property.
I would leave the first part of the sentence untouched. Also please use hanging indentation: ```suggestion print( 'The datetime and django.utils.timezone modules are available, so ' 'it is possible to provide e.g. timezone.now as a value.' ) ```
`self.assertRaisesMessage()` (if all sublcasses inherit from Django's test case)
Maybe `_check_default_is_not_str()` -> `_check_str_default_value()`?. Please remove unused `kwargs`.
You should use `self.m2m_db_table` instead of `self.db_table`.
If POSTGIS_TEMPLATE exists, it will be a string, not a tuple. So you'd better make the tuple in the execute method below instead.
Do you think `None` is better than an empty string / empty dictionary, respectively? A few other edits: https://dpaste.de/G9P3
This has been mentioned previously, we can't do it because updating the set in place would update the inherited tags as well. e.g. ```python @tag('foo') class Foo: pass @tag('bar') class Bar(Foo) pass ``` Using `update` would add `'bar'` to `Foo.tags`.
Do we need to mock `log_change()`? Should not be reachable when raising a database error in `save_related()`.
Please try to stay near 80 char per line…
This doesn't look correct... Did you mean something like: ```python ctypes.add(None) searched_perms.extend((None, perm) for perm in getattr(settings, 'GLOBAL_PERMS', [])) ```
`return self.get_database_version() >= self.features.minimum_database_version`
I don't think so; base classes shouldn't depend on subclasses. Create a `DatabaseFeatures` subclass for the dummy backend and set the attribute there.
Please remove this unrelated change.
You're calling `model_name.lower()` twice in most cases
Excellent. Happy with that. So, as I have above, without any `__qualname__`-mangling, should do the trick.
~~IMO you should also pass args/kwargs to `FormatStylePlaceholderCursor.__init__` and change `FormatStylePlaceholderCursor` initialization e.g.:~~ ```diff diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py index 29ae2a6..8c1fe35 100644 --- a/django/db/backends/oracle/base.py +++ b/django/db/backends/oracle/base.py @@ -383,8 +383,8 @@ class FormatStylePlaceholderCursor: """ charset = 'utf-8' - def __init__(self, connection): - self.cursor = connection.cursor() + def __init__(self, connection, *args, **kwargs): + self.cursor = connection.cursor(*args, **kwargs) # Necessary to retrieve decimal values without rounding error. self.cursor.numbersAsStrings = True ```
Is this test applicable to the patch anymore? It doesn't seem to me that overriding `attrs` with `render()` is related to what this patch fixes.
```python self.assertHTMLEqual( field.widget.render('name', []), ( '<ul>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="entertainment">Entertainment</label></li>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="test">A test</label></li>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="third-test">Third</label></li>' '</ul>' ) % (self.c1.pk, self.c2.pk, self.c3.pk), ) ```
How about putting this right above where it's first used rather than far about it? (`if csrf_token is None:`)
This is not performing any identity check so if a related module happens to have a class the same name (it's not that uncommon to have classes with the same name namespaced in different modules) then it would be considered to be the same class.
You can ditch the temporary variable, and just the arguments directly `__init__`.
Prefer wrapping the expression in parentheses rather than using a backslash
`CharFieldModel` -> `RangeLookupsModel`. You don't need to create new objects.
Maybe something like "call_command() received unrecognized option(s) for the <foo> command: .... " I think listing all the options in the message might not be a bad idea either if it doesn't look too cluttered.
There is no need to `append()` because we have a single error: ```suggestion return [ ```
I don't know that the ticket reference is necessary. We try to reserve it for obscure issues that can't be easily captured in a docstring.
If POSTGIS_TEMPLATE exists, it will be a string, not a tuple. So you'd better make the tuple in the execute method below instead.
It's nice to include a message for the exception (we had a ticket about adding messages to all of them)
This is moved from a system check -- should the system check be removed then? (code and docs in ref/checks.txt)
I'd declare this as a `test_params` variable above to avoid the funky indent.
Maybe we should move this directly to the `RelatedLookupMixin` :thinking:, I don't have a ready answer.
Prefer the context manager version: ``` self.assertRaises(Resolver404): resolve(url) ```
Any disadvantage to making it a separate test method instead? I guess the signal connecting might be better is `setUpClass` at that point.
What happens if `multiple=True` but `attrs={'multiple': False}`? If things break, it would better to raise an exception here than to allow it
Thanks. There might be a bug because when I rebase https://github.com/django/django/pull/10337, `self.assertIn('unique_name', constraints)` fails on SQLite.
PEP 8 hedges about line breaks and binary operators but suggests ultimately that breaking before the operator is better. As long as we're touching this I would suggest breaking before the operators.
Do we need to do this? it is confusing (at least for me) to split and then join by `','`, maybe: ```python response.setdefault( 'Referrer-Policy', self.referrer_policy if isinstance(self.referrer_policy, str) else ','.join(self.referrer_policy), ) ```
Using `int` is untested and doesn't work as expected, because it uses 1-based indexing instead of 0-based indexing.
OK, it's necessary, see `migrations.test_commands.MigrateTests.test_showmigrations_no_migrations`.
This flag is ignored when `ensure_durability` is `False`, so we should inform users that is not allowed, e.g. ```diff (django-test) git:pr/13708 felixx@felixx-A555:~/repo/django/tests> git diff diff --git a/django/db/transaction.py b/django/db/transaction.py index c6ba346a99..8a84b97237 100644 --- a/django/db/transaction.py +++ b/django/db/transaction.py @@ -172,6 +172,11 @@ class Atomic(ContextDecorator): self.using = using self.savepoint = savepoint self.durable = durable + if self.durable and not self.ensure_durability: + raise ValueError( + 'A durable atomic block is not allowed. If you are running ' + 'tests, you must use TransactionTestCase, not TestCase.' + ) def __enter__(self): connection = get_connection(self.using) ``` We can be descriptive here.
This could be moved closer to where it's used or even eliminated as an intermediate variable.
I wonder if something like `serialize_result` might be a more descriptive name for this function.
Please remove this blank line.
If the `edges.get(None, ())` call above works comparing `key` to `None` here should also be working. I also don't know any other Python object which `str()` representation is `'None'` that are not `None` itself.
Mapping allowing case-insensitive key lookups. Original case of keys is preserved for iteration and string representation.
`if not ... and not ...` for consistency with other similar statements...
We shouldn't change the context to keep this backward compatible: ```suggestion 'action_list': page_obj, ``` Updated.
`assertTrue` would be appropriate here.
This will work only for a simple use case, e.g. ``` python manage.py startapp test_four ../../main_directory/ticket_30618/ticket_30618/other_apps_3 ``` produces `name = '......main_directory.ticket_30618.ticket_30618.other_apps_3'`
Is this accurate? From the looks of it, subdomains are only allowed if a '*' is in there.
While this duplicates, it seems like an improvement in readability since `j` is eliminated.
A list comprehension is preferable here as `str.join()` converts to list internally anyway. ```suggestion ', '.join([ f'{field} = EXCLUDED.{field}' for field in map(self.quote_name, update_fields) ]), ```
You can reuse existing models, by adding e.g. `Entity`: ```python class Entity(models.Model): pass class Country(Entity): ... ```
Unless I am missing something here, you only need `self.has_view_permission(request)`, since it checks for view permissions or change permission. ``` def has_view_permission(self, request, obj=None): """ Return True if the given request has permission to view the given Django model instance. The default implementation doesn't examine the `obj` parameter. If overridden by the user in subclasses, it should return True if the given request has permission to view the `obj` model instance. If `obj` is None, it should return True if the request has permission to view any object of the given type. """ opts = self.opts codename_view = get_permission_codename('view', opts) codename_change = get_permission_codename('change', opts) return ( request.user.has_perm('%s.%s' % (opts.app_label, codename_view)) or request.user.has_perm('%s.%s' % (opts.app_label, codename_change)) ) ```
can you call `sort` on the invalid_apps before joining them, please.
We could lowercase the vendored files, that would help at least for the `zh-*` variants.
Please remove the unnecessary trailing comma and space.
Ditto regarding quotes and the `%s=%r` format.
It might be better to omit the quotes around status since that's making everything seem like a string.
Remove this blank line. (Those above and below, separating the `last_login` check are fine.)
Ditto regarding quotes and the `%s=%r` format.
How about making these two flags `False` by default, thus making the feature not causing backwards incompatible changes.
How about this? ```python for field_name in self.UserModel.REQUIRED_FIELDS: value = options.get(field_name, os.environ.get('DJANGO_SUPERUSER_' + field_name.upper())) if value is None: raise CommandError('You must use --%s with --noinput.' % field_name) field = self.UserModel._meta.get_field(field_name) user_data[field_name] = field.clean(value, None) ``` Alternatively, a bit more verbose: ```python for field_name in self.UserModel.REQUIRED_FIELDS: env_var = 'DJANGO_SUPERUSER_' + field_name.upper() value = os.environ.get(env_var) value = options.get(field_name, value) if value is None: raise CommandError('You must use --%s with --noinput.' % field_name) field = self.UserModel._meta.get_field(field_name) user_data[field_name] = field.clean(value, None) ```
I think having a separate base class for setting a single flag is probably overkill. If there are future changes that require more customisation then we can introduce a base class to keep things tidy. In the mean time let's not.
@atombrella Do we need inner imports here? Imports at the top works fine for me.
I think we cannot use decorator here. IMO we should use `property()`, e.g. ```python def property_year(self): return self.date.year property_year.admin_order_field = 'date' model_property_year = property(property_year) ``` (see similar patch for `short_description` cec9558fba1bc6401ea2ec6d71b816b4dfd31b28).
Can you reference the ticket number in the docstring, please.
"Both Y and X must be provided". Switch the Y and X in the error.
Correct, but if me change `ModelState` at some point, this will work automatically or fail, telling us we did something wrong ;)
Here's how I would have written it: https://gist.github.com/3911240. Hopefully it's not worse than the previous version.
I would use the same order as the previous two classes (`TrigramSimilarity` and `TrigramDistance`): ```suggestion class TrigramWordSimilarity(TrigramWordBase): function = 'WORD_SIMILARITY' class TrigramWordDistance(TrigramWordBase): function = '' arg_joiner = ' <<-> ' ```
This should probably be a separate method -- perhaps, one that could be used for the insert as well. The code here should read, ``` python if self.returning_fields: r_sql, r_params = self.return_values_fragment() if r_sql: result.append(r_sql) params += r_params ``` The default `return_values_fragment()` should raise `django.db.utils.NotSupportedError`
Add trailing commas in call_commands.
hm... ok. fair enough, maybe it makes sense to make it swappable, but I don't want to overcomplicate things.
Wouldn't it be a bit more helpful for this error message to specifically note that the module with the given path couldn't be imported? "Invalid" is a very vague term, which could mean all sorts of things - it seems unhelpful to silence an `ImportError` and replace it with a much vaguer message.
prefer hanging style: ``` return { self.fk_field: ..., } ```
`itertools` looks unnecessary :thinking: I would use `int` variables and alphabetized hooks, e.g. ```python branch_1_call_counter = 0 branch_2_call_counter = 0 leaf_1_call_counter = 0 leaf_2_call_counter = 0 leaf_3_call_counter = 0 def leaf_1(): nonlocal leaf_1_call_counter leaf_1_call_counter += 1 def leaf_2(): nonlocal leaf_2_call_counter leaf_2_call_counter += 1 def leaf_3(): nonlocal leaf_3_call_counter leaf_3_call_counter += 1 def branch_1(): nonlocal branch_1_call_counter branch_1_call_counter += 1 transaction.on_commit(branch_2) transaction.on_commit(leaf_3) def branch_2(): nonlocal branch_2_call_counter branch_2_call_counter += 1 transaction.on_commit(leaf_1) transaction.on_commit(leaf_2) ```
I think we always want the input on the `>>` side of the operator to be able to utilise any indexes. So we get the following SQL: ```sql SELECT t, t <->> 'word' AS dist FROM test_trgm ORDER BY dist; ``` That should mean that we want `arg_joiner = ' <->> '`. <details> <summary>Index operator classes query where LHS is the indexed value</summary> <code> SELECT am.amname AS index_method, opf.opfname AS opfamily_name, amop.amopopr::regoperator AS opfamily_operator FROM pg_am am, pg_opfamily opf, pg_amop amop WHERE opf.opfmethod = am.oid AND amop.amopfamily = opf.oid AND opf.opfname IN ('gist_trgm_ops', 'gin_trgm_ops') ORDER BY index_method, opfamily_name, opfamily_operator; </code> </details> ``` index_method | opfamily_name | opfamily_operator --------------+---------------+------------------- gin | gin_trgm_ops | ~(text,text) gin | gin_trgm_ops | ~~(text,text) gin | gin_trgm_ops | ~*(text,text) gin | gin_trgm_ops | ~~*(text,text) gin | gin_trgm_ops | %(text,text) gin | gin_trgm_ops | %>(text,text) gin | gin_trgm_ops | %>>(text,text) gist | gist_trgm_ops | ~(text,text) gist | gist_trgm_ops | ~~(text,text) gist | gist_trgm_ops | ~*(text,text) gist | gist_trgm_ops | ~~*(text,text) gist | gist_trgm_ops | %(text,text) gist | gist_trgm_ops | %>(text,text) gist | gist_trgm_ops | <->(text,text) gist | gist_trgm_ops | <->>(text,text) gist | gist_trgm_ops | %>>(text,text) gist | gist_trgm_ops | <->>>(text,text) (17 rows) ```
Maybe: `if '\x00' in str(value):`
Chop blank line.
personal preference: I think `'_language' not in request.session` reads a bit clearer.
You want to avoid altering `self` here as subsequent calls will reuse this attribute even if this branch's conditions don't match.
Remove the blank line.
More importantly I think our wsgi handler currently has the oddity to always normalize to at least /, you will never get an empty path_info iirc
@schinckel this workaround shouldn't be necessary once #9765 is merged.
The form class is configuration too, is it not? You can group class attributes using a blank line, but this attribute is inherited from `BaseModelAdmin` where it is not separated. It just seemed odd.
think we can chop the blank lines in the last 3 tests
unused import (please check code with flake8 as there are some "expected 2 blank lines" warnings as well).
Unlike an "app", I wouldn't say that a model is "installed". Two solutions: - check if the app is installed and adjust the error message accordingly: "app X isn't installed" or "app X doesn't provide model Y" - just rephrase do "which doesn't exist"
`transform.lookup_name` isn't needed (same in unregister)
Here if a field is not a ForeignKey, but have many_to_one=True then it will go through formfield_for_foreignkey(). If that method returns None, then [None will be returned](https://github.com/django/django/pull/6236/files#diff-3c42de3e53aba87b32c494f995a728dfR168) and [db_field.formfield()](https://github.com/django/django/pull/6236/files#diff-3c42de3e53aba87b32c494f995a728dfR178) won't have a chance to be called. In this case, the formfield [will be ignored by ModelForm](https://github.com/django/django/blob/master/django/forms/models.py#L182-L185). Shouldn't we have a way to use the custom field's formfield() method even if it has many_to_one=True ? Note that this concerned is similar to the one raised in #24227
Why `BORN` is uppercased? :thinking: ```suggestion # Add new Country from the born_country select. ```
`DATE` -> `DATETIME`
please use parentheses instead of backslash
In the case of an empty select (`choices = []`), this will still output the `required` attribute, which is still not valid: ``` >>> class TestForm(Form): ... some_field = forms.ChoiceField(choices=[]) ... >>> t = TestForm() >>> print(t['some_field']) <select id="id_some_field" name="some_field" required> </select> ``` ``` html <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Validation test</title> </head> <body> <select id="id_some_field" name="some_field" required> </select> </body> </html> ``` Check it here: https://validator.w3.org/nu/#textarea
I meant `self.table or '(default)'` seems more neat and intuitive, but this way it is more explicit. :)
maybe create_and_call -> "test" to be a bit shorter
`.all()[0]` -> `.first()`
`.all()[0]` -> `.first()`
Perhaps it isn't worth breaking consistency. For sure it can wait and be done separately.
I think we should avoid writing new test suites that use fixtures. Fixture loading is extremely slow, and it's actually harder, IMO, to follow what the data should look like once you've aggregated it. I would suggest either creating all the data in a setUp method, or creating the data you need at the top of each test.
Wording suggestion: "Rendering {% include (template_name) %} raised (error)."
That'll be an interesting one to address when we move the schema editor to use model states instead. A problem for later :)
It's not resolved.
In [the original patch](https://code.djangoproject.com/attachment/ticket/10695/defer.6.diff) provided by Alex Gaynor we have: ```python if self.field_name not in instance.__dict__: ``` but Malcolm changed this line to the ```python if data.get(self.field_name, self) is self: ``` That's why I assumed that it was possible that `instance.__dict__` contained a `DeferredAttribute` instance. :thinking:
Period ```suggestion 'Quit and manually define a default value in models.py.', ```
Is there any reason we are using the name `compiler` here rather than `qn`. I think compiler is definitely clearer, but compilers are generally referred to as `qn` in django (note in particular in the signature of `Lookup.as_sql()`). I think there is clarity to be gained by using `compiler` instead, but I'd also like consistency between the signatures.
Right, the check would need to happen at `NegatedExpression.resolve_expression` time to be effective. Maybe better to not be to restrictive for now.
replace "will be removed..." with "RemovedInDjango21Warning"
Add a trailing comma.
The closing parenthesis should always go on the next line.
Frankly, I don't remember the details here, and I only have time to glimpse the PR now, but it seems that there may be two cases where multiple rows of returned values may be expected: `bulk_create()` on one hand, and an `UPDATE` statement on the other (you wouldn't need to returned values in an ORM `update()` call, but you would need them in the lower-level API).
We don't have strict guidance about this, but I think the test you've written is sufficient. Some `Field` tests will inevitably require more specific classes.
Do you think this would be an improvement: ``` python if can_share_in_memory_db: if test_database_name == ':memory:' return ... elif 'mode=memory' in test_database_name raise ... ```
This is a very minor detail but I think the rest of the code uses tripe double quotes (`"""docstring"""`) for docstrings.
I meant for the entire string here to be a constant; otherwise looks good to me.
It should give 'Modification de Title et Historique.'. I guess a gettext call is missing inside the `LogEntry.get_change_message`.
[I'd use `casefold()`](https://docs.python.org/3/library/stdtypes.html?highlight=casefold#str.casefold) and it looks we're not performing `lower()` in the `model._meta.db_table` and `field.remote_field.through._meta.db_table` containment checks below either. The `through` case is also untested.
I think we can remove `tearDown()` and `setUp()` and use ```python with translation.override(language): ``` instead of `activate()`.
`unordered_list` handles nesting which you don't seem to need here. A pedestrian implementation with `format_html` would be more readable: ``` help_items = [format_html('<li>{}</li>', help_text) for help_text in help_texts] return format_html('<ul>{}</ul>', ''.join(help_items)) ``` Furthermore, this implementation marks the result as safe, which is useful here. (Truth be told, I'm reluctant to use template tags or filters in Python code, for ideological reasons.)
Yep. That swings it for me. Leave it as is. Good one. Thanks.
I think you could skip the views file and use `lambda req: HttpResponse('OK')` instead.
Maybe `By default, return the django.contrib.admin.utils.get_deleted_objects.` instead of `By default this just returns django.contrib.admin.utils.get_deleted_objects.`.
`getattr(module, '__spec__', None) is None` is more concise.
You preach to a convert! However it's not about not being able to encode in UTF-8, but about the common file encoding on some platforms, especially Windows. I'm not using Windows for a long time now, so I can't say if UTF-8 is a common encoding nowadays or if it needs a special handling (say change a program preference) in most Windows text editors.
The class should really be named `JSONResponse`.
Although using only the name might cause usability issues in the case of an auto-generated name. The user will have to inspect the database or something in order to determine the index name if they're writing the migration by hand.
This check is also redundant.
A few grammar fixes: `You are trying to add the field '%s' with 'auto_now_add=True' to %s without a default; the database needs to set a default value for existing fields.`
Is this branching necessary? I can see how using `model.objects.none()` as a query holder could be problematic since it's not necessarily the same `QuerySet` class as the one from which `query` was extracted. Does the following work: ``` python def __getstate__(self): state = self.__dict__.copy() if isinstance(self.rhs, QuerySet): state['rhs'] = self.rhs.query return state ```
Is it possible for these asserts (and below) to fail without a bug in Django? If so, proper exceptions should be raised a la: https://code.djangoproject.com/ticket/32508
You can have a flatter function (less nesting) by doing: ```python if not remote_field: continue ```
```suggestion 1. (?P<a>\w+)/b/(?:\w+)c(?:\w+) => (?P<a>\\w+)/b/c ```
As far as I'm aware we don't need to iterate twice over the same list: ```suggestion return { '%s.%s' % ( fixture_name, '.'.join([ext for ext in combo if ext]), ) for combo in product(databases, ser_fmts, cmp_fmts) } ```
I see. Any thoughts about passing the _local_ field instead of the remote one and the model it's from? e.g. in the case of tests below `field_name` would be `'uuid'` instead of `'question_with_to_field'`. That's how the other `to_field` enabled admin views work and what `to_field_allowed` expects. It also feels like a nicer API to me and would allow you to stop passing `app_label` and `model_name`.
Please update your patch.
According to the [docs](https://docs.djangoproject.com/en/2.0/ref/settings/#std:setting-SECRET_KEY) and ticket https://code.djangoproject.com/ticket/24994 the type of `SECRET_KEY` can be either bytes or str. > Uses of the key shouldn’t assume that it’s text or bytes. Every use should go through force_text() or force_bytes() to convert it to the desired type. So a call to `.encode()` may not always work.
@pope1ni Sure, but that's a separate issue not related with this patch.
should this be super()
This argument can be single-lined. (It's only 111 chars so. Shorter if using `obj.__class__`)
I think this should work: ``` python connection = connections[db] if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy': loader.check_consistent_history(connection) ```
It might be smarter to validate the token first and only modify the session + redirect if it's valid. Otherwise it makes it really easy to create a session just by GET'ing a url (possible DoS vector). It also means you can't pass `accounts/password_reset` as the token and take advantage of our `request.path.replace()` code. It probably means validating the token twice, which is slightly slower. Seems fine to me if an invalid token gets leaked.
This check of for_save could be added to the place where resolve_expression is called in the compiler (first call resolve_expression, then check if resolved.contains_aggregate -> FAIL).
Is this branching necessary? I can see how using `model.objects.none()` as a query holder could be problematic since it's not necessarily the same `QuerySet` class as the one from which `query` was extracted. Does the following work: ``` python def __getstate__(self): state = self.__dict__.copy() if isinstance(self.rhs, QuerySet): state['rhs'] = self.rhs.query return state ```
`IS_DST_PASSED` is confusing, maybe `NOT_PROVIDED`.
that's the default in 1.9, but I don't if you want to include it anyway
then this has to be adopted as well
Things seem to be hung up on "Django-generated". I propose the following wording instead which seems clearer to me. I also note that "sufficiently" sneaked in there, but I'm not sure it really adds anything. Also note that the line wrapping should be maintained. ```suggestion "Your SECRET_KEY has less than %(min_length)s characters, less than " "%(min_unique_chars)s unique characters, or it is prefixed with " "'django-insecure-' indicating that it was generated automatically by " "Django. Please generate a long and random SECRET_KEY, otherwise many of " "Django's security-critical features will be vulnerable to attack." % { ``` (Note this suggestion may not apply cleanly in GitHub as I needed to include unchanged lines around the removed and added lines.)
don't need outer parentheses
`len(statements)` => `statements`
What about: ```py for secret in self.secrets: if constant_time_compare(self._make_token_with_timestamp(user, ts, secret), token): break else: return False ``` EDIT: f'uped the indendation. First time I think I am using for … else
Let's go with `...cannot contain whitespace.` (I briefly considered that, so it coming up twice, we'll take as a message from the universe.)
Is there a reason this can't be implemented as `BaseExpression.ordered = False` with a `OrderBy.ordered = True` override like other properties are dealt with? (e.g. `filterable`, `window_compatible`). This seems like unnecessary bi-directional coupling.
SimpleTestCase should be fine. I would use a separate test file so it can be deleted when the deprecation ends.
In practice this may again fail with a `PermissionError`. This might happen if the mount maps users in suboptimal ways. So after copying the file you'd no longer have the rights to change it at all. To keep backwards compatibility we'd still might want to ignore the `EPERM` here.
```suggestion @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'}) ```
This needs an order_by clause so that the results are guaranteed to come back in the right order.
The easiest solution might be to duplicate the warning in `OneToOneField`.
Yes, I had checked on master, which doesn't make sense. I get the same result on this branch.
Same as above (including the `prefix`)
Nit-pick: I think Django generally favors the syntax with parens instead of the `\` continuation char.
Model instances without primary keys are not hashable.
I wonder why it works without `list()` on PostgreSQL :thinking:
This line is now an unused import
You're right :+1:. I missed that.
Thanks for the patch. Clean and simple. Maybe that's just nitpicking but what about changing that `if` to `elif`? Because since `MEDIA_URL` must always explicitly end in slash, we might not want to add a slash if a trailing one is missing from it.
```suggestion return tuple(map(int, m.groups())) ```
response (no cap) unless you mean to write HttpResponse
Please do not change formatting
Do we need to ignore a warning here? `kwargs["value"]` should be a string path to the class, so is it not enough to assign it to the `STORAGES`? ```suggestion storages._storages[DEFAULT_STORAGE_ALIAS] = kwargs["value"] ``` Do we need to `del storages.backends`? The `storages_changed` callback should handle this for us :thinking:
This is required only for indexes defined in `Meta.indexes`. Should we pass list of pure fields names in `remove_index()` instead? For example: ```python def remove_index(self, model, index): self._create_missing_fk_index( model, fields=[field_name for field_name, _ in index.fields_orders], expressions=index.expressions, ) super().remove_index(model, index) ```
Missing `cls.cls_atomics` argument.
If we went with `get_model_class()` above, this could simply be `model`.
this can be 1 line (we prefer longer lines when it improves readability)
Ha! So it's actually related to your changes :-) Happy to hear that we'll eventually get the semantics that I would expect.
I'd keep the current version without `type()` since it's unrelated. If there's a need for this change, create a ticket with a corresponding test.
good catch, the second is fixed in https://github.com/fcurella/django/pull/1
Use `self.assertIs` and `self.assertIsNot` as these boolean expressions are noop.
Nitpick but `dict.get` default value for a missing key is already `None`.
I'm favoring contractions lately, e.g. "Don't", "shouldn't".
This is already covered in `expressions` tests https://github.com/django/django/blob/9624703a06187060c1a494e533f3e27fed946de3/tests/expressions/tests.py#L749-L760
style guide says this should be "Checks ..."
I would remove this sentence and let the person who changes this code in the future decide of the way to implement it.
We don't need to call `ArrayLenTransform()`: ```suggestion sibling_count=models.Max('sibling_ids__len') ```
First we should verify this passes before we toggle `is_active` to False.
On balance I will leave this one as it is.
Please move it above `'tr'`.
I think the style is not to have a blank line between the feature-flags, except in the base-backend. Please also see the MySQL feature flag.
I would assert that querysets return the expected tag. Also, temporary variables are unnecessary. For example: ```python tag = integration.tags.create() self.assertSequenceEqual(TTag.objects.filter(integration=integration), [tag]) self.assertSequenceEqual(TTag.objects.filter(integration__id=integration.id), [tag]) ```
Slightly more concise? ``` options = {'cls': self.encoder} if self.encoder else {} return json.dumps(obj, **options) ```
This line can be removed :thinking:.
```suggestion cls.set_up_called = True ```
is `link` what we call `rel` in the rest of the code? link has me thinking `<a href="...">`. Naming is hard.
title.verbose_name and same typo in else branch
Casting `int` to `int` is not necessary.
Nothing specific, it's just a pattern commonly used in Django. Probably because it was not the same in Python2.
Django should automatically validate `max_length` without a custom method: ``` from django import forms class MyForm(forms.Form): f = forms.CharField(max_length=1) >>> form = MyForm({'f': '12'}) >>> form.errors {'f': ['Ensure this value has at most 1 character (it has 2).']} ```
`it's django-generated` --> `it's a Django-generated`
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
> > this attribute should be `non_picklable_attrs` I think. > > ... or `pickleable` 😄 I need to confirm with Carlton. Yeah that's how I was going to recommend spelling it, because it _felt/looked_ right, but then I looked at the python pickle docs and they use `picklable` everywhere. TIL.
Lets also test that `values_list()` throws the same error. You can do it in the same test method.
Ahh, yes, sorry :facepalm: Good catch :dart:
Will this statement will fit on a single line? (119 characters is permitted.)
You can use `self.fail('Cyclic reference in Exception Reporter.get_traceback_frames()')`
Could drop the `alias` in `setUpTestData` and `order_by('pk')` or simply use `assertCountEqual` since ordering isn't that important.
Does it work if you use `override_settings` for this too? That would be cleaner.
please move this test next to the the `get_many` one
The old options look pretty easy to deprecate. We just accept `**kwargs`, and alias any older `kwarg` to the new one + deprecation warning.
We should also use `quote()` because non-integer primary keys may not work properly, e.g. `_40`. Fixed.
We cannot make serial pk assumption: ```diff diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py index 8b54611010..ea68a105d6 100644 --- a/tests/model_forms/tests.py +++ b/tests/model_forms/tests.py @@ -1765,10 +1765,12 @@ class ModelMultipleChoiceFieldTests(TestCase): f.clean([c6.id]) def test_model_multiple_choice_field_validate_choices_called_properly(self): + c1 = self.c1 + class CustomModelMultipleChoiceField(forms.ModelMultipleChoiceField, TestCase): def validate_choices(self, queryset, field_name, selected_choices): self.assertIsInstance(queryset, models.QuerySet) - self.assertQuerysetEqual(queryset.order_by('id'), [1], lambda a: a.id) + self.assertSequenceEqual(queryset, [c1]) self.assertIsInstance(field_name, str) self.assertEqual(field_name, 'pk') self.assertIsInstance(selected_choices, frozenset) ```
Here I think we just should just default to `json.dumps` if no encoder is specified. No need for an extra setting.
```suggestion # The not-provided sentinel is distinct from None, as which() returns None when not found ```
@felixxm that's a tricky one for sure. We could adjust MySQL's `allows_group_by_pk` feature to be based of `not ONLY_FULL_GROUP_BY` but that would likely incur a large performance hit which is definitely not suitable for a backport. I guess we could always skip the test on MySQL for now.
Make sure you reference your ticket number in the docstring (see the other tests in the file).
this goes below `from uuid ...` -- whether it's `import` or `from ... import` doesn't affect ordering
You can use `@modify_settings`, e.g. ```suggestion @modify_settings(MIDDLEWARE={ 'prepend': 'test_client.tests.urlconf_override_middleware', }) def test_resolver_match_when_urlconf_modified_by_middleware(self): response = self.client.get('/') ```
Looking at it we should also pass `obj` to this method and cache its results, just like we do with `get_group_permissions`: ``` python def get_user_permissions(self, user_obj, obj=None): """ Returns a set of permission names the user has. """ if user_obj.is_anonymous() or obj is not None: return set() if not hasattr(user_obj, '_user_perm_cache'): if user_obj.is_superuser: perms = Permission.objects.all() else: perms = usr_obj.user_permissions.all() perms = perms.values_list('content_type__app_label', 'codename').order_by() user_obj._user_perm_cache = set("%s.%s" % (ct, name) for ct, name in perms) return user_obj._user_perm_cache ```
I don't think it's good practice to change instances created in `setUpTestData` as they should be identical for the whole test class.
try to be consistent and use single quotes in most places (sorry existing code is inconsistent)
quit() .... to avoid a dead.... (chop "we" stuff)
I'm a bit worried about this `reload()` with overridden settings to trigger the `UserCreationForm` to be recreated with a custom model. It obviously works for this test case, but I think it will leave the customised `UserCreationForm` loaded at the end of the test, won't it? Doesn't this mean that we will potentially have dependencies between this test and other ones that also use the `UserCreationForm`? If so, I think we should find a way to do a `reload()` at the end of the test (in `tearDown()`?) after the settings have been put back to the default.
chop blank line
Frankly, I don't remember the details here, and I only have time to glimpse the PR now, but it seems that there may be two cases where multiple rows of returned values may be expected: `bulk_create()` on one hand, and an `UPDATE` statement on the other (you wouldn't need to returned values in an ORM `update()` call, but you would need them in the lower-level API).
Should also include `block_size` and `parallelism`
no restructured text (:class:) in docstrings please
Also, the atomic(savepoint=False) is really cheap (no DB action at all) when used inside another atomic. So, the atomic() here makes the atomic() inside save cheap enough to not matter (of course, benchmarks tell the truth).
See also my recent Trac ticket suggesting to normalize behavior across Python versions.
I added `exc_value` to the message as suggested by Chris.
Yes, this should be taken care of before.
we're now using pep8 style for docstrings "Validate whether ..." "return None", "raise ValidationError", etc.
you can use `a` here again.
Since `separate_logs` seems like a higher-level mode that does multiple things, maybe you can make it so the mode doesn't need to be stored as an attribute. For example, the following line could write to a `self.output_stream` that defaults to `os.devnull`. When running in script mode, it could be set to `self.stdout`. It would also eliminate the need for an `if` statement.
chop blank line
This used to be in an `else` clause, now it is not. Meaning that calling `self._extract_initial_form_count()` was pointless, because it will be overridden anyway.
I think the `_db` is redundant here - it's quite clear it refers to the database since we're in database features.
I think this test is obsolete now.
docstring with example input/output would be really helpful
I'd inline this helper within the subTest()
There's a class method called `setUpTestData()`. Please use that instead.
Can you revert this change? It seems unrelated.
There is no need to provide a value for `max_pages_num` - I think it should be calculated automatically: ```python (self.on_each_side + self.on_ends) * 2 ``` Otherwise developers can provide values that are incompatible with each other...
Use `no_color=True` to about matching against escape sequences. It looks like `verbosity=2` is also unnecessary? ```suggestion call_command("showmigrations", format='list', stdout=out, no_color=True) ```
This join generation concerns me - not that it won't work just that it's kinda magical and ugly. It would be awesome if we could use the relationship name somewhere. Perhaps `SubQuery(rel_name, qs=BLAH)` which is a similar API to `Prefetch`? I don't know how easy that would be to get to work as the `rel` object would probably need to do some of the transformations. It may allow a wider variety of rel objects to work though - e.g. subquery on a M2M field.
That's fair, the number of these created should be quite limited.
It's unused for empty results, so maybe we can move it below the `try...except` block: ```python try: sql, params = self.compile(col) except EmptyResultSet: empty_result_set_value = getattr( col, "empty_result_set_value", NotImplemented ) if empty_result_set_value is NotImplemented: # Select a predicate that's always False. sql, params = "0", () else: sql, params = self.compile(Value(empty_result_set_value)) else: sql, params = col.select_format(self, sql, params) if alias is None and with_col_aliases: alias = f"col{col_idx}" col_idx += 1 ret.append((col, (sql, params), alias)) ```
I'm not sure if the included traceback will give enough information to debug this, but it seems like a message something like "Rendering `<template name>` raised an exception, so {% include %} will render as an empty string." might be more helpful.
; -> ,
`'utf-8'` is the default. We can remove it.
So this can be done because we're not trying to _stream_ the zipped output anywhere, only write to a file. I came up with this which seemed to work well: ```python import pathlib, zipfile class SingleZipWriter(zipfile.ZipFile): def write(self, data): path = pathlib.Path(self.filename) name = path.stem if path.suffix == '.zip' else path.name return zipfile.ZipFile.writestr(self, name, data) ```
We already have a `reverse_ordering()`. Moreover this solution mutates `OrderBy` expression, so maybe: ```python if isinstance(order_field, OrderBy): if pfx == '-': order_field = order_field.copy() order_field.reverse_ordering() ordering.append(order_field) ```
I think you can to exclude conditional unique constraints here ```suggestion if not cls._meta.get_field(cls.USERNAME_FIELD).unique and not any( isinstance(constraint, models.UniqueConstraint) and constraint.fields == (cls.USERNAME_FIELD,) for constraint in cls._meta.total_unique_constraints ): ``` Kind of wish there was a way to avoid checking both the field and `cls._meta.total_unique_constraints`.
I wonder if it would be simpler and more efficient to filter out all empty querysets. from self and other_qs, then use `qs[0].self._combinator_query('union', qs[1:], all=all)`, accounting for the case where qs might have zero or one elements.
I see. Thanks @pope1ni and @timgraham
The only place I can vaguely remember `repr` being used is during the migrations. If you have the `AddIndex/RemoveIndex` operation in your migrations file, it shows this representation when the migrations are run. Since it is very common that a dev might want to create multiple gin indexes in the same table, it is necessary to have the `fields` of the index as well to distinguish the representation of these indexes. So, my decision would be based on how commonly devs have two gin indexes in the same model with the same fields but with different values of `fastupdate` or `gin_pending_list_limit`. If it is a very common case we might want to keep them in `repr`.
Collapse this decorator into a single line.
See also my recent Trac ticket suggesting to normalize behavior across Python versions.
Oh, sorry about that. I didn't notice there was more one commit. If a bug is being fixed even by a refactor, I think a regression test is still useful, but I'll defer to others.
You should be able to pass `is_active=False` to `create_user()`.
To be consistent with the rest of the codebase, I'd import `from django.utils.six.moves import range` first.
clarify: "model field"
`getattr` raises an exception when the attribute doesn't exist and no default is given
I don't see much value in including `opts`, `lookup_opts`, or `root_queryset`. I would limit representation to the `model` and `model_admin`. We can always add sth in the future, if needed.
Seems like there might be some opportunity to share similar logic in `_if_match_passes` and `_if_none_match_passes` but I'll leave it up to you as to whether or not it'll complicate things.
Can you please choose a new error code that is otherwise unused.
I'm unsure the purpose of `ugettext_lazy` here.
```suggestion 'The extra_tests argument is deprecated.', ```
Please rewrite `@override_settings` into a single line: ```python @override_settings(STATICFILES_DIRS="a string") ```
We don't use `self.value.value` anymore so we don't need to serialize it, we should use name instead, i.e. ```python v_string, v_imports = serializer_factory(self.value.name).serialize() imports = {'import %s' % module, *v_imports} return "%s.%s[%s]" % (module, enum_class.__name__, v_string), imports ```
```suggestion def test_stdin_read_inline_function_call(self, select): ```
That's all fair. I'm happy with just adding the check for 10+. I just like to ask all the questions to ensure that we think of everything. :wink:
I have a feeling something else if off here. The outer query's joining strategy should not have to special case inner queries as they are self contained expressions. My guess is that something is getting mixed up wrt to aliases because the same model is being involved in the outer and inner queries.
This assertion is not related with this fix so I would move it to a separate commit.
I'm surprised if `str()` is doing something here since `capfirst()` also has some `str()` calls.
Can you add an indication character right before and after `{{ output }}`, just to make sure that the output really comes at the right place. I.e.: `'{% endblocktrans %}>{{ output }}<'`
Can we wrap this line after the comma.
I'd omit a blank line here.
`TRADITIONAl` → `TRADITIONAL` (You let go of your shift key too early!) Perhaps reword to `# Add TEXT as an alias of TRADITIONAL for consistency with other backends.`
This is already covered in `expressions` tests https://github.com/django/django/blob/9624703a06187060c1a494e533f3e27fed946de3/tests/expressions/tests.py#L749-L760
You can have a flatter function (less nesting) by doing: ```python if not remote_field: continue ```
Nice work on `validate` 👍
It might not be possible. As far as I could tell, the original patch just did a find/replace without any analysis.
URL->path would be more correct, I guess.
Again, the inheritance chain looks questionable to me if this is needed.
I think this error message isn't very helpful (i.e. it's not actionable), and it leaks an internal detail, that we monkey-patch response objects with a `templates` attribute). What happened is a detail, what we need to know is **why** it happened, so we can fix it.
Removed extra code in PR #3852.
We can move the test that involves `login()` to the other pull request.
please use periods
`grouping[0][0]` is a name of the first column, so these two assertions are unnecessary: ```python self.assertNotIn('name', grouping[0][0]) self.assertNotIn('contact', grouping[0][0]) ```
In that case, sure.
`len(statements)` => `statements`
`has_select_for_no_key_update` -> `has_select_for_update_no_key`
This test is not decorated with `@isolated_apps` so we should use `local_models`. Please move it also outside of the context processor: ```suggestion self.local_models = [BookForeignObj] ```
> @felixxm in my view, below test code is our expected result. No, it's not. `1 != NULL` so why it's expected that `number` is excluded? see 512da9d5855 and ticket-23797 for more details.
I think it's fine.
Yes, this should be taken care of before.
I didn't follow the discussion closely but was there a reason for not including the duplicate value in the message? I thought that was in the first version of the message.
```suggestion from django.utils.deprecation import RemovedInDjango50Warning ```
Would os.path.normpath() be better here? It seems to remove the trailing slash.
We generally omit `Test that...` in docstrings. You could start by `No exceptions are generated...`
Call `super` here instead.
Sure. A test to check for the issue above, for example!
How about making these two flags `False` by default, thus making the feature not causing backwards incompatible changes.
```suggestion from django.utils.deprecation import RemovedInDjango50Warning ```
Revert unrelated changes.
Please drop that new line
A bit unrelated, but I would move the closing parenthesis to improve readability: ``` statement.parts['extra'] = ' WITH (pages_per_range={})'.format( schema_editor.quote_value(self.pages_per_range) ) + statement.parts['extra'] ```
```suggestion '<option value="" selected="">---------</option>', ```
Fine. They're gone. 😀
Can you reproduce any failure without `modify_settings()`? This test doesn't need anything from `PostgresConfig.ready()` :game_die: :thinking:
```suggestion return datetime.datetime(**kw, tzinfo=tzinfo) ```
https://www.postgresql.org/message-id/6721.1357856188%40sss.pgh.pa.us So probably the whole debate about touching the introspection for expressions should be closed. I could only get `pg_get_expr` to output whatever I used for `CREATE INDEX .. ON (lower(body), lower(title))` where `lower(body), lower(title)` would be returned by `pg_get_expr`.
There is no need to use `assertRaisesRegex()`: ```suggestion msg = 'Migration 0001_initial already exists. Use a different name.' with self.temporary_migration_module(module='migrations.test_migrations'): with self.assertRaisesMessage(CommandError, msg): call_command( 'squashmigrations', 'migrations', '0001', '0002', squashed_name='initial', interactive=False, verbosity=0, ) ```
I would change this so each of the positional arguments is checked against `self.suppressed_base_arguments`. Then e.g. `--verbosity` doesn't have to be listed first when both `-v` and `--verbosity` are provided. Also, if this is done, then `name` doesn't need to be distinguished / given a name in the argument list.
above you didn't include a blank line before each elif branch
I removed it.
The same amount of caching would be happening in the approach I'm suggesting. It's just that you would be calling `self.resolve_fields_and_relations() / self.all_relations = ...` (e.g. in a method) instead of accessing a cached property. It just seems like the usage in the PR doesn't really match `@cached_property`'s use case. In addition to what I mentioned above, the calls to `self.all_relations` in the PR aren't using the return value, it's just doing that for the caching side effect, which you could do more simply / explicitly.
The name `test_doesnt_keep_intermediate_files` would be better, to make it come up in a grep for `keep_intermediate_files`.
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
`raise NotImplementedError("ValuesQuerySet does not implement `only()`")`
Please try to follow the indentation style. Same goes for blank lines between the function definitions.
Ah yes.. I see what you mean.
Please use 4 space hanging indent style as seen elsewhere in this file such as `cls.superuser = ...`
preferred style is: ``` @override_settings( INSTALLED_APPS=[ "migrations.migrations_test_apps.lookuperror_a", "....", ], ) ```
chop blank line
Chop blank line.
Something like `test_header_omitted_for_no_to_recipients` may be more descriptive.
use single quotes
Put the `not field.many_to_many` first and the `isinstance()` second, please.
I don't think this test is needed. The default implementation is already tested as well as overriding the method.
If it's changed to return naive current local time when `USE_TZ=False` (as discussed above) that should also be mentioned here.
this could be 1 line
Remove unnecessary hanging indent, simplify: `context['can_change_related'] = True`
```suggestion time_keeper = TimeKeeper() if options.timing else NullTimeKeeper() with time_keeper.timed('Total run'): ```
`CANONICAL_RANGE_BOUNDS` is unnecessary: ```suggestion def __init__(self, *args, default_bounds='[)', **kwargs): ```
I would keep the tests as atomic as possible. That aside, if you want to test the behavior for `abstract=False`, I would recommend dropping the PK and test that the check fails, hence the code inside the if-statement is actually being executed.
I don't have a strong feeling about either case; I think both are equally readable. I was only pushing the `else` alternative forward in the name of consistency. I wish there a was a `try/elif` construct for this exact case.
I guess `get_admin_readonly_field()` could take `response` instead of `response.context['adminform']`.
This is only possible if the database allows multiple constraints on the same fields so we can also check the `allows_multiple_constraints_on_same_fields` feature flag.
which must return True if the current user can access the view.
As far as I'm concerned this should impact only `307` and `308` redirects, so maybe: ```diff diff --git a/django/test/client.py b/django/test/client.py index b26504f762..e4201bead4 100644 --- a/django/test/client.py +++ b/django/test/client.py @@ -827,7 +827,10 @@ class Client(ClientMixin, RequestFactory): if response.status_code in (HTTPStatus.TEMPORARY_REDIRECT, HTTPStatus.PERMANENT_REDIRECT): # Preserve request method post-redirect for 307/308 responses. - request_method = getattr(self, response.request['REQUEST_METHOD'].lower()) + request_method = response.request['REQUEST_METHOD'].lower() + if request_method != 'get': + extra['QUERY_STRING'] = url.query + request_method = getattr(self, request_method) else: request_method = self.get data = QueryDict(url.query) ```
The reason for this is that your for loop is running on both dbs, at first `allow_migrate()` returns `True` for the first db (`default`) thus setting `connection`, `allowed_len`, `db_alias` accordingly, but you are not terminating the loop, making it try `other` db with `allow_migrate()`, returning `True` and setting the variables again.
Hi, this name should be assert_foreign_key_exists
In a project where a similar need arose, I chose to sort-of monkeypatch the function instead of copying. The code was, essentially, a general "utility": ``` python def _clone_func(f, new_globals): from types import FunctionType as Function return Function(f.func_code, new_globals, f.func_defaults, f.func_closure) ``` and its use in my child class, adapted to this case: ``` python class WSGIRequestHandler(simple_server.WSGIRequestHandler, object): #... handle = _clone_func(simple_server.WSGIRequestHandler.handle.im_func, globals()) ``` This, essentially, re-interprets the parent class's method with the importing module's globals (of which, the only one relevant is `ServerHandler`). Note the use of `im_func` above to get from the method to the function; also, note that I only tried this on Python 2. I'll see now if it works for Python 3 as well.
Right so I think the skip condition in order to avoid false failures should be: `@unittest.skipIf(connection.ops.max_name_length() > 74` but it would be better if we could keep the skip condition as it is so the test is run on all databases and automatically generate a model that has a field name with length `connection.ops.max_name_length() + 1` If you're still unsure about this, let's sync up on IRC.
Does this check make sense now that we only handle it if it starts with a relative path? (ie if the prefix where there it would start with a slash anyways)
This message shouldn't be used when constraint is defined with `expressions`.
I would have been interested in something closer to werkezeug's. That takes encoding as a parameter, etc. **Edit**: TL;DR skip to https://github.com/django/django/pull/2932/files#r15440287
Python functions implicitly return `None` if return is not called. I feel being explicit is better for a test.
```suggestion reg_key_value, _ = winreg.QueryValueEx(reg_key, 'VirtualTerminalLevel') ```
Could you please keep the cross-app reference that we had before.
Jinja raises `jinja2.TemplateSyntaxError` in `render()` not in `get_template()` when an error is in the included template, so that's the real usage. We don't need to mock anything here.
Since `fan_since` is None at this point, the test cannot pass! Same below.
A doc string is needed for get_db_converters so any 3rd party backends know exactly what is expected from this method
It might be better to describe how ISO-8601 or give a reference. I'm not sure that the example helps much. I think a description for `ExtractIsoYear` should be added to the docs as well.
OK. Thanks for taking the extra time to explain. I'll have a think. It's evening for me now. Either way: thank you for your effort!
`assertRaisesRegex` should be avoided, I believe, cc @timgraham I've seen a pattern in the migration tests where `self.assertIn` is used to check for parts of the message.
The docstring should state the expected behavior rather than including preambles like "Tests that", "Verfies that..." (that is the purpose of all tests).
Yeah that's what I suspected too. Stupid SQL.
assertTrue -> assertIn
For the keys, I was thinking we should use the full field name (e.g. 'BigAutoField') rather than some other value like 'big_auto'. I think it would be less mental effort for the developer to have to convert camel case to underscore and remove "field". Let's alphabetize the keys too.
`cls.staff_user = User.objects.create_user(username='user', password='secret', email='user@example.com', is_staff=True)`
```suggestion 'Accept': '*', 'Host': 'example.com', ```
Please rebase your branch. Master now supports Python 3 only, so `unicode_literals` may be removed.
We'll also be able to simplify this to the following when #11359 is merged ```suggestion other = Value(other) ```
Do we need `requires_system_checks` flag? All tests pass without this line.
But it's already covered by the first assertions. Moreover `assertEqual()` uses `assertTupleEqual()` internally.
I think in the first version of the patch you had something like `assertIsInstance(lat, float)` which seemed better to me.
chop "Tests that" prefixes, otherwise LGTM. I'm slightly nervous this will create weird edge cases that haven't been tested but I guess that's why it's alpha. :-) (I suggested a simpler commit message in the PR title too).
The `index_type = indexes['reporter_id'].pop('type', None)` pattern from the old test should be used rather than a loop -- otherwise, if there' some mistake in the if-condition or if the loop is empty, it's not certain that this assertion will ever run.
I kinda dislike that `KeyError` spans this much code, but I do not see a nice way around it either. On a minor nitpick I'd also rename `_get_current_token` to just `_get_token` just to be in line with `_set_token`
no `u''` prefix -- use `from __future__ import unicode_literals` if you need it.
`__unicode__` instead of `__unicode`
As the code itself hints, there's no reason to assume the imported attribute is a class.
Ahh right, I forgot about it. Thanks!
Could use `charset` over `character_set`? It's a well-known "word" and losing the underscore might make this less noisy visually, especially in the f-strings. Only a suggestion, feel free to ignore.
```suggestion return ''.join([ self.handle_word(word) for word in words ]) ``` I changed `handle_word` to return `word` in remaining cases.
Why we have here a `column` from the `old_field`? ```suggestion "column": self.quote_name(column), ```
I guess we could use `bulk_update` but not a big deal.
There's a difference between this and other cases -- this calls `Logger.error()` directly, while others go through `log_response()`. I'm not sure that, in general, taking threads and async in consideration, calling `sys.exc_info()` out of an `except:` block is valid (although it is done here in all the other cases). However, if it is, we might as well call `security_logger.exception()` instead.
n.b. just noticed these tests could also use `assertIn` / `assertNotIn` rather than `find()`. But it seems the tests in this file mix the two, so no worries.
need a trailing comma to appease isort style
we lost 'invalid' here
Please wrap these lines at 79 characters.
too many newlines (check code with flake8).
This condition is problematic on databases that use random rather than serial pk values (failure observed on CockroachDB).
Oh are we creating the `_like` indexes even when `unique=True`? I wasn't expecting that.
( #7778 )
I guess none of these lines aren't tested since I don't see any new tests that use `db_tablespace`.
I wonder if this might be bit more readable: `model = type('A' * 101, (models.Model,), {'__module__': self.__module__})`
Passing `lead` and `trail` to the `trim_punctuation()` looks unnecessary. This method is called only here so we always pass `('', word, '')`. Maybe: ```suggestion lead, middle, trail = self.trim_punctuation(word) ``` and ```python def trim_punctuation(self, word): """ Trim trailing and wrapping punctuation from `word`. Return the items of the new state. """ lead, middle, trail = '', word, '' ... return lead, middle, trail ```
You can replace `table._meta.app_label` and `table._meta.object_name` by `table._meta.label`
There's no test for the `and not callable(self.lastmod)` branch.
"nonexistent" would be the word
I wonder if something like `self.PO_FILE_KO.replace('/ko/', '_do_not_pick`)` would make that a bit more resilient to future changes. No strong feeling either way.
I'm not sure why the change I suggested to add `ATan2.as_sqlite()` targeting SpatiaLite >= 4.3.0 resolved this issue for me locally and not on Jenkins. Could you confirm the version of SpatiaLite on the xenial and bionic boxes, @timgraham? (Maybe a build just needs to be re-triggered.)
This will overwrite an explicitly given message if you use ``` python validator = DomainNameValidator(accept_idna=True, message='Only IDNA domain allowed') ```
Use a single line. Our [style guide](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style) allows lines up to 119 characters if it helps readability.
Copy / paste? I would have expected the ordering to change for the `duth1` and `duth2` arguments.
Why this restriction? If several files are saved in a quick sequence — for instance with a text editor's "save all" feature" — only the first change willl be taken into account.
This is `verbose_name` and you should make it translatable. Look at how other contrib apps do it.
Can replace `**dict(through_defaults, **{…})` and use unpacking generalisations: `**{**through_defaults, **{…}}`.
The system check framework will throw an error if a model uses `DecimalField` without those arguments. I'm not sure if there's a use case for instantiating `DecimalField` outside of a model (perhaps in `output_field`, but don't think validators are used there). All in all, I think the current version is okay.
Single quotes please and wrap at 119 characters. (Please do this everywhere as appropriate.)
Use PEP257 verb style for new docsrings: "Create... use..., etc."
Doesn't exist in 1.5, be careful when backporting
this line should be: `def __init__(self, *args, **kwargs):`
I think we should add this format to the `DATE_INPUT_FORMATS` for backward compatibility.
The primary key attribute can only be retrieved on certain databases, this will not work on Oracle or MySQL.
I should have been clearer but `firstname` and `lastname` can be omited as they'll default to `''` if missing.
This test is not decorated with `@isolated_apps` so we should use `local_models`. Please move it also outside of the context processor: ```suggestion self.local_models = [AuthorWithIndexedNameAndBirthday] ```
You could use a loop and subTest to make the test less repetitive. e.g. have a list of dicts like `{'poly__equals': Point(1, 1)}` and then use `qs.filter(**filter_kwarg)` within the loop.
please remove added newline
Ticket number and a note about antivirus are not necessary, maybe: ``` """HTML email doesn't contain forms.""" ```
+1. I like this approach.
`self.each_context` actually already contains a fully populated app list, under `available_apps`. We could make this more efficient by extracting `app_list` from `available_apps` rather than calculating it twice. ``` context = self.each_context(request) app_list = context['available_apps'].get(app_label) if not app_list: raise Http404('The requested admin page does not exist.') context.update({'app_list': [app_List], ...}) ```
Could you please follow the previous indentation style :)
Actually, I think we can skip the router stuff and just use `django.db.connection`. These tests aren't run with custom routers so this'll always be run on the default database. (so we can move the skip condition to `test_long_column_name`).
Few naming suggestions: `ordering_element` -> `expr` `ord_sql` -> `expr_sql` `ord_sql_params` -> `expr_params` `additional_sql_params` -> `ordering_params` `ord_clauses` -> `ordering_expr_sql`
Yea, it seems a bit unusual, but I don't have an alternative to suggest.
Yes a separate PR with unification sounds good.
I would assert `len(warns) == 1`.
Please move this to a separate commit as an extra test coverage.
`An expression containing multiple expressions. Can be used to provide a list of expressions as an argument to another expression, like an ordering clause.`
`assertIsNot()` as well.
A list comprehension is preferable here as `str.join()` converts to list internally anyway. It is better performance to provide a list up front. - https://stackoverflow.com/questions/9060653/list-comprehension-without-in-python/9061024#9061024 - https://github.com/adamchainz/flake8-comprehensions/issues/156 ```suggestion result = ', '.join([ f'{field} = VALUES({field})' for field in map(self.quote_name, update_fields) ]) ```
I'd suggest something like `'example@atm.%s' % 'a' * 63` (and 64 for the invalid one)
I think a test for this change is missing. This would probably go in `admin_views` whereever the other tests for the `delete_view` are.
You mean `super()`? Seems okay to me.
I think that should be `hire_date` (two words).
How about: ``` if storage_engine == 'InnoDB': return self.connection.mysql_version >= ( (10, 2, 2) if self.connection.mysql_is_mariadb else (5, 7, 5) ) return storage_engine in ('MyISAM', 'Aria') ```
This must use `mock.patch` else it will leak between tests as the connection. Also it should be `connection.features.can_rollback_ddl` and not `connection.can_rollback_ddl`.
I would use `sites.E101` to separate them from checks related with `CurrentSiteManager`.
The docs say, "For performance reasons, `from_db_value` is not implemented as a no-op on fields which do not require it (all Django fields)."
Remove this line as `opts` is already added by `ctx = Context(context)`.
use `.objects.create` rather than .save()` (works the same, it's just a bit shorter)
`assertIsNot()` as well.
Could you replace "create model" and "add field" with "CreateModel" and "AddField" respectively, please.
Is there a reason you used `None` here rather than `constants.GET_ITERATOR_CHUNK_SIZE`? As I was amending the docs with 'The default of ``None`` uses a value of 100." I thought further explanation about that reasoning might be useful.
single line please
> in In.get_prep_lookup and Exact.get_prep_lookup , still there was no failed testcase for this branch. Should I push those changes too? Let's leave it for a separate clean-up.
Do we need to check if `token` is an instance of `Mailbox`? I couldn't find an example that needs this check.
I would move it to the `ManageRunserver` class.
IMO there is no need to check a file content: ```suggestion msg = '...' with self.assertRaisesMessage(CommandError, msg): call_command( 'squashmigrations', 'migrations', '0001', '0002', squashed_name='initial', interactive=False, verbosity=0, ) ```
To anyone curious, it's likely a problem of when (or rather, where) `connection.features` gets evaluated. ```python await a_getattr(connection.features, "supports_json_field") ``` is executed in the following order: ```python foo = connection.features bar = a_getattr(foo, "supports_json_field") await bar ``` Evaluating `connection.features` does the following: 1. Since `connection` is a `ConnectionProxy` instance, it first finds a default connection 2. It takes that connection and returns a `DatabaseFeatures` instance bound to it That first step is tricky because it uses the `_connections` object as a cache. `_connections` is an instance of `asgiref.local.Local`, which is thread-local by design. So the same cache instance will contain different attributes depending on where (which thread) it's accessed from. Now, when `connection.features` is evaluated in the main thread, it returns a `DatabaseFeatures` instance bound to the connection object created in the main thread (and only safe to use within that main thread). The last puzzle piece is `sync_to_async`, which creates a one-off worker thread to complete a synchronous function call without blocking the event loop. The `getattr` call executed within `sync_to_async` runs in a new thread. This new thread attempts to use the features object passed from the main thread. Which, in turn, tries to use the connection object created in the main thread (to check if the connection is to a MariaDB server).
We should also use `quote()` because non-integer primary keys may not work properly, e.g. `_40`. Fixed.
`~` is not a supported operator, this should be `-`.
remove "but we can't do...."
I think using a semantic name would help here, e.g. `lookup_kwarg_null`
After a quick look I _think_ these can be considered deterministic as well because they don't rely on a connection state directly; they expect `conn_tzname` to be passed as argument.
I think we should revert the logging changes as it appears we're adding additional logging calls where they didn't exist before.
It might be useful to continue allow passing `None`. That feels a bit more natural to me than passing `set()`.
I guess "@" is some convention I don't know about.
couldn't -> can't
is the value ever modified such that we need a setup method? if not , I think it would be better if it were simply a class attribute.
I think we can add `settings.LANGUAGE_CODE` directly into `E001` (like in `core/checks/caches.py`) and leave this method unchanged.
The URL may be incorrectly encoded....
I think we can reuse `Parent` instead of `Author` and maybe add `ChildNullableParent` instead of `Book`.
Please wrap docstrings at 79 characters and include a period at the end of the sentence.
Maybe prepend final sentence with "Since you have set MIDDLEWARE, " -- otherwise it kind of reads as if MIDDLEWARE_CLASSES is _always_ ignored in 1.10.
Due to hanging indent, `).first()` should be on the next line.
You'll have to leave the `or` above to appease `flake8`.
Except the message displayed isn't quite right in this case: ``` The X "Great new X" was added successfully. You may edit it again below. ``` It's not true that it may be edited.
I'm thinking a single test setting the `custom_name` would be enough.
+1, keep self.verbosity because third-party packages will assume ```self.verbosity``` is part of DiscoverRunner. This is a breaking change that's out of the scope of the PR.
This change looks unrelated.
The `('443' if self.is_secure() else '80')` block is repeated twice - can we extract it to a variable at the start? ``` port_in_x_fw_host = False default_port = ('443' if self.is_secure() else '80') ```
confirmed: ``` >>> from collections import OrderedDict >>> isinstance(OrderedDict(), dict) True ```
Nuke the `list()` call
Put this on the previous line.
I have some nitpicks to these tests but I can push them later after the final review.
no dash in "email"
``` python not ( isinstance(field, (models.DateField, models.DateTimeField, models.TimeField)) and (field.auto_now or field.auto_now_add) ) and` ```
@lukaszb which contrib/admin file are you talking about? Notice [how contrib/admin/options.py](https://github.com/django/django/blob/master/django/contrib/admin/options.py#L1860) doesn't have the missing new line icon. Make sure not to add two newlines, just put your cursor right where the missing new line icon is and press ENTER once.
This is the only case that fails if the patch is reverted.
Removing `**kwargs` from the `as_vendor()` methods sounds good to me.
A doc string is needed for get_db_converters so any 3rd party backends know exactly what is expected from this method
Consider using a single test and `subTest()` to avoid the same boilerplate in each test.
I think you can simplify the above method implementation quite a bit by using more tailored logic. For example, you can start the method with: ```python if self.verbosity == 0: return ``` and then you're left with just two cases: verbosity `2` or more (log everything), and verbosity `None` and `1` (log `INFO` or higher). This should let you do away with the need for a separate `logging_level` variable. Once your test below is fixed, it should help you understand what's needed here.
Perhaps the following? ```python collections.deque(self.result, maxlen=0) # consume iterator quickly. ``` Some performance numbers: ``` Python 3.7.0 (default, Sep 15 2018, 19:13:07) Type 'copyright', 'credits' or 'license' for more information IPython 6.5.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: from collections import deque ...: from itertools import repeat ...: n = 10000 ...: %timeit -n1000 [__ for __ in repeat(0, n)] ...: %timeit -n1000 for __ in repeat(0, n): pass ...: %timeit -n1000 list(repeat(0, n)) ...: %timeit -n1000 deque(repeat(0, n), maxlen=0) 195 µs ± 5.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 74.3 µs ± 204 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each) 53.2 µs ± 4.66 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 43 µs ± 428 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each) ``` So even calling `list()` seems better than an empty loop, and `collections.deque()` is fastest because it is written in C.
I removed these assertions.
These check should respect `required_db_features`, so we need to omit checking conditions for `UniqueConstraint`\`s if `connection.features.supports_partial_indexes or 'supports_partial_indexes' in cls._meta.required_db_features`.
I would assert against `url_name`, e.g. ```suggestion self.assertEqual(response.resolver_match.url_name, 'overridden_urlconf_view') ```
I would put "decode" into quotes or so (@felixxm can certainly tell us what the proper syntax is)
This is exactly the same as the previous case, maybe `('test@example.com',)`
Instead of defining `success`, just return directly in the above code. I think it is simple enough.
``` py # #23405 - ... ```
I'd use `return a if b else c` but it's up to you.
Not sure if this might mask some exceptions, but here's what I came up with for now: ``` python for db in connections: connection = connections[db] try: connection.cursor() except ImproperlyConfigured: # Raised by the dummy backend. pass else: loader.check_consistent_history(connection) ```
I would move tuple unpacking to the `for` loop, i.e. ```python for column, expected_string in testable_column_strings: ... ```
Tests for this method seem missing. It seems like we need a better way to build these reprs that's not so complicated and repetitive for each index.
Ah right. You noted on the ticket that's not the case with the 'spawn' mode, but I guess we shouldn't concern ourselves with that right now, as the test runner doesn't support that. @Valze - maybe make a note for your spawn-mode GSoC project? 😉
I think this should be a `ValueError`
`Editor 1` -> `Editor`
Low-level tests are not necessary, it should be feasible to test using `Lexeme()` with special characters in a query.
I added the comma to be consistent with the `include` and `condition` attributes. Also, on `ExclusionConstraint` we separate attributes by comma but not on `UniqueConstraint`, so 🤷 indeed..
Use `self.quote_name()` to do the quoting of fields: ```suggestion return 'ON CONFLICT(%s) DO UPDATE SET %s' % ( ', '.join(map(self.quote_name, unique_fields or ())), ', '.join(f'{field}=excluded.{field}' for field in map(self.quote_name, update_fields or ())), ) ```
I don't think it a good place for this, I would rather add loop by `self.constraints` and `self.indexes` below ```python self.index_together = normalize_together(self.index_together) ```
Don't hardcode a primary key (or `Model.__str__()`). Wrap strings at 79 characters.
Alright let's keep it as it is then. I just wanted to make sure this case was covered by a test.
Trailing dot is missing.
```suggestion self.assertEqual( ```
I'd use a single line.
I wouldn't move `if not ...` to the separate line, i.e. ```python Error(E002.msg.format(tag), id=E002.id) for tag, _ in settings.LANGUAGES if not language_code_re.match(tag) ````
It should be enough to add a list of missing fields, e.g. ```python _('ManagementForm data is missing or has been tampered with. Missing fields: %s') % ', '.join(form.errors), ```
Yeah that's what I suspected too. Stupid SQL.
`HTTPS` is not necessary, so I removed this line.
Appreciate what you've done with the tests but I think they're harder to comprehend now. As a Django dev I can jump in and read model classes, but the helpers are obscuring things a bit to me. Also you now have multiple tests per test method now - ideally there should just be a handful of classes per test and some assertions. I guess you can split based on overriding, non-overriding, etc.
I would rather create a custom model with field that has `db_column`, e.g. ```python project_state = self.apply_operations('test_rfwdbc', ProjectState(), operations=[ migrations.CreateModel('Pony', fields=[ ('id', models.AutoField(primary_key=True)), ('field', models.IntegerField(db_column='db_field')), ]), ]) operation = migrations.RenameField('Pony', 'field', 'renamed_field') new_state = project_state.clone() operation.state_forwards('test_rfwdbc', new_state) ```
Relying on pk might be problematic since we shouldn't assume the values that the database might assign.
True, I mixed up sth when switching branches. Nevertheless they work on all databases except PostgreSQL, so we need to fix this.
```suggestion raise self.exception_class(f'The connection {alias!r} doesn't exist.') ```
@akulakov `passed_check` is to check if list is not empty. if it is not empty, method will return no error, otherwise error will be returned (`[] if passed_check else [W020]`).
Makes sense, lets keep things as they are then.
chop trailing newline (check code with flake8 to see a couple other minor formatting things)
I envisioned something like this: ``` python content = None with open(path, read_mode) as f: try: content = f.read() except UnicodeDecodeError: # If mimetype suggests the file is text but it's actually binary, # read() will raise a UnicodeDecodeError on Python 3. pass # If the previous read in text mode failed, try binary mode. if content is None: with open(path, 'rb') as f: content = f.read() mimetype = DEFAULT_ATTACHMENT_MIME_TYPE ```
looks good, but we should move the `allowed_len is not None` check outside the loop as it won't change each iteration
We should take keys into account (like in `__eq__()`), so maybe: ```suggestion if hasattr(self, 'error_dict'): return hash(tuple(sorted(make_hashable(self.error_dict)))) return hash(tuple(sorted(self))) ```
Lets have the argument follow a namespace based ordering ```suggestion def add_field(self, app_label, model_name, name, field, preserve_default): ```
Testing `prepare_database()` is difficult (a lot of mocking is needed to get a proper isolation). IMO we can push this without tests.
We should use a custom storage for this test (instead of mocking).
I believe there is a typo here. ```suggestion '`django.forms.BaseForm._html_output` is deprecated.' ```
Sorry - typo. Fixed.
It might be nice to create some objects and verify the ordering so that models aren't inadvertently refactored and ordering attributes lost which would eliminate their regression nature.
Passing `filter` to kwarg will cause it to be in `self.extra` as well which could interfere `as_sql()` formatting.
Unrelated, but I wonder if we need '-k', '-r', '-d' for the new options rather than only their verbose counterparts. Seems like we are going to run into a conflict a some point with two options with the same first letter if we keep doing that.
Use `as e` or as `as exc` to match other code.
Black won't mind. 😀
Really really minor nitpick; if flake8 etc do not complain maybe move `entropy.` up one line; looks really ugly like this especially if the code below is longer :)
We can reuse an existing migration: ```suggestion MIGRATION_MODULES={"migrations": "migrations.test_migrations_manual_porting"} ```
There are only two uses of `_destruct_iterable_mapping_values()` and we use this same pattern exactly. I think that you could push the `isinstance(..., Mapping)` check into that function.
Do Django's automated tests ensure backward compatibility? If not I probably don't have enough familiarity with Django to do so. Glad I'm not taking crazy pills, though. :)
Right, my bad.
actually I think the preferred solution is to omit the u'' prefix, even on Python 2. The output already includes `from __future__ import unicode_literals` so there shouldn't be a problem without it.
chop blank line
The benefit of the extra tests is they make the HTML structure clear, but the CSS selector perhaps does that... We should use hanging indent for the wrapping, so maybe pull the CSS selector into a variable, so it's easy read/see, and then the lines would be shorter too, and we can just have the two assertions.
Please revert this unrelated change.
I think that you should partly restore behavior before https://github.com/django/django/commit/b484f167bed61f4cff215208eddf98a0655239d4 i.e. ```python cursor = self.connection.cursor() try: cursor.execute(self.ops.set_time_zone_sql(), [timezone_name]) finally: cursor.close() ``` instead of ```python with self.connection.cursor() as cursor: cursor.execute(self.ops.set_time_zone_sql(), [timezone_name]) ```
Doesn't seem required now that the test is skipped on non-Oracle.
Please revert this unrelated change.
> Wouldn't we have to change the tests, if by any chance we change the class name? Yes and it's expected, we will be aware which tests are affected by our change to the base class. IMO it's also more readable.
There is no need to create a random suffix. We should also test all described scenarios, e.g. ```suggestion test_connection = copy.copy(connections[DEFAULT_DB_ALIAS]) test_connection.settings_dict = copy.deepcopy( connections[DEFAULT_DB_ALIAS].settings_dict, ) tests = [ ('test.sqlite3', 'test_1.sqlite3'), ('test', 'test_1'), ] for test_db_name, expected_clone_name in tests: with self.subTest(test_db_name=test_db_name): test_connection.settings_dict['NAME'] = test_db_name test_connection.settings_dict['TEST']['NAME'] = test_db_name creation_class = test_connection.creation_class(test_connection) clone_settings_dict = creation_class.get_test_db_clone_settings('1') self.assertEqual(clone_settings_dict['NAME'], expected_clone_name) ```
Same here, the unique constraint is only removed in the ORM but will still persist in the database.
This conditional clause can be dropped once we perform an initial `not self._prefetch_related_lookups` as described above.
I know that tests in `queries` are mixed up, however I would move it to the `Queries6Tests` class.
Use single quotes consistently (could be done above and below also).
```suggestion timeout=60, ``` "60" on its own looks a bit weird. Also, it surely doesn't need to be as long as 60 seconds if `DELAY_AFTER_FAILED_LOGIN` is so much smaller? What if `DELAY_AFTER_FAILED_LOGIN > 60`? Maybe this should be: ```suggestion timeout=self.DELAY_AFTER_FAILED_LOGIN + 10, ```
I think we prefer a different indentation style in docstrings, i.e.: ```python """ A Q object with an empty condition should be rejected as the conditional expression in a Case(). """ ```
It should be good as long there's no foreign tests or models that get imported along the way. From what I can see it should be good!
OracleDbshellTests ("TestCase" implies this is meant to be subclassed.)
No need to use `get_user_model()` (don't think any of the other tests do that?), I think.
Thanks for being more explicit about this than I was! (https://github.com/django/django/pull/14396#discussion_r632488901)
Looking at it we should also pass `obj` to this method and cache its results, just like we do with `get_group_permissions`: ``` python def get_user_permissions(self, user_obj, obj=None): """ Returns a set of permission names the user has. """ if user_obj.is_anonymous() or obj is not None: return set() if not hasattr(user_obj, '_user_perm_cache'): if user_obj.is_superuser: perms = Permission.objects.all() else: perms = usr_obj.user_permissions.all() perms = perms.values_list('content_type__app_label', 'codename').order_by() user_obj._user_perm_cache = set("%s.%s" % (ct, name) for ct, name in perms) return user_obj._user_perm_cache ```
I'd be great to assert the permission and content types were appropriately created as well!
We should validate `self.requires_system_checks`, currently we run all checks also for any truthy value e.g. `requires_system_checks = 'x'`, maybe ```python if not isinstance(value, (list, tuple)) and value != '__all__': raise TypeError(...) ```
Maybe? ```suggestion def _field_non_database_attrs(self): ```
Why we evaluate the queryset? Couldn't we keep the `QuerySet` object? ```suggestion ret_val.extend(custom_queryset_dict[ct_id]) ```
Why we evaluate the queryset? Couldn't we keep the `QuerySet` object? ```suggestion ret_val.extend(custom_queryset_dict[ct_id]) ```
Assuming this works, don't forget that we'll need some solution (like the environment variable used before) to only run `mark_expected_failures_and_skips()` when running Django's test suite.
non existing -> nonexistent
Most of these operators overlap with range lookups, I think we should use the same names for consistency, i.e. - `LESS_THAN` -> `LT`, - `GREATER_THAN` -> `GT`, - `LESS_THAN_EQUAL` -> `LTE`, - `GREATER_THAN_EQUAL` -> `GTE`, - `IS_CONTAINED_BY` -> `CONTAINED_BY`, - `NOT_EXTEND_LEFT_OF` -> `NOT_LT`, - `NOT_EXTEND_RIGHT_OF` -> `NOT_GT`, - `STRICTLY_NOT_EXTEND_LEFT` -> `FULLY_LT`, - `STRICTLY_NOT_EXTEND_RIGHT` -> `FULLY_GT`, - `IS_ADJACENT_TO` -> `ADJACENT_TO`. Maybe we can also reuse this operators in lookups :thinking: , e.g. ```python @RangeField.register_lookup class FullGreaterThan(lookups.PostgresSimpleLookup): lookup_name = 'fully_gt' operator = RangeOperators.FULLY_GT ```
This seems overly complicated and probably also wrong with tables that are JOIN'ed more than once as the following JOINs will have aliases that are not `db_table`. ```python > from django.contrib.auth.models import User > User.objects.filter(groups__name='foo').query.alias_refcount {'auth_group': 1, 'auth_user': 1, 'auth_user_groups': 1} > User.objects.filter(groups__name='foo').filter(groups__name='bar').query.alias_refcount {'T4': 1, 'T5': 1, 'auth_group': 1, 'auth_user': 2, 'auth_user_groups': 1} ``` Also you probably don't need to build the `from_to_tables` set as it's really inneficent. You should use a loop and exit the function as soon as a matching alias is found.
This can just be `pass` since the functionality doesn't matter.
I don't think you can depend on a None choice being defined for a nullable field, necessarily. I don't think you need to make a change here.
I'm not sure if there are lookups where it's not the case, but comparisons such as `Choice.objects.filter(votes__gte='2')` seem to work fine with the value as a string so the "transform" stuff seems unnecessary, at this for the first version of this.
It would be good to show a warning message here.
This sentence is too long, maybe: ```python choice = self._choice_input( f"It is impossible to add the field '{field_name}' with " f"'auto_now_add=True' to {model_name} without providing a " f"default. This is because the database needs something to " f"populate existing rows.\n", [ ... ```
This behavior doesn't exist in the current implementation of `HttpResponse`.
In general, I think _it shouldn't be as hard as this_ (at least not exposed 😀)
`mutliple` -> `multiple`
I think in the first version of the patch you had something like `assertIsInstance(lat, float)` which seemed better to me.
Since this is just a type check which should apply to all environments, not just production ones, it doesn't need the `deploy` flag
Maybe e.g. `Calling exclude() is not supported after union().`
I had a similar thought though I wasn't sure if the change would be an improvement or not. "pr" me think "pull request". I haven't reviewed this in detail yet.
Please remove this unrelated change.
start docstring on next line and "Create..."
> This is fine because managers are by definition working on the real model. I thought adding the `use_in_migrations` flag to managers was done specially to allow working on models created in migrations? This is going to break any migration that uses the return value of `create_user` as it will no longer be an instance of the user model class at the particular state the operation is run at. e.g. ```python def forwards(apps, schema_editor): UserModel = apps.get_model('auth', 'User') user = UserModel.objects.create_user('Ms X', password='secure') assert isinstance(user, UserModel) ``` This is really problematic for migrations that use the returned user instance to assign foreign key values as they'll fail with `TypeError`.
Move those import to the top of the file.
can you put `if not value` in the isinstance block below
Oh, it's because `SEARCH_VAR`, etc. are variables.
Chop blank line
``` # Unmanaged origin model that is a table. ```
I think the template system silences the exception -- I just observed that no data appears in the table. Your proposal is what I had in mind.
Can you also rename `test_deep_graph()` to `test_graph_recursive()`
If you do the unrelated alignments, please push them in a separate PR.
`assertEqual` -> `assertTrue`
this could use the indent style of the previous `CommandError`.
... and I take a closer look and I see the reason - `RelatedObject.model` already exists. So; what about the other way around; add parent_model to field? That way, you can ask every field "what model do you belong to?" and "what model are you associated with?". Normal data fields return the same model for both; RelatedObjects return different models.
Why double-underscore? I would also rename `func` to `callback`: ```suggestion for _, callback in connections[using].run_on_commit[start_count:]: callbacks.append(callback) if execute: callback() ```
This hook is unnecessary, IMO. I would move the logic to `_select_on_conflict()`.
Maybe `By default, return the django.contrib.admin.utils.get_deleted_objects.` instead of `By default this just returns django.contrib.admin.utils.get_deleted_objects.`.
`test_date_kind()` and `test_time_kind()` in `test_trunc_func_with_timezone()` doesn't have any value because both don't support timezones and are already covered by `test_trunc_func()`. I removed them.
Sorry, I misinterpreted it as a new flag. I also see above that this was all copied so ignore this. While not the best naming, we're stuck with it.
This test passes when testing against an SQLite or MySQL backend as long as psycopg2 is also installed. For this test case, I think the check `connection.vendor == 'postgresql'` skips the test too aggressively.
Chop blank line.
```suggestion with self.subTest(location), self.settings(CACHES=settings): ```
Do you have a traceback or the name(s) of test that fails with the set(). I ran the sqlite suite with the set() without problems.
In that case, sure.
```suggestion """runserver doesn't support --verbosity and --trackback options.""" ```
We should make use of `self.message`.
is print_function needed? it doesn't appear in the rest of the code base.
Maybe something along the lines of: For databases which do not support returning clause we need to ask the database for the id. Generally last_insert_id is only supported for serial/auto_incr columns, hence we guard it for auto field. \# TODO: Maybe add a marker to fields that their value can be returned by last_insert_id instead of a type check. +/- typos and style cleanups ;)
Seems okay to me. I guess the alternative would to vary the message based on OS. Not sure that complexity is required though.
I think we should use `local_concrete_fields` :thinking: Also, the current solutions doesn't work with recursive parents, e.g. ```python Pizzeria.objects.bulk_create([ Pizzeria(name='Vegan Pizza House', rank=33), ]) ``` crashes when we add the `Ranked` model: ```python class Place(models.Model): name = models.CharField(max_length=100) class Meta: abstract = True class Ranked(models.Model): rank = models.IntegerField(null=True) class Restaurant(Ranked, Place): pass class Pizzeria(Restaurant): pass ```` ```
I know but it's not worth complexity, we can use ```python stream = open_method(output, 'wt', **kwargs) if output else None ``` in `dumpdata` and ```python with open_method(filename, 'rt') as f: ``` in tests.
Please remove unnecessary space i.e. `(validator,)`.
I think you missed this one in your recent updates.
I would chop `_support`.
You're calling `model_name.lower()` twice in most cases
We should mark all tests and model states that use `index_together` in `tests/migrations/test_autodetector.py` for removal. We can also move them to a common class for easier remove when deprecation ends.
```suggestion # Inline annotations in order_by, if possible. ```
seems like a helper method to get the attachment path would save some repetition
This is really a separate fix, but I guess we can do them in the same PR.
It's not actually a comprehension - this could just use a tuple literal.
Using hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
Sorry, was thinking of something else.
I tried to address Simon's request in the da4dd37f5fbb4bf9489f45803ffc0a91d0ac0592, this change also replaces some misleading variables' names.
```suggestion return 'Create collation {self.name}' ```
~~I changed this to an assertion for the only file that is affected by the second round of post-processing i.e. `cached/relative.css`.~~
You don't really need a docstring at all, IMO. The test itself explains it well enough.
Maybe: ```suggestion setting = getattr(settings, 'FILE_UPLOAD_TEMP_DIR', None) if setting and not Path(setting).is_dir(): return [Error( f"The FILE_UPLOAD_TEMP_DIR setting refers to the nonexistent " f"directory '{setting}'.", id='files.E001', )] ```
```suggestion # The not-provided sentinel is distinct from None, as which() returns None when not found ```
Use a single quote.
Mhm that is what I was trying to avoid, because for most hasher a salt length is just that and `must_update` should easily be able to handle that globally if it is returned from `decode`. What this PR certainly misses (and what will show you the existing problems) is a test for the behavior of the `bcrypt` hasher. I think now it's `must_update` will *always* return `True` and set a salt *every* time.
A set literal makes a tiny bit more sense here I think: `{'addError', 'addFailure', 'addUnexpectedSuccess',}`
Grrr... I'd much prefer an explicit wait (for a known condition) then keeping the straight asserts...
FWIW I made sure we don't forget to remove these methods [when we drop support for Python 2](https://code.djangoproject.com/ticket/23919).
Move `MockViewUser` above `MockAddUser` to keep consistent ordering...
`ChoiceFormSet` -> `ArticleFormSet` You mixed `Article` with `Choice` in few places.
Constructing the entire string within the as_sql method departs from how other functions work. Is it possible to do something like: ``` class BaseCaseExpression(Func): function = None template = 'CASE %(simple)s %(conditions)s ELSE %(default)s END' ``` Then build up the dict required to fill in that template, and construct/return at the end? It may flow nicer, and allow 3rd party backends to modify the template without overriding the entire method.
It usually isn't a problem. There always the option to add another field to that model if making the existing field nullable causes an issue.
I'd leave `'operations'` an empty list. Also, can you use single quotes here, please.
Can you reference the ticket number in the docstring, please.
My idea of converters is that backend converters are applied to convert the data to uniform format, then the field converters change that format to the wanted Python object representation. So, in this case, if the bug can't be fixed, then we need to add a backend converter. Doing that for Concat expression would be much better than doing it on all TextFields, but of course before we pass the expressions instead of internal_type to backend's get_db_converters that can't be done. Maybe it is possible to add a cast on SQL level to Concat on MySQL, something like "CAST(Concat('foo', 'bar') AS CHAR)". It might be that if the datatype of Concat expression is incorrect on SQL level, then further operations on the value (say lower()) will not work correctly.
Alright, let's keep this change for another PR then.
PEP 8 requires this blank line
Fine, but not as part of this PR. If you can change these cases systemically, that would be great.
It will be `django.contrib.postgres.constraints.XXX` but I don't think that's an issue for core constraints we return `django.db.models.XXX`.
argument ordering should be reversed
chop trailing ", " in list
This unfortunately won't work if the subquery refers to any outer references as these must be included in the group by clause.
I think this test can be removed.
Using `clashing_pair` in a hint is misleading. We should use appropriate model names not field names or table names.
`date=rfc850date` isn't needed in the `subTest()` -- since will appear if the assertion fails.
`for data in json.loads(...):`
The name "WrongBackend" isn't very descriptive about its purpose.
use a single line
Rather than `str(next(iter(...` maybe: ``` messages = [m.message for m in request._messages] self.assertEqual(1, len(messages)) self.assertIn(error, messages[0]) ```
@David-Wobrock I checked out your branch to build an alternative to #13904 off model states and I noticed both `through_app_label` and `through_model_name` are unused which makes me believe something is off here.
This is already tested in `test_args_kwargs_request_on_self()`, I'm going to remove these assertions.
I don't see much value in this check.
no comma needed
I'm not too keen on beginning each warning with "In your url patterns, ..". How about "Your url patterns .." ? "Your url patterns have used `include` with a regex containing a '$'. " .. "Your url patterns have a regex beginning with a '/'." .. "Your url patterns have a pattern with a name containing a ':'." ..
I think it would be better to move `side_effect` to the `mock.patch`, i.e.: ```python with mock.patch('django.core.files.move.os.rename', side_effect=OSError()): ```
I would call this `_field_became_primary_key`.
Maybe: ```python raise TypeError( 'sensitive_post_parameters() must be called to use it as a ' 'decorator, e.g., use @sensitive_post_parameters(), not ' '@sensitive_post_parameters.' ) ```
Lets have the argument follow a namespace based ordering ```suggestion def add_field(self, app_label, model_name, name, field, preserve_default): ```
Use this style: ``` self.assertEqual(field.check(), [ ]) ```
Ah, didn't know this existed yet. I see that this PR is mostly a "copy" of the ContentTypes one. Sounds alright for now, then.
IMO we can simplify condition: ```not self.blank or (self.blank and not self.null)``` to: ```not (self.blank and self.null)```
It seems a bit confusing to have this docstring here without any `return` statement, perhaps some clarification would be helpful.
```suggestion "Cannot aggregate over the 'other_age' alias. Use annotate() to promote it" ```
You can do what I suggested above here as well.
Please use the helper methods `self.assertOperationType()` et. al.
We can actually use `assertContains` and `assertNotContains` to simplify things here. I'm making the change and committing this.
I would override `clean()` as described in the ticket, e.g. ```python class PubForm(forms.ModelForm): mode = forms.CharField(max_length=255, required=False) mocked_mode = None def clean(self): self.cleaned_data['mode'] = self.mocked_mode return self.cleaned_data class Meta: model = PublicationDefaults fields = ('mode',) default_mode = 'di' pub_form = PubForm({}) pub_form.mocked_mode = 'de' pub = pub_form.save(commit=False) ... ```
Definitely -- a place specifically designed for preparing the module is needed. It'll also help 3rd party backends that need to override specific as_sql methods.
`expressions` should be before the `name` like in other classes.
I think we want to avoid altering `self.extra` here and pass `db_type` as a kwag to `super().as_sql()`.
I believe the test shouldn't be skipped on SQLite, it's failing locally because you're closing overridden connections which are used when using in-memory SQLite databases. You should be able to remove this `skipIf` after adjusting the `finally` block to only close non-overriden connections.
Multiple values should be allowed only for the `no-cache` directive, this change allows for multiple values for all keys what is not desirable.
It seems like there's no longer a need for the defensive use of `.get()` here; `CSRF_COOKIE` must always be set at this point.
``` Superuser creation skipped due to not running in a TTY. You can run `manage.py createsuperuser` in your project to create one manually. ```
Make `__str__` return `self.string_rep` and nuke `__unicode__`.
Please keep the alphabetical order.
`else` is unnecessary, I think we can leave: ```python if self.ignorenonexistent: continue raise ```
Typo: annotaion -> annotation
Please use single quotes.
Is it possible to use something from `connection.ops` or similar to avoid a vendor check? Otherwise, looks good.
```suggestion """ Return a tuple of the database's version. E.g. for pg_version 120004, return (12, 4). """ return divmod(self.pg_version, 10000) ```
This `raise` seems redundant. I would remove these two lines (629-630) and leave only raise `ValueError(...)` at the end of this method.
I wonder if 25 should be defined in the [SQL constants module](https://github.com/django/django/blob/master/django/db/models/sql/constants.py)? I am afraid changing 25 in the code might not be changed here, so the test would silently become obsolete.
Here is the explanation I wrote some time ago :) https://python.astrotech.io/advanced/function/parameter-syntax.html
This can be single-lined, e.g. ```python return HttpResponseServerError( ERROR_PAGE_TEMPLATE % {'title': 'Server Error (500)', 'details': ''}, content_type='text/html', ) ``` The same in `bad_request()` and `permission_denied()`.
`value` or `return_value`? or maybe we should swap these lines: ```python if ( not timezone._is_pytz_zone(current_timezone) and timezone._datetime_ambiguous_or_imaginary(value, current_timezone) ): raise ValueError('Ambiguous or non-existent time.') return timezone.make_aware(value, current_timezone) ``` :thinking:
@akulakov `passed_check` is to check if list is not empty. if it is not empty, method will return no error, otherwise error will be returned (`[] if passed_check else [W020]`).
I see. `npath` sounds good. IMO the alternative is to explicitly encode under Python 2: ``` if not six.PY3: pf = pf.encode(fs_encoding) os.environ['djangocompilemo'] = pf + str('.mo') os.environ['djangocompilepo'] = pf + str('.po') ``` where `fs_encoding` would be imported from `_os`.
Yeah I think that's a good idea in general. I was thinking that a general `**kwargs` added to the signature in all cases was probably correct, but I've come around to your thinking. Most uses outside of `Func` expressions just ignore the `**kwargs` parameter and create noise. So this specific call should be (assuming "extra_context" is a good name): ``` def as_sql(self, compiler, connection, template=None, ordering=None, **extra_context): if template is not None: extra_context['template'] = template if ordering is not None: extra_context['ordering'] = ordering extra_context['ordering'] = ordering place_holders = { .. } place_holders.update(extra_context) ... ```
yeah `.format` crept in while we were supposed to stick to `%`. anyway lets make sure we don't have three ways of formatting strings across the code base 😅 .
```python self.assertHTMLEqual( field.widget.render('name', []), ( '<ul>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="entertainment">Entertainment</label></li>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="test">A test</label></li>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="third-test">Third</label></li>' '</ul>' ) % (self.c1.pk, self.c2.pk, self.c3.pk), ) ```
Thanks for the clarity, Tim :-) In that case, I think we may as well still go ahead and provide the deprecation shim and warning that we are able to provide (for `ForeignKey(SomeModel, 'to_field')`, which is likely much more common) by shortening this line to just `if not callable(on_delete)`. And we'll just have to rely on a backwards-incompatibility note in the release notes (that you should no longer pass `to_field` positionally, and you can pass `on_delete` as the positional second arg) to help anyone who is doing `ForeignKey(SomeModel, 'to_field', on_delete=models.WHATEVER)`.
this could use the indent style of the previous `CommandError`.
An error the database
I think this test would make a little more sense if we used a `CharField` for the primary key of `Foo`. It's not super important though.
`` ```suggestion return resolve(path, urlconf) ```
omitting the ellipsis seems okay to me. Do we need to include 'id__max' twice, e.g. `Cannot compute Max(): 'id__max' is an aggregate`
We can actually use `assertContains` and `assertNotContains` to simplify things here. I'm making the change and committing this.
Tests for `formset_factory()` and `formset_factory()` are missing.
Maybe: ```suggestion setting = getattr(settings, 'FILE_UPLOAD_TEMP_DIR', None) if setting and not Path(setting).is_dir(): return [Error( f"The FILE_UPLOAD_TEMP_DIR setting refers to the nonexistent " f"directory '{setting}'.", id='files.E001', )] ```
So [`.flushall()`](https://redis-py.readthedocs.io/en/stable/#redis.Redis.flushall) will clear everything in all databases. (Apparently Redis has 16 logical databases that can be switched between.) We should change this to use [`.flushdb()`](https://redis-py.readthedocs.io/en/stable/#redis.Redis.flushdb) instead and only clear the current database. For consistency we can also ensure this returns a boolean. ```suggestion return bool(client.flushdb()) ``` (We should probably also expose a `db` parameter via `RedisCacheClient.__init__()` which can be passed through via `_client_kwargs`. It should have a default value of `0`.)
To verify this is the expected import error, I'd do something like: `self.assertRaisesMessage(ImportError, 'nonexistent')`
We would fallback to an empty `bytes` string as well ```suggestion boundary = opts.get('boundary', b'') ```
You asked me about the `lru_cache` here; I don't think it matters one way or another :-)
Rather than passing all of `OPTIONS` here we should only pass the protocol: ```suggestion def __init__(self, protocol=None): self._protocol = pickle.HIGHEST_PROTOCOL if protocol is None else protocol def dumps(self, value): return pickle.dumps(value, self._protocol) ```
You can use `self.fail('Cyclic reference in Exception Reporter.get_traceback_frames()')`
trailing comma here and next line
I would wrap `asvar` and `view_name` in quotes and use `%`-formatting, e.g.: ```python def __repr__(self): return "<%s view_name='%s' args=%s kwargs=%s as='%s'>" % ( self.__class__.__name__, self.view_name, repr(self.args), repr(self.kwargs), self.asvar, ) ```
`DATE` -> `DATETIME`
I'd move `'defaults': 'testing'` to the next line and include a trailing comma per our usual style.
We usually avoid creating new models when we can reuse existing ones as it slowdown the test suite startup. In this case it looks like there's many candidate that could be reused here.
can you explicitly wrap them in brackets: `args += ["-U", user]` please. That makes it clearer to understand the code.
Mind renaming `schema` to `schema_editor`, please (and in all the other places)
You could do this setup in Python. `self.school.students.add(...)`
```suggestion with self.assertRaises((OperationalError, ProgrammingError)): ```
if no app*
Keep the style the same here and below
I updated the file on my branch such that the wkt contains the correct information. `ds.srs.srid` returns `3086` https://github.com/geodesign/django/blob/raster/django/contrib/gis/gdal/tests/data/raster.tif
assertEquals is deprecated. Please use assertEqual instead.
Sure, I will push those change, except the suggestion for `add()` gives invalid syntax.
On consideration, I'd take the first bit of that... ``` # Import the .autoreload module to trigger the registrations of signals. ``` (I'm reviewing now. I'll do it.)
```suggestion week_choices = {'%W': '1', '%U': '0', '%V': '1'} ```
Won't `symlink_path` and `original_path` be removed automatically as part of the cleanup? `tempfile.TemporaryDirectory` says "On completion of the context or destruction of the temporary directory object the newly created temporary directory and all its contents are removed from the filesystem."
Please create a `_stream()` helper with this signature and use it so that the deprecated parameters don't appear in the `stream()` signature.
```suggestion f'-X{key}' if value is True else f'-X{key}={value}' ```
Yes this would be a good idea
```suggestion f'<li>Title: <input type="text" name="form-0-title"></li>' f'<li>Pub date: <input type="text" name="form-0-pub_date">' f'{delete_form}</li>' ```
`assertTrue` would be appropriate here.
repetitive with method docstring
Same here, the unique constraint is only removed in the ORM but will still persist in the database.
This change isn't right. `Derived.mro()` is ``` [Derived, DescendantOne, DescendantTwo, AbstractBaseOne, AbstractBaseTwo, django.db.models.base.Model, object, ] ``` The existing test is correct that `Derived` should inherit the `name` field from `DescendantTwo`. i.e. `max_length` should be 50.
```suggestion editor.remove_index(Scene, index) ```
This is fine as is.
why cast this into a list, normal brackets (generator) will do
The benefit of the extra tests is they make the HTML structure clear, but the CSS selector perhaps does that... We should use hanging indent for the wrapping, so maybe pull the CSS selector into a variable, so it's easy read/see, and then the lines would be shorter too, and we can just have the two assertions.
`call_command()` raises an exception so these lines are unreachable.
Don't think we need to worry about duplicates.
Use `self.assertCountEqual()` when ordering is not specified and we have more than one expected result.
I simplified this test with `@mock_inputs()`.
This can be outside of `try..`.
double -> single quotes
Use single quotes (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
I think you meant `get_ellipsized_page_range` here. Use `number` instead of `page_num` which matches the argument name used by `Paginator.get_page()`.
```suggestion # Windows registry may not be configured with correct # mimetypes. ```
I don't see a reason for modifying a source exception, you can use: ```python raise ValueError(...) from e ``` Also `blew up` is not a appropriate wording and a new exception is not more informative because it refers to the field class `... the field <django.db.models.fields.CharField>` instead of `<app_label>.<model_name>.<field_name>`, maybe: ```python raise ValueError('Error during %s serializing: %s' % (field, e)) from e ``` I don't have a quick answer how to get a field path.
This conditional is not required anymore given the check above.
how about `_resolve_special` -> `resolve_error_handler()`. I don't see a need for separate methods like `resolve4XX` and `resolve5XX`, especially when you pass any status code to either and achieve the same result.
"Both Y and X must be provided". Switch the Y and X in the error.
I see, thanks for your answer. I really don't want to hold the template based widget stuff from landing any longer. I suppose this is something we could refactor later on.
~~Are you sure the `Value` wrapping and the `output_field` are necessary here? As long as you pass an `output_field=models.BooleanField()` to `Case.__init__` you should be good to go.`~~ _Edit: Well it looks like passing `output_field=models.BooleanField()` to `Case.__init__` doesn't work yet._
Use literals rather than functions, i.e. `{}` not `dict()`. This should come at the top of the function as the stuff before it does not need to happen if it is empty.
Moving this line is not related with a bugfix. Please revert it and add ```python if check_filterable: ... ``` in both places.
I think this change really indicates the need for a second test for wrapping a non-string object.
We could rename `CSRF_COOKIE_NAME` as `CSRF_ENTRY_NAME` or `CSRF_ENTRY_KEY`, and then using it as cookie name if we're cookie based and session key if we're session based. This would be an improvement over the current code, but probably not over separate settings.
As far as I'm aware `unique_fields` should be required when `supports_update_conflicts_with_target` is `True`, so there is no need to use `unique_fields or ()`. Moreover, we should raise an exception when it's not provided.
Please revert these unrelated whitespace changes.
Our convention is to include a trailing comma in places like this so if more items to the list later, we don't have to modify this line again.
omitting the ellipsis seems okay to me. Do we need to include 'id__max' twice, e.g. `Cannot compute Max(): 'id__max' is an aggregate`
I think it would be helpful if this were instead named `invalid_token_re`. The reason is that I coincidentally happened to be reading `csrf.py` and was confused by these lines: https://github.com/django/django/blob/b746596f5f0e1fcac791b0f7c8bfc3d69dfef2ff/django/middleware/csrf.py#L111-L112 The reason this was confusing is that this isn't a regex that matches tokens. It matches invalid tokens. And then I saw this was changed in this PR only a few days ago.
I'd drop the intermediate variable
I don't think it's worth having two options here. I understand that the Django version is less likely to change but my point is that for the rare cases where the header content causes issues (you have to admit your setup is uncommon) one can do without a complete header. Adding two options only makes the code more complex for little benefits.
If initial_forms=3 and min_num=4 and extra=3 I'd expect total_forms to be 6 and not 7 EDIT:// oh, I see below that this would probably be a change in backwards compat; in that case never mind ;)
Please update your patch.
Perhaps a nice alternative is: ``` result = json.loads(Question.answer_set.field.value_to_string(question)) self.assertCountEqual(result, [answer1.pk, answer2.pk]) ```
The second set of single quotes look odd to me.
I'd order the test with the other `check_html()` tests (above `test_use_required_attribute`).
We should also test for `events = Event.objects.filter(group__in=groups.query)` to test both `isinstance(self.rhs, QuerySet)` branches.
This message is different on PostgreSQL 13+, it should be enough to check that a constraint name is in the message.
I like to include a trailing comma in a list of `kwargs` so if more are added later, you don't need to modify the line again (keeps and diff and git blame cleaner as I mentioned before)
Use hanging indent: ``` python RangesModel.objects.create( ints=None, dates=(cls.dates[0], cls.dates[3]), timestamps=(cls.timestamps[0], cls.timestamps[3])) ) ```
Do we need this mapping? We could redirect to a `HttpResponse` with the `status_code`, e.g. `HttpResponse(status_code=r.redirect_type)`.
`hasattr` is a more idiomatic approach to this (also saves a couple lines of code), unless there is a specific reason for using an object like this.
chop blank line
No as `User` and `Person` are registered to the global `apps` instance. The creation of the class is supposed to fail anyway so the `apps` cache won't get polluted.
```suggestion 'ignore_conflicts and update_conflicts are mutually exclusive' ```
There is no need to define `Error` in the module. I would move it to the check.
I moved this check to the `DurationExpression`.
I think we want to avoid altering `self.extra` here and pass `db_type` as a kwag to `super().as_sql()`.
has very high precision so we can test this on...
`TRADITIONAl` → `TRADITIONAL` (You let go of your shift key too early!) Perhaps reword to `# Add TEXT as an alias of TRADITIONAL for consistency with other backends.`
The issue here is that we can't do the proper permission check (`if not self.has_perm(request) ...`) until after we've assigned `self.model_admin`, which we return from this method. _Maybe_ it's OK. But… it seems like we have the exact kind of _"Folks can probe the autocomplete view to find out the structure of the application"_ issue that we spend a lot of time thinking about and trying to avoid. If we just raise `PermissionDenied` for all of these cases we don't leak any info. Such exceptions are logged and a developer can use that to debug. Given that this is an ajax view, they're not going to see the debug output page anyway (without taking steps). I'm not convinced the different status code is worth the additional exposure (or even the effort justifying why it's OK). > 🤷 Yes. 🙂
Should be ``self.weight``
Might be worth moving theses utils to `django.db.migrations.utils` instead since they are used outside of `.operations` now.
The `table` variable is actually a `models.Model` instance so it might be good to rename it to `model`. In the case of auto-created models `model._meta.auto_created` will be pointing at the model at the origin of the creation else it will be `False`. When it's `False` the resulting message should be of the form `(opts.app_label, opts.object_name)` else it should be of the form `(opts.app_label, opts.object_name, field.name)` where `field` is retrieved from iterating over `model._meta.auto_created._meta.many_to_many` where `field.remote_field.through is model`.
Could you please follow the previous indentation style :)
This won't work when `empty_aggregate_value` is `NotImplemented`.
I'd use a more descriptive name like `test_logout_doesnt_cache`.
IMO it's enough to test that `CreateExtension` honor `allow_migrate()`, creating extension is already tested in `postgres_tests`.
Quote from [PEP-257](https://www.python.org/dev/peps/pep-0257/): > The docstring is a phrase ending in a period. It prescribes the function or method's effect as a command ("Do this", "Return that"), not as a description; e.g. don't write "Returns the pathname ...".
This can be single-lined.
Okay, I'll drop that point, however, it seems odd to me to reject an empty scheme even if someone specifies `schemes=['']` (which seems unlikely anyway). I don't know that rejecting this case is important.
You're calling `model_name.lower()` twice in most cases
Reading below, I see that Flask has an "any" converter that does something more complicated. Creating a converter with the same name but a different behavior doesn't sound good.
Yes, we'd need a separate test for check registration. Possibly https://github.com/django/django/pull/7781 will come up with a template to use.
Sorry about that, I was looking at the imports and forgot they are subclassed in that same file.
Is this branching necessary? I can see how using `model.objects.none()` as a query holder could be problematic since it's not necessarily the same `QuerySet` class as the one from which `query` was extracted. Does the following work: ``` python def __getstate__(self): state = self.__dict__.copy() if isinstance(self.rhs, QuerySet): state['rhs'] = self.rhs.query return state ```
`print('Aborting: --%s must be a top-level module.' % opt_name.replace('_', '-'))`
I think we can avoid creating a temporary var here ```suggestion self.defaults.update(self._transform_headers(headers) ```
Including falsy is a user's mistake and we don't remove them from the source lists, so I think we shouldn't change this.
I don't see much value in this check.
This changes such behavior: ``` In [18]: RandomUUID(1, output_field=None) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-18-7594cbdb3c8e> in <module>() ----> 1 RandomUUID(1, output_field=None) TypeError: __init__() got multiple values for argument 'output_field' ```
@morganwahl yes please!
We can chop this docstring.
Please use `assertSequenceEqual` consistently rather than mixing `assertQuerysetEqual`.
I think we can safely remove this. It was overlooked in the post-deprecation removal of `django.core.cache.get_cache()` in d038c547b5. We should do that in a separate commit w/ `Refs #21012 -- ...`.
Simply deindent and remove the `else`.
`)` on new line
huh, TIL. Transitioning to Python3 from 2.7 for my personal projects and I didn't know they had changed that. Thanks for pointing it out.
I would handle this in `as_sql()`, i.e. ```python def as_sql(self, compiler, connection, template=None, **extra_context): sql, params = super().as_sql(compiler, connection, template, **extra_context) if self.invert: sql = '!!({})'.format(sql) return sql, params ```
I think a list comprehension would be more readable.
won't work if `sep` is more than a single character.
You can reuse `resolve_model_field_relations()`.
I try to avoid "we", e.g. The check allows a double slash, presuming the user knows....
Maybe we should move this directly to the `RelatedLookupMixin` :thinking:, I don't have a ready answer.
If we remove this will the tests run on Jenkins? It might be fine.
I think the `lambda` could go on this line.
prefer hanging style: ``` return { self.fk_field: ..., } ```
``` @mock.patch('django.contrib.contenttypes.management.update_contenttypes') def test_remove_contenttypes(self, mocked_update_func): management.remove_contenttypes(self.app_config.name) self.assertEqual(mocked_update_func.call_count, 1) ```
I find binary operators very legible for set operations: `self.keys - keys`
While I realize we cannot change that now, do we remember why we added `django.http.cookies` here? The salt alone should make sure that we do not clash with other signatures.
This change isn't needed and adds a bit of noise.
you need to drop the `__class__`, the `object` itself should be an instance of `Author`
start docstring on next line and "Create..."
Really? Surely in this context it should be fine as it is an argument to `getattr()`… (Personally I don't like that check at it leads to cases like this where we have five lines of code instead of a single readable line.)
There should be a sane API through `schema` ( A SchemaEditor, I presume) to do this.
A note about code length, because some users may say "using self.client.get() is more straightforward"... We can also write the lines above (297-301) like this: ``` python view = views.CustomTemplateView.as_instance( RequestFactory().get('/dummy'), foo='bar') ``` That said, the way they are written right now is fine too.
```suggestion cls.to_wsgi_name(header_name): value ```
`date=rfc850date` isn't needed in the `subTest()` -- since will appear if the assertion fails.
If POSTGIS_TEMPLATE exists, it will be a string, not a tuple. So you'd better make the tuple in the execute method below instead.
Fine. Super. Thanks for the clarification. (In that case, leave it as it is, because we want the test for the issue...)
I think the interfaces should be the same. It's probably the right (more forgiving) behaviour for a response, which isn't a dict. Folks will `s/response[/response.headers[/` not the least. But the docs also say this is the behaviour.
But now the imports aren't alphabetized anymore... :)
I think we should revert this change (we reverted similar change in `django.core.cache.backends.basedefault_key_func()` in the past) because it will create a regression for non string values. The following example works in the current master: ``` >>> Signer('some_key').sign(1) '1:gJ9gvYHWvcR2rrXTSANB5b-IhU8' ``` but with this change it raises `TypeError`: ``` File "django/django/core/signing.py", line 162, in sign return self.sep.join([value, 'sha1', self.signature(value)]) TypeError: sequence item 0: expected str instance, int found ```
`COT` doesn't exist on Oracle, please emulate it by `1 / TAN(%s)`.
Personally yes. (But maybe the examples in the docs will be enough)
The easiest solution might be to duplicate the warning in `OneToOneField`.
The system check framework will throw an error if a model uses `DecimalField` without those arguments. I'm not sure if there's a use case for instantiating `DecimalField` outside of a model (perhaps in `output_field`, but don't think validators are used there). All in all, I think the current version is okay.
Use single quotes.
I think we can simplify this, e.g. ```python dump_cmd = ['mysqldump', *dump_args[:-1], '--routines', '--events', source_database_name] ```
What about `prefetch_related()`? It's a new method so we should raise `ValueError` when `aiterator()` is used after `prefetch_related()`, e.g. ```python async def aiterator(self, chunk_size=2000): if chunk_size is None: if self._prefetch_related_lookups: raise ValueError( "chunk_size must be provided when using QuerySet.iterator() after " "prefetch_related()." ) elif chunk_size <= 0: .... ```
I think it would make sense.
suggestion: "commands that don't need settings succeed if settings file doesn't exist"
`... Using multi as True` and `...imports as multi`
Use hanging indent: ``` return [ e._output_field_or_none for ... ] ```
Please move [standard library imports](http://www.python.org/dev/peps/pep-0008/#imports) with the [other ones](https://github.com/ezequielsz/django/blob/90a9140051aeeb84ab9d46c6209f42c5c3820908/tests/regressiontests/mail/tests.py#L4-L11).
I have a feeling something else if off here. The outer query's joining strategy should not have to special case inner queries as they are self contained expressions. My guess is that something is getting mixed up wrt to aliases because the same model is being involved in the outer and inner queries.
I'd suggest to check `response.context[REDIRECT_FIELD_NAME]` instead.
I thought about it, but it has some value to test this explicitly.
To verify this is the expected import error, I'd do something like: `self.assertRaisesMessage(ImportError, 'nonexistent')`
How about more simply: "Found duplicate <field/base/manager> '%s' in CreateModel operation." Maybe you could create a helper function so we don't have to repeat a similar loop 3 times.
We should also use `quote()` because non-integer primary keys may not work properly, e.g. `_40`. Fixed.
`quote_name` is a temporary variable that's used only once, therefore I think we can remove it and use `schema_editor.quote_name` directly, i.e.: ```python 'name': schema_editor.quote_name(self.name), ```
I would leave only `The django.utils.datetime_safe module is deprecated.`. This a private API, we don't see to provide an alternative.
I added `Square` without a sequence to show that delete is used in such case.
This test is also already in the `backends.base.test_creation` and it's unrelated with this fix. Please remove it.
Maybe you've missed `if summarize` branch (below).
Ok, but please ensure that there is at least one test testing if the redirect works properly too.
won't work if `sep` is more than a single character.
@MarkusH Such a request should not change any state, so it should be `GET`. Using `POST` and `CSRF` wouldn't help against DoS there anyways (unless I miss something). If you are worried about querying the database, you can do the same with a normal request to the list views in the admin…
Include a trailing comma so if more items are added later, we don't have to modify this line again.
include a trailing comma
That's not "cruft" -- that's making user code look like it was written after Python 2.4 was released. And also, ``` python @classmethod @queryset_only def as_manager(... ``` does work.
Probably it could be reworked this way: ``` sql, params = super().as_sql(connection, lookup, template_params, sql_params) return '%s > 0' % sql, params ```
I would deindent these ] and also include a trailing comma in case more items are added later
That's what we keep in the commit message. `git blame` is your friend to find the commit and thus the commit message.
You can skip this test on MySQL with `@skipUnlessDBFeature('allows_auto_pk_0')`.
should this be used? (with a test too) arguments -> options
> Is there any reason to explicitly prefer lowercase? Well, not really anything critical. Elements, attributes, etc. in HTML tend to be case insensitive and I tend to lowercase the lot - more similarity leads to better compression in transit. Granted this isn't going to make much difference for such a short string, and your point about implementation detail is fair. (Hence I didn't press for it...)
> It just happens to pretty straightforward here as you can directly call `Constraint.validate` without the `exclude` on the constraint you are interested in validating. That's a suitable workaround, but I feel like it should not be necessary. FWIW before Django 4.1 where this feature was added I added manual validation already, since there constraints with conditions where just skipped.
I think we can reuse `rels_to_update`.
I'd suggest something like `'example@atm.%s' % 'a' * 63` (and 64 for the invalid one)
You could use `for else` construct here. ``` python for fixture_label in fixture_labels: if len(self.find_fixtures(fixture_label)) > 0: break else: return ```
It seems like a lot of complexity can be stripped out of this: ```python if self.base_field.choices and "choices_form_class" not in kwargs: obj = self.base_field defaults = { "choices_form_class": forms.TypedMultipleChoiceField, "coerce": self.base_field.to_python, # XXX: Do we actually need this? } else: obj = super() defaults = { "form_class": SimpleArrayField, "base_field": self.base_field.formfield(), "max_length": self.size, } if self.choices: warnings.warn("Choices should be defined in base field.", RemovedInDjango51Warning) return obj.formfield(**{**defaults, **kwargs}) ``` Obviously the behaviour of this post-deprecation also needs to be decided: - Does it throw an exception? - Does it silently ignore choices on the `ArrayField`? (Might need to actively strip them out?) - If we promote a system check warning to error, does it matter which approach we choose? (Not everyone uses the checks though.)
You can simply use `assertRedirect(response, obj.get_absolute_url(), ...)` here. No need for string formatting.
```suggestion 'Accept': '*', 'Host': 'example.com', ```
Reading below, I see that Flask has an "any" converter that does something more complicated. Creating a converter with the same name but a different behavior doesn't sound good.
Use a similar logging to what we do for robust signals? See `django.dispatch.dispatcher.Signal.send_robust` and ``` try: response = receiver(signal=self, sender=sender, **named) except Exception as err: logger.error( "Error calling %s in Signal.send_robust() (%s)", receiver.__qualname__, err, exc_info=err, ) ``` Something like ```suggestion logger.error("Error calling {func.__qualname__} on_commit() ({e}).", exc_info=True) ```
`run_keeper` → `time_keeper` for consistency? It feels like a hangover from when the class was called `time_keeper` before it changed to `TimeKeeper`. Are we also not still using single quotes? ```suggestion time_keeper = TimeKeeper() if options['timing'] else NullTimeKeeper() ```
append(...), not append[...].
@sir-sigurd `output_field` could also work, I suggested using `_output_field` because I knew it would work from my past experience implementing `Func` subclasses.
No blank lines needed (try to follow the style of nearby tests)
I understand. Although I'm wondering if this is something that can just be configured by passing something in `OPTIONS` that is passed to the client class such that you don't need two separate client classes? (Failing that, a separate backend, e.g. `RedisShardedCache`, might make more sense? I know we are implementing the client class here, but for all other backends we are using an existing client class from a third-party package - we are never exposing knowledge of the client class to the end user.) Either way, if that sharded implementation is coming later (whether in another commit or PR), let's not add this client class loading stuff now. It doesn't add any benefit to this initial implementation other than making it more complex to review.
Use single quotes.
This has come up in the past when we were looking at removing unnecessary list comprehensions in favour of generators. IIRC, `str.join()` converts input to a list if it isn't already.
We should make sure the `YearLookup` subclasses are registered to the `ExtractYear` transform as they perform operations that can use indexes.
Heh. This line was an `assertRaisesMessage` before, I recommended that it be changed to assertRaises to make the test less prone to break on trivial code changes. The message's content is essentially just "Not supported" anyway, so I think we should leave it this way.
I partly restored `dates_or_datetimes` (removed in e88d2dfcf4daa2b4ee451f518085413bb3b8deeb), it looks simpler IMO.
All tests ensure expected behavior ;-). Our preference is to use test docstrings to state and explain the expected behavior.
hm... ok. fair enough, maybe it makes sense to make it swappable, but I don't want to overcomplicate things.
Perhaps we should continue to test the simpler case where we don't provide a `name` or `condition`.
That's not true, `return` is to avoid setting new migrations.
Not a huge deal, but it might be nice to have this user-configurable, defaulting to 191, because some people may configure mysql to have a longer maximum length.
James concern about the extra level of indentation caused by `with timezone.override()` + `try / finally: self.storage.delete(f_name)` could be solved by removing the file with `self.addCleanup(self.storage.delete, f_name)` instead.
``` # Cache namedtuple() with @lru_cache() since it's too slow to be # called for every QuerySet evaluation. ```
I don't think `except Exception` is appropriate here - it's too broad. This should probably be under a type check
Removing `url_markup_template` breaks the customization use case in #19464.
Using `int` is untested and doesn't work as expected, because it uses 1-based indexing instead of 0-based indexing.
Where is it taken care of that a `Ref` will already exist in the inner query? Might be nice to have that information here.
Yes it should be `R.p`, we didn't take into account nested protected relations in the ab3cbd8b9a315911248227208630a020cedca08f (probably my fault). Also casting to list is not necessary anymore after this change.
don't need variables here
That's what `inspect.iscoroutinefunction(getattr(Foo, '__call__', None))` does above. What I mean is that it's probably an abuse of Python data model. For example, ```python def Test: async def __iter__(self): pass assert inspect.iscoroutinefunction(Test.__iter__) ``` Won't fail but `__aiter__` should be used for this purpose. There's no analogous `__acall__` for `__call__` and it's not clear to me whether `async def __call__` is an abuse or not.
This should be changed also in the `PostgresIndex`.
This should be Django's vendored copy `from django.utils import six`
You can have a flatter function (less nesting) by doing: ```python if not remote_field: continue ```
`output_format` → `format` `**kwargs` → `**options`
Using `clashing_pair` in a hint is misleading. We should use appropriate model names not field names or table names.
Lastly we should mention what the specific issue is about the link in the helptext 🙂 ```suggestion def test_bug_34066_link_to_password_reset_in_helptext(self): # The password reset link should always refer to the primary key even when accessed via a to_field ```
Is this possible? If so, it will be good to cover this scenario with tests.
more than one automatically generated field.? sounds better and more natural with the changes.
I think this should work: ``` python connection = connections[db] if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy': loader.check_consistent_history(connection) ```
Please add trailing commas to all of these new assertions, e.g. ```suggestion )['sum_awards'], None, ```
`to_python()` (add parens)
I remember looking at this test when merging 233c70f0479beb3bff9027e6cff680882978fd4d. I just tested this now and if you use `with register_lookup(field, Exactly, lookup_name='exact'):`, then this is the state at the end of the test: ``` >>> Author._meta.get_field('birthdate').get_lookup('exact') <class 'custom_lookups.tests.Exactly'> ``` With the current code, the output is `<class 'django.db.models.lookups.Exact'>` which looks correct to me. So I'd leave this as is and remove the unused `CustomExactLookup`.
Black won't mind. 😀
Could everything from here be extracted into a helper function? So we'd just pass in the `ordering` and return whatever came back. (This would give a hook for opt-out/customisation that both 17198 and 29943 hint at.)
True, but they test the behavior of the respective operations. It's true that `test_state.py` has a few tests that check for the correct `state_forwards()` behavior, though those tests are focused on the bigger picture of how `ProjectState` and `ModelState` work. Whereas `test_operations.py` tests for the particular implementations of the different migration operations, and as such should hold (regression) tests that focus on a particular implementation of such an migration operation. Thus, `test_operations.py` sounds like the right choice to me.
is this meant to test the `except TypeError` branch in `contrib.auth.authenticate()`? It would be clearer to call that function directly.
no newline between fields (see style of other forms) Also, I don't think `label` and `initial` need to be specified. Try to include only the minimum functionality that's needed to reproduce the error and prove the regression is fixed.
I'm not sure if it's a good idea to define it in `setUp`, let's define it in the method where it is used.
missing period the message could be: "Query lookup '%s' is deprecated in favor of Meta.default_related_name '%s'."
Might be nice to copy `__doc__` here as well
``` 'BinaryField default cannot be a string, use bytes content ' 'instead.' ```
@NDevox I'd be very happy for you to do that. 🙂 (If it's just a single file cleanup, you can just make a PR, without the Trac ticket)
Please including a trailing comma in the last item of a dictionary so if more items are added we don't need to modify this line again.
I see :/ Well `force_str` should still save you the promise checks.
You aren't changing here, except for the style. Please revert.
~~I changed this to an assertion for the only file that is affected by the second round of post-processing i.e. `cached/relative.css`.~~
I noticed a different behavior for floats lower than `1`, they aren't rounded e.g.: ```python >>> f = models.DecimalField(max_digits=4, decimal_places=2) >>> f.to_python(0.0625) Decimal('0.0625') >>> f.to_python(0.00625) Decimal('0.006250') >>> f.to_python(0.000625) Decimal('0.0006250') >>> f.to_python(0.0000625) Decimal('0.00006250') ``` Maybe that's ok and I missed something.
Personally if it were happening to me, I'd be **thrilled** if it could tell me what needs applying, and if it couldn't and instead directed me to another command to run I'd _assume_ (and be disappointed) that the information wasn't available at the time the exception occurred. If it is there, I think it's prudent to respect the user's needs and attempt to surface the information. That said, my gut feeling is that the exception output format maybe isn't "right" (for a given value thereof). I can't recall many (any?) places where Django raises with an arg which is multiple lines. Those cases where there's multiple _things_ to enumerate tend to just get comma separated. That does leave the door open to super long lists though, if for whatever reason the partially applied list was big... Maybe because it's related to running migrations, which _are_ line oriented, it's OK? [Edit to add: big thumbs up from me to the information, FWIW. Next step seems much clearer as a result]
) on next line
This implementation is repeated 5 times in this file. I think it should be taken up to Operation (or at least to a new sub-parent "OneModelOperation").
Rather than passing all of `OPTIONS` here we should only pass the protocol: ```suggestion def __init__(self, protocol=None): self._protocol = pickle.HIGHEST_PROTOCOL if protocol is None else protocol def dumps(self, value): return pickle.dumps(value, self._protocol) ```
We avoid backslashes and use this style: ``` msg = ( "Redirection loop for authenticated user detected. Check that " "...." ) ```
We can drop meta ordering and add it to the queryset: ``` self.assert_pickles(c.concrete_events.order_by('event)) ```
TBH I don't much value in testing Python's error messages, `self.assertRaises(TypeError)` should be enough.
These assertions are not related with a bugfix, please move them to a separate commit.
no dash in "email"
suggested wording: "SystemExit is raised if the user answers "no" to the prompt asking if it's okay to delete the test tablespace."
Is this line correct? Above it's `subTest(url=url_name)` but then we `reverse(url_name,...)`
This is only used once, so I don't see why it needs to be a method.
Why do you continue here? `app_label` might still be invalid.
Please rewrite `@override_settings` into a single line: ```python @override_settings(STATICFILES_DIRS="a string") ```
suggested wording: `Context.push() with a Context argument should work (#24765).`
Combining this commit with the next one seems fine. It works the same as override_settings, but you can use `with self.settings`.
I think this check should go before `if keepdb:` in line 40; with the current code, if the database doesn't exist and `keepdb` was specified, and anything went wrong, creation will be silently skipped and this is incorrect.
A list comprehension is preferable here as `str.join()` converts to list internally anyway. It is better performance to provide a list up front. - https://stackoverflow.com/questions/9060653/list-comprehension-without-in-python/9061024#9061024 - https://github.com/adamchainz/flake8-comprehensions/issues/156 ```suggestion result = ', '.join([ f'{field} = VALUES({field})' for field in map(self.quote_name, update_fields) ]) ```
Passing `filter` to kwarg will cause it to be in `self.extra` as well which could interfere `as_sql()` formatting.
```suggestion def _insert( self, objs, fields, returning_fields=None, raw=False, using=None, on_conflict=None, update_fields=None, unique_fields=None, ): ```
I guess Article/Category deletes aren't doing anything since you already asserted exists() -> False. Anyway, I think I'd put this in a separate method. `test_loading_with_exclude_app` / `test_loading_with_exclude_model`
```suggestion category=RemovedInDjango51Warning, ```
The only place I can vaguely remember `repr` being used is during the migrations. If you have the `AddIndex/RemoveIndex` operation in your migrations file, it shows this representation when the migrations are run. Since it is very common that a dev might want to create multiple gin indexes in the same table, it is necessary to have the `fields` of the index as well to distinguish the representation of these indexes. So, my decision would be based on how commonly devs have two gin indexes in the same model with the same fields but with different values of `fastupdate` or `gin_pending_list_limit`. If it is a very common case we might want to keep them in `repr`.
I guess we could go with just ._clone() and ._chain(). If we want to allow for "in place" querysets, we could just add `clone` argument to chain. If set to False, it effectively does what ._pre_next_op() does right now.
Maybe you've missed `if summarize` branch (below).
This can be moved outside of `try...except...`.
You changed the first `_` to capture `field`, but it's not subsequently used.
You can use `super()`: ```suggestion return super().migration_name_fragment + '_not_valid' ```
You're writing to the database. You need those changes to be reset. You need to be using Django's `TestCase`, rather than `unittest.TestCase`.
I _think_ that `Ref` will also need to return True, since it is a named reference to an existing `Col`.
We need to add the same check to `remove_index()`.
We don't need to add `named` branches everywhere. I'd return `m` in the tuple and use it when needed. Moreover, we could use a generator instead of list. IMO, `_find_group()` is unnecessarily complicated and unreadable. I'd move `get_group_start_and_end_indices()` to a module hook `_get_group_start_end()`: ```python def _get_group_start_end(start, end, pattern): unmatched_open_brackets, prev_char = 1, None for idx, val in enumerate(pattern[end:]): if val == '(' and prev_char != '\\': unmatched_open_brackets += 1 elif val == ')' and prev_char != '\\': unmatched_open_brackets -= 1 prev_char = val if unmatched_open_brackets == 0: return start, (end + idx + 1) ``` and simplify `_find_groups()` to a few lines generator: ```python def _find_groups(pattern, group_matcher): prev_end = None for m in group_matcher.finditer(pattern): if indices := _get_group_start_end(m.start(0), m.end(0), pattern): start, end = indices if prev_end and start > prev_end or not prev_end: yield start, end, m prev_end = end ``` now you can use `m` when needed, e.g.: ```python def replace_named_groups(pattern): group_pattern_and_name = [ (pattern[start:end], match[1]) for start, end, match in _find_groups(pattern, named_group_matcher) ] for group_pattern, group_name in group_pattern_and_name: pattern = pattern.replace(group_pattern, group_name) return pattern ... def replace_unnamed_groups(pattern): group_start_end_indices = _find_groups(pattern, unnamed_group_matcher) final_pattern, prev_end = '', None for start, end, _ in group_start_end_indices: if prev_end: final_pattern += pattern[prev_end:start] final_pattern += pattern[:start] + '<var>' prev_end = end return final_pattern + pattern[prev_end:] ... ```
Happy with that. As long as the all of the `.as_*()` methods are tested independently then we can switch to the `<div>` output for the default case and not worry.
You can reuse `resolve_model_field_relations()`.
That's not "cruft" -- that's making user code look like it was written after Python 2.4 was released. And also, ``` python @classmethod @queryset_only def as_manager(... ``` does work.
dependency graph (no dash) I think you mean "intra-app" rather than "in-app"
URL patterns may change over time, so we can restore the different match :thinking:
`t` is unnecessary, IMO.
Why the `CombinedExpression` and not `Expression`? IMO it's misleading, I know that `CombinedExpression` has the concept of right-hand and left-hand sides but for other purposes.
In cases like this, we prefer to include a trailing comma so if more items are later added, we don't need to modify this line again.
It would be better to loop over key-value pairs here instead of using `initial[k]` numerous times below.
Maybe? ```suggestion def _field_non_database_attrs(self): ```
consider calling this variable simply "title" (that's what the admin uses)
``` return datetime.datetime(1970, 1, 1, tzinfo=timezone.utc) ```
can you explicitly wrap them in brackets: `args += ["-U", user]` please. That makes it clearer to understand the code.
Not from the top of my head, but since Python 3 provides better traceback for these kind of failures I'm not sure it's worth silently failing here.
I would move this docstring to the class: ```python class MySQLUpdateOrderByTest(TestCase): """Update field with a unique constraint using an ordered queryset.""" ```
Use single quotes.
I don't believe so, this does seem unneeded. As a whole, this and the two lines below are pretty performance critical to the reloader but I don't see how removing `list()` would cause any issues with that.
I envisioned something like this: ``` python content = None with open(path, read_mode) as f: try: content = f.read() except UnicodeDecodeError: # If mimetype suggests the file is text but it's actually binary, # read() will raise a UnicodeDecodeError on Python 3. pass # If the previous read in text mode failed, try binary mode. if content is None: with open(path, 'rb') as f: content = f.read() mimetype = DEFAULT_ATTACHMENT_MIME_TYPE ```
Is there any reason we are using the name `compiler` here rather than `qn`. I think compiler is definitely clearer, but compilers are generally referred to as `qn` in django (note in particular in the signature of `Lookup.as_sql()`). I think there is clarity to be gained by using `compiler` instead, but I'd also like consistency between the signatures.
You are right! I assumed `render_option` was always converting falsy values to an empty string. It might be worth keeping the method in this case.
Might want to squeeze all lines to follow the _style_ of the test module.
Sorry, wasn't trying to request a change, was thinking about how async middleware would be written and just seeking clarification.
I think you could use `self.assertSequenceEqual` rather than this.
You should use `self.connection.set_operators['union']` instead of `UNION` constant.
Don't hardcode a primary key (or `Model.__str__()`). Wrap strings at 79 characters.
Also `django.core.checks.migrations` should be imported in `django/core/checks/__init__.py`.
Add a message please.
It's not obvious to me that the template approach is the best solution for readability as opposed to just creating another test settings file.
Maybe ```suggestion ).filter(same_sized_fields__len__gt=1), ```
This test has a problem on Windows: ``` ====================================================================== FAIL: test_override_static_root (test_utils.tests.OverrideSettingsTests) ---------------------------------------------------------------------- Traceback (most recent call last): File "c:\Users\Tim\code\django\tests\test_utils\tests.py", line 872, in test_o verride_static_root self.assertEqual(staticfiles_storage.location, '/tmp/test') AssertionError: u'c:\\tmp\\test' != u'/tmp/test' - c:\tmp\test + /tmp/test ```
As long as you use `except Exception` and not a bare `except` this should be good.
n.b. just noticed these tests could also use `assertIn` / `assertNotIn` rather than `find()`. But it seems the tests in this file mix the two, so no worries.
Please wrap at 79 chars.
The docstring should state the expected behavior rather than including preambles like "Tests that", "Verfies that..." (that is the purpose of all tests).
chop blank line
Also here: ```python if self.index_type.lower() != 'gist': ```
Can you just add the managers and admins including their names, please. I think that I'd expect the names to show up in the message if I define them in my settings.py
Per new code guidelines, can we use `assertIs`? :)
Chop blank line
This method returns a list and not a dict.
This doesn't work with many conditions, e.g. `a ^ b ^ c` see `XorLookupsTests.test_filter_negated()`.
`parallell` => `parallel` `get_upodated_models` => `get_updated_models`
It's not resolved.
Seems fine to rename everywhere, but it seems out of the scope of this PR to touch `BoundField.__init__`.
I don't think it's worth changing elsewhere.
Actually a relation is hidden if it ends with a `'+'`. Here `rel` has a `is_hidden` method that abstract this check.
Adding a reference to the ticket number (in the docstring for example) would be helpful here.
Perhaps the full list could be a class attribute so it doesn't have to be repeated several times.
I tried with 'Path' on the advanced search dialog but it didn't seem to allow inverse, thanks for showing me the right syntax @jarshwah one of the uses is actually in kogan/django-lrucache-backend 😉
All the `all().aggregate()` calls can be replaced by `aggregate()` calls.
There is in theory a chance of hitting a TOCTTOU case here anyway, in which case it is better to handle the exception to avoid a crash.
I don't think this is completely correct. Models with a `Meta.ordering` can still make use of explicit `order_by` and when it's the case it should be honored.
As multiple addresses are allowed, I suggest "to one or more addresses specified ...".
`for (old_field,new_field) in zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many):` makes the code in the loop simpler and removes the need for the hack.
```suggestion """Render as <p> elements.""" ```
Maybe `_parse_where()` -> `_get_condition_sql()`, I would return condition and add `WHERE` in `constraint_sql()`, e.g. ```python def _get_condition_sql(self, compiler, schema_editor, query): if self.condition is None: return None where = query.build_where(self.condition) sql, params = where.as_sql(compiler, schema_editor.connection) return sql % tuple(schema_editor.quote_value(p) for p in params) def constraint_sql(self, model, schema_editor): ... condition = self._get_condition_sql(compiler, schema_editor, query) return self.template % { ... 'where': ' WHERE (%s)' % condition if condition else '', } ```
Mhm that is what I was trying to avoid, because for most hasher a salt length is just that and `must_update` should easily be able to handle that globally if it is returned from `decode`. What this PR certainly misses (and what will show you the existing problems) is a test for the behavior of the `bcrypt` hasher. I think now it's `must_update` will *always* return `True` and set a salt *every* time.
What do you think about using the same conditions as in `ModelAdmin`? https://github.com/django/django/blob/97e9a84d2746f76a635455c13bd512ea408755ac/django/contrib/admin/options.py#L1035 For example: ```suggestion has_quotes = relative_name.startswith(('"', "'")) and relative_name[0] == relative_name[-1] ```
For new code, we're using single quotes (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
It's unused for empty results, so maybe we can move it below the `try...except` block: ```python try: sql, params = self.compile(col) except EmptyResultSet: empty_result_set_value = getattr( col, "empty_result_set_value", NotImplemented ) if empty_result_set_value is NotImplemented: # Select a predicate that's always False. sql, params = "0", () else: sql, params = self.compile(Value(empty_result_set_value)) else: sql, params = col.select_format(self, sql, params) if alias is None and with_col_aliases: alias = f"col{col_idx}" col_idx += 1 ret.append((col, (sql, params), alias)) ```
same thing here about assuming `is_active` exists and `not user.is_active` -- probably need some tests for that case.
I know this was copied from below but there's no point in not using `get()` directly. ``` python qs = self.get_queryset(instance=instance) # Assuming the database enforces foreign keys, this won't fail. return qs.get(self.field.get_reverse_related_filter(instance)) ```
Focusing in only on the point around 'slightly faster' (because whilst I can't think of additional syntax to disallow, that's much of the point around extensibility you bring up ;)). IM(limited)E, for any '_sensible_' length string, `x in mystr` (at least where `x` is a constant) is well-optimised, and usually performs better than the equivalent regex, even needing 2 passes, and accounting for compiling the regex beforehand. For the lengths of strings we might _expect_ here, the difference is probably still measured in nanoseconds. If performance were the _only_ consideration (vs. the aforementioned extensibility) it'd be worth checking.
This will overwrite an explicitly given message if you use ``` python validator = DomainNameValidator(accept_idna=True, message='Only IDNA domain allowed') ```
This line can go in "else" of try/except/else since it isn't expected to raise an exception.
you need to drop the `__class__`, the `object` itself should be an instance of `Author`
IPAddressField is removed from Django so shouldn't be listed.
I'm not sure that it makes any sense checking the registry. There is no guarantee that you are using a terminal that uses this. So it could just result in a blanket "on" if this is set. It would be better to take the `ctypes` approach mentioned to check whether currently enabled for the actual terminal in use.
```suggestion "import datetime\nfrom django.db import migrations, models\n", ```
Is this condition necessary? Surely all backends will support a default `TEXT` format? (Even if it can't be explicitly provided in the query...)
Unnecessary trailing comma and white space.
IMO we should check options against PostreSQL names.
As an example. The method signature should be ```python def rename_model(self, app_label, old_model_name, new_model_name): ... ``` And be called from `RenameModel.state_forwards` as `state.rename_model(app_label, self.old_name_lower, self.new_name_lower)` instead of passing the `Operation` instance along.
`if not getattr(reffed_expression, 'filterable', True):` Although you should probably be able to just check filterable. If non-resolved F expressions get here, consider adding the filterable attribute onto the F expression class so that you can assume it's always available.
if kept as a separate class, I'd copy the `setUpClass` method from `NodelistTest`
In the current state, it's not reusable for other lists of expressions, so I would rename it to the `IndexExpressions`
Same style as above.
Might want to move the `)` to the next line and add a trailing comma while you are around.
This isn't triggered until the input queue is read at least once.
Adding hooks in `as_sql` in the different compilers to check whether the query should be executed or explained might be an option? I think it's necessary to do changes in those methods.
Maybe: ```python self.assertEqual(len(self.selenium.find_elements( By.CSS_SELECTOR, '.dynamic-profile_set#profile_set-0 input[name=profile_set-0-first_name]', )), 1) ``` or ```python selector = '.dynamic-profile_set#profile_set-0 input[name=profile_set-0-first_name]' self.assertEqual(len(self.selenium.find_elements(By.CSS_SELECTOR, selector)), 1) ```
I would do what the other tests do and pass `test_labels` as a positional argument. Also, to be clearer what `foo` and `bar` are doing, it might be better to call them something like `notfound1` and `notfound2`. I'm assuming it's finding two failed test instances for labels not found. Alternatively, you could find real tests by passing something starting with `'test_runner_apps...'`.
I would either use `self.assertTrue(Carrot.objects.filter(tags__tag='orange').exists())` or `self.assertEqual(Carrot.objects.get(tags__tag='orange'), bear)` but otherwise LGTM.
... also we cannot use `User` in the `BaseBackend` so it will be hard to return something consistent.
Believe it or not, we're importing this one at work. (wasn't me this time :). I'm actually not sure what you've done to replace it.
It works with my proposition so we should have both assertions.
All `Col` should have an `alias`.
tests aren't entirely consistent, but I prefer omitting a newline after the docstring.
Please drop this docstring, I don't see much value in copying it from `base/schema.py`.
Did you consider using `queryset.model` instead of 'Row'? I don't know if that would cause confusion with model instances.
use: `any(name for app, name ... )`
If `cx_oracle` is installed, there's an error: ``` File "/home/tim/code/django/tests/backends/test_cursors.py", line 33, in OracleCursorOptionsTestCase class OracleLoggingCursor(LoggingCursorMixin, Database): TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases ``` Also, is this file doing anything useful? I don't see any test methods.
Thank-you for the explanation. I'd guess the warning it `__init__` is probably not needed for most use cases, but it doesn't hurt and is only for 1 version. We can keep all the `permanent=True` stuff to silence warnings for now and remove them in 1.9. I'll add a TODO so we don't forget.
I moved `check_none_response()` to a separate PR #12474 and renamed it to the `check_response()`. I'm going to rebase this patch after merging.
I would use `DJANGO_SUPERUSER_PASSWORD`.
I don't usually include a blank line here.
I see you've simply moved this, but I'd cleanup "template source loader" -> "template loader" to use consistent terminology.
IMO we can remove `_repetitive_name_errors()` hook, and move entire logic into `check_all_models()`, e.g. ```python for index_name, model_labels in indexes.items(): if model_labels: model_labels = set(model_labels) errors.append( Error( "index name '%s' is not unique %s %s." % ( index_name, 'amongst models:' if len(model_labels) > 1 else 'for model', ', '.join(model_labels), ), id='models.E030' if len(model_labels) > 1 else 'models.E029', ) ) for constraint_name, model_labels in constraints.items(): if model_labels: model_labels = set(model_labels) errors.append( Error( "constraint name '%s' is not unique %s %s." % ( constraint_name, 'amongst models:' if len(model_labels) > 1 else 'for model', ', '.join(model_labels), ), id='models.E032' if len(model_labels) > 1 else 'models.E031', ) ) ```
RawSQL needs to be added to the group by clause, we can't know if it refers to something that doesn't have an existing alias. Getting CombinedExpression and Date here seems curious. These should be fixable, but lets not do it in this patch.
Do we need to re-fetch an author? ```suggestion self.assertEqual(res.context['object'], self.author) self.assertEqual(res.context['author'], self.author) ```
```suggestion self, objs, fields, batch_size, on_conflict=None, update_fields=None, unique_fields=None, ```
`return '%s-%s-%s' % (y or 0, m or 0, d or 0)` can be moved here.
I think we usually avoid _should_ wording in test docstrings.
I would raise a `ValueError`: ```suggestion if not isinstance(perm_list, (list, tuple)): ValueError('perm_list must be a list or tuple.') ```
Can you describe the reason for using 'singular' here and (as an example) not 'plural'? Code looks fine style-wise; I'm trying to understand the issue a bit more since translation isn't my expertise (If you want a review about that).
Can we adjust the test name. We know this is `modelchoicefield`, because the whole `TestCase` is called that, so we can drop that. Maybe... `test_initial_accepts_model_instance_for_validation_when_field_disabled`? It's a bit long and horrible but... (???: suggestions welcome!)
Keeping the try block limited to just the code you expect to throw the exception is a good practice. It prevents a situation where there's some other bug than what you expected. For example, if `warnings.warn(` somehow threw a `KeyError` and it was in the try block, you would unexpectedly hide that bug.
```suggestion self.assertSequenceEqual(qs2, [self.objs[4]]) ```
I've changed it to a deploy check because it's not really an issue in a local environment.
No, `max_length` shouldn't be a required argument. I can think of multiple situations where I don't care about the maximum length.
Please check with Python 3.6, no exception is raised here (see a7a7ecd2b026c61a39a46d2d7eced0e06a92c970).
Looks like this could be a 1 line docstring.
```python objs_to_clear = {field: items - objs for field, items in self.restricted_objects.get(model, {}).items()} ```
I wonder if we could support running `runtests.py` from different directories :thinking: like we do for dotted module names, e.g. ```bash ~/repo/django> ./tests/runtests.py backends.postgresql ``` works fine, but ```bash ~/repo/django> ./tests/runtests.py backends/postgresql/ .... File "./tests/runtests.py", line 155, in get_label_module rel_path = path.relative_to(RUNTESTS_DIR) File "/usr/lib/python3.8/pathlib.py", line 904, in relative_to raise ValueError("{!r} does not start with {!r}" ValueError: '/repo/django/backends/postgresql' does not start with '/repo/django/tests' ``` crashes. I tried to fix this with: ```python # Otherwise, interpret the label as a path. if not path.is_absolute(): return path.parts[0] else: path = path.absolute() rel_path = path.relative_to(RUNTESTS_DIR) return rel_path.parts[0] ``` but it crashes with `ModuleNotFoundError` (like without this patch): ``` ====================================================================== ERROR: backends/postgresql (unittest.loader._FailedTest) ---------------------------------------------------------------------- ImportError: Failed to import test module: backends/postgresql Traceback (most recent call last): File "/usr/lib/python3.8/unittest/loader.py", line 154, in loadTestsFromName module = __import__(module_name) ModuleNotFoundError: No module named 'backends/postgresql' ```
Well, mariadb support in the mysql backend. Will get on to that soonish.
~~Maybe a list comprehension here too.~~ EDIT: Forget it, I misread the double for-loop.
I noted this too and wasn't sure if it was an error or not. Can you 'save' an aggregate? ``` Model.objects.update(salary=Max('salary')) # would this work? ```
`with self.assertRaisesMessage('Needle HTML does not have a root element'):`
Use `self.username_field` instead.
Use `settings.ALLOWED_HOSTS = settings.ALLOWED_HOSTS + ['testserver']` to avoid altering the original list assigned to `request._original_allowed_hosts` above.
There's a typo 24278 should be 24279 -- if you put some thought into it, you'd see this has nothing to do with squashmigrations.
I think a simple `django.template.Context` will do here.
comma after tuple
This usage looks a bit magic to me, but I think it can stay as it is. The module level deprecation warnings in https://github.com/django/django/commit/f59fd15c4928caf3dfcbd50f6ab47be409a43b01 are different than this, so stacklevel=2 can be removed in the following locations: - https://github.com/django/django/commit/f59fd15c4928caf3dfcbd50f6ab47be409a43b01#diff-9e264d0b47bfdd60be1698bca9bae281R19 - https://github.com/django/django/commit/f59fd15c4928caf3dfcbd50f6ab47be409a43b01#diff-68395a4996a48dd1b3cd34ddd9efe762R12
Sounds, good thanks for giving this ticket a shot by the way. It's a tricky problem with a few edge cases but you'll certainly learn a lot of things along the way.
Please use hanging indents here, too: ``` python self.assertEqual( list(...), [...], ) ```
```suggestion Call clean_fields(), clean(), validate_unique(), and validate_constraints() on the model. ```
No need to have empty lines, see the code above
Here's the style we usually use for long messages: ``` msg = ( '....' '....' ) with self.assertRaisesMessage(ImproperlyConfigured, msg): ```
You can remove semicolon.
I would move it to `_init__()`: ```python def __init__(self, *, name, expressions, index_type=None, condition=None): ... self.index_type = index_type or `GIST` self.condition = condition super().__init__(name=name) ``` and skip the default in `deconstruct()` and `__str__()`: ```python def deconstruct(self): ... if self.index_type != 'GIST': kwargs['index_type'] = self.index_type ```
no newline between fields (see style of other forms) Also, I don't think `label` and `initial` need to be specified. Try to include only the minimum functionality that's needed to reproduce the error and prove the regression is fixed.
I think that `BaseForm.get_context()` describes this perfectly well: ```suggestion ``` But if we must keep it, it should be collapsed onto one line: ```suggestion """Returns context for form rendering.""" ```
Are there situations in which this can happen other than "too many subqueries"? If not, I'd suggest an error message that might be more helpful to the end user would be "Maximum recursion depth exceeded: too many subqueries."
I think this should be a `ValueError`
Abort early if `self.db_table is None`
> Is there any specific reason why we would prefer using the operation in this case? Yes, because we have it. Using a RAW SQL is the last option, we're developing the ORM in order not to use them.
`redirect_to_login()` is a helper function, not a view.
Please wrap these lines at 79 characters.
Well, we _could_ make `on_delete` an actually-required arg to `ForeignObject` right now, and move it even before `from_fields` and `to_fields`, but that would require duplicating the deprecation warning in both `ForeignKey` and `OneToOneField`.
```suggestion from django.utils.deprecation import RemovedInDjango50Warning ```
```suggestion self.assertContains(response, 'Oh dear, an error occurred!', status_code=500) ```
I would use ```python exc_type, *_ = sys.exc_info() ``` or ```python exc_type, _, _ = sys.exc_info() ``` :thinking:
Maybe e.g. `Calling exclude() is not supported after union().`
It allows many new schemes that weren't allowed before.
I would have been interested in something closer to werkezeug's. That takes encoding as a parameter, etc. **Edit**: TL;DR skip to https://github.com/django/django/pull/2932/files#r15440287
However the `zoneinfo.ZoneInfo("UTC")` vs `timezone.utc` thing shakes out, it might make sense to support `timezone.utc` anyway, which has a `repr` of `datetime.timezone.utc`? Or is the idea that you only want to capture the situation where someone has used `django.utils.timezone.utc` specifically, and you want to always give them `django.utils.timezone.utc` in the event of migrations between Django instances with different values for `settings.USE_DEPRECATED_PYTZ`? If that's the case, do you want special-case logic for handling the more generic case of time zones? Presumably the `repr` can be rewritten to use something like `django.backends.db.timezone_constructor` instead? (Though there may be a performance hit from this, which may or may not be acceptable).
well, it's not functionally equivalent. if some imports succeed `site._registry` won't reflect those that succeed before the failure. I was thinking you could add a `registry` keyword to `autodiscover_modules` to allow passing in an optional `registry`.
Could this test be moved to `BaseCacheTests` under `test_empty_cull` to make sure the implementation works on all backends instead of only the database one? https://github.com/django/django/blob/0bebe5266f2e52a76fcf6d23b76942399d087bf2/tests/cache/tests.py#L601-L622
Invert the logic of the if statement and indent the two lines above, as the implicit return will be fine here. (Other cases of this should only be done in a separate clean up commit if you get tempted.)
```suggestion backend = self.base_params['BACKEND'] ```
up with Django imports
I think a list comprehension would be more readable.
What about using an `elif isinstance(m2m_relation, ManyToManyRel)` clause instead and issuing a `continue` in an `else` branch? This looks more safe in regard to third party fields that might exposed them as `many_to_many = True`.
You could also just raise a `ValidationError` should the site's domain and the entered domain not match or make the exclusive.
These check should respect `required_db_features`, so we need to omit checking conditions for `UniqueConstraint`\`s if `connection.features.supports_partial_indexes or 'supports_partial_indexes' in cls._meta.required_db_features`.
Yeah, the import itself is very likely non-necessary, too.
And I would rename this attribute `superusers` as it's meant to contain multiple users.
should this be a cached property? seems to do a fair bit of work
ticket-30949 is currently not accepted due to some performance issues, so we should use `cached_property` from `django.utils.functional`. We can swap all uses of `cached_property` when implementing ticket-30949.
Doesn't exist in 1.5, be careful when backporting
The size of self.MEDIA_TYPES won't be large, but it would be good to pre-compute this.
Thanks. Good point.
The tests are failing with: ``` + flake8 ./django/core/management/__init__.py:320:16: F821 undefined name 'ModuleNotFoundError' ``` and rightly so. I think the exception is removed in Python 3 from what I can see on Google.
Might want to only test for `JOIN` presence as this wouldn't fail if `LEFT JOIN` was used.
I think we can abstract away the need to _lower_ the name here. ```suggestion def alter_model_options(self, app_label, model_name, options, alter_option_keys=[]): ```
missing quote after `modelname` which should also be `model_name`
`type_` -> `invalid_type`
I wasn't familiar with `assertFormError` actually. Guess the main difference is that `assertFormError` is a single field. Happy to leave that though, the nicer `assertFormValid` is useful in itself.
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
Good point :)
They can be empty for subclasses, I think we can leave it that way.
To be consistent with the rest of the codebase, I'd import `from django.utils.six.moves import range` first.
This will overwrite an explicitly given message if you use ``` python validator = DomainNameValidator(accept_idna=True, message='Only IDNA domain allowed') ```
Test -> Tests (and I suggest a new `test_history_view.py` file since this file is quite large already.
This one seems ok to me.
The problem is that an expression like extract(year from datefield) = 2015, then the DB will not be able to use indexes on datefield. But if you instead have datefield >= '2015-01-01' and datefield < '2016-01-01', then the db can use indexes. This is the underlying reason why we have the special year lookups.
You'll want to make this a set as well ```suggestion existing_table_names = {name.casefold() for name in existing_table_names} ```
Usually `__getattr__` is paired with `__dir__`, so that the lazy-loaded stuff is still exposed to `dir()`. My go-to implementation is: ```python def __dir__(): return sorted(list(globals()) + ["utc"]) ```
I would chop the blank line.
This is confusing: ```suggestion connection.settings_dict.update(initial_settings[str(alias)]) if serialized_contents and alias in serialized_contents.keys(): connection._test_serialized_contents = serialized_contents[str(alias)] ``` Can aliases be anything other than `str` type? If so, then perhaps something is wrong elsewhere. It seems to have been done all over this patch. And this is broken anyway because the second line should have been `... str(alias) in ...`. The `.keys()` call is unnecessary as `in` will work on the keys of a dict anyway. ```suggestion connection.settings_dict.update(initial_settings[str(alias)]) if value := serialized_contents.get(str(alias)): connection._test_serialized_contents = value ```
I moved this to the `test()` method to avoid code duplication.
`unordered_list` handles nesting which you don't seem to need here. A pedestrian implementation with `format_html` would be more readable: ``` help_items = [format_html('<li>{}</li>', help_text) for help_text in help_texts] return format_html('<ul>{}</ul>', ''.join(help_items)) ``` Furthermore, this implementation marks the result as safe, which is useful here. (Truth be told, I'm reluctant to use template tags or filters in Python code, for ideological reasons.)
`Exception as e`
Moved fail_on_restricted to the next line and use hanging indentation.
Avoid calling `get_model()` twice here.
Oh. Interesting :-| Bisecting the regression on Django's master branch with your test will show where the regression happened. Depending on what this reveals, a backport could be in order, even if the regression is old.
`self.each_context` actually already contains a fully populated app list, under `available_apps`. We could make this more efficient by extracting `app_list` from `available_apps` rather than calculating it twice. ``` context = self.each_context(request) app_list = context['available_apps'].get(app_label) if not app_list: raise Http404('The requested admin page does not exist.') context.update({'app_list': [app_List], ...}) ```
looks to me like it could actually be a set comprehension for more speed again since it's only used for N `not in` checks below
Yes please, for further reusability of the `decode` function it makes sense to use `int` where the underlying data is actually an `int`. As for consistency that imo went away once we switched `iterations` to `int`. And I still think this switch makes sense since we do not have to call `int` all over the place where we use it. If you think of our endgoal (ie something like a `salt_len` as result of `decode`) so we can update `must_update` to account for the salt, it makes even more sense to have integers. Imo the key->value relation is well defined and with python being as dynamic as it is, let's make use of that.
I moved this to a separate PR, see #15426.
I think that: ```python return 'FOR UPDATE%s%s%s' % ( ' OF %s' % ', '.join(of) if of else '', ' NOWAIT' if nowait else '', ' SKIP LOCKED' if skip_locked else '', ) ``` is more readable.
Yes, I think we should be able to distinguish between automatic indexes and manual indexes. It might not be possible to cover all possible cases (inspectdb doesn't aim for perfect output), but let's try our best. For example, a single-column GIST index on a geometry field is considered as the default index.
This test has a problem on Windows: ``` ====================================================================== FAIL: test_override_static_root (test_utils.tests.OverrideSettingsTests) ---------------------------------------------------------------------- Traceback (most recent call last): File "c:\Users\Tim\code\django\tests\test_utils\tests.py", line 872, in test_o verride_static_root self.assertEqual(staticfiles_storage.location, '/tmp/test') AssertionError: u'c:\\tmp\\test' != u'/tmp/test' - c:\tmp\test + /tmp/test ```
I think reorganization of the admin views tests deserves its own patch outsie of this ticket.
You can simply use `assertRedirect(response, obj.get_absolute_url(), ...)` here. No need for string formatting.
Assuming you use `NotSupportedError`, I think checking for the exception class is enough and is more robust.
We avoid backslashes and use this style: ``` msg = ( "Redirection loop for authenticated user detected. Check that " "...." ) ```
Please move `)` to a new line: ``` py return self._html_output( normal_row='<p%(html_class_attr)s>%(field)s %(field_name)s</p>', error_row='%s', row_ender='</p>', ) ```
`codename %= ...`
There is no need to `append()` because we have a single error: ```suggestion return [ ```
These are unnecessary ```suggestion ```
This line is horrible. 😄 Simon mentioned this in his review before but, maybe leaving up until the `and\n` as is and putting the new check on the next line, to keep the diff that bit smaller...? (I don't mind this as it is per se — whichever way we do it, it is long and horrible.)
`server_name` is unused.
I guess Article/Category deletes aren't doing anything since you already asserted exists() -> False. Anyway, I think I'd put this in a separate method. `test_loading_with_exclude_app` / `test_loading_with_exclude_model`
without any arguments
was referring to `call_command`. the `os.path.join` is okay.
The common CPython message format for `TypeError` is `'to' argument must be a list or tuple, not 'foo'`.
add trailing comma so if more items are later added, we don't have to modify this line again.
Add trailing comma.
```suggestion @ignore_warnings(category=RemovedInDjango50Warning) ```
@graingert `cls` is passed here.
We should add parentheses only on MySQL > 8.0.13 and only for `_limited_data_types`. I don't think that a new class variable/property is a good solution. I would rather add a method ```python def _column_default(self, field): return '%s' ``` that can be override in a MySQL backend, e.g. ```python def _column_default(self, field): if ( not self.connection.mysql_is_mariadb and self._supports_limited_data_type_defaults and self._is_limited_data_type(field) ): return '(%s)' return super()._column_default(field) ``` This can easily be reused in `_alter_column_default_sql()`.
Not sure which of `defer` or `deferrable` makes more sense. The latter might be preferable if we choose the `Deferrable(Enum)` solution.
What if `self.to` is empty and `self.extra_headers` contains a `To` header? Weird use case, but still…
This seems overly complicated and probably also wrong with tables that are JOIN'ed more than once as the following JOINs will have aliases that are not `db_table`. ```python > from django.contrib.auth.models import User > User.objects.filter(groups__name='foo').query.alias_refcount {'auth_group': 1, 'auth_user': 1, 'auth_user_groups': 1} > User.objects.filter(groups__name='foo').filter(groups__name='bar').query.alias_refcount {'T4': 1, 'T5': 1, 'auth_group': 1, 'auth_user': 2, 'auth_user_groups': 1} ``` Also you probably don't need to build the `from_to_tables` set as it's really inneficent. You should use a loop and exit the function as soon as a matching alias is found.
This could be simplified to match the implementation in `_sqlite_datetime_extract()`: ```suggestion month_in_quarter = ceil(dt.month / 3) ```
I think a list comprehension would be more readable.
We could list the columns names.
chop "Tests that" prefixes, otherwise LGTM. I'm slightly nervous this will create weird edge cases that haven't been tested but I guess that's why it's alpha. :-) (I suggested a simpler commit message in the PR title too).
If it has some readability benefits, it could be done in a separate PR. This looks okay for now.
```suggestion def sequence_reset_by_name_sql(self, style, sequences): return [ '%s %s %s %s = 1;' % ( style.SQL_KEYWORD('ALTER'), style.SQL_KEYWORD('TABLE'), style.SQL_FIELD(self.quote_name(sequence_info['table'])), style.SQL_FIELD('AUTO_INCREMENT'), ) for sequence_info in sequences ] ```
This should be converted to backend generic way of figuring out that a session doesn't exist anymore.
IMO, it might be better to harcode the expected HTML rather than generating it programatically as it would be more clear what's expected.
I think I'd have this as: ```python try: import colorama colorama.init() except ImportError: colorama = None ``` Then below check `colorama is not None`.
Use `self.assertCountEqual()` when ordering is not specified and we have more than one expected result.
Was already highlighted [here](https://github.com/django/django/pull/13065#discussion_r684521409) but was missed.
This should only be performed if the `relations` registry is already computed; `if 'relations' in self.__dict__`
use `unittest.skipIf` decorator on the class
the call with the `0.01` timeout in `check_availability` does fail for me sometimes on startup :)
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
suggested format: #19820 - Deserializer should give a helpful error message ....
I don't see a big advantage to this change. The coding style says to use longer lines if it makes things easier to read -- my taste is to use `msg = '...'` if `with self.assertRaisesMessage(ValueError, '....'):.` is much over 79 chars.
Add an exception message similar to the other methods.
Valid point. Feel free to change the decorator in a separate commit.
Maybe: ```suggestion template_name_label = 'forms_tests/cyclic_context_boundfield_render.html' ```
You don't like f-strings at all, do you? :-)
I'd only use mock as a last resort and instead pass some email that will be affected by the normalization.
Would it be enough to check `form.fields`? This might make the test a bit easier to follow instead of having to parse the HTML to see what's expected..
I suggest you use the `for`/`else` construct here. ``` python for validator in validators: if isinstance(validator, validators.MinValueValidator) and validator.limit_value <= min_value: break else: validators.append(validators.MinValueValidator(min_value)) ```
This message shouldn't be used when constraint is defined with `expressions`.
Use `self.addCleanup(...)` in `setUp` to avoid overriding `tearDown`
IMO `, got...` is not necessary.
Both approaches work but I wonder if we'd want to be a bit more liberal here and simply return `copy` if no `output_field` can be retrieved. ```suggestion field = getattr(copy.lhs, 'output_field', None) if field is None: return copy ``` It would also avoid having to specify an explicit `output_field` when using a `Func` and `RawSQL` when users usually know what they are doing.
We're a couple months away (Jan. 15) from dropping Python 2 so it would be nice to avoid adding more work to do when dropping it. Have an invalid secret key seems like such an obscure issue, I don't know if it justifies all the time we're spending on it. Maybe we can just update the docs and be done with it.
You don't like f-strings at all, do you? :-)
Maybe: ```python "File '%s' is already compiled and up to date." % po_path ```
Not a huge deal, but it might be nice to have this user-configurable, defaulting to 191, because some people may configure mysql to have a longer maximum length.
Would it be better to raise `NotImplementedError()` so backends don't overlook implementing it? They can always return an empty list if it's not supported.
could you use the same doc string style as above? ``` """ ... """ ``` Also should be "Transforms... " to match coding style guidelines.
`str(self.band)` doesn't seem like a realistic value for the message.
This is nice. Worth the change.
Is `text` used? If unused, you can remove.
> Is there any reason to explicitly prefer lowercase? Well, not really anything critical. Elements, attributes, etc. in HTML tend to be case insensitive and I tend to lowercase the lot - more similarity leads to better compression in transit. Granted this isn't going to make much difference for such a short string, and your point about implementation detail is fair. (Hence I didn't press for it...)
Use `django.utils.string_types` instead of `str` here.
I had suggested doing this before computing `good_origin`: https://github.com/django/django/pull/13829#discussion_r579863426 That way you can avoid the two method calls and string construction in favor of a set membership check.
The import usually goes at the top of the method.
Rename to `BaseSequenceSerializer`, make the `_format()` raise a `NotImplementedError` similar to the `BaseSerializer`. Then add a `ListSerializer` along `TupleSerializer` etc. that implements the `_format()` method. ``` python class BaseSequenceSerializer(BaseSerializer): def _format(self): raise ... class ListSerializer(BaseSequenceSerializer): def _format(self): return "[%s]" class TupleSerializer(BaseSequenceSerializer): # as already implemented ```
> Shall I also remove `test_target_model_is_unsaved_save` and `test_target_model_is_unsaved_bulk_create`? Yes, they are redundant.
To save a line: "is not ready; refs ##24146."
Yes please remove unnecessary blank lines.
We could directly check that `name` is in `annotations`: ```python if isinstance(field.expression, F) and not self.query.combinator: col = field.expression.name if col in self.query.annotations: field.set_source_expressions([Ref(col, self.query.annotations[col])]) yield field, True ```
I made a few edits and squashed commits but before I push those updates I wanted to ask if this test is really needed. None of the changes seem related to verbosity so this test seems unnecessary to me.
Great catch :+1:
I wouldn't be shocked, but it really goes against "there should be one way of doing things". So all in all if anyone has ideas to finish what we started with the middleware move I'd happily use that over the status quo. Is the code of your efforts online somewhere? Maybe we find a way to fix decorators :)
This looks a bit odd to me. I wonder if something like this could be a bit more readable? Up to you. ``` return ( (sql_alter % {"column": self.quote_name(new_field.column), "type": new_type}, []), [], ) ```
I haven't run the tests, so I could be off here, but if having the _change_ permission effectively grants you the _view_ permission for backwards compatibility, is having the same criteria here a good idea? It could potentially mask problems with the new _view_ permission in the tests as the user would always have both.
:thinking: ```suggestion collector = Collector(using=del_query.db, origin=self) ```
Return (chop 's')
I feel similarly. Maybe it's better just to add support for list and tuple as originally proposed. It's unclear to me if other types would actually be used.
I think we prefer a different indentation style in docstrings, i.e.: ```python """ A Q object with an empty condition should be rejected as the conditional expression in a Case(). """ ```
There's no assertion for `created_date`. You could check that is `datetime.date`and maybe also that `created_date == created.date()`? Alternatively you could drop `created_date`.
Use single quotes consistently.
This assertion is not related with this fix so I would move it to a separate commit.
But if someone set `SECRET_KEY` to `None` and `SECRET_KEYS` to a valid list shouldn't that be allowed? I'd actually go backwards here and not use `is_overridden`. This way you'd error out if both has a usable value…
Nothing specific, it's just a pattern commonly used in Django. Probably because it was not the same in Python2.
I think the variable names have nothing to do with this regression. Also it's much easier to fix a regression introduced in commit with a small diff, that's why we prefer small diffs for patches that will be backported. P.S. Note that we're not all "guys" so please use gender neutral greetings, https://heyguys.cc/
`NULL` is interpreted as an empty string on Oracle, you can use: ```suggestion self.asserEqual(author.backward, '' if connection.features.interprets_empty_strings_as_nulls else None) ```
This can be single-lined ```suggestion '<ul class="errorlist nonform"><li>Please submit at most 1 form.</li></ul>', ```
Ah, I hadn't looked at #15179 in detail. Even better! 😁
Here you have a choice between `bytes` and `bytearray`. I ran this crude benchmark (Python 3.7, Linux, glibc): ```python import time CHUNK = b'\x00' * 1000 NUM_ITERS = 1000000 print('num_chunks,bytes_time,bytearray_time') for num_chunks in range(1, 21): start = time.monotonic() for i in range(NUM_ITERS): body = b'' for i in range(num_chunks): body += CHUNK finish = time.monotonic() bytes_time = time.monotonic() - start start = time.monotonic() for i in range(NUM_ITERS): body = bytearray() for i in range(num_chunks): body += CHUNK body = bytes(body) bytearray_time = time.monotonic() - start print(f'{num_chunks},{bytes_time},{bytearray_time}') ``` The result is: ![bench](https://user-images.githubusercontent.com/1223550/56269664-d69ab900-60fc-11e9-9393-ba4fd3998b87.png) At least with the parameters I used, bytearray is slower for a small number of chunks, but looks linear, while bytes looks quadratic.
didn't knew about RegexURLPattern having the same method.. reading the docstring I'm thinking both should do this: ``` python # .. if isinstance(func, functools.partial): while isinstance(func, functools.partial): func = func.func # ... ``` shouldn't it ? again that's my wild guess here, I don't have read more about the context of how this method is used (nor the other one), etc.. So I could be simply wrong.
Personally yes. (But maybe the examples in the docs will be enough)
I know but it's not worth complexity, we can use ```python stream = open_method(output, 'wt', **kwargs) if output else None ``` in `dumpdata` and ```python with open_method(filename, 'rt') as f: ``` in tests.
I think `warnings.filterwarnings('always')` is unneeded.
If we skip sub-parsers as actions then all tests still pass and `if opt.option_strings` condition is not required anymore, e.g. ```python # Parser actions and actions from sub-parser choices. def get_actions(parser): for opt in parser._actions: if isinstance(opt, _SubParsersAction): for sub_opt in opt.choices.values(): yield from get_actions(sub_opt) else: yield opt parser_actions = list(get_actions(parser)) ``` That's because `dest` for sub-parsers is not a valid option and don't need to be in `dest_parameters`.
Use `six.assertRegex` to avoid the deprecated alias on Python 3.
Let me put this differently :-) Is this required to make the test suite pass? If not, I'd prefer we do not include it. If yes, I'd like to look at the failing tests, because they must be weird.
I'd omit the blank line since the ) on its own line provides space.
Yes, I know. I was suggesting that to parallel `localdate`, `localtime` with no `value` when `USE_TZ=False` should return `datetime.datetime.now()` (the naive current local time). I think this may still be a valuable parallel, even though calling `localtime` with a naive `value` does not work. But I don't feel strongly about it. Curious what @aaugustin thinks.
I think we should revert the logging changes as it appears we're adding additional logging calls where they didn't exist before.
I would keep `if not ...` in the same line.
chop "should" (just state the behavior)
And add `obj.normal.close()` at the end to fix the failure on Windows.
Two things to note here: 1. I don't like much the dependence on settings.DEBUG. Either unconditionally raise, as done in other parts of this file, or make usage of the logging infrastructure (getLogger('django.template'), logger.error(...)). 2. I'd like to keep the return statement at the end, if possible
`tempfile.TemporaryDirectory()` can be used as a context manager: ```suggestion with tempfile.TemporaryDirectory() as temp_dir: ``` The other tests were cleaned up in #13211.
I think a simple `django.template.Context` will do here.
Make `__str__` return `self.string_rep` and nuke `__unicode__`.
Repeating would be quite rare situation, only for classes with multiple metaclasses, so defining new value used only once in 98% of time would be slower in the end.
```suggestion renderer=renderer, ```
This doesn't look correct... Did you mean something like: ```python ctypes.add(None) searched_perms.extend((None, perm) for perm in getattr(settings, 'GLOBAL_PERMS', [])) ```
no blank line needed
Not if you're using a client subclass with an overridden default `SERVER_NAME` which is a common pattern when testing projects using `django-hosts`. I suggest we use `response.client.defaults.get('SERVER_NAME', 'testclient')`.
Actually you should use `assertNotContains(response, '"/test_admin/admin/r/%s/1/"' % content_type_pk)` to also account for `byte` response content on py3.
`items = value.split(self.delimiter) if value else []` is slightly faster.
`Final exception` doesn't appear in a template. I added check for `During handling of the above exception`.
That part looks confusing, as `cr` and `lf` will potentially be used on `buffer_`, not only `chunk`. Instead, I would define two simple helpers `endswith_cr` / `endswith_lf` within `__iter__` — maybe there is some simpler way to do that but I couldn't find one: ``` Python def endswith_cr(line): return line.endswith('\r' if isinstance(line, six.text_type) else b'\r') ```
Those -> These
OK, good. Thanks. I think it's fine as it is. 👍
We should make use of `self.message`.
A cached property on the Operations class becomes problematic when migrations enter the scene (and there are tests with migrations, so the interaction is likely to exist already with the first use-case).
Can we remove the `email` field and the tests around it? It looks to me like that's not important for the issue that's solved.
```suggestion with self.subTest(location), self.settings(CACHES=settings): ```
I think it would be helpful if this were instead named `invalid_token_re`. The reason is that I coincidentally happened to be reading `csrf.py` and was confused by these lines: https://github.com/django/django/blob/b746596f5f0e1fcac791b0f7c8bfc3d69dfef2ff/django/middleware/csrf.py#L111-L112 The reason this was confusing is that this isn't a regex that matches tokens. It matches invalid tokens. And then I saw this was changed in this PR only a few days ago.
Actually I think it might be possible to reuse most of `super()._create_index_sql` by using `expressions=[RawSQL(...)]` instead of `columns` to avoid heavy duplication between both methods.
I would keep the previous name for a class attribute: ``` self.ignorenonexistent = ignorenonexistent ```
Never mind, just read the whole ticket :) Maybe the initial `assertIsInstance(p.restaurant.serves_pizza, bool)` would make more sense here. Else it might end up being refactored.
`assertTrue(value)` will pass for `bool(value) is True` which is different than checking for `True`.
this line should be: `def __init__(self, *args, **kwargs):`
Does the next patch use the fifth `Author`? If so, it might be more maintainable to replace this hardcoded list with something like `list(range(1, Author.objects.count() + 1))`
This assertion is not related with the patch. Please remove it.
We can use here `assertEqual` instead of `assertCountEqual`.
I think we should keep the original type.
It's not safe in general, as there's nothing to reset `content_type` back - really a subclass would be needed here, and in the other places this has been dnoe
Use single quotes
I would manipulate `names` in `__init__()` instead of doing this on every `get_context()` or `value_from_datadict()` calls, e.g. ```python def __init__(self, widgets, attrs=None): if isinstance(widgets, dict): self.widgets_names = [ ('_%s' % name) if name else '' for name in widgets ] self.widgets = widgets.values() else: self.widgets_names = ['_%s' % i for i in range(len(widgets))] self.widgets = widgets self.widgets = [w() if isinstance(w, type) else w for w in self.widgets] super().__init__(attrs) ... def get_context(self, name, value, attrs): ... for i, widget in enumerate(self.widgets): ... widget_name = name + self.widgets_names[i] ... def value_from_datadict(self, data, files, name): return [ widget.value_from_datadict(data, files, name + widget_name) for widget_name, widget in zip(self.widgets_names, self.widgets) ] ``` What do you think? It looks simpler, IMO.
`git pull --rebase` on your branch should be enough.
It's usually best to do cleanup changes in a separate commit or pull request. I recommend only touching the imports you need to for now.
Relying on pk might be problematic since we shouldn't assume the values that the database might assign.
Chop blank line.
What was the importing done for inside method? Looks like a hack, should import django.db.models.lookups module instead if having cross importing problem.
`ChoiceFormSet` -> `ArticleFormSet` You mixed `Article` with `Choice` in few places.
`CURRENT_DIR` is already a `Path` object, so we could join this with the `/` operator. ```suggestion html_template_path = CURRENT_DIR / 'templates' / 'technical_500.html' ```
Not sure about the status here given the referenced commit had to be reverted, but this at least needs a rebase to merge cleanly.
I know that tests in `queries` are mixed up, however I would move it to the `Queries6Tests` class.
set default `step_size=None` instead of `"any"` and only render that attribute if it's `not None`.
I am currently giving the PR a full final review and I think we can drop those assertions now that they are done in decode already, what do you think? (same for the assertion in `safe_summary` and other hashers)
This method implementation could be simplified by doing: ```python if on_conflicts == ON_CONFLICTS_IGNORE: return 'ON CONFLICT DO NOTHING' if on_conflicts == ON_CONFLICTS_UPDATE: ... return result ... ``` This would also let you eliminate the `if-else` below and initializing `result` to `''`.
Remove this line as `is_popup` is already added by `ctx = Context(context)`. The local variable is just for convenience.
Single quotes please.
Shouldn't this be `return isinstance(x, collections.Iterator)` instead? Actually we should replace all reference to this function by a `collection.Iterator` instance check.
Oh, it's because `SEARCH_VAR`, etc. are variables.
I think we are missing the `call_command()` here.
I think it's worth, re-added.
`with self.subTest(value=value):` is sufficient -- if a test fails, `expected` will appear in the exception.
Can you use `with self.assertRaisesMessage()` here instead of a bare try-except, please.
f-strings should not contain function calls. This guideline is from [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
might be nice to revert the ordering changes to keep the diff cleaner
If you want to use a new name, that's okay with me, but I think `'has_file_field'` should remain for backwards compatibility.
`annotations` is spelled incorrectly here.
I think this can be in single line: ``` url = reverse('admin:auth_user_add', current_app=self.admin_site.name) ```
repetitive with method docstring
Have a look at the `IntegerField` how it's done there. This has the advantage, that your `StepSizeValidator` can be reused. And it shall be reused, because `step` can also be applied to an `IntegerField`.
`targets` is an empty list when `MIGRATE` is `False`: ```suggestion executor.migrate([], plan=[]) ```
I think so, btw please do `resolver.kwargs.copy()` to leave the original kwargs in place on the resolver object.
This check is also redundant.
If we don't and `USE_TZ=True` the default datetime used on column creation will be in the system timezone instead of UTC like Django assumes datetime are stored in the database.
I had the same idea with the test location, but then realized that the serializers already test the UUIDs use case and handle them differently (through `value_to_string`). So I think the test is correct.
Yeah, multicolumn case is what I am interested in, the results will not be correct for cases where the first column match, the second is smaller and we use __lt. So, error out in multicolumn case for now, then lets think if we can make this work properly (for some DBs the DB itself knows how to implement (a, b) < (val1, val2)).
AdminSelect used to take the related model. It now takes the field.
It would clear ambiguity if you added some parentheses here and on the next line: `(' LIMIT %d' % limit) if limit ...`. Initially, I thought the grouping was `% (limit if limit else '')`.
This docstring is unnecessary.
I figured it out after I reviewed enough of the files. Meaningful test names or classes sounds good. Not a blocker to getting the first version of this merged though.
I'm a bit confused, but how it will work for multiple aggregations :thinking: ? e.g. ```python Book.objects.none().aggregate(pages_count=Count('pages'), rating_sum=Sum('rating')) ```
I think you meant `get_ellipsized_page_range` here. Use `number` instead of `page_num` which matches the argument name used by `Paginator.get_page()`.
I'm not sure if it's correct. What about static methods that have no args: ```python @staticmethod def item_description(): return "Overridden item description" ```
`HTTPS` is not necessary, so I removed this line.
This will become a performance issue for the database before it becomes one for the Python process :-)
We can revert changes in `_delete_unique_sql()`.
This needs an order_by clause so that the results are guaranteed to come back in the right order.
Sure. Sometimes I mark a ticket RFC if only relatively trivial updates remain. Then I'll just make those updates myself if the contributor doesn't do so.
There is no need to split this into multiple assertions: ```suggestion self.assertEqual(check_url_config(None), [ Error( 'URL route ...', id='urls.E009', ), ]) ```
This might either throw errors or block forever (dunno how field_stream is implemented) if field_stream is empty at this point. Not sure, but something to check!
Not sure which of `defer` or `deferrable` makes more sense. The latter might be preferable if we choose the `Deferrable(Enum)` solution.
Yeah, that's what I had guessed, just didn't look into it. So the only thing that's new here is a more specific error message for that case. Nothing to see here then, all good.
a separate model (and same note as above about spaces at end of string)
I'm wondering if this should be within the `DATABASES` setting
Can you use `['indexes']` here? If not, the list comprehensions in the next lines have a `not in None` and will fail.
this seems to hang on PostgreSQL/MySQL: Error: group instance with pk 1 does not exist.
`else: assertFieldType('time_field', "models.DateTimeField()")`
I think the wording could be improved a little here: ```suggestion if not self.protocol and not protocol: warnings.warn( "The default protocol will be changed from 'http' to 'https' " "in Django 5.0. Explicitly pass 'protocol' to this method or " "to the constructor to silence this warning.", category=RemovedInDjango50Warning, ) ``` Don't forget to update the tests too.
This seems suboptimal for a number of reasons: - It's doing `len(text)` twice. - If `len(text) == length` it's slicing unnecessarily instead of returning `text`. - Using `fill_text * length` is too much as we'll only ever need `lengrh - len(text)`. Maybe the following would be better: ```suggestion delta = length - len(text) if delta == 0: return text if delta < 0: return text[:length] return (fill_text * delta)[:delta] + text ``` If `fill_text` is more than one character, `fill_text * delta` still generates too much, so we still need to `[:delta]`. Offhand, I'm not sure I can think of anything better that wouldn't be slower.
Add a trailing comma so if more items are added later we don't have to modify this line again.
I think we'd normally call this `check_cached_property` or similar Also I'd prefer a longer class name than `A` whilst we're refactoring these tests
Can you please choose a new error code that is otherwise unused.
```suggestion id='templates.E003', ```
Maybe a `self.patch_execute_statements(self._execute_raise_tablespace_already_exists)` helper method could avoid repetition and long lines requiring unusual indentation.
The proposed text makes sense but leaves me wondering where I can read more about this limitation and if it might be addressed someday.
This won't work either. The tests run, but they're marked as skipped. @felixxm is adjusting.
What values would this condition have a different outcome than the current one? `is_active or self.allow_inactive_users or is_active is None`
case -> cast in all test names
The size of self.MEDIA_TYPES won't be large, but it would be good to pre-compute this.
These two could be `and`ed.
Seems wrong to hard code this list when Django fully supports user-written commands.
```suggestion def _select_on_conflict(self, ignore_conflicts, update_conflicts, update_fields, unique_fields): ```
Yes only `BigInteger` breaks alphabetical order (in all backends), I don't want to break it more.
I would suggest integrating this code into `_check_constraints` above, since then the duplicate code up to here can be shared. The name of that function implies that it is expected to check *all* constraints (I' reading it as "check all constraints", not "do something about check-constraints"). There might even be some code sharing in the error generating (e.g. if the constraint-specific check code sets a `message` and `code` variable, some common code could fill in the rest of the warning (especially if the hints are made equal as I suggest below).
These assertions are redundant with tests where `qs1.intersection(qs2).exists()` is `False`.
I would manipulate `names` in `__init__()` instead of doing this on every `get_context()` or `value_from_datadict()` calls, e.g. ```python def __init__(self, widgets, attrs=None): if isinstance(widgets, dict): self.widgets_names = [ ('_%s' % name) if name else '' for name in widgets ] self.widgets = widgets.values() else: self.widgets_names = ['_%s' % i for i in range(len(widgets))] self.widgets = widgets self.widgets = [w() if isinstance(w, type) else w for w in self.widgets] super().__init__(attrs) ... def get_context(self, name, value, attrs): ... for i, widget in enumerate(self.widgets): ... widget_name = name + self.widgets_names[i] ... def value_from_datadict(self, data, files, name): return [ widget.value_from_datadict(data, files, name + widget_name) for widget_name, widget in zip(self.widgets_names, self.widgets) ] ``` What do you think? It looks simpler, IMO.
You can remove also lines [161-163](https://github.com/django/django/pull/13052/files#diff-77d4793905e702bfe9a8fabac708dcc7L161-L163).
```suggestion if not isinstance(perm_list, (list, tuple)): ValueError('perm_list must be a list or tuple.') ```
`no_faulthandler=False` -> `enable_faulthandler=True`
@knbk I do think keeping everything related to url under a singe module does make the most sense as Aymeric say's.
I'm surprised if `str()` is doing something here since `capfirst()` also has some `str()` calls.
This docstring isn't necessary as the method name is should be clear enough. ```suggestion ```
```suggestion """ ```
Drop the blank lines in this function - there are really only five lines which isn't hard to read.
To make this a better test, use multiple values and varying case. E.g. `'No-Cache, No-Store, Max-age=0'`.
Can you check for `is not None` here, please. At least on SQLite an empty string is a suitable way to be passed to `reverse_sql` to give `RunSQL` a noop backwards migration. (PostgreSQL fails with `django.db.utils.ProgrammingError: can't execute an empty query`)
"Test checks MySQL query syntax"
personal preference: I think `'_language' not in request.session` reads a bit clearer.
with -> the
Testing `prepare_database()` is difficult (a lot of mocking is needed to get a proper isolation). IMO we can push this without tests.
Remove unused import.
We don't need this skip.
Could we maybe put this logic in a context manager or decorator? It'd be nice not to duplicate it from `render_annotated`. Quick example: ``` python from contextlib import contextmanager @contextmanager def annotate_exception(context, token): try: yield except Exception as e: if context.template.engine.debug and not hasattr(e, 'template_debug'): e.template_debug = context.template.get_exception_info(e, token) raise def stream_annotated(self, context): with annotate_exception(context, self.token): for chunk in self.stream(context): yield chunk ```
Please revert this unrelated change.
I see your point and can't think of anything sensible either. Assertion-less tests just seem pointless other than to put a tick in the coverage box.
Following the existing docstring pattern of wording like "Hook for..." seems useful.
It allows many new schemes that weren't allowed before.
:+1: We could really use some clearer naming there :)
Was this intentional? Doesn't seem to be related to the task...
Do we need a new form? I would reuse `Choice` in both tests: ```python ChoiceFormFormset = formset_factory(Choice, can_delete=True, extra=2) ```
Please check test coverage carefully. I didn't spot a test for this change.
You might also test the user agent string in `mail.outbox[0].body`.
don't need to assign these to self.
We could add a note about `OSMGeoAdmin`, e.g. ```suggestion 'django.contrib.gis.admin.GeoModelAdmin and OSMGeoAdmin are ' 'deprecated in favor of django.contrib.gis.admin.GISModelAdmin.', ```
I've submitted patch https://github.com/django/django/pull/11490.
Add a space before `M2M`.
`date=rfc850date` isn't needed in the `subTest()` -- since will appear if the assertion fails.
Don't use a mutable default: `{}`. Should default to `None` and then add : ``` if json_dumps_params is None: json_dumps_params={} ```
The last parenthesis should be moved to the next line (as in the `test_dense_rank`).
Maybe better named as `health_check_enabled` or `_configured`
no dash in "email"
Any required changes in this file should have corresponding test changes. For example, I reverted this change and didn't see any test failures.
Do we need to re-fetch an author? ```suggestion self.assertEqual(res.context['object'], self.author) self.assertEqual(res.context['author'], self.author) ```
Why would you need to sanitize something that's already in your session? Seems a bit late...
Yup, good point.
`self.each_context` actually already contains a fully populated app list, under `available_apps`. We could make this more efficient by extracting `app_list` from `available_apps` rather than calculating it twice. ``` context = self.each_context(request) app_list = context['available_apps'].get(app_label) if not app_list: raise Http404('The requested admin page does not exist.') context.update({'app_list': [app_List], ...}) ```
> This pattern is common to all backends. Note that the `filebased` backend doesn't follow this pattern. It puts the `make_key()` / `validate_key()` lines in a single place: https://github.com/django/django/blob/3445c50a3affc5ae7b1c2712a139d4a5105aeaf5/django/core/cache/backends/filebased.py#L130-L131
Using messages might work.
Put the `not field.many_to_many` first and the `isinstance()` second, please.
As `BaseFormSet` is inheriting from `Renderable` we can ditch this as the definition is the same: ```suggestion ``` You can also remove `.as_table()`, `.as_p()`, and `.as_ul()`.
Chop blank lines.
Ah, you're right. makes sense, then.
Use a single line here.
I think you can remove the blank lines as the helpers for checking HTML should ignore whitespace between tags.
Remove this line as `is_popup` is already added by `ctx = Context(context)`. The local variable is just for convenience.
It's orthogonal to this PR but this `self._db` in place of just `db` looks wrong.
objects. It may take...
```suggestion self.add_error(None, ValidationError('A non-field error')) ```
move this to the previous line (we favor longer lines over non-hanging indent)
should be -> is "if the database supports it."
Yeah - that was the source of my confusion about the `setdefault` thing. My original test case was wrong, but the same problem manifests if you use `ErrorDict()`.
Since this model key is the main model key used in this method, how about defining `model_key` in the first line of the method? Then below you can choose a different name for the model key accessed in each loop of the for loop since it's used less frequently. That would also let you change the (current) first line of the method to `del self.models[model_key]`. You could also do `unregister_model(*model_key)` towards the bottom if you wanted, like you do for `reload_model()` above.
I'd certainly be tempted to get rid of this branch, unless someone can identify a case that hits it.
The `__init__()` method? There are ~15 lines below `super()` that seem to be used.
I think it should be quoted in all cases.
Indeed this one looks fine. It will have beneficial performance effects if: - ATOMIC_REQUESTS is not in use - `update_or_create` ends up creating an object - the `save` method of that objects does long things like sending email _after_ the write (i.e. once it holds an exclusive lock on the database)
I think you could merge the two `if` statements into one: ``` if (lang_code not in supported and lang_code in deprecated_locales and deprecated_locales[lang_code] in supported): return deprecated_locales[lang_code] ```
please avoid non-4 space indentation
I think a test for this change is missing. This would probably go in `admin_views` whereever the other tests for the `delete_view` are.
Wrap docstrings at 79 characters. Try to avoid "we... " (often this results in simpler language).
Same here: ```suggestion with self.assertRaisesMessage(ValidationError, 'Enter a valid duration.'): ```
How about # View is not a callable (string import; arbitrary Python object)
What about: ```py for secret in self.secrets: if constant_time_compare(self._make_token_with_timestamp(user, ts, secret), token): break else: return False ``` EDIT: f'uped the indendation. First time I think I am using for … else
```suggestion def loads( s, key=None, salt='django.core.signing', serializer=JSONSerializer, max_age=None, fallback_keys=None, ): ```
Use outer double quotes to avoid backslashes.
_"Use single quotes for strings, or a double quote if the string contains a single quote. Don’t waste time doing unrelated refactoring of existing code to conform to this style."_
```python self.assertHTMLEqual( field.widget.render('name', []), ( '<ul>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="entertainment">Entertainment</label></li>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="test">A test</label></li>' '<li><label><input type="checkbox" name="name" value="%d" ' 'data-slug="third-test">Third</label></li>' '</ul>' ) % (self.c1.pk, self.c2.pk, self.c3.pk), ) ```
In `_handle_m2m_field()` and `_handle_foreign_key_field()` we can avoid of temporary variables (`value`) and return directly, e.g. ```python def _handle_foreign_key_field(self, field, field_value): return base.deserialize_fk_value(field, field_value, self.using, self.handle_forward_references) ```
You could do this setup in Python. `self.school.students.add(...)`
It might be helpful to explain: "Invalid - urlparse() raises ValueError", or following the other examples: ``` >>> urlparse('https://[') ValueError: Invalid IPv6 URL ```
```suggestion path = '%s/' % request.path ``` :thinking:
single line looks okay here
To catch this as a `IntegrityError` on Oracle we need to add `ORA-00001` to the wrapper: ```diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py index 4d2f5b51f1..3908aebda1 100644 --- a/django/db/backends/oracle/base.py +++ b/django/db/backends/oracle/base.py @@ -73,7 +73,7 @@ def wrap_oracle_errors(): # _C00102056) violated - parent key not found' # Convert that case to Django's IntegrityError exception. x = e.args[0] - if hasattr(x, 'code') and hasattr(x, 'message') and x.code == 2091 and 'ORA-02291' in x.message: + if hasattr(x, 'code') and hasattr(x, 'message') and x.code == 2091 and ('ORA-02291' in x.message or 'ORA-00001' in x.message): raise IntegrityError(*tuple(e.args)) raise ```
Yeah, that's what I had guessed, just didn't look into it. So the only thing that's new here is a more specific error message for that case. Nothing to see here then, all good.
Didn't you have a version of your patch where you called a method to get the labels? I guess we might have the same issues here than above (label=None or field name not in fields).
We're using PEP 257 verbs for new code "Return ..."
Likely want to raise `FieldDoesNotExist` or `FieldError` here instead.
remove extra newline
@lothemar I realized that previous assertions were correct. The current tests work even without this patch. I will restore them, sorry.
:+1: We could really use some clearer naming there :)
@InvalidInterrupt is right, this should map `params` using `quote_value` just like it's done on other backends.
We should use a custom storage for this test (instead of mocking).
Ahh, yes, sorry :facepalm: Good catch :dart:
No need to have empty lines, see the code above
I think these are too internal, I would rather check that `MultiValueDict` is pickleable: ```python pickle.loads(pickle.dumps(...)) ```
Is this a separate change? (I've left it for now but... 🤔)
The current names are misleading, e.g. `RenderableForm` is not really a render-able form it's a mixin which makes the form render-able. I would rename these classes: - `Renderable` to `RenderableMixin`, - `RenderableForm` to `RenderableFormMixin`, - `RenderableError` to `RenderableErrorMixin`.
can return directly, no need for intermediate variable
No need for `Value` wrapping since 1e38f1191de21b6e96736f58df57dfb851a28c1f ```suggestion is_book=1, ``` Ditto for all `Values` uses below.
We can remove `'book_join'` from `order_by()`.
basestring isn't Python 3 compatible. Please use `six.text_type` instead.
Ah right. You noted on the ticket that's not the case with the 'spawn' mode, but I guess we shouldn't concern ourselves with that right now, as the test runner doesn't support that. @Valze - maybe make a note for your spawn-mode GSoC project? 😉
This is only used once. Can we move it back to the `color` module? (That way `termcolors` is still only ever used by `color`)
And a another alternative in #11642
I would use f-strings for these messages.
If `lookup_params_all` is an instance of `dict` you can iterate over its keys directly: `for key in lookup_params_all`. You can also remove the extra spacing inside any: `any(field_path in lookup_param for lookup_param in lookup_params_all)`. You can detect whitespace issues by running `flake8` from the source.
I'd be inclined to reflow this so it fits on three lines: ``` 'AsGML', 'AsKML', 'AsSVG', 'BoundingCircle', 'ForceRHR', 'MakeValid', 'MemSize', 'Perimeter', 'PointOnSurface', 'Reverse', 'Scale', 'SnapToGrid', 'Transform', 'Translate', ```
This block looks ordered alphabetically (although that may be a fluke when compared to the blocks below): ```suggestion geos_makevalid = GeomOutput('GEOSMakeValid', argtypes=[GEOM_PTR]) geos_normalize = IntFromGeom('GEOSNormalize') ```
Do we need to do this? it is confusing (at least for me) to split and then join by `','`, maybe: ```python response.setdefault( 'Referrer-Policy', self.referrer_policy if isinstance(self.referrer_policy, str) else ','.join(self.referrer_policy), ) ```
I'm favoring contractions lately, e.g. "Don't", "shouldn't".
```suggestion form.render(), '<div><fieldset><legend>Field:</legend><div id="id_field">' '<div><label for="id_field_0"><input type="checkbox" ' 'name="field" value="J" id="id_field_0"> John</label></div>' '<div><label for="id_field_1"><input type="checkbox" ' 'name="field" value="P" id="id_field_1">Paul</label></div>' '<div><label for="id_field_2"><input type="checkbox" ' 'name="field" value="G" id="id_field_2"> George</label></div>' '<div><label for="id_field_3"><input type="checkbox" ' 'name="field" value="R" id="id_field_3">' "Ringo</label></div></div></fieldset></div>", ```
Do you checked if there is a way to use other models? It will be good to inherit one and add only needed field that reproduces your changes
I think an explicit loop that mutates the dict might be clearer here, and avoid the overhead of a function creation and call. I believe we already do this elsewhere (but I haven't double checked).
Might want to only run `replace` on `str` params or use `str(param).replace('-', '')`.
I suggest: ``` self.assertEqual( csrf_cookie.value, self._csrf_id_cookie, '.....' ) ```
I feel similarly. Maybe it's better just to add support for list and tuple as originally proposed. It's unclear to me if other types would actually be used.
Isn't this going to be really slow to create a `sync_to_asyc` instance and go through the sync-to-sync barrier for each item of the collection? Shouldn't we refactor iterables to separate their data-fetching (I/O) and data-massaging phases instead and only have `__aiter__` do `sync_to_async` for the fetching phase? By looking at `ModelIterable.__iter__` that seems doable.
```suggestion script_with_inline_function = ( 'import django\n' 'def f():\n' ' print(django.__version__)\n' 'f()' ) ```
I'm not sure whether it should be considered part of a separate clean up across all cases of this in the code base or whether we can handle this here for all of the adjacent lines, but it would be nice to fix the indentation: ```python self.management_form_html + ( '<tr><th>Choice:</th><td><input type="text" name="choices-0-choice" value="Calexico"></td></tr>' '<tr><th>Votes:</th><td><input type="number" name="choices-0-votes" value="100"></td></tr>' ) ```
Hmmm. `start` was unused anyway...
`has_key` is deprecated, use `if 'origin' in ds_input:` instead. Also please replace other occurrences in the patch.
I would chop `simply`.
Use a similar logging to what we do for robust signals? See `django.dispatch.dispatcher.Signal.send_robust` and ``` try: response = receiver(signal=self, sender=sender, **named) except Exception as err: logger.error( "Error calling %s in Signal.send_robust() (%s)", receiver.__qualname__, err, exc_info=err, ) ``` Something like ```suggestion logger.error("Error calling {func.__qualname__} on_commit() ({e}).", exc_info=True) ```
This is already checked in `user_commands.tests.CommandTests.test_call_command_no_checks()`. I will remove this test.
Great, I just change this line to check the message in calls rather than simply its length.
Same here? ```suggestion __T = r'(?P<hour>[01][0-9]|2[0-3]):(?P<min>[0-5][0-9]):(?P<sec>[0-5][0-9])' ``` Maybe this is a bad idea because of leap seconds 🤷🏻‍♂️
`Bar.bar` isn't a field. The message should be `Field is using a table that has already been registered by 'invalid_models_tests.Bar'` as the `db_table` is declared on a non-`auto_created` model (`_meta.auto_created is False`).
Should this be cached? The number of times validators are instantiated, and the associated cost with loading in the 1000 most common passwords each time strongly suggests that it should be.
My question would be: do you need to define a set of allowed characters? Does not just base64 encoding (with the URL-safe character set) the output of secure random not achieve the same goal? On Mon, Aug 4, 2014 at 9:52 AM, Curtis Maloney notifications@github.com wrote: > In django/middleware/csrf.py: > > > @@ -25,6 +25,7 @@ > > REASON_BAD_TOKEN = "CSRF token missing or incorrect." > > > > CSRF_KEY_LENGTH = 32 > > +VALID_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' > > This same set of chars is defined in django.utils.crypto as the default > for "allowed_chars" for the get_random_string function. > > Should we consider making this a more accessible constant? > > — > Reply to this email directly or view it on GitHub > https://github.com/django/django/pull/1477/files#r15738414.
Another vote for moving this logic into apps as a private method.
IMO, this is not related with `index_xinfo` but with naive parsing in introspection on SQLite. I added `_get_index_columns_orders` to fix this issue.
Please check test coverage carefully. I didn't spot a test for this change.
Please revert this, it's not worth changing existing code.
Use single quotes (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
To my mind the real issue here is that we shouldn't be using `update_wrapper` at all (here or above in line 76). `view` is not in any way wrapped by `cls.dispatch` or `cls`. We just happen to want to achieve something similar to what we would want to achieve if we were wrapping a function. By using `update_wrapper` we're setting the `__wrapped__` attribute, so when we call `inspect.signature` it thinks that this function is the decorator, and that the function we're actually interested in is `cls.dispatch`. That's the reason why it returns the signature from `dispatch`. We should just do the thing we want to do directly. Something along the lines of: ``` for attr in functools.WRAPPER_ASSIGNMENTS: # I'm not sure which of these we actually want try: value = getattr(cls, attr) except AttributeError: pass else: setattr(view, attr, value) view.__dict__.update(cls.dispatch.__dict__) ```
would be fine to use double quotes so you don't have to escape the single
I would add: ``` self.assertIn('<div id="traceback">', htmls[0]) ```
Chop blank line.
you don't need `nulls_last=True` here because it's a PK you're ordering by, which is non-nullable
This could go in an else block of try/except to keep the try block minimal.
The other benefit of reversing the sense of this flag is that it makes the "normal" case be `False` and the unusual case `True`, which I think is generally preferable for boolean flags.
This is a separate issue, can we move it to a separate PR/commit? Also, test is required.
How about changing `second` to args/kwargs like `cols, primary_key=False, 'unique=False, ...` and then the assertion becomes `assertDetails(constraint, ['up_votes'], check=True)`. No need to repeat all the other values.
I think the values provided need to be validated. It would also be nice to accept and parse a string containing both bounds... But that gets me thinking that this current approach is rather verbose...
It looks to me like this test should verify the SQL rather than verifying that there isn't any deferred SQL.
I'd go with `ValueError` and possibly add a check `isinstance(pages_per_range, int)`: ```python if pages_per_range is not None and not (isinstance(pages_per_range, int) and pages_per_range > 0): raise ValueError('pages_per_range must be None or a positive integer for BRIN indexes') ```
We should support both `db` and `database`, e.g. ```python database = settings_dict['OPTIONS'].get( 'database', settings_dict['OPTIONS'].get('db', settings_dict['NAME']), ) ```
I think we should `warnings.warn('...', category=RemovedInDjango40Warning)` here.
This unfortunately won't work if the subquery refers to any outer references as these must be included in the group by clause.
While moving this, chop "we".
Wrap at 79 chars.
As far as I see, this change is unrelated to this PR, so please remove it.
yeah, as long as we don't create a function on every single call.
Error is raised only on PostreSQL. On Oracle and MySQL we simply return the same date. Even if we want to raise an exception on SQLite, `NotImplementedError` is probably not the best choice. It's not sth that will or may be implemented in the feature. I'd use `ValueError` as we do in similar cases.
This can be a single line.
This behavior doesn't exist in the current implementation of `HttpResponse`.
Can you just add the managers and admins including their names, please. I think that I'd expect the names to show up in the message if I define them in my settings.py
Do we need to swap arguments? IMO we want to keep the same order as in `SIMILARITY()` calls. ```suggestion class TrigramWordSimilarity(TrigramBase): function = 'WORD_SIMILARITY' ``` e.g. - `TrigramWordSimilarity('Cat sat on mat.', 'cat')` should be equal to `0.30769232` instead of `1` - `TrigramWordDistance('Cat sat on mat.', 'cat')` should be equal to `0.6923077` instead of `0`
The `__init__()` method? There are ~15 lines below `super()` that seem to be used.
My code sucks. Feel free to change in other places.
I'm not sure is this really helpful and needed :thinking: because it'll catch only checks with the same order of conditions, so only copy&paste issues. For example, it will not raise a warning for: ```python models.CheckConstraint(check=models.Q(models.Q(id__gt=0) | models.Q(id=0)) models.CheckConstraint(check=models.Q(models.Q(id=0) | models.Q(id__gt=0)) ``` (that's of course only a simple example). In the same time I would not like to add any complicated logic here.
Remove the blank line.
single line here is okay (lines up to 119 chars are fine when it improves readability)
; -> ,
"Make sure" is a phrase to avoid
We should use `pathlib.Path.cwd()` instead, also there is no need to define a constant.
add trailing comma
Do we need to be so restrictive? There are many language tags in the [IANA](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry) registry that don't match this regex, e.g. `i-mingo`, `de-CH-1996`, `de-1996`, or `kl-tunumiit`.
I figured it out after I reviewed enough of the files. Meaningful test names or classes sounds good. Not a blocker to getting the first version of this merged though.
This seems wrong because it would only mask an issue with STATIC_ROOT not existing.
Can we display a similar message with the test results? It can be helpful when you have plenty of errors, .e.g. ``` ... FAILED (errors=206, skipped=1094, expected failures=4) Used shuffle seed: 556738431 (generated) ```
If there's GEOS 3.1 (as on Ubuntu 10.04), however you'll need to raise a `NotImplementedError`.
`return self.get_database_version() >= self.features.minimum_database_version`
This won't work in many cases on Oracle :disappointed:
Remove the unused import.
Not for a single line, the idea is to add one for things like multi-line dicts/tuples so that if more lines are added later, we don't have to modify the last line and add a comma.
I think you meant `get_ellipsized_page_range` here. Use `number` instead of `page_num` which matches the argument name used by `Paginator.get_page()`.
Feels like this should be handled at the database backend level.
Django doesn't currently use f-strings, but 3.0 will certainly be capable of doing so. @felixxm, @carltongibson - are we happy to start allowing use of f-strings, or do we want to hold off? Perhaps this could be: ```python except ValueError as e: raise e.__class__(...) from e ```
Minor but the `'%%Y-%%m-01 00:00:00'` could likely by appended to params as well.
Hmm, I think if it's not an instance of the model I'd expect it to raise an exception, not just ignore it, but I'm not sure.
chop trailing ", " in list
`%`-formatting is called anyway: https://github.com/django/django/blob/f71b0cf769d9ac582ee3d1a8c33d73dad3a770da/django/db/models/expressions.py#L965 Do you think an extra value can cause a performance regression? :thinking: I was thinking about readability.
TBH, I couldn't find a better wording.
```python msg = ... with self.assertRaisesMessage(ValueError, msg): ```
@timgraham wilco. As new contributors, it's difficult to know which direction so I appreciate the explanation.
passed to query relations.
I think the `_module_exists` and argument name could be improved. What about ```suggestion def _contains_subclass(subclass_path, candidate_paths): ```
```suggestion squashed_migrations_with_deleted_replaced_migrations = [ migration_key for migration_key, migration_obj in executor.loader.replacements.items() if any(replaced in to_prune for replaced in migration_obj.replaces) ] ```
I don't see a test for this method and I don't see that it's actually called unless there's some magic going on.
Looking at it we should also pass `obj` to this method and cache its results, just like we do with `get_group_permissions`: ``` python def get_user_permissions(self, user_obj, obj=None): """ Returns a set of permission names the user has. """ if user_obj.is_anonymous() or obj is not None: return set() if not hasattr(user_obj, '_user_perm_cache'): if user_obj.is_superuser: perms = Permission.objects.all() else: perms = usr_obj.user_permissions.all() perms = perms.values_list('content_type__app_label', 'codename').order_by() user_obj._user_perm_cache = set("%s.%s" % (ct, name) for ct, name in perms) return user_obj._user_perm_cache ```
Might be better to define this as separate method like this: ``` def window_frame_start(self, start): if isinstance(start, int): if start < 0: return '%d %s' % (abs(start), self.PRECEDING) elif start == 0: return self.CURRENT_ROW elif start is None: return self.UNBOUNDED_PRECEDING raise ValueError('Illegal argument for start, must be either a negative integer, zero or None') ```
Most likely this will not work on Windows because files created with `NamedTemporaryFile` cannot be reopened on Windows (which defeats the whole purpose of naming them in the first place -- I have no idea why `NamedTemporaryFile` even exists on Windows). I'm not saying this is blocking the merge because I don't think we have that many users of PostgreSQL on Windows, but I thought I'd bring it up in case someone wants to check.
Only this parameter is unnecessary, rest of them is necessary to hide std outputs.
```suggestion """runserver doesn't support --verbosity and --trackback options.""" ```
I feel the test could be slightly improved to better underline the problem that was reported and to prevent future regression. Something like: ```suggestion encoded_url = '/test-setlang/%C3%A4/?foo=bar&baz=alpha%26omega' # (%C3%A4 decodes to ä, %26 to &) ```
1. Given that we have `pylibmc` below, is `memcached` the right key here? 2. Given that there are choices here, is this something we want to have an opinion on? (It doesn't seem as clear to me as e.g. databases.)
This and similar assertions added for `bloom`, `btree`, `hash`, `gist`, and `spgist` are not related with this patch, and they're unnecessary. Index types are already checked in ``` self.assertEqual(constraints[index_name]["type"], ...) ``` Please remove them.
For a gzip file, I believe this will cause the browser to unzip it. ``` $ python3 >>> import mimetypes >>> mimetypes.guess_type('f.tar.gz') ('application/x-tar', 'gzip') ``` But I'm guessing the user wants the mime type to be `application/gzip` (or similar) with no encoding. [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding) > The Content-Encoding entity header is used to compress the media-type. When present, its value indicates which encodings were applied to the entity-body. It lets the client know, how to decode in order to obtain the media-type referenced by the Content-Type header. I know of at least one third party Django app that has this issue: https://github.com/johnsensible/django-sendfile/issues/38
I would rename `self.model_name` -> `self.name` (like in `CreateModel`, `DeleteModel`, or `RenameModel`).
you can remove ticket reference
it would help readability if description[5] and description[4] were assigned local variables describing what they represent
And now I look at the implementation for get_field, I see that @PirosB3 has implemented the backward compatibility approach with kwargs already.
FWIW the `TypeError` raised here would be backward incompatible. Such a pattern is even used in Django core. https://github.com/django/django/blob/0ce2ad9ca4623cfd6dc2515430c0ae8a1717a607/django/db/backends/postgresql/features.py#L56-L74
what if two mixins have the same name (from different packages)? hypothetically: `facebook.models.UserMixin` and `twitter.models.UserMixin`
I think a simple `django.template.Context` will do here.
Can we wrap this line after the comma.
Same note goes here.
It's unclear to me why you need this `try / finally` block. If an exception happens `populate()` in an "inner" call — and any inner call will raise an exception just below — `_populate_running` shouldn't be reset to `False` until the "outer" call terminates. In fact I don't think we need to reset `_populate_running` at all. I think it will be just as easy to make it a simple boolean that starts at `False` and moves to `True` when `populate()` is called for the first time. That will be consistent with `(apps_|models_|)ready`. I'd just call it `loading` or `started` and not bother reset it.
Furthermore, why do you construct `unapplied_parents` at all? Can't you just loop over `self.graph.node_map[migration].parents` and on raise an exception when the first one has an inconsistent history? That would safe some time in bigger projects. ``` python for x in self.graph.node_map[migration].parents: if x is unapplied # use the condition from above raise InconsistentMigrationHistory(...) ```
`NULL` is interpreted as an empty string on Oracle, you can use: ```suggestion self.asserEqual(author.backward, '' if connection.features.interprets_empty_strings_as_nulls else None) ```
This is fine as is.
Please wrap at 79 chars.
Please add `urls.W004` to the `ref/checks.txt`.
I don't think this is correct. `settings.MIGRATION_MODULES` only contains user-defined migration modules -- presumably want the detection to work regardless of whether or not that setting is defined.
IMO `if extra_fields.get('is_staff') is not True:` represents what need to be checked here more clearly.
I suggest you use a constant to refer to the default `template_name`. Have a look at how it was dealt with in #5577.
The change is fine, I'm just asking that it be a be separate commit similar to 31098e3288595c13f165935f2579f1af744e5240 so that the refactoring isn't mixed in with the new feature.
As noted elsewhere, put the trailing space on this line rather than the next (and in the message below).
I'd rename that to "target". See `root_nodes()` for an explanation of what we consider root nodes.
Please move `)` to a new line: ``` py return self._html_output( normal_row='<p%(html_class_attr)s>%(field)s %(field_name)s</p>', error_row='%s', row_ender='</p>', ) ```
Thanks for looking that up @timgraham, as long as have tests asserting that this is working as expected it should be fine.
What @shaib said: `makemigrations` and `migrate` should fail, `showmigrations` should work.
Yes it should be `R.p`, we didn't take into account nested protected relations in the ab3cbd8b9a315911248227208630a020cedca08f (probably my fault). Also casting to list is not necessary anymore after this change.
It would be safer to assertEqual with False/True since these assertions pass on any truthy/falsey value.
please multiline these strings so they aren't longer than 120 chars. ``` row_html = ( '...' '...' ) ```
This ticket is about recommending a `fk_name`, so we should rewrite this message, e.g. ```python raise ValueError( "'%s' has more than one ForeignKey to '%s'. You must specify " "a 'fk_name'." % ( model._meta.label, parent_model._meta.label, ) ) ```
chop blank line
explicit -> specified
I feel like there should be some dependencies declared on the operation here - the one that comes to mind is that it should depend on creation of its model, and delete model should depend on it.
I think this test can be entirely removed if `test_nested_subquery_outer_ref_with_function` covers the usage case appropriately.
I would leave only `The django.utils.datetime_safe module is deprecated.`. This a private API, we don't see to provide an alternative.
The only issue I can see here is that `UPDATE` is the rows/table locking statement, so we will lock a table even if not necessary :thinking:
I would filter that first, via a generator. I think this might be more readable. ```python lists = (lst for lst in lists if lst) ``` or ```python lists = filter(None, lists) ```
I think using a semantic name would help here, e.g. `lookup_kwarg_null`
is this message an accurate improvement? `Using an aggregate in order_by() without also including it in annotate() is not allowed:` I'll also update the test to use `assertRaisesMessage` as suggested by Simon when merging.
Oh `value` is used, I can't read! (There are some methods that don't use the passed arguments, but perhaps they should all be specified for consistency)
I think `get_exception_response` would be a better name for the method.
RawSQL needs to be added to the group by clause, we can't know if it refers to something that doesn't have an existing alias. Getting CombinedExpression and Date here seems curious. These should be fixable, but lets not do it in this patch.
Sorry, the return value should be an iterator, not an `OrderedSet`. It might be good to check that.
put the closing parenthesis on the next line
Let me put this differently :-) Is this required to make the test suite pass? If not, I'd prefer we do not include it. If yes, I'd like to look at the failing tests, because they must be weird.
Ahhh, yes, thanks!
I think reorganization of the admin views tests deserves its own patch outsie of this ticket.
use a single line instead
Oh, I thought it was referring to two separate issues. Alright then, I'll make a new PR and we can proceed from there
It's not used only for combined queries so we should call it only in `not combinator` branch.
I think we shouldn't silence the exception in all cases here, only when `template_name != 'csrf_failure.html'`. Changing the default value of `template_name` to `None` and actually raising the exception `if template_name is not None` should do.
Either _all_ fields should have an m2m property (because m2m is a fundamental property that a field can have), or none of them do. A hasattr check doesn't make sense here. Same goes for is_gfk a few lines earlier. m2m is probably a fundamental property of fields, but gfk is masking something more abstract.
If I were writing these tests from scratch, I wouldn't use a separate `expected` variable everywhere (this is related to our preference for longer lines rather than a historical more strict adherence to 79 chars, I think).
I don't think we need to check all rows, probably sth like this: ```python self.assertEqual(list(qs.values_list('lead_default', flat=True).distinct()), [60000]) ``` will be sufficient. We have a similar situation in the `test_nth_returns_null`.
Fair enough, I assumed it was a small tweak to the stdlib version.
I'd not use the ternary: ```suggestion if filtered_relation: pathinfos = field.get_path_info(filtered_relation) else: pathinfos = field.path_infos ```
We're avoiding the `self.fail()` pattern in favor of letting the entire exception bubble up.
We used the same message as in other places that's why I don't want to add a period only in this case.
The idea is that `InlineModelAdmin` is always used with a `ModelAdmin`, so we don't need to include the files again.
You might append this to the `using` sql passed to `super()` to fix the test failure on Jenkins (due to usage of TABLESPACE).
Please make this `IntegerField` instead of `PositiveIntegerField`. Similar to `AutoField`, which uses `serial`, although the field usually increments from `1`, it is not forbidden to store zero or negative values. Indeed, this is sometimes useful.
Please add trailing comma.
Join aliases are reused in order. This shouldn't non-deterministically raise AssertionError because change_map contains a circular reference (#26522).
I'd go with separate methods for each of the different combinations.
You shouldn't need the extra parentheses inside `extend()`, FYI.
Oh, no, OK, the nextval will always return a different value. It's just that we might have gaps if one value is not saved.
Mapping allowing case-insensitive key lookups. Original case of keys is preserved for iteration and string representation.
This will crash on Oracle: ```python @skipUnlessDBFeature('supports_subqueries_in_group_by') ```
`context.exception.message` -> `six.text_type(context.exception)`
This can happen also for `OneToOneField` so we shouldn't put `ForeignKey` in a message, maybe: ```python exceptions.FieldError( "'%s.%s' refers to field '%s' which is not local to model " "'%s'." % ( self.model._meta.label, self.name, to_field.name, self.remote_field.model._meta.concrete_model._meta.label, ) ) ```
`raise NotImplementedError("ValuesQuerySet does not implement `only()`")`
You also have to pass `'number'` as the last argument to `npgettext_lazy`, and in each line below.
I think an explicit loop that mutates the dict might be clearer here, and avoid the overhead of a function creation and call. I believe we already do this elsewhere (but I haven't double checked).
Looks like `self.model_name_lower` could be passed here and we could avoid all the `.lower()` handling in `.rename_field`. ```suggestion state.rename_field(app_label, self.model_name_lower, self.old_name, self.new_name) ```
I don't think this is the best way to address this issue. We will always have to keep this list of fields updated. Instead we could change `_alter_field` field to do nothing when the constraint hasn't changed. We could just compare the old and new field. This is the `if` that drops the constraint. https://github.com/django/django/blob/master/django/db/backends/base/schema.py#L590 and the one that adds it back https://github.com/django/django/blob/master/django/db/backends/base/schema.py#L810
Could probably use an f-string here and in the following branches. ```suggestion return f'{lhs}[%s:%s]', params + [self.start, self.end] ```
The log message makes no sense. You are trying to normalize (or rather kludge) something that should be a locale to be a language code/tag, to then convert to a locale. But you are saying the locale has been normalized to a language code/tag which is incorrect. A language code/tag is not a locale, and here we *should be providing a locale*, hence my misgivings already stated about this whole thing. Regardless, you probably want to do this: ```python def normalize_locale(original, stdout): """ Normalizes incorrect locale strings, e.g. zh-cn, zh_cn, ZH-CN are converted to zh_CN. """ corrected = to_locale(original.lower().replace('_', '-')) if original != corrected: stdout.write('Normalized %s to %s.' % (original, corrected)) return corrected ```
`clean` is not only for validation, but also for data modification in a form.
Could we possibly skip the detection feature `if Database.sqlite_version_info >= (3, 29, 0)`? Since this is only present on macOS [could we branch off `platform.platform`](https://docs.python.org/3/library/platform.html?highlight=darwin#platform.platform)? I think this would partially address @claudep's concerns.
I wonder if 25 should be defined in the [SQL constants module](https://github.com/django/django/blob/master/django/db/models/sql/constants.py)? I am afraid changing 25 in the code might not be changed here, so the test would silently become obsolete.
Yeah, it's fine.
single line is okay here (we allow longer lines up to 119 characters if it helps readability)
please use `assertRaisesMessage` to verify this is the `TypeError` we expect (also helps for tracking which tests map to which code).
Ticket reference isn't needed.
https://www.postgresql.org/message-id/6721.1357856188%40sss.pgh.pa.us So probably the whole debate about touching the introspection for expressions should be closed. I could only get `pg_get_expr` to output whatever I used for `CREATE INDEX .. ON (lower(body), lower(title))` where `lower(body), lower(title)` would be returned by `pg_get_expr`.
`u'` prefix in unnecessary, please use also hanging indentation.
Unneeded empty line.
```suggestion attrgetter('pk'), ```
I should have been clearer but `firstname` and `lastname` can be omited as they'll default to `''` if missing.
This is clearly incorrect: * This will blow up if you don't have exactly two parameters. * If you had two, the output would probably be something like `?['a', 1]=['b', 2]` * The issue is due to the generator in the arguments to `str.join()`. * Why a list comprehension? I think it should remain a generator expression. A correct fix would be: ```python ('%s=%s' % (k, v) for k, v in params.items()), ```
Can we use `subTest()` for these three tests? ```python with self.subTest(http_host=http_host, http_origin=http_origin): ... ```
I couldn't came up with a test case. I suggest to be extra safe and `return (value.pk,)` immediately instead of appending to `value_list` just in case it end up containing values from other iterations (e.g. a model instance that happen to have a field/attribute with the same name as one of the looked up by `source.attname`).
I wonder if it would be simpler and more efficient to filter out all empty querysets. from self and other_qs, then use `qs[0].self._combinator_query('union', qs[1:], all=all)`, accounting for the case where qs might have zero or one elements.
```suggestion with self.assertRaises((OperationalError, ProgrammingError)): ```
Please don't use double spaces here.
Also I think that `is_ref` will need to be handled in a special way. The reference will need to be resolved to inline the expression. This can be tested by with the following code ```python updated_count = UniqueNumber.objects.annotate( number_inverse=F('number') * -1 ).order_by('number_inverse').update( number=F('number') + 2, ) self.assertEqual(updated_count, 2) ``` In this case `number_inverse` will yield `is_ref=True` and `expr` will be an instance of `Ref` if I'm not mistaken.
I think we can abstract away the need to _lower_ the name here. ```suggestion def alter_model_options(self, app_label, model_name, options, alter_option_keys=[]): ```
We might want to use `field.one_to_one` rather than `isinstance`. Maybe it depends on where the "it will be considered as editable" comes from.
I'd remove this check, otherwise tuples of other lengths will be silently ignored. Better for an exception to be thrown.
I think this should work: ``` python connection = connections[db] if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy': loader.check_consistent_history(connection) ```
`This test` is unnecessary. Please write `skipUnless` in one line e.g. `@unittest.skipUnless(connection.vendor == 'mysql', 'MySQL specific test.')`.
since there's no validation here and `get_port()` is relying on this code I would think you'd need to consider other malformed cases, such as `example.com:abc` or `1.1.1.1:443]`
Perhaps I misunderstood Anssi's original intent somehow, but the fact that your filter expression uses INNER joins seems like you're maintaining the status quo at the minimum. @charettes I've just pinged you on IRC but if you've got some thoughts on this I'd like to hear them.
```suggestion if val is not self._missing_key: ``` Can you rebase and check other methods? they should be synchronized with sync variants.
We're using PEP 257 verbs for new code "Return ..."
Chop this link.
This won't work when `empty_aggregate_value` is `NotImplemented`.
response (no cap) unless you mean to write HttpResponse
same thing here about assuming `is_active` exists and `not user.is_active` -- probably need some tests for that case.
You don't need to use `make_hashable()` for primitives: ```suggestion return hash((self.message, self.code, self.params)) ```
We cannot make serial pk assumption: ```diff diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py index 8b54611010..ea68a105d6 100644 --- a/tests/model_forms/tests.py +++ b/tests/model_forms/tests.py @@ -1765,10 +1765,12 @@ class ModelMultipleChoiceFieldTests(TestCase): f.clean([c6.id]) def test_model_multiple_choice_field_validate_choices_called_properly(self): + c1 = self.c1 + class CustomModelMultipleChoiceField(forms.ModelMultipleChoiceField, TestCase): def validate_choices(self, queryset, field_name, selected_choices): self.assertIsInstance(queryset, models.QuerySet) - self.assertQuerysetEqual(queryset.order_by('id'), [1], lambda a: a.id) + self.assertSequenceEqual(queryset, [c1]) self.assertIsInstance(field_name, str) self.assertEqual(field_name, 'pk') self.assertIsInstance(selected_choices, frozenset) ```
Do you have a traceback or the name(s) of test that fails with the set(). I ran the sqlite suite with the set() without problems.
Ah. It is because we are pre-populating `self.records` before the `yield` in the context manager. Changing to `defaultdict` means that the key only gets added after when the context manager is exiting and we do `self.records[name].append(end_time)`. This means that nested uses of `time_keeper.timed()` - as we do in the database setup -- end up being out of order.
IMO this is not a proper fix because `CustomPK` doesn't appear in a `FOR UPDATE OF` statement, so this can cause a data loss. Both models should be included.
The idea is that `InlineModelAdmin` is always used with a `ModelAdmin`, so we don't need to include the files again.
In the current state, it's not reusable for other lists of expressions, so I would rename it to the `IndexExpressions`
stacklevel 2 isn't useful when the warning is raised for OneToOneField. Ideally we could have stacklevel=3 for that case to give `question = models.OneToOneField(Question)` instead of `super(OneToOneField, self).__init__(to, on_delete, to_field=to_field, **kwargs)`.
What values would this condition have a different outcome than the current one? `is_active or self.allow_inactive_users or is_active is None`
Wrap docstring at 79 chars
Reduce to 20% of the lines and avoid multiple updates to the set: ```python return {loader.get_dirs() for loader in self.loaders if loader is not None} ```
The easiest solution might be to duplicate the warning in `OneToOneField`.
"Return" instead of "Returns"
It also says: > It may also be known that project A follows semantic versioning, and that v2 of ‘A’ will indicate a break in compatibility, so it makes sense to not allow v2: I guess the real question is then whether `sqlparse` really uses semantic versioning, and since it's "Development Status :: 5 - Production/Stable" at 0.2.4 potentially not. You're probably right to err this way, let's leave it as-is. :)
`return self.get_database_version() >= self.features.minimum_database_version`
This needs an order_by clause so that the results are guaranteed to come back in the right order.
While my tests suggest that iterating a set is ~8% slower in this case, it is a negligible difference once you look at the whole `_expire_cache` function.
1 line too many.
Maybe? ```suggestion def _field_non_database_attrs(self): ```
This doesn't seem correct as `SimplePoFileTests` no longer has any tests in it so now this subclass doesn't do anything.
I think this would be a bit more readable: ``` return ( '%(func)s %(op)s %(dist)s' % {'func': sql, 'op': self.op, 'dist': dist_sql}, params + dist_params ) ```
these aren't necessary, you can pass `StringIO`s for `stdout` and `stdin` to `call_command` instead. there are lots of examples in existing tests e.g. https://github.com/django/django/blob/master/tests/i18n/test_compilation.py#L41
I think using a semantic name would help here, e.g. `lookup_kwarg_null`
It's mostly consistent with other copies in the same file, but `clone =` and `copy =` is also used. I think it's probably better to use `copy`.
Here we also should call `super` and not copy-paste code
ATM is -> than with
I see what you mean - with tests being run so often it's only a matter of time. To resolve it we can call `random.seed(seed + i)` in the for loop before the string is created. And set `seed = 42`(or some other int) outside the loop. This way we'll have a set of known good random strings that aren't the same. Since if they are the same the zlib compression will detect the duplication and compress them efficiently, since the messages are stored in a single cookie which is processed all at once. BTW I tested with the initial `seed =42` and it passes the messages tests.
We might as well lose the unnecessary string formatting while we're at it: ```suggestion old = repr(list(reversed(get_format_modules()))) new = repr(list(reversed(get_format_modules()))) # second try ```
field.remote_field here too (you may squash your commits when updating, thanks)
No, I have only reviewed the code on it's own, haven't tried it yet, sorry.
Should this be cached? The number of times validators are instantiated, and the associated cost with loading in the 1000 most common passwords each time strongly suggests that it should be.
I had to change this to `template_params['subquery'], sql_params = self.subquery.query.get_compiler(connection=connection).as_sql()` in order to compile correctly when using a database other than the `DEFAULT_DB_ALIAS`.
They can only be decoded if these bytes were previously encoded in this encoding.
suggested wording: ``` Strip quotes off of quoted table names to make them safe for use in index names, sequence names, etc. For example '"USER"."TABLE"' (an Oracle naming scheme) becomes 'USER"."TABLE'. ```
The recommendation is to double indent in this particular case so as to avoid visual confusion with the contents of the block.
I think it would be better to use the same parameter formatting style as the `save()` method below.
Nitpick, you could have used `MAX_GET_RESULTS` here to avoid breakage if we ever change this constant.
I think we should add this format to the `DATE_INPUT_FORMATS` for backward compatibility.
, or None...
@akulakov `passed_check` is to check if list is not empty. if it is not empty, method will return no error, otherwise error will be returned (`[] if passed_check else [W020]`).
1: I'm definitely happy with this. I'm not sure why I didn't go for it myself. 2: Fine by me, I don't feel strongly.
We allow lines up to 119 characters if it helps readability, or we use hanging indent like this: ``` return "<%s: %s>" % ( self.__class__.__name__, ..., ) ```
`has_select_for_no_key_update` -> `has_select_for_update_no_key`
Use single quotes.
We can raise a single error.
_Ideally_, unless you are testing a failure condition, you don't want tests to result in an error. So the test case which ensures that an error is raised when the target directory does not exist will be the one in which that error should occur. In this case, the test should ensure that running `$ ... startapp app directory/` works successfully given that everything else is in place. Consider this hypothetical scenario during a refactor: - Code is moved around such that `if not os.path.exists(top_dir): raise Error` occurs before `self.validate_name` - `.rstrip(os.sep)` is deleted. The test case will still pass but the command will fail at that point.
The rest of the patch is using f-strings. Hopefully we can make a final decision on that in #13214 soon. `original_settings_dict` feels a bit clunky. Also note that unpacking a dictionary works like a shallow copy, so modifying the value of the `'TEST'` sub-ditctionary will affect the original. Perhaps this would be simpler: ```suggestion original = self.connection.settings_dict user = original['USER'] password = original['PASSWORD'] return { **original, 'USER': f'{user}_{suffix}', 'PASSWORD': f'{password}_{suffix}', 'TEST': { **original['TEST'], 'USER': f'{user}_{suffix}', 'PASSWORD': f'{password}_{suffix}', }, } ```
You could replace the `resolve_method` variable with `elif getattr(resolver, 'resolve', False)` here.
I would keep this on multiple lines. IMO, readability is better with the multiline version.
could move this to the previous line
This docstring doesn't have any value, IMO.
The optimization should also be disabled `if not connections[db].features.supports_foreign_keys`.
https://www.postgresql.org/message-id/6721.1357856188%40sss.pgh.pa.us So probably the whole debate about touching the introspection for expressions should be closed. I could only get `pg_get_expr` to output whatever I used for `CREATE INDEX .. ON (lower(body), lower(title))` where `lower(body), lower(title)` would be returned by `pg_get_expr`.
I don't think we need to have a strict policy on `/` vs. `.joinpath()`. I'd prefer `/` but when readability hurts we can also use `.joinpath()` :shrug:
You'll want to use `force_text` here.
I guess I would say something like "The inner CharField is missing a max_length."
Can you use `['indexes']` here? If not, the list comprehensions in the next lines have a `not in None` and will fail.
didn't knew about RegexURLPattern having the same method.. reading the docstring I'm thinking both should do this: ``` python # .. if isinstance(func, functools.partial): while isinstance(func, functools.partial): func = func.func # ... ``` shouldn't it ? again that's my wild guess here, I don't have read more about the context of how this method is used (nor the other one), etc.. So I could be simply wrong.
When you do `iri.decode(encoding)` you are getting unicode, so effectively you sometime have unicode, sometime bytes. If the caller needs bytes, it can encode in whatever encoding it desires .
Nope. In the second case `sub_message['changed']['fields']` is fetched again. This could certainty be made less clunky though as `sub_message['changed']['fields']` is referenced 4 times in 6 lines...
We can reuse `self.user`: ```suggestion request.user = self.user ```
Oh, not sure. I'm not a micro-optimizer. :-)
The word `generally` doesn't add any value in my opinion.
FYI, `errno.EPERM` maps to errno 1 so this is the errno we will check for instead of an integer like we originally submitted in the PR.
Fair, that's me misunderstanding what the tag actually does. Looks great then!
Feels like this should be handled at the database backend level.
I think we should add this check only if `enable_nav_sidebar` is enabled on any site and raise an error instead of warning :thinking:
Since `fan_since` is None at this point, the test cannot pass! Same below.
No brackets needed again.
good point, this avoids my laziness on the ticket :)
Also forgot to mention, I don't think I've seen many regex'es written this way before (using string constant concatenation and continuation lines), and I find it pretty neat.
"is_required=False and an initial value that's a file, renders..."
I think we can move this under `try ... except`, e.g. ```python try: token, rest = parser.get_mailbox(addr) if rest: # The entire address must be parsed. raise ValueError nm = token.display_name or '' localpart = token.local_part domain = token.domain or '' except (HeaderParseError, ValueError, IndexError): raise ValueError("Invalid address '{}'".format(addr)) ```
For test doc strings, rather than "Test X" I try to describe the desired behavior: `A ValueError is raised when the incorrect object type is passed to a query lookup."
Annoying that `datetime.time` cannot be subtracted from each other to give a `datetime.timedelta`, so we cannot use `duration_microseconds()` as in `_sqlite_timestamp_diff()` below.
Use single quotes consistently (could be done above and below also).
I would turn this into a docstring.
Not sure I'd consider it "broken" since no one has reported a problem. As I mentioned, it could be bad/confusing for existing users if their timestamps are suddenly shifted when they upgrade Django, but I don't care much about the issue -- just suggesting it's time wasted if we come up with better APIs (like database defaults).
An error the database
Use a single line. I think two CharField()s should work just as well and make the line shorter.
Why cast to a tuple? We could just check if it's falsey...
Sorry, wasn't trying to request a change, was thinking about how async middleware would be written and just seeking clarification.
Just came here to suggest the exact same thing!
I guess there is a fair amount of wasted effort for the majority(?) of projects that aren't using admindocs, so perhaps we could have a ticket for it to investigate the possibility of moving the admindocs specific-stuff out.
When you do `iri.decode(encoding)` you are getting unicode, so effectively you sometime have unicode, sometime bytes. If the caller needs bytes, it can encode in whatever encoding it desires .
Just a nitpick: The test name looks already readable to me so I'd drop the docstring.
This line can be removed :thinking:.
Chop blank line.
According to the coverage report, this line isn't executed.
In the suggested command list, `'python'` should be `sys.executable` to ensure the same Python that is running the tests is used in the subprocess.
I think the norm is to use `apps` instead of `app_registry` to designate `Apps()` instances around the codebase.
Please including a trailing comma in the last item of a dictionary so if more items are added we don't need to modify this line again.
It seems like `name` is never stored. Are you missing a `self.name = name or func.__name__`.
Do we need this mapping? We could redirect to a `HttpResponse` with the `status_code`, e.g. `HttpResponse(status_code=r.redirect_type)`.
Maybe: ```suggestion def test_order_by_f_expression_to_constant_value(self): ```
Alternatively, you could handle this where `fields` is updated with `new_class.declared fields` like so: ``` for field_name, field in new_class.declared_fields.iteritems(): if opts.exclude and field_name in opts.exclude: continue if opts.fields and field_name not in opts.fields: continue fields[field_name] = field ```
We shouldn't change the context to keep this backward compatible: ```suggestion 'action_list': page_obj, ``` Updated.
We try to avoid altering expressions during the compilation phase as it can lead to hard to diagnose issues what about ```suggestion self.collation = collation def as_sql(self, compiler, connection, **extra_context): extra_context.setdefault('collation', connection.ops.quote_name(self.collation) ```
Might want to avoid `id` shadowing.
We should pass `using` to `check()`.
preferred style, also "catched" -> "caught" ``` raise Exception( 'Exception... that should be caught' '...' ) ```
It would be better to move these two into a separate test method.
+1 (in separate patch)
this would be better as a multiline if
I don't think we should go so deep into validation, we opt out from numbers but at the same time we allow the whole unicode range. Unicode numbers like `๑` would happily validate therefore it's an uphill battle. I'd opt for a vastly simplified regex to validate FQDN: `'(?:[a-z0-9\u00a1-\uffff-]+\.?)+'`. Sure it'll let some invalid segments go through (e.g. leading/trailing hyphens) but at least it doesn't pretend of being exhaustive. Proper validation requires a parser anyway.
Fine, you persuaded me :smile: :speaker:
Current implementation of `get_prefetch_queryset()` assumes that all instances have the same content type (there is an issue), but the fix is not optimal IMO because object IDs can be the same in different content types, e.g. we have two related objects: - object ID 1 with content type ID 1, - object ID 2 with content type ID 2, this query will return also: - object ID 2 with content type ID 1, - object ID 1 with content type ID 2, which is not correct. I know that we are matching them below but still I think we can limit the no. of objects only to actually needed.
This needs an entry in `deprecation.txt`
Chop blank line.
prefer hanging indent: ``` self.assertEqual( len(calls), 1, "..." ) ```
Indexes are not constraints, generally.
If it has some readability benefits, it could be done in a separate PR. This looks okay for now.
We should make sure the `YearLookup` subclasses are registered to the `ExtractYear` transform as they perform operations that can use indexes.
This will become a performance issue for the database before it becomes one for the Python process :-)
You could skip these, but I thought that the rewording read better. I guess if you go for the proposed `Renderable` then they'd be moved anyway and then it doesn't hurt to update them. (Also note that the docstring for `BaseFormSet.as_ul()` neglected to mention that it isn't wrapped in `<ul>`.) 🤷🏻‍♂️
I guess this needs to be something like `inherited_attributes |= set(base.__dict__.keys())` to work on Python 2.
please limit docstrings to 79 characters and add period
Improved typography and changed to [%-formatting](https://docs.python.org/3/library/stdtypes.html#old-string-formatting) to be consistent with other error messages.
Yes, we'd need a separate test for check registration. Possibly https://github.com/django/django/pull/7781 will come up with a template to use.
Please add `default=False`.
I don't think we need to check all rows, probably sth like this: ```python self.assertEqual(list(qs.values_list('lead_default', flat=True).distinct()), [60000]) ``` will be sufficient. We have a similar situation in the `test_nth_returns_null`.
Trailing zeros are stripped on PostgreSQL, so I changed to ```suggestion self.assertRegex(now_string, rf"^.*\.\d{{1,{precision}}}") ```
base class (StatAggregate)
I guess I would single line this for now.
`if not relations:` is a sufficient check here I think
This is not only about constraints but also about noop `ALTER FIELD` operations. Field alteration can cause many DDL changes. > We could just compare the old and new field. That's exactly what we're doing here, we compare fields but without attributes that don't impact schema changes.
Please alphabetize imports.
`'bar'` is already in `out` from the first execution of `call_command()`. You should reinstantiate or use `out.truncate(0)` before the second call.
Make sure you reference your ticket number in the docstring (see the other tests in the file).
That'll create unnecessary empty dicts if empty data is passed.
use set comprehension (I guess it might be better to defer this task to a separate commit)
Does this url affect the test in anyway (and ditto below)? If not, I think it should be removed, as test cases should be as simple as possible
should this be super()
Based on the change above to use `**self._options` in `RedisCache._cache()`, we should replace `options` with keys that are expected. As it stands at the moment a key could be misspelled in `OPTIONS` and passed here but not used. Based on the changes requested above, we should at least have `pickle_protocol=None` here.
Ah, ok so maybe we can check both in one call, i.e. ```python self.assertEqual(check_language_settings_consistent(None), [ Error( ... ), Warning( ... ), ]) ```
these aren't necessary, you can pass `StringIO`s for `stdout` and `stdin` to `call_command` instead. there are lots of examples in existing tests e.g. https://github.com/django/django/blob/master/tests/i18n/test_compilation.py#L41
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
Fair, but then I think a `versionchanged` is missing in the docs + maybe a backwards incompatibility release note.
We can remove `'book_join'` from `order_by()`.
You could use `for else` construct here. ``` python for fixture_label in fixture_labels: if len(self.find_fixtures(fixture_label)) > 0: break else: return ```
The `table` variable is actually a `models.Model` instance so it might be good to rename it to `model`. In the case of auto-created models `model._meta.auto_created` will be pointing at the model at the origin of the creation else it will be `False`. When it's `False` the resulting message should be of the form `(opts.app_label, opts.object_name)` else it should be of the form `(opts.app_label, opts.object_name, field.name)` where `field` is retrieved from iterating over `model._meta.auto_created._meta.many_to_many` where `field.remote_field.through is model`.
I guess you're right. It will be nice to change these assertions in a separate PR.
```suggestion with ignore_warnings(category=RemovedInDjango50Warning): ```
You don't know what a docstring is? Trying googling "python docstring".
It is not about the controversy, this is an actual bug that should be fixed. Changing the current behavior for foreign keys/many-to-many fields requires a separate ticket, however without a discussion on the mailing list we will close it immediately as _"wontfix"_, so I'd start from the discussion.
`str` -> `six.string_types` for compatibility with Python 2.
IIRC raising CommandError prevents management commands from displaying a stack trace. This doesn't seem very important but I wanted to point out the change in behavior in case it was accidental.
I think that: ```python return 'FOR UPDATE%s%s%s' % ( ' OF %s' % ', '.join(of) if of else '', ' NOWAIT' if nowait else '', ' SKIP LOCKED' if skip_locked else '', ) ``` is more readable.
I guess the `add_argument` could be `action='store_false', dest='uses_https'`
Although `operator.xor()` has the signature `(a, b)`, it might make sense to stick with `(x, y)` for consistency? ```suggestion def _sqlite_bitxor(x, y): if x is None or y is None: return None return x ^ y ```
`verbosity=0` is not necessary.
@timgraham is ordering by the result of an aggregate allowed without subqueries? If ordering by count does not error, then it should be safe to use that ordering. If not, introducing a different field into the orderby will affect the grouping (not that you suggested that), so we'll need to look at comparing the queryset out of order if there's another assert method available that does that. I'm not able to check either of these things at the moment, but I can take a look in about 8 hours if it's not resolved.
What about m2m and reverse relationships? Something like `Q(cities=3)` will also produce the join.
Could you try to write these tests at a lower level, without the `as_ul()` output methods? They're difficult to debug now.
I'm not really sure this docstring is necessary as the implementation is obvious.
I guess you probably want `from django.test.utils import requires_tz_support` instead.
Could everything from here be extracted into a helper function? So we'd just pass in the `ordering` and return whatever came back. (This would give a hook for opt-out/customisation that both 17198 and 29943 hint at.)
I'm not sure if this remains an appropriate test if it doesn't hit this block anymore? https://github.com/django/django/blob/d4eefc7e2af0d93283ed1c03e0af0a482982b6f0/django/core/handlers/wsgi.py#L161-L168
The primary key attribute can only be retrieved on certain databases, this will not work on Oracle or MySQL.
Tests are failing for a different reason due to qwirks with our CI system; notice that SQLite tests are failing as well.
Do we need to check this message? `AssertionError` means that no logs were logged (with at least the given level), so I would change this to: ```suggestion pass ``` and add `else`: ```python try: with self.assertLogs(logger_name, level) as cm: yield except AssetionError: pass else: self.fail(f'Unexpected logs found: {cm.output!r}') ```
`step` attribute should only be added if `self.localized is False`
A better name might be: get_constraints_counts
Fair enough if there is precedence for it. I thought `ImproperlyConfigured` was usually used for settings or something affected by a setting being incorrect.
I think it'd work if you put the mixin to the left of the base class where it's used.
This will work only for a simple use case, e.g. ``` python manage.py startapp test_four ../../main_directory/ticket_30618/ticket_30618/other_apps_3 ``` produces `name = '......main_directory.ticket_30618.ticket_30618.other_apps_3'`
Need spaces around `+` sign.
I do't think these changes are needed, since the empty value can be handled by display_for_value function.
chop newline for consistency
Please use f-strings as Python 3.6+ is now the requirement More information is available including some benchmarks. https://cito.github.io/blog/f-strings/
I would revert this change, the previous version is clearer to me.
I would use the same message like in similar exceptions: ``` Joined field references are not permitted in this query ```
I would rather keep the current behavior, but other opinions are welcome. It could be the target of a different ticket.
We should use a custom storage for this test (instead of mocking).
State the expected behavior as per https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style. Also wrap docstrings at 79 chars.
The `CustomModelBase` class is not an actual `models.Model` subclass but a `models.base.ModelBase` subclass which is `type(models.Model)` (`models.Model`'s metaclass). We should use an actual `models.Model` subclass instead.
As the method doesn't require anything from the model except its `_meta.db_table` could we alter its signature to accept a `table_name` instead? It would be more consistent with the `column_names` argument instead of an hypothetical `fields` one. This is a change planed in #6643.
Drop the docstring I think,
I'm confused. Is there something incorrect here or can this just be: ```suggestion self.connection.settings_dict['NAME'] = worker_db ``` If the intent was to avoid mutating the original then do this (although I'm not sure it's required): ```python self.connection.settings_dict = {**self.connection.settings_dict, 'NAME': worker_db} ```
I'm not sure about the `backend` terminology here. I think naming this function `get_password_validators` would be more consistent with the rest of the the code.
PEP 8 requires this blank line
`return '%s-%s-%s' % (y or 0, m or 0, d or 0)` can be moved here.
What @shaib said: `makemigrations` and `migrate` should fail, `showmigrations` should work.
It would be great to also have a test with a reverse manager.
This can be single-lined.
Make this and new_lookups sets.
I don't think it's worth changing elsewhere.
```suggestion self.assertEqual([book.rating_count for book in qs], [1]) ```
We can do the same for `reffed_expression`: ```diff diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index b3d92d786c..21bc0aea7a 100644 --- a/django/db/models/sql/query.py +++ b/django/db/models/sql/query.py @@ -1286,11 +1286,9 @@ class Query(BaseExpression): if check_filterable: self.check_filterable(value) - clause = self.where_class() if reffed_expression: condition = self.build_lookup(lookups, reffed_expression, value) - clause.add(condition, AND) - return clause, [] + return self.where_class([condition], connector=AND), [] opts = self.get_meta() alias = self.get_initial_alias() @@ -1333,7 +1331,7 @@ class Query(BaseExpression): condition = self.build_lookup(lookups, col, value) lookup_type = condition.lookup_name - clause.add(condition, AND) + clause = self.where_class([condition], connector=AND) require_outer = lookup_type == 'isnull' and condition.rhs is True and not current_negated if current_negated and (lookup_type != 'isnull' or condition.rhs is False) and condition.rhs is not None: ```
As far as I'm aware we don't need to iterate twice over the same list: ```suggestion return { '%s.%s' % ( fixture_name, '.'.join([ext for ext in combo if ext]), ) for combo in product(databases, ser_fmts, cmp_fmts) } ```
This looks a bit odd to me. I wonder if something like this could be a bit more readable? Up to you. ``` return ( (sql_alter % {"column": self.quote_name(new_field.column), "type": new_type}, []), [], ) ```
`os.chmod` should be before the `try`. It doesn't make a big difference but that's the common pattern in general.
Extract units declared ...
You won't need to pass `INFO` if the default is `INFO`.
Maybe it should go in `django.contrib.mysql`...
Ahh, that's gonna be more interesting. You'd need to look at `self.migrations_module(x[0]) is not None` for whether there are migrations for that particular app or if they are disabled.
This seems like an odd place to put this... between the logging of test database creation and the actual creation. Actually, it might be possible to call `connection.creation.mark_expected_failures_and_skips()` in `runtests.py`. That would be cleaner and eliminate the need for the environment variable.
https://www.postgresql.org/message-id/6721.1357856188%40sss.pgh.pa.us So probably the whole debate about touching the introspection for expressions should be closed. I could only get `pg_get_expr` to output whatever I used for `CREATE INDEX .. ON (lower(body), lower(title))` where `lower(body), lower(title)` would be returned by `pg_get_expr`.
These assertions are redundant with tests where `qs1.intersection(qs2).exists()` is `False`.
This is redundant with `test_none_name()`.
Now we can call this `test_migrate_app_name_specified_as_label` (and similar for the similar test).
Use hanging indent: ``` raise ValueError( '"%r" needs to have a value for field "%s" before ' ... ) ```
Yeah, screw that :D in the worst case make it an attribute on the CSRF class, so a user can override it if we go down the route with an extra class.
why not define this tuple at import time? `import pytz` seems to already have made the classes accessible.
Do we need to use a dict? It seems unnecessary complicated. Model classes that we pass in the keys must match the base models from querysets. We also don't protect against incorrect values e.g. ```python queryset={ Animal: Bookmark.objects.all() } ``` I would use a list/tuple instead and raise an error when a queryset for the specific model is already resolved, e.g. ```python for qs in querysets: ct_id = self.get_content_type(model=qs.query.model, using=qs.db).pk if ct_id in custom_queryset_dict: raise ValueError(...) custom_queryset_dict[ct_id] = qs ``` We should also add a new argument (maybe `querysets`) because it's misleading to pass list of querysets in the argument called `queryset`.
This should be something like `self.assertEqual('migrations\n (no migrations)\n', out.getvalue().lower())` (perhaps adjusted a bit to match the output of showmigrations for other apps) (no SystemExit).
At the point where the instance is created, there is not access to the model or its fields (we are in a nested class in the model class definition). Options and/or the modelbase metaclass, will have to connect the model to the index.
> Not really no.. Now that i think of it this will also address issues where data or keys (delete_many) don't have the expected type.. e.g. keys been None or data been None.. Why? `data`/`keys` are not falsey when they contains `None` :thinking:
I would remove _"We should"_.
This line can be removed :thinking:.
Similarly, I don't see much advantage to creating indirection with a method.
In fact, this should be moved into the definition of `context` above: ```python 'can_view_related': self.can_view_related, ```
Yes it should be `R.p`, we didn't take into account nested protected relations in the ab3cbd8b9a315911248227208630a020cedca08f (probably my fault). Also casting to list is not necessary anymore after this change.
I'd keep `dispatch()` the first method on the view and sort the others by call stack.
You're calling `model_name.lower()` twice in most cases
Trailing comma: ```suggestion migrations.RunPython.noop, ```
Same 'mutually' typo here.
Citing @holvianssi on Trac. > The complex solution is to add both the opt-in flag and database settings. The default for the opt-in flag is None, meaning use the default from database settings. True forces this feature on, and False forces the feature off.
This is also a separate issue, but it's not testable without functional constraints so we can leave it here.
We could do that. I had planned to simply fill in the Python 3 message in a few months when Python 2 support is dropped in master.
```suggestion on_conflict=on_conflict, ```
"leave blank to use" wouldn't be applicable for FKs
I wonder if the `isinstance()`condition results in any performance savings? I tend to think always casting might be simpler.
`self.real_apps` is always a set, `set()` is unnecessary (here and in many other lines).
I don't think we need this here. In `disable()` we `raise self.first_exception` (when `not None`) so this line will be unreachable.
Again, not related but use `force_raster_creation=True` rather than a tough to decipher plain boolean.
@charettes, any reply here? I guess we shouldn't block the patch about the issue with backwards migrations if we can't find a simple solution.
Note that I didn't plea for keeping the functionality. I just said that if we remove that, it should be done properly (backwards incompatibility note, separate commit).
Nitpick but `dict.get` default value for a missing key is already `None`.
The `num_args` argument was introduced in b6812f2d9d1bea3bdc9c5f9a747c5c71c764fa0f specifically for `get_callable` (note how it can take two arguments but the `num_args` is 1). I suspect there might be something weird going on but I haven't had time to look into it and unfortunately, we cannot ask the original committer of that change anymore :(
You don't like f-strings at all, do you? :-)
This is exactly the same as the previous case, maybe `('test@example.com',)`
Just a nitpick: The test name looks already readable to me so I'd drop the docstring.
`VACUUM INTO` was [added in 3.27.0](https://sqlite.org/releaselog/3_27_0.html). This would bump requirements in `databases.txt` and `check_sqlite_version()` check in `django/db/backends/sqlite3/base.py`
There should never be a reason to encode ascii to something else. While technically valid it makes mails bigger (especially if at one point we decide to call sanitize address for all addresses)
seems like we could use `super()` instead.
I think there's a constant for `'self'` as well somewhere in `django.db`.
I think we can move `msg` to the assertion, I don't see much value in creating a temporary variable here.
No need for `iter`, a generator expression works just fine.
Use hanging indent: ``` msg = ( "..." ) ``` Are the new messages tested? I think you could avoid the repetition of the two branches by interpolating "keyword " in the message and varying args/kwargs in the params with a variable.
`repercent` is a confusing name, maybe `repercent_broken_unicode`? Also it needs a docstring with pointers to the RFC etc.
The primary key attribute can only be retrieved on certain databases, this will not work on Oracle or MySQL.
Use `setUpTestData` now that two models will be used by two methods.
You can drop this line.
You can reuse `CountryInlineAdmin` and `StateAdmin` instead of defining extra classes: ```suggestion ``` Add `get_formset_params()` to `StateAdmin`.
Are you sure? Should this not be consistent with `SHORT_DATETIME_FORMAT`, i.e. `SHORT_DATE_FORMAT = 'j N Y'`.
```suggestion self.models[app_label, new_name] = renamed_model ```
Jenkins doesn't do anything specific, and yes this test passes locally for me without a fix.
Thanks for explanation, I just want to minimize test, so your version with `id` looks good :+1:
These check should respect `required_db_features`, so we need to omit checking conditions for `UniqueConstraint`\`s if `connection.features.supports_partial_indexes or 'supports_partial_indexes' in cls._meta.required_db_features`.
Same as above, (simply `postgis`)
so i think it would be better if there were actual nested for-loops: ```py for index in cls._meta.indexes: for name, order in index.fields_orders: # avoid the '-' logic in the check, it's already done in Index.__init__ ``` and if we used `obj=index` then the message should be clearer as it shows which index is referred to
In MySQL introspection we use `table_schema = DATABASE()`, I think we should use it here.
Is the complexity of testing with a logger needed? I think a print statement and passing `stdout=StringIO()` to `call_command()` in order to check the value would be sufficient.
Please order alphabetically.
counterclockwise (no dash)
I have to admit that this still feels a bit odd to me 🤔 Especially since the tests above are expecting the initial value to be None, and we are perhaps lacking a bit of explanation why this is the case here.
Not critical, but I think it better to remove because that makes sure we don't still have code to support the older versions. As a minor point, initialization, although done only once per thread, invokes an expensive stored procedure, so it affects startup time. On the other hand, customization of the Oracle backend does seem to be a relatively popular practice. Your call.
Use single quotes consistently.
Could we change this (and other similar places that check for string references) to directly call lazy_related_operation. The idea is that the calling code doesn't need to care if the reference is by string, and it doesn't need to care if the referenced model is already loaded. In all cases, it is OK to just call lazy_related_operation.
I'd suggest a name like `_get_sitemap_full_url`
Maybe `**kwargs` instead of `subindex=None, attrs=None`.
There is no need to `append()` because we have a single error: ```suggestion return [ ```
the try/except needs to be added back
actually I think we should set these 3 values from `none_value` in an else after the new elif I suggested above and then remove them as class attributes. There's an issue if someone has subclassed the widget and set `none_value` -- that value would be ignored with this change.
Something like `test_header_omitted_for_no_to_recipients` may be more descriptive.
You can reuse existing models, by adding e.g. `Entity`: ```python class Entity(models.Model): pass class Country(Entity): ... ```
I don't think there's a use case for `settings.AUTHENTICATION_BACKENDS` without any backends that have a `get_user()` method.
please remove added newline
```suggestion with self.time_keeper.timed('Total database setup'): ```
I'll quickly check if an idea I'm having works here.
chop blank line
That looks awesome @hannseman 💯 🏅 Regarding `django.contrib.postgres.indexes.OpClass` I guess we could add a `IndexedExpressionWrapper.register_wrapper` and have `django.contrib.postgres.apps.PostgresApp.ready` register `OpClass` to avoid coupling there.
I think I would define the additional parameters as keyword parameter, as in `__call__ `. BTW, thanks for fixing this thread issue I created!
I don't think it's important to mention PostgreSQL version details in the docstring.
I think we missed some attributes e.g. `related_query_name`, `limit_choices_to`, or `validators`.
Regarding the implementation, I'd rather have some class variable (`max_expressions`?) checked in base class instead of "dumb" `__init__` methods. To be experimented...
You want to avoid altering `self` here as subsequent calls will reuse this attribute even if this branch's conditions don't match.
I don't think it's worth it. Someone using a non-browser name doesn't seem like a common mistake.
It should be enough to use `lru_cache` instead, e.g.: ```python @functools.lru_cache(maxsize=128) def import_string(dotted_path): ... ```
Avoid calling `self.get_source_expressions()` twice and it becomes clearer: ```python ... expression1 = self.get_source_expressions()[0] if isinstance(expression1, Value) and expression1.value is None: raise ValueError('Oracle does not allow Value(None) for expression1.') ... ``` I've also tweaked the exception message to make it based on the argument provided in Python.
IMO, we can use `assertEqual` instead of `assertAlmostEqual` in all tests.
We usually only include this if there are non-ASCII characters in the file.
`~` is not a supported operator, this should be `-`.
I think we should be consistent and use double-quotes.
Now we can call this `test_migrate_app_name_specified_as_label` (and similar for the similar test).
Yes, we should use the same approach as in `SimpleArrayField`, e.g. ```python def has_changed(self, initial, data): try: data, _ = self._remove_trailing_nulls(self.to_python(data)) except ValidationError: pass if initial in self.empty_values and data in self.empty_values: return False return super().has_changed(initial, data) ```
You mean `super()`? Seems okay to me.
Yeah - that was the source of my confusion about the `setdefault` thing. My original test case was wrong, but the same problem manifests if you use `ErrorDict()`.
I think `test_decimal_parameter` would make more sense here.
This should be display when `verbosity > 0`.
The extra queries could be generated in this line (199), as this is where the instancies are created, so so you should check the number of queries is one.
Same 'mutually' typo here.
"from VERSION if present" seems inaccurate
Ah, I realized these are E128 which we are ignoring in the flake8 section of setup.cfg. I don't mind the changes, but we are ignoring it because there are 2K+ violations and seemingly not a lot of value in fixing them.
```suggestion for table_name, table_rows in rows: ```
Yea, it seems a bit unusual, but I don't have an alternative to suggest.
It's done on purpose. We modify `attrs` in this loop so `list()` is used to create a copy.
The current form is consistent with messages in similar checks. Also, we use here `display_name`, e.g. `MySQL does not support indexes on expressions.` so I don't think that `Database` adds much value here.
Sorry, I should have said simply `raise` without the `e`.
Since `separate_logs` seems like a higher-level mode that does multiple things, maybe you can make it so the mode doesn't need to be stored as an attribute. For example, the following line could write to a `self.output_stream` that defaults to `os.devnull`. When running in script mode, it could be set to `self.stdout`. It would also eliminate the need for an `if` statement.
The test name method is self-explanatory, I'd remove the docstring. ```suggestion ```
@NDevox I'd be very happy for you to do that. 🙂 (If it's just a single file cleanup, you can just make a PR, without the Trac ticket)
@sdil Can you take a look? Thanks!
We can drop meta ordering and add it to the queryset: ``` self.assert_pickles(c.concrete_events.order_by('event)) ```
I guess there is a fair amount of wasted effort for the majority(?) of projects that aren't using admindocs, so perhaps we could have a ticket for it to investigate the possibility of moving the admindocs specific-stuff out.
Please test for all of the extra registered range types - you should be able to make use of `self.subTest()`.
I would not recommend any alternatives: ```suggestion f"Cannot update applied migration {migration}." ```
I think that you can remove brackets `deleted_objects, model_count, perms_needed, protected = ...`
Yes, will fix it.
And a another alternative in #11642
Generally we would rather expand the docstring with sufficient explanation rather than include a ticket reference (or at least keep the mention limited to a simple "(#18247)" as in tests).
You'll want to store the original routers and restore them in `tearDownClass` to preserve test isolation.
Could we patch a StringIO instead of devnull and then verify the contents of log_message()? See tests/check_framework/tests.py for an example. Also the patching should be in setUp/tearDown or in a try/finally so if something goes wrong the unpatching still happens.
For resetting the loaded translations, I found an example in `i18n.test_compilation.FuzzyTranslationTest` where the `setUp` "just" calls: `gettext_module._translations = {}`.
I'm not sure what Aymeric had in mind but I see that `secrets.py` does `from random import SystemRandom` so as far as I can tell, this doesn't change any behavior or add security.
this should probably stay, as we don't want `max_length` to suddenly show up somewhere in between states.
You aren't changing here, except for the style. Please revert.
Error is raised only on PostreSQL. On Oracle and MySQL we simply return the same date. Even if we want to raise an exception on SQLite, `NotImplementedError` is probably not the best choice. It's not sth that will or may be implemented in the feature. I'd use `ValueError` as we do in similar cases.
I'd reverse the ordering and say "use list instead of []"
Please use single quotes.
class attribute `output_field = IntegerField()` * fairly sure that's acceptable Then drop the `__init__`
Looking at it we should also pass `obj` to this method and cache its results, just like we do with `get_group_permissions`: ``` python def get_user_permissions(self, user_obj, obj=None): """ Returns a set of permission names the user has. """ if user_obj.is_anonymous() or obj is not None: return set() if not hasattr(user_obj, '_user_perm_cache'): if user_obj.is_superuser: perms = Permission.objects.all() else: perms = usr_obj.user_permissions.all() perms = perms.values_list('content_type__app_label', 'codename').order_by() user_obj._user_perm_cache = set("%s.%s" % (ct, name) for ct, name in perms) return user_obj._user_perm_cache ```
Doc changes required in `topics/testing/advanced.txt`.
I think we always want the input on the `>>` side of the operator to be able to utilise any indexes. So we get the following SQL: ```sql SELECT t, t <->> 'word' AS dist FROM test_trgm ORDER BY dist; ``` That should mean that we want `arg_joiner = ' <->> '`. <details> <summary>Index operator classes query where LHS is the indexed value</summary> <code> SELECT am.amname AS index_method, opf.opfname AS opfamily_name, amop.amopopr::regoperator AS opfamily_operator FROM pg_am am, pg_opfamily opf, pg_amop amop WHERE opf.opfmethod = am.oid AND amop.amopfamily = opf.oid AND opf.opfname IN ('gist_trgm_ops', 'gin_trgm_ops') ORDER BY index_method, opfamily_name, opfamily_operator; </code> </details> ``` index_method | opfamily_name | opfamily_operator --------------+---------------+------------------- gin | gin_trgm_ops | ~(text,text) gin | gin_trgm_ops | ~~(text,text) gin | gin_trgm_ops | ~*(text,text) gin | gin_trgm_ops | ~~*(text,text) gin | gin_trgm_ops | %(text,text) gin | gin_trgm_ops | %>(text,text) gin | gin_trgm_ops | %>>(text,text) gist | gist_trgm_ops | ~(text,text) gist | gist_trgm_ops | ~~(text,text) gist | gist_trgm_ops | ~*(text,text) gist | gist_trgm_ops | ~~*(text,text) gist | gist_trgm_ops | %(text,text) gist | gist_trgm_ops | %>(text,text) gist | gist_trgm_ops | <->(text,text) gist | gist_trgm_ops | <->>(text,text) gist | gist_trgm_ops | %>>(text,text) gist | gist_trgm_ops | <->>>(text,text) (17 rows) ```
Can you add an indication character right before and after `{{ output }}`, just to make sure that the output really comes at the right place. I.e.: `'{% endblocktrans %}>{{ output }}<'`
I would use `DJANGO_SUPERUSER_PASSWORD`.
```suggestion *app.split("."), "migrations", "0001_initial.py" ```
No need for subclassing here. Maybe we should define `django.db.models.sql.compiler.__all__ = ('SQLCompiler', ...)` here and simply change this one to ```suggestion from django.db.models.sql import compiler from django.db.models.sql.compiler import * ```
Do we need to do this? This is untested. Also, as far as I'm aware `default_kwargs` should take precedence: ```suggestion sub_match_extra_dict = { **sub_match.extra_kwargs, **self.default_kwargs, } ```
`arity = 1`
The expected value should be a second argument in `assertEqual()` and `assertHTMLEqual()` assertions.
Actually you should use `assertNotContains(response, '"/test_admin/admin/r/%s/1/"' % content_type_pk)` to also account for `byte` response content on py3.
this line should be: `def __init__(self, *args, **kwargs):`
Dot is missing _"... for Django 2.x."_.
Which proves that it doesn't work properly because names of indexes should be `check_framework_model1_index` and `check_framework_model2_index`, currently it is `check_framework_abstractmodel_index` in both cases.
Can you add an indication character right before and after `{{ output }}`, just to make sure that the output really comes at the right place. I.e.: `'{% endblocktrans %}>{{ output }}<'`
The import usually goes at the top of the method.
I don't think we can use `assert_called_once()` yet since that's new in Python 3.6. With the change in `autoreload.py` reverted, both tests fail on Python 3.5 with `AttributeError: assert_called_once` while the first test will pass on Python 3.6.
Please wrap docstring at 79 chars.
I would assert against `url_name`, e.g. ```suggestion self.assertEqual(response.resolver_match.url_name, 'overridden_urlconf_view') ```
Can we avoid duplicating this? Maybe define it at the module level as it is used in multiple test cases.
Let's go with `...cannot contain whitespace.` (I briefly considered that, so it coming up twice, we'll take as a message from the universe.)
since there's no validation here and `get_port()` is relying on this code I would think you'd need to consider other malformed cases, such as `example.com:abc` or `1.1.1.1:443]`
FWIW I don't think that's quite accurate - a third-party project could support a Python-3-only version of Django, but itself also still support earlier Django versions, and Python 2. (That said, I think the convenience import is still the right thing to do.)
This is a long list of migrations. I would recommend to try to get as many operations into one migration as you can. Loading a lot of migrations will slow down Django during startup and all migration commands.
Won't `symlink_path` and `original_path` be removed automatically as part of the cleanup? `tempfile.TemporaryDirectory` says "On completion of the context or destruction of the temporary directory object the newly created temporary directory and all its contents are removed from the filesystem."
We should convert column name i.e. `connection.introspection.identifier_converter('large_field')`.
`None` is being passed for the `app_configs` argument - even though the check ignores `app_configs`, `[]` should be used as a more valid test value. I think it's worth looking into refactoring these tests in general, as you're write these property inner-imports are a bit confusing, made a note to self.
I'm not sure is this really helpful and needed :thinking: because it'll catch only checks with the same order of conditions, so only copy&paste issues. For example, it will not raise a warning for: ```python models.CheckConstraint(check=models.Q(models.Q(id__gt=0) | models.Q(id=0)) models.CheckConstraint(check=models.Q(models.Q(id=0) | models.Q(id__gt=0)) ``` (that's of course only a simple example). In the same time I would not like to add any complicated logic here.
Use `drop=True` rather than an arg for better readability. Use a different var for `sql`here, maybe `changes_sql`? It's a little confusing to have the `sql` name reused in the next line.
s/non empty/non-empty/ (twice)
Python functions implicitly return `None` if return is not called. I feel being explicit is better for a test.
I guess `name` would be another one.
Nope. In the second case `sub_message['changed']['fields']` is fetched again. This could certainty be made less clunky though as `sub_message['changed']['fields']` is referenced 4 times in 6 lines...
There's a class method called `setUpTestData()`. Please use that instead.
seems there are conflicts here
`uuid.uuid4` is a function, and, as understand, you want to set some random data for it, so you must call it. But I don't think that default is needed there though.
I would organize these methods else (inside of in the middle of the views) and prefix them with an underscore to indicate that they're helpers, not public APIs.
oh that's what i've missed. thats true there is something wrong on that line
I think it would be better to use the same parameter formatting style as the `save()` method below.
This docstring is unnecessary.
```suggestion # List comprehension ensures is_valid() is called for all formsets. ```
Have a look at the `IntegerField` how it's done there. This has the advantage, that your `StepSizeValidator` can be reused. And it shall be reused, because `step` can also be applied to an `IntegerField`.
I think this docstring should also explain the meaning of the three possible values of `include_parents`
repetitive with method docstring
Not important, but I think it should be `{"key": "value"}` (note the added space after the colon) per pep8.
`# Sendfile is used only when file_wrapper has been used.`
Well, we _could_ make `on_delete` an actually-required arg to `ForeignObject` right now, and move it even before `from_fields` and `to_fields`, but that would require duplicating the deprecation warning in both `ForeignKey` and `OneToOneField`.
Please add a docstring: ``` """ ArrayField shouldn't have varchar_patterns_ops or text_patterns_ops indexes. """ ```
Please including a trailing comma in the last item of a dictionary so if more items are added we don't need to modify this line again.
```suggestion pass ```
I think we can simplify this: ```python def json_script(value, element_id=None, json_encoder=None): from django.core.serializers.json import DjangoJSONEncoder json_str = json.dumps(value, cls=json_encoder or DjangoJSONEncoder).translate(_json_script_escapes) ```
```suggestion 'ignore_conflicts and update_conflicts are mutually exclusive' ```
@felixxm OK. Thanks. I will just continue to sharpen the nit-picker then 😃
> Let me know what do you feel about this? Yes, the `.set()` for non-positive timeouts is pointless. But we still need to expire the key in case it exists. Instead of using `.expire()`, however, we should just go for `.delete()` instead: ```python def set(self, key, value, timeout): client = self.get_client(key, write=True) value = self._serializer.dumps(value) if timeout is None or timeout > 0: client.set(key, value, ex=timeout) else: client.delete(key) ``` Using `.expire(key, 0)` would just cause Redis to perform a delete behind the scenes anyway: > Note that calling EXPIRE/PEXPIRE with a non-positive timeout or EXPIREAT/PEXPIREAT with a time in the past will result in the key being deleted rather than expired (accordingly, the emitted key event will be del, not expired).
Appreciate what you've done with the tests but I think they're harder to comprehend now. As a Django dev I can jump in and read model classes, but the helpers are obscuring things a bit to me. Also you now have multiple tests per test method now - ideally there should just be a handful of classes per test and some assertions. I guess you can split based on overriding, non-overriding, etc.
```suggestion old_name_key = app_label, old_name_lower new_name_key = app_label, new_name_lower ```
I'd suggest: `user_deleted_form` `if user_deleted_form(...)` looks more readable.
s/non empty/non-empty/ (twice)
I think this would be a bit more readable: ``` url = reverse('... show_less_response = self.client.get(url) ```
It's weird, because Oracle interprets empty strings as nulls.
Can you use hanging indents and a trailing comma, please: ``` python foo( 1, 2, ) ```
It would be better to move these two into a separate test method.
If the `edges.get(None, ())` call above works comparing `key` to `None` here should also be working. I also don't know any other Python object which `str()` representation is `'None'` that are not `None` itself.
Why does it need to be installed in this migration? This migration doesn't even do anything. It's not given that all new migrations are applied at the same time.
Would this be clearer? ``` max_query_params = connection.features.max_query_params if max_query_params is None or max_query_params >= len(numbers): ```
assertEquals is deprecated. Please use assertEqual instead.
Prefer the context manager version: ``` self.assertRaises(Resolver404): resolve(url) ```
Never mind, just read the whole ticket :) Maybe the initial `assertIsInstance(p.restaurant.serves_pizza, bool)` would make more sense here. Else it might end up being refactored.
The main difference is that `integer_validator` is not used internally. `int_list_validator` is used in (deprecated) `CommaSeparatedIntegerField` and it's recommended as a validator for `CharField` that can be used instead. Unfortunately, values are not cast to `int()`, so non-ASCII digits can cause issues. We can change both :thinking:
I would probably omit most of the blank lines in these new tests. They are fairly short and straight forward.
```suggestion pass ```
I'd call the keyword and variable "registry" and pass in `registry=site._registry` as another application may have a different convention for how it wants to define a registry.
`'rb'` flags are unnecessary.
I don't have a strong opinion here as that's probably the only type of non-`Expression` wrapper supported in `ExpressionWrapper` but the previous `if isinstance(self.expression, Expression)` felt more correct.
I'm wondering if this should be within the `DATABASES` setting
I'd omit the blank line after the docstring as you've done in most places.
The test should construct the expected string using `connection.ops.quote_name()` so two variants of the test aren't needed.
Please remove this docstring, it doesn't have any value IMO.
quote names of objects (`'CREATE INDEX "%(index)s"...'` etc). These parameters are spliced into the statement, not passed as arguments.
Do we need this methods? Maybe I'm missing sth but thread's database connections should already by overridden, and we don't pass `connections_override` to the `_create_server()` anywhere in Django :thinking:
I think this should work: ``` python connection = connections[db] if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy': loader.check_consistent_history(connection) ```
Perhaps this could be a docstring? You might elaborate a bit more -- as someone not familiar with MySQL, it's not clear to me what "improved" means.
it's helpful to use assertRaisesMessage to ensure this is the exception we expect
Do we need named db? ```suggestion 'NAME': ':memory:', ```
`"""Return True if the django_migrations table exists."""`
Is the complexity of testing with a logger needed? I think a print statement and passing `stdout=StringIO()` to `call_command()` in order to check the value would be sufficient.
I'd omit the second "inner_method" since it's not meant as a backwards operation and not used as far as I can tell.
Could move `executable = '/usr/bin/python'` to a class attribute.
This argument can be single-lined. (It's only 111 chars so. Shorter if using `obj.__class__`)
I think you can apply my test patch and that should be sufficient.
I would leave the first part of the sentence untouched. Also please use hanging indentation: ```suggestion print( 'The datetime and django.utils.timezone modules are available, so ' 'it is possible to provide e.g. timezone.now as a value.' ) ```
Unless I am missing something here, you only need `self.has_view_permission(request)`, since it checks for view permissions or change permission. ``` def has_view_permission(self, request, obj=None): """ Return True if the given request has permission to view the given Django model instance. The default implementation doesn't examine the `obj` parameter. If overridden by the user in subclasses, it should return True if the given request has permission to view the `obj` model instance. If `obj` is None, it should return True if the request has permission to view any object of the given type. """ opts = self.opts codename_view = get_permission_codename('view', opts) codename_change = get_permission_codename('change', opts) return ( request.user.has_perm('%s.%s' % (opts.app_label, codename_view)) or request.user.has_perm('%s.%s' % (opts.app_label, codename_change)) ) ```
There are still many unrelated formatting changes that should be reverted.
I think this change really indicates the need for a second test for wrapping a non-string object.
I have been thinking about this too, what happens if we were to deprecate sha256 at some point again? Do we want to leave legacy_algorithm around for that? (Porbably no)
I think the `= true` is a byproduct of filter requiring a left and right hand side. This can be fixed when that restriction is removed via filter/expressions.
Smart... This only works because `shell.py` does inner imports, but that does seem unlikely to be refactored
Why don't you do the decimal precision as part of the format expression? Something like: ```python number = ("{:_.%sf}" % decimal_pos).format(number) ```
why not use `a_signal` in this test? The signal objects seem to be identical.
Set the name of _meta.indexes. This can't be done in Options.contribute_to_class() because fields haven't been added to the model yet.
Can this be simplified to ```suggestion # Collation change? elif getattr(old_field, 'db_collation', None) != getattr(new_field, 'db_collation', None): new_collation = getattr(new_field, 'db_collation', None) fragment = self._alter_column_collation_sql(new_field, new_type, new_collation) actions.append(fragment) ``` Or maybe we want to keep the old code to support field type and collation change at the same time (e.g. `CharField(db_collation='foo') -> TextField(db_collation='bar')`).
I think you should use `type` not `__class__`. At least in python 2 this will break if the class does not inherit from `object`.
A free option for getting the tests running with Oracle is outlined [on the wiki](https://code.djangoproject.com/wiki/OracleTestSetup#using-the-oracle-developer-day-pre-installed-vm) if you are interested.
I guess this needs to be something like `inherited_attributes |= set(base.__dict__.keys())` to work on Python 2.
I see now, my mistake. Please put it under `test_index_together` though.
The default should be the most common I think. So set the default, then change it in the postgres features.
I don't think you can depend on a None choice being defined for a nullable field, necessarily. I don't think you need to make a change here.
Shouldn't we handle these situations? ``` >>> class TestForm(Form): ... my_field = forms.ChoiceField(choices=[['', 'zero']]) ... >>> t = TestForm() >>> print(t['my_field']) <select id="id_my_field" name="my_field" required> <option value="" selected="selected">zero</option> </select> ``` Or this: ``` >>> class TestForm(Form): ... my_field = forms.ChoiceField(choices=[(None, 'zero')]) ... >>> t = TestForm() >>> print(t['my_field']) <select id="id_my_field" name="my_field" required> <option value="" selected="selected">zero</option> </select> ```
I think `Parent` and `Child` model names would be more in line with other model names I've seen.
I think it can be omitted.
You should be able to pass `is_active=False` to `create_user()`.
maybe something like "Normally Django will use a connection to the 'postgres' database to avoid running initialization queries against the production database when it's not needed (for example, when running tests). Django was unable to create a connection to the 'postgres' database and will use the default database instead."
"Considre case" > "Consider the case".
I think you should use `type` not `__class__`. At least in python 2 this will break if the class does not inherit from `object`.
Lose the `params` temporary and simplify: ```python prefix += ' (%s)' % ', '.join('%s %s' % i for i in extra.items()) ```
I would add `('availability', BooleanFieldListFilter)` to the `BookAdminWithTupleBooleanFilter` instead of creating a separate class.
include trailing , (that way if more values are added in the future, we won't have to edit this line again)
Well, we _could_ make `on_delete` an actually-required arg to `ForeignObject` right now, and move it even before `from_fields` and `to_fields`, but that would require duplicating the deprecation warning in both `ForeignKey` and `OneToOneField`.
avoid _we_ usage as well ``` SystemCheckError is surfaced when run_checks raises SystemCheckError and teardown databases raises ValueError
there's no need to "cleanup" by logging out as each test creates a new test client
```suggestion # Windows registry may not be configured with correct # mimetypes. ```
You lost a ] in here.
Period: ```suggestion "Quit and manually define a default value in models.py.", ```
Migrations are applied and recorded atomically.
use Model.objects.create() rather than `save()`? I don't think manually specifying an id is needed (or a best practice)
Sounds, good thanks for giving this ticket a shot by the way. It's a tricky problem with a few edge cases but you'll certainly learn a lot of things along the way.
```suggestion self.assertIs(app_dir.joinpath("apps.py").exists(), True) ```
You should use `supports_update_conflicts_with_unique_fields`.
Once again, exec is not needed here.
Ahh OK, so maybe `%s.%s`.
I think this should be a `ValueError`
Using `clashing_pair` in a hint is misleading. We should use appropriate model names not field names or table names.
Don't assert against the exact SQL since per-backend dialect will have a different syntax (e.g. wrt to identifier quoting). ```suggestion ``` Asserting against the resultset should be enough.
Maybe you've missed `if summarize` branch (below).
Use `try ... finally` and unregister this lookup to keep tests isolated.
You'll want to branch off greater or equal to Python 3.6 here.
Rephrase: `# Normalize locale strings input by the user.`
It'd be great we if we could avoid creating 5 new tables to reproduce the issue. Existing ones should be reusable somehow.
Yes, maybe: "... time-related format specifiers (found 'a')."
`out` would be clearer as `stdout`.
Dot is missing _"... for Django 2.x."_.
I had to change this to `template_params['subquery'], sql_params = self.subquery.query.get_compiler(connection=connection).as_sql()` in order to compile correctly when using a database other than the `DEFAULT_DB_ALIAS`.
This could be indented inside the `if conn.vendor` to avoid a redundant check.
```suggestion return 'Create collation {self.name}' ```
The URL tests got started off on a bad foot, I think. I prefer the pattern used in `test_security`. For one thing, if this first assertion fails, you have to use print statement debugging to figure out what the result actually was as opposed to the assertion error giving some useful info.
non existing -> nonexistent
The import usually goes at the top of the method.
Please don't change all the other unaffected lines.
if I pass `attrs={'multiple': False)` and init with multiple=True, they are out of sync.
Are you sure this branch is ever skipped? AFAIK `auto_created` models are not part `ProjectState.models` entries.
no `u''` prefixes on strings please
I added the comma to be consistent with the `include` and `condition` attributes. Also, on `ExclusionConstraint` we separate attributes by comma but not on `UniqueConstraint`, so 🤷 indeed..
We need idempotent functions that work reliably between python 2 and python 3. Then if the caller has specific needs, they can take care of their own edge cases. Whatever goes in `utils/encoding.py` should be considered "library" grade, just like werkzeug.
Actually the idea is to do this validation only if `schemes == '__all__'`. If the user provides some other scheme, then we might as well allow it.
chop ticket number
This check is redundant. `skipUnless` already guarantees that we have MySQL. You can remove the `try ... except` leaving only `import`.
Start the sentence "Duration's number of days..." Also, add a trailing period.
Ditto about being pointless, keep `os.path.exists(...)`.
I would use `os.path.splitext()`, e.g. ```python def get_available_name(self, name, max_length=None): """ Append numbers to duplicate files rather than underscores, like Trac. """ basename, *ext = os.path.splitext(name) number = 2 while self.exists(name): name = ''.join([basename, '.', str(number)] + ext) number += 1 return name ```
drop 'this will" / "it will"
I think the `_module_exists` and argument name could be improved. What about ```suggestion def _contains_subclass(subclass_path, candidate_paths): ```
Michal and I discussed this on IRC and I don't think such a generic function is going to help here. This is a very narrow use case (implicit casting isn't working for certain fields in case expressions), and it needs to be special cased for certain fields. This isn't an Integer->Float kind of situation. I'm happy enough with the method to stay. If we can generalise later then that will be OK, but I don't want this to hold up the merge.
Might be better to define this as separate method like this: ``` def window_frame_start(self, start): if isinstance(start, int): if start < 0: return '%d %s' % (abs(start), self.PRECEDING) elif start == 0: return self.CURRENT_ROW elif start is None: return self.UNBOUNDED_PRECEDING raise ValueError('Illegal argument for start, must be either a negative integer, zero or None') ```
This test data seems wrong to me. For example, you have verbosity `1` leading to level `DEBUG`, which means that logging at a level of `DEBUG` should result in output per the logic below (since `logging_level >= level` appends `output = True`). That isn't right though, since verbosity `1` shouldn't show `DEBUG`. The test would be a lot easier to understand and update if it was simply a hard-coded, sorted list of tuples, e.g. ```python cases = [ (0, None, False), (0, logging.DEBUG, False), (0, logging.INFO, False), (0, logging.WARNING, False), ... ] ``` Including `level=None` will serve to check the default case. Also, you don't need to check `level=logging.NOTSET` since that's not a level that anyone would ever pass when logging a message. That level is more for when reading what level is set on a configured logger. Having the correct test should help with getting your logic correct in the `log()` method above.
Using `self.connection.features`: ```suggestion elif ( on_conflict == OnConflict.Update and self.connection.features.supports_update_conflicts_with_target ): ```
include a space at the end of the string
Silencing far more exceptions than previously (where it was `ImportError`) ... is this intentional, and will it lead to people having a harder time debugging when their app config goes wrong? I guess it'd be somewhere higher up the chained stack traces, maybe? Same expansion of caught exceptions (`ImportError` -> `Exception`) happens at the `import_string` so I assume the answer to this also answers that.
Unnecessary `.keys` call ```suggestion return list(unique_items) ```
I guess the `add_argument` could be `action='store_false', dest='uses_https'`
I would add `('availability', BooleanFieldListFilter)` to the `BookAdminWithTupleBooleanFilter` instead of creating a separate class.
Yeah the settings dependent part could be moved into the `__init__` of the middleware I guess.
Is this correct? As far as I'm aware `OR` is not an effective connector with not negated `XOR` :thinking: ``` p XOR q = (p OR q) AND NOT (p AND q) NOT (p XOR q) = NOT ((p OR q) AND NOT (p AND q)) = NOT (p OR q) OR (p AND q) ``` so `OR` is an effective connector for negated `XOR`, maybe: ```python may_need_split = ( (in_negated and self.connector in {AND, XOR}) or (not in_negated and self.connector == OR) ) ``` Also, tests are missing.
`grouping[0][0]` is a name of the first column, so these two assertions are unnecessary: ```python self.assertNotIn('name', grouping[0][0]) self.assertNotIn('contact', grouping[0][0]) ```
Still missing test coverage here, I guess. `get_search_fields() missing 1 required positional argument: 'request'`
If I understood the above code correctly, then `self.field` is on the source model, whereas `self.model_admin` points to the target admin, I think we should really rename those to avoid confusion.
This flag is ignored when `ensure_durability` is `False`, so we should inform users that is not allowed, e.g. ```diff (django-test) git:pr/13708 felixx@felixx-A555:~/repo/django/tests> git diff diff --git a/django/db/transaction.py b/django/db/transaction.py index c6ba346a99..8a84b97237 100644 --- a/django/db/transaction.py +++ b/django/db/transaction.py @@ -172,6 +172,11 @@ class Atomic(ContextDecorator): self.using = using self.savepoint = savepoint self.durable = durable + if self.durable and not self.ensure_durability: + raise ValueError( + 'A durable atomic block is not allowed. If you are running ' + 'tests, you must use TransactionTestCase, not TestCase.' + ) def __enter__(self): connection = get_connection(self.using) ``` We can be descriptive here.
I guess you probably want `from django.test.utils import requires_tz_support` instead.
It looks like we already used this approach in `SingleRelatedObjectDescriptor` (raise a `ValueError` on unsaved objects) so I guess it's fine to use it here as well. I'm still unsure how this interacts with the `AttributeError` case but I guess it can be revisited later if necessary.
should this be super()
```suggestion self.assertIsNone(table_description[1].collation) ```
, -> and
I'm leaning toward reintroducing `Node._new_instance()`, although probably call it `.create()` and make sure it is used everywhere which it hasn't been up to new. The reason for this is that sometimes using `.copy()` has unnecessary overhead of copying `__dict__` when we don't need to.
If we went with `get_model_class()` above, this could simply be `model`.
We don't need to call `len()`, `slice()` will work the same with `None`.
What values would this condition have a different outcome than the current one? `is_active or self.allow_inactive_users or is_active is None`
I wonder if we could support running `runtests.py` from different directories :thinking: like we do for dotted module names, e.g. ```bash ~/repo/django> ./tests/runtests.py backends.postgresql ``` works fine, but ```bash ~/repo/django> ./tests/runtests.py backends/postgresql/ .... File "./tests/runtests.py", line 155, in get_label_module rel_path = path.relative_to(RUNTESTS_DIR) File "/usr/lib/python3.8/pathlib.py", line 904, in relative_to raise ValueError("{!r} does not start with {!r}" ValueError: '/repo/django/backends/postgresql' does not start with '/repo/django/tests' ``` crashes. I tried to fix this with: ```python # Otherwise, interpret the label as a path. if not path.is_absolute(): return path.parts[0] else: path = path.absolute() rel_path = path.relative_to(RUNTESTS_DIR) return rel_path.parts[0] ``` but it crashes with `ModuleNotFoundError` (like without this patch): ``` ====================================================================== ERROR: backends/postgresql (unittest.loader._FailedTest) ---------------------------------------------------------------------- ImportError: Failed to import test module: backends/postgresql Traceback (most recent call last): File "/usr/lib/python3.8/unittest/loader.py", line 154, in loadTestsFromName module = __import__(module_name) ModuleNotFoundError: No module named 'backends/postgresql' ```
We don't need this skip.
extra space after [
Given `self.inner_votes` is an instance of `collections.Counter` this could be simplified to `self.inner_votes.update(inner_votes)`.
We should support both `db` and `database`, e.g. ```python database = settings_dict['OPTIONS'].get( 'database', settings_dict['OPTIONS'].get('db', settings_dict['NAME']), ) ```
This line can be removed :thinking:.
Using `clashing_pair` in a hint is misleading. We should use appropriate model names not field names or table names.
I think the `hasattr` is unnecessary as the check is after `super().__init__()`. A child class of `BaseForm` will always have a `fields` instance variable, right? Removing the `hasattr` does not cause any tests to fail.
Use single quotes consistently (could be done above and below also).
I would chop `Do not crash in this case. `.
``` 'BinaryField default cannot be a string, use bytes content ' 'instead.' ```
Chop blank line.
Chop blank line.
Please put the test in `AdminActionsTest`.
Ahhh, yes, thanks!
Nit-pick: I think Django generally favors the syntax with parens instead of the `\` continuation char.
You can have a look at 9bf652dfd6a738fd841471f6abd71cba1b206d9f as an example of how we introduced object level permission to authentication backends.
Well, mariadb support in the mysql backend. Will get on to that soonish.
use `reverse()` rather than a hard coded URL.
We can reuse `self.user`: ```suggestion request.user = self.user ```
Maybe `Ntile`, but I can't figure out what it stands for...
this should probably stay, as we don't want `max_length` to suddenly show up somewhere in between states.
I would keep `if not ...` in the same line.
Per new code guidelines, can we use `assertIs`? :)
Well I did not check the encoding declaration (well.. I apparently checked another file) and I just told him to use the `chr()` syntax so that is pretty much my fault :-(
```suggestion if VARIABLE_ATTRIBUTE_SEPARATOR + '_' in var or first_char == '_': ```
For the keys, I was thinking we should use the full field name (e.g. 'BigAutoField') rather than some other value like 'big_auto'. I think it would be less mental effort for the developer to have to convert camel case to underscore and remove "field". Let's alphabetize the keys too.
GZipMiddleware doesn't modify a weak ETag.
Ah I see, okay then.
So we should probably use the enum here. Something like: ```suggestion self.assertEqual(FirstNames.JOHN.value, f.clean(FirstNames.JOHN)) ```
Was going to suggest the same, but see that @charettes got there first. > Yes, but IMHO it's worse for readability. Fair enough.
I think that `BaseForm.get_context()` describes this perfectly well: ```suggestion ``` But if we must keep it, it should be collapsed onto one line: ```suggestion """Returns context for form rendering.""" ```
You can safely join this an the next line. You have up to 119 chars per line. ;)
You can use `assertSequenceEqual()` here ```python self.assertSequenceEqual( values, [{'discount_price': Decimal('59.38'), 'sum_discount': Decimal('59.38')}], ) ```
It has to be switched back to `DEFERRED` afterwards ```suggestion sql_column_inline_fk_immediate = 'SET CONSTRAINTS %(name)s IMMEDIATE;SET CONSTRAINTS %(name)s DEFERRED' ```
`self.tables += (alias,)`
``` """ QuerySet.count() on a many-to-many relation doesn't include an unnecessary JOIN. """ ``` Ticket references should be reserved for obscure issues (not needed here, I think).
It would probably be better to check `cl.queryset.query.distinct`
Yes, this should be taken care of before.
As above, wrap the format in quotes. "Your URL pattern '{}' has .."
If you do the unrelated alignments, please push them in a separate PR.
James concern about the extra level of indentation caused by `with timezone.override()` + `try / finally: self.storage.delete(f_name)` could be solved by removing the file with `self.addCleanup(self.storage.delete, f_name)` instead.
