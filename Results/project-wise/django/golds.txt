I'd say "ASCII alphanumerics"
Note that there are decorators that are using the same approach, e.g. `csrf_exempt()` :wink:
Maybe :thinking: ```suggestion if not ( field.primary_key or field.__class__.pre_save is Field.pre_save ): ``` according to de Morgan's laws.
That would of course require a backwards incompatibility note, and the failing test would need to recreate the fatty and salty tags between each assertion.
Do we need to use `Subquery` here? (If I remove it the test still functions — i.e. fails without patch, passes with it.)
no blank line needed before/after docstring or at the start of each test
`model.__name__` alone is not sufficient. It would need to check for equality of both `model.__name__` and `model.__module__`.
(I personally don't have any preference between the options, just wanted to throw out another idea.)
Using -> Use add period
Do we have to keep cutting to `other_length`? ```suggestion joined_column_names, ```
Okay fine by me, as long as the ticket exists :)
Do we need to change this? I would only add `set(chain.from_iterable(...`
I'd put `hire_date` on the next line -- the longer line isn't helping readability here. Maybe it would be DRYer to put the data in a list of tuples, e.g. `'Williams', 37000, 'Accounting', datetime.datetime(2009, 6, 1),` and use a comprehension to create the objects.
I think it would be clearer without both context managers on the same line.
I think the verbiage that you use below (`anonymous user objects`) is more grammatically correct than the `users objects` you use in this instance.
"cannot" is one word. Also, add a period.
Is there a typo? I'm not sure what "hub" means in this sentence.
Please use force_text instead of smart_text. smart_text is only useful when you want to preserve the lazy status of a string.
use { } set comprehension as in b2aad7b836bfde012756cca69291c14d2fdbd334
this should be phrased as a "x should do y" sentence, like it was before
> But I think it would be better if we didn't let the debug implementation slow the non-debug implementation more. Yeah. That did occur to me, but haven't had time to check the performance. It might still work out in concert with other ideas I've had… But those don't need to hold this up.
This doesn't act as a regression test because it tests if `"'lastname'"` is in the exception message which it already is. You want to test if the quotes are removed. This would do it: ```python with self.assertRaises(MultiValueDictKeyError) as cm: d.__getitem__('lastname') self.assertEqual(str(cm.exception), "'lastname'") ```
I'd make an intermediate variable to avoid calling form_list.keys() up to 3 times (same in get_prev_step())
I suggested to remove the blank line because the ) is already providing space.
You can use `self.assertCountEqual` as of b5f0b3478dfcf0335f8ac2038d59f54b4a05f2a0.
Can this line be written like the following line? ``` py msg = "This id does not appear to be a valid UUID4 identifier: {}" self.assertEqual("4", uuid_as_hex[12], msg=msg.format(uuid_as_hex)) ```
Remove newlines here, paragraphs are to separate thoughts, those belong logically together
To avoid calling `_get_concrete_models_mapping_and_proxy_models()` in multiple places I changed signature of new helpers to `concretes=None`.
No, your analysis is correct. In Python 2, sometimes `module.__file__` can contain absolute paths, but I don't remember the exact details and it's very unlikely.
We should also handle `--merge` which creates new files, see `handle_merge()`.
> What about forms etc. for that field? I'm open to the idea. Right, I didn't think about that!
I needed to add a `set_source_expressions` method which sets `self.subquery = source_expressions` here to get relabelling to work.
Yes, it's also already tested in `tests.migrations/test_operations.OperationTests.test_rename_field_with_db_column`, see 7f4c9222dfe2f28ff8a7ffc56c28ccbadf19cf6f.
Is there a reason to add these as module constants? I would rather move them to the `HashingSessionBase`. Also we don't need to allow customizing delimiter.
FWIW, I submitted several patches to isort and the author was very responsive. I just didn't care enough about this one to fix it.
I moved adding this hook to a separate PR, see #16048.
"with an index"
I think we should keep the previous behavior. An original exception was always in a traceback. It's easier for users to have it in the most recent message and don't force them to search for a real cause in the traceback.
Maybe ```suggestion ("ckb", gettext_noop("Central Kurdish (Sorani)")), ```
* Please wrap this so each `else` begins a line. (Then each clause is easily identifiable.) * Use hanging indent.
The assertion argument order you've chosen is opposite of what we usally do, e.g. `self.assertEqual(qs.values('pk').filter(is_point_of_contact=True).count(), 1)`
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
Please wrap at 79 chars.
Add trailing comma.
Might want to make `fields` a set to avoid having `_check_local_fields` run multiple time for the same field.
oops, I see. nevermind, I guess.
This works without the patch and should be moved to a separate commit.
As you'll already be storing validators in `validators` you can remove this variable.
Not really important but you don't need the square brackets: `set(instance_attr(inst)[0] for inst in instances)`.
```suggestion path('upload_stopped/', views.file_upload_stopped), ```
I do not think it is important and I'm not sure if it is possible :thinking:
Why can't we just return unicode (i.e. decoded bytestring, so `str` on PY3 and `unicode` on PY2)? In that case the signature would be `uri_to_iri(uri, encoding='utf-8')` just like werkzeug.
I'd use `self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])` so two assertions aren't required. I'll change the other cases separately.
remove u'' prefix (not valid on Python 3.2) and add `from __future__ import unicode_literals` if you need it.
Also, you can use `extend()` with a generator expression to eliminate the need for a `for` loop with indentation.
@pope1ni Thanks for the suggestion, but IMO it's less readable and it's more complex (as far as I'm aware) :thinking: : <details> ```pycon >>> import dis >>> def test_1(): ... possible_lang_codes = [] ... lang_code = 'zh-hans-mo' ... lang_code_split = lang_code.split('-') ... for i in range(len(lang_code_split) - 1, 0, -1): ... possible_lang_codes.append('-'.join(lang_code_split[:i])) ... >>> def test_2(): ... possible_lang_codes = [] ... lang_code = 'zh-hans-mo' ... i = None ... try: ... while i := lang_code.rindex('-', 0, i): ... possible_lang_codes.append(lang_code[:i]) ... except ValueError: ... pass ... >>> dis.dis(test_1) 2 0 BUILD_LIST 0 2 STORE_FAST 0 (possible_lang_codes) 3 4 LOAD_CONST 1 ('zh-hans-mo') 6 STORE_FAST 1 (lang_code) 4 8 LOAD_FAST 1 (lang_code) 10 LOAD_METHOD 0 (split) 12 LOAD_CONST 2 ('-') 14 CALL_METHOD 1 16 STORE_FAST 2 (lang_code_split) 5 18 LOAD_GLOBAL 1 (range) 20 LOAD_GLOBAL 2 (len) 22 LOAD_FAST 2 (lang_code_split) 24 CALL_FUNCTION 1 26 LOAD_CONST 3 (1) 28 BINARY_SUBTRACT 30 LOAD_CONST 4 (0) 32 LOAD_CONST 5 (-1) 34 CALL_FUNCTION 3 36 GET_ITER >> 38 FOR_ITER 28 (to 68) 40 STORE_FAST 3 (i) 6 42 LOAD_FAST 0 (possible_lang_codes) 44 LOAD_METHOD 3 (append) 46 LOAD_CONST 2 ('-') 48 LOAD_METHOD 4 (join) 50 LOAD_FAST 2 (lang_code_split) 52 LOAD_CONST 0 (None) 54 LOAD_FAST 3 (i) 56 BUILD_SLICE 2 58 BINARY_SUBSCR 60 CALL_METHOD 1 62 CALL_METHOD 1 64 POP_TOP 66 JUMP_ABSOLUTE 38 >> 68 LOAD_CONST 0 (None) 70 RETURN_VALUE >>> dis.dis(test_2) 2 0 BUILD_LIST 0 2 STORE_FAST 0 (possible_lang_codes) 3 4 LOAD_CONST 1 ('zh-hans-mo') 6 STORE_FAST 1 (lang_code) 4 8 LOAD_CONST 0 (None) 10 STORE_FAST 2 (i) 5 12 SETUP_FINALLY 42 (to 56) 6 >> 14 LOAD_FAST 1 (lang_code) 16 LOAD_METHOD 0 (rindex) 18 LOAD_CONST 2 ('-') 20 LOAD_CONST 3 (0) 22 LOAD_FAST 2 (i) 24 CALL_METHOD 3 26 DUP_TOP 28 STORE_FAST 2 (i) 30 POP_JUMP_IF_FALSE 52 7 32 LOAD_FAST 0 (possible_lang_codes) 34 LOAD_METHOD 1 (append) 36 LOAD_FAST 1 (lang_code) 38 LOAD_CONST 0 (None) 40 LOAD_FAST 2 (i) 42 BUILD_SLICE 2 44 BINARY_SUBSCR 46 CALL_METHOD 1 48 POP_TOP 50 JUMP_ABSOLUTE 14 >> 52 POP_BLOCK 54 JUMP_FORWARD 20 (to 76) 8 >> 56 DUP_TOP 58 LOAD_GLOBAL 2 (ValueError) 60 COMPARE_OP 10 (exception match) 62 POP_JUMP_IF_FALSE 74 64 POP_TOP 66 POP_TOP 68 POP_TOP 9 70 POP_EXCEPT 72 JUMP_FORWARD 2 (to 76) >> 74 END_FINALLY >> 76 LOAD_CONST 0 (None) 78 RETURN_VALUE ``` </details>
```suggestion Return context for form rendering. ```
```suggestion house.rooms.first().house.address ```
Maybe use `self.TEST_SIZE` to avoid storing the large list of authors.
I wouldn't transform the whole class to TransactionTestCase, but rather create a new class containing transaction-dependent tests. On some setups at least, TransactionTestCase is heavily slowering tests.
I have to admit that I turned several module-level functions into engine methods without giving it much thought. Feel free to move engine methods in other classes as needed.
I'm not so sure `name.lower()` is correct. Hopefully there is a more canonical way to get the name of that accessor.
Please keep this on 1 line (we prefer long lines up to 119 characters if it helps readability and avoids non-4 space indent).
```suggestion # RemovedInDjango50Warning ```
Can you just do `name.startswith('__') and not name.endswith('__')`? Simpler is better
```suggestion with self.settings(USE_DEPRECATED_PYTZ=use_pytz): with override_database_connection_timezone(connection_tz): self.assertIsInstance(connection.timezone, expected_type) ```
It is subject to SQL injection, using a suitably crafted `collation`, e.g. ```python Author.objects.filter( alias=Collate('name', 'et-x-icu" OR 1=1 OR \'x\' = "name') ) ```
Chop "Make sure we also"
use hanging indent please: ``` raise ValueError( "..." "..." ) ```
I'm not convinced about this change is a bit backward incompatible, e.g. ```python >>> from django.views.debug import ExceptionReporter >>> ExceptionReporter.html_template_path Traceback (most recent call last): File "<stdin>", line 1, in <module> AttributeError: type object 'ExceptionReporter' has no attribute 'html_template_path' ``` Can we use a `@classproperty` (with `@lru_cache(maxsize=1)`) to keep the current behavior? :thinking:
Can you make this upper case and give it a slightly more unambiguous name, e.g. `TIMESINCE_CHUNKS`
The test seems to work.
This is a WIP note to self by me. (TO DELETE 😀)
"since we add a nicely..." (make one sentence)
I'd decorate the test method with `@override_settings(DEBUG=True)` instead to avoid extra indentation.
Simpler: ``` python params = params or [] if kparams: return self.cursor.callproc(procname, params, kparams) else: return self.cursor.callproc(procname, params) ```
it seems to me like this sort of docstring belongs on the keys method itself and not the test
I find the way you've written it quite understandable. No suggested improvements come to mind.
I guess it's better to have ` self.assertEqual(words(2, False), 'exercitationem perferendis')` to follow the pattern of `(value, expected)`
You can simply this to: ``` python pet = Pet.objects.prefetch_related('people').get(pk=self.pet.pk) ```
I see no reason not to use `db = router.db_for_write(cls)` instead of this whole for/continue loop. AFAIK, this will give you the same result you're looking for.
This would make more sense in a separate commit cleaning up the entire file, imo.
Better to describe the desired behavior than have to look it up in the ticket.
Put "Touch..." on the next line as the other docstrings do.
please use assertRaisesMessage to check this is the ValueError we expect.
Can we do it like: ```suggestion return ( (self.connection.mysql_is_mariadb and self.connection.mysql_version >= (10, 6)) or (self.connection.mysql_version >= (8, 0, 1) ) ```
Maybe, on the other hand forcing people to use a specific (relatively) small set of names for sensitive data might be actually not so bad.
I guess you should follow the indentation of the other tests.
Should we also clarify a `help` for the `--check` argument? (as suggested in #15845 for the `migrate` command). For example: ```python help="Exit with a non-zero status if model changes are missing migrations and doesn't actually write new migrations.", ```
one more for the single line version
please use `self.assertRaisesMessage` or `six.assertRaisesRegex` rather than `self.assertRaises` to check the exception's message as well
Rather than having these two conditionals based on settings, what if we extract a new method that only does view middleware, calls the view, and template response middleware? Then that method can be the baseline "handler" in the new system, and we can have a wrapper method for the old system that does request middleware, calls the new method, then does response and exception middleware. For the sake of discussion, let's say we call the new method `_get_response` and the old one `_get_response_with_old_middleware`. When the old system is in use, `load_middleware could just do`self._middleware_chain = self._get_response_with_old_middleware`; that way the top-level`get_response`wouldn't need any conditionals at all, and all the old-vs-new logic would be encapsulated in`load_middleware`. I think this would make for a clearer separation of old vs new, and that would make the end of the deprecation path simpler too, since the only things that would change would be a) cut out half of `load_middleware`, and b) remove `_get_response_with_old_middleware`.
Ok great. +1 to prefixing the attribute with an underscore.
I'd chop the intermediate variable
MINOR: the test would be clearer if this were more verbose as auth_app_config
```suggestion msg = 'perm_list must be a list or tuple.' with self.assertRaisesMessage(ValueError, msg): ```
```suggestion new_field = ForeignKey( Author, blank=True, editable=False, error_messages={'invalid': 'new error message'}, help_text='new help text', limit_choices_to={'foo': 'bar'}, related_name='new_related_name', related_query_name='new_related_query_name', on_delete=PROTECT, validators=[lambda x: x], verbose_name='new verbose name', db_column=old_field.column ) new_field.set_attributes_from_name('renamed_author') ``` Is what I'm referring to. The direct `set_attributes_from_name` call simulates what would happen a model is initialized with an attribute name like it happens normally. It can likely be removed entirely if you pass `name='renamed_author'` when calling `ForeignKey`.
Creating a new empty instance of related `model` doesn't look like a proper solution for me. IMO we should just omit `set_cached_value()` when `from_obj` is not available e.g. ```python def local_setter(obj, from_obj): if from_obj: f.remote_field.set_cached_value(from_obj, obj) ```
Did you consider using mocking and assertions such as `assert_called_once_with()`? This might be a bit cleaner and more self-explanatory than introspecting `_running_test`.
```suggestion @ignore_warnings(category=RemovedInDjango51Warning) ```
It looks like only `IndexError` is exercised in tests.
assertRaisesRegexp is deprecated on Python 3, you use `self.assertRaisesMessage` I think
I think it's fine where it is, in the operations tests.
`related_name` is not related with this issue, so I think we can drop it and use a generic name.
makes sense to me. if `self.join_cols` is a tuple, you don't even need those parentheses.
This should verify the output.
And this can be reverted.
I don't think the explicit `raise e` is required on Python 3.5+. ```python (tmp-70aba34da671918e) ➜ tmp-70aba34da671918e ipython Python 3.5.2 (default, Sep 17 2016, 14:04:19) Type 'copyright', 'credits' or 'license' for more information IPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help. In [1]: def func(): ...: try: ...: raise KeyError('foo') ...: except KeyError: ...: try: ...: raise Exception('test') ...: except Exception: ...: pass ...: raise ...: In [2]: func() --------------------------------------------------------------------------- KeyError Traceback (most recent call last) <ipython-input-2-bd1982955a12> in <module>() ----> 1 func() <ipython-input-1-e80913097bf5> in func() 1 def func(): 2 try: ----> 3 raise KeyError('foo') 4 except KeyError: 5 try: KeyError: 'foo' ```
So [`time.sleep()`](https://docs.python.org/3/library/time.html#time.sleep) supports floats. Even halving the values would be better assuming the `timeout` argument supports floats.
Is there any way to prevent this? I'm actually running into a PostgreSQL syntax error because of it. I have these two custom functions: ```python from django.db.models.expressions import Func class Any(Func): function = "ANY" class Array(Func): function = "ARRAY" ``` And I'm trying to run a query similar to this: ```python Foo.objects.filter( pk=Any( Array( Foo.objects.filter(...).values("pk")[:1000] ) ) ).delete() ``` Before this change, it produced SQL like this: ```sql WHERE V0."id" = ANY(ARRAY(...)); ``` After this change I get this which isn't valid: ```sql WHERE V0."id" = (ANY(ARRAY(...))); ``` ``` ERROR: syntax error at or near "ANY" LINE 1: ... V0."id" FROM "foo" V0 WHERE V0."id" = (ANY(ARRAY(... ^ ``` Basically, `ANY` doesn't like being wrapped.
with -> width
chop this second sentence
Use the `msg = ` format to avoid awkward indentation.
```suggestion formset = ArticleFormSet(form_kwargs={"empty_permitted": False}) ```
The check seems a bit convoluted to me, you should be able to get rid of the `err` variable. What about: ``` python try: cls._meta.get_field(field_name, many_to_many=False) except FieldDoesNotExist: if field_name.endswith('_id'): try: field = cls._meta.get_field(field_name[:-3], many_to_many=False) except FieldDoesNotExist: pass else: if field.attname == field_name: continue ```
``` # Environment variables are ignored in interactive mode. ```
Head is starting to explode. 🤯. `None` is allowed here because we overrode `__init__`, even though we're extending from `MiddlewareMixin`... which means the warning is kind of soft. I think this is OK, but it might be clearer to pass a view function.
I am personally using Widget.rel in some of my code. Some sort of compatibility would be nice if it's not too hard.
If you have time, we also try to include on trailing comma on the last kwarg so if more items are added later, we don't have to modify that line again.
``` py self.assertTrue(r.closed) ```
I'd move this at the beginning of `__init__()`. Also, chop blank lines.
We don't need to check `condition_params` when SQL is blank.
Not supported on Python 3.4.
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
I think this assertion isn't needed.
For new code, I try to avoid the "Test that" prefix as the purpose of all tests is to test things. Instead just state the expected behavior, "Setting request.urlconf.=None will cause the the default URLconf to be used."
Of course, the above doesn't take into account the availability of the hasher, since PBKDF2 is available (via efficient C) in the stdlib in 2.7.9+ and 3.something+ and can be done reasonably in pure Python before that whereas scrypt, bcrypt, and argon2 will all require an external library (generally C based).
I feel like `if settings.USE_TZ and not timezone.is_aware(value)` may be simpler rather than adding another place that the function returns from.
```suggestion if query_string := request.GET.urlencode(): redirect_url += f"?{query_string}" ```
Should we be manually substituting parameters here or leaving it to the backend? This feels like SQL injection territory to me, but I could be wrong...
The apostrophe after "to" seems to be a typo to me (maybe even the entire "to'" should be removed, I don't really understand the sentence).
If the columns list is limited, ...
I think the constructor signature of this operation should only use the index name and not require an instance of an Index class
Unindent by 1 space. Indention must be a multiple of 4 spaces.
Reverted to `django.__version__`, sorry.
I think it would be better to make a single check e.g. ```python self.assertEqual(check_model_name_lengths(), [ checks.Error( 'Model name is too long.', hint='Model name should not be longer than 100 characters.', obj=ModelWithNameOfOver100CharactersModelWithNameOfOver100CharactersModelWithNameOfOver100CharactersModel, id='contenttypes.E005', ) ]) ```
Maybe "Couldn't import <shell>." would be slightly better wording.
Gotcha! When you replace the `IterableSerializer` with the `TupleSerializer` in the factory you end up with this failing test. I think we can leave it as as. ``` python Traceback (most recent call last): File "/home/markus/Coding/django/tests/migrations/test_writer.py", line 362, in test_serialize_settings ("((0, 0), (1, 1), (2, 4))", set()) File "/home/markus/Coding/django/tests/migrations/test_writer.py", line 187, in assertSerializedResultEqual self.assertEqual(MigrationWriter.serialize(value), target) File "/home/markus/Coding/django/django/db/migrations/writer.py", line 308, in serialize return serializer_factory(value).serialize() File "/home/markus/Coding/django/django/db/migrations/serializer.py", line 46, in serialize format = self._format() File "/home/markus/Coding/django/django/db/migrations/serializer.py", line 303, in _format return "(%s)" if len(self.value) != 1 else "(%s,)" TypeError: object of type 'generator' has no len() ```
We like to include trailing comma on the last item in a dict so if more items are added later, we don't have to modify this line again.
I think `response.streaming` should be tested first which will avoid accessing content for such responses.
Can we use `value` instead of `string`? sorry for bikeshedding.
add period at end of sentence
Ah! Maybe include a test for the scenario then.
I looked at the log and realized those tests are run with `USE_TZ=False` so everything should be good here.
We should move introducing `Default()` expression to a separate commit.
Will that work if `queryset` is specified as a kwarg? e.g. `Subquery(queryset=queryset)`.
I'm not sure if the docstring adds much -- at least the ticket reference isn't needed.
Use `PY39` instead: ```suggestion if umask and PY39: ```
No need to add `stacklevel=2` here.
This test seems to show that double-escaping happens, which is not what we might expect.
It's more readable without the ternary, IMO: ```suggestion if self._secret_fallbacks is None: return settings.SECRET_KEY_FALLBACKS return self._secret_fallbacks ```
please include trailing comma
Yes, this is how third-party database backends would skip those tests.
Should we use `reverse()` instead? ```python reverse( 'password_reset_confirm', kwargs={ 'uid': urlsafe_base64_encode(force_bytes(user.pk)), 'token': INTERNAL_RESET_URL_TOKEN, } ) ```
I've personally used and seen third party apps use `_state` to store extra details about model instances. For example, it can be useful to store the schema the instance was retrieved from in PostgreSQL multi-tenancy app.
All those `self.function` definitions are used by `GeoQuerySet` which is currently deprecated. I wouldn't touch them and would concentrate only on function names.
`extra.get()` returns `None` by default, so we can simplify this: ```python self.options = extra.get('options') ```
I think we should adjust `Now` instead, the fact it has an `output_field = DateTimeField` but returns an incompatible datatype is the crux of the issue here.
We can pass old/new names instead of entire indexes.
Chop blank line.
The `pk=1` additions still need to be removed.
I think if you check `setup.cfg` for the project, it explicitly switches off E128 checks. Don't think it's too big of a deal either way :).
Our policy is not to require the installation of requirements and instead skip the relevant tests.
Do we need `\n`? ```suggestion self.fail('Form is valid') ```
I improved messages for `values()` and `values_list()`. `distinct()` is more complicated because the exception is raised by `names_to_path()` that is used in many places, IMO we can leave the current message.
I think this is fine as it is. I don't like that we have to check for the exception or fallback to using the private output_field_or_none though. Problem for another day.
Wrap at 79 chars.
I'm surprised that this needs to be `NULL` instead of `None`.
You can reuse `resolve_model_field_relations()`.
Single quotes for all of these as well.
You can reuse existing models, e.g. `ChapterXtra1` and `Vodcast`.
use assertEqual (with the "s" is a deprecated alias)
should be string_types[0]
only include coding if we have non-ascii chars
looks like plain TestCase will be sufficient here and we can remove the super call to setUp
I'm trusting you and the tests in this case!
This line can be removed since `Func` already has `arg_joiner`.
Why `IntegrityError`? This should raise a `ValueError`: ``` raise ValueError('ignore_conflicts and update_conflicts are mutually exclusive.') ```
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
It seems like you should be able to do this without creating a new task for each call to `get()` and instead awaiting `get()` directly. For example, you could add a sentinel value to the queue when the sync iterator has been exhausted and check whether the retrieved value is the sentinel to know whether any items are left.
Use `sql, params =` instead of `s, p =` to match the typical naming used elsewhere in the code.
A docstring that merely describes the class signature provides no benefit.
I think `ValueError` is the more appropriate error here. As you've pointed out in IRC though, other examples, like `delete()` and `only()`, use this exact logic and raise type errors. It's better to remain consistent. I don't think we should change the others to ValueError either, because that'd break user code for no real gain.
@timgraham adding a method call will definitely affect performance on CPython. Assigning `self` attribute to a local variable is a common pattern to avoid `self.__dict__` lookups in a loop.
@felixxm I suggested the exact opposite during previous review - I prefer to template it to allow the tests to be moved around in future without any diff noise
``` self.assertHTMLEqual( f.as_table(), .... ) ```
no comma chop "itself"
IMHO the size check adds more complexity. Let python's format handle this. I believe it will very efficient if the value has only 3 digits.
I changed tests to reuse existing models.
One thing that makes me uneasy here is that this code would make the following preserve ordering? ``` Bar.objects.order_by(Count("m2m_foo")) ``` Should we inline ordering references in ordering instead of silently eliminating them? It feels like we should as `annotate(foo=bar).order_by('foo')` should be equivalent to `order_by(bar)`? I'm bringing this up because ordering in updates is important for some backends (see 779e615e362108862f1681f965ee9e4f1d0ae6d2). All that to say that I believe we should either raise an error that points at using `order_by` directly or automated the translation of annotation references instead of silently dropping the user specified ordering.
@infosrabah PR is not the best place to ask support question. Please use one of [ support channels](https://code.djangoproject.com/wiki/TicketClosingReasons/UseSupportChannels).
How about something like to cover both cases: ``` python func = getattr(obj, name, None) if name and not callable(func): raise ValueError("The keyword...") ```
I'd rather not use `import *` since it prevents detecting unused imports. Alternatively, you could move functions.py -> base.py or something and make `__init__.py` only contains imports.
Excellent, looks like we are aligned in our assessment! Thanks for the additional insights on this.
`and not (new_field.db_index or new_field.unique)` should be easier to parse.
extra newline (check flake8)
comma could be chopped no blank line after docstring
Hi @youguanxinqing — but `total_forms` is basically just `extra` + the initial forms, so if we have those two we _shouldn't_ need to set it manually (is my hunch). Maybe there's an edge case but I'd like to see that, and have it covered by a test if so. I'll have a play with it now, but if you can show how it's wrong, that would be great! (Thanks! 👍)
You added the return statement to the above if the condition which means no need else statement. You should remove it to make it easier to read.
We can register model without defining `OfficeAdminWithOrdering` with the same effect: ```python site.register(Office) ```
Please chop blank line.
Maybe `@xn--p8s937b>` to be sure that it is a domain part.
You could reword this to avoid the "we" stuff. "Start with get()..."
Might be worth adjusting `migration_name_fragment` here as well to include a `not_valid` suffix.
```suggestion # Reversal. ```
Nitpick: Since Django no longer [supports Python 2.6](https://docs.djangoproject.com/en/dev/faq/install/#what-python-version-can-i-use-with-django) and this is a new feature in Django 1.8, you can use Python 2.7's new `assertIsInstance` method here: https://docs.python.org/2.7/library/unittest.html#unittest.TestCase.assertIsInstance
True, unless we made `assertFormNotValid(expected_errors)` have to match the exact state of form errors. Currently both `assertFormNotValid` and `assertFormError` would pass if you only provide a subset of the errors that happened. Not sure it's really worth it though.
We can reuse `MyWrapper`.
"Also include shadowed fields of the parent class."
`Bitwise XOR is not supported in Oracle.`
All fields have default entries (2 bits) in columns, that creates a similar limitation for the list of fields, e.g. ```python django.contrib.postgres.indexes.BloomIndex(fields=[ 'field_int_1', 'field_int_2', 'field_int_3', 'field_int_4', 'field_int_5', 'field_int_6', 'field_int_7', 'field_int_8', 'field_int_9', 'field_int_10', 'field_int_11', 'field_int_12', 'field_int_13', 'field_int_14', 'field_int_15', 'field_int_16', 'field_int_17', 'field_int_18', 'field_int_19', 'field_int_20', 'field_int_21', 'field_int_22', 'field_int_23', 'field_int_24', 'field_int_25', 'field_int_26', 'field_int_27', 'field_int_28', 'field_int_29', 'field_int_30', 'field_int_31', 'field_int_32', 'field_int_33', ], name='test_bloom_index'), ``` will fail with ``` django.db.utils.OperationalError: cannot use more than 32 columns in an index ```
I suppose it would be nice to remove this from this changeset to keep the diff clean and instead submit a separate cleanup that does this for all admin.py's.
Maybe there is a smarter way to recursively collect all parents? e.g. some hook that I missed :thinking: (\cc @charettes ).
Please include a more description error message than "This test is not required for this database" see other tests for an example.
Use `from __future__ import unicode_literals` instead of the `u` prefix.
please add a newline after this
Using `self.assertNotIn` would be better here, but you'll have to rename the first argument of `push` to something else so that `self` refers to the `TestCase` instance and not the `DummyContext` one.
I like this approach much better than #11641 ! At first I was a little concerned about checking the vendor attribute within a vendor neutral method, but it's easy to patch on classes you don't control and easy to modifying on ones that you do. If it ends up being an issue in practise moving forward we can look at better ways to make it more generic.
`== 'checkbox'` now we strip widget and input.
Yeah, in tests it's often okay to duplicate things. (By the way, can you just test equality of strings instead of contains? That would be more precise, and you would just have a single assert line with two different expected values.)
I would add a note to explain why we need this, e.g. ``` If 'fail_on_restricted' is False, error won't be raised even if it's prohibited to delete such objects due to RESTRICT, that prevents ... <<explanation>> ```
exists, (add comma, chop "it")
You might want to use `isolate_apps('model_fields')` to avoid polluting the global `apps` cache.
I think we should convert only when time-zones are different (like in the original patch).
Please use shorter name (less than 30 chars), e.g. `deferrable_pink_constraint` (the same in all new tests).
```suggestion Return a dictionary of {table_name: (table_name_other_table, other_table)} ```
For this and all of the above methods, the docstring should be enhanced to explain the case that returns blank.
No need for `keys()` here.
Yes and no. Keeping the output explicit feels easier to read.
Dot is missing. `as source expression` -> `as a source expression`.
We can add a dot a use `__qualname__`, e.g. ```python return 'django.contrib.sessions.' + self.__class__.__qualname__ ```
I wonder if allowing users to specify `orderable = ()` would be something worth supporting. If the answer is yes then I suppose we should be initializing this to None so we can distinguish that use case.
Something like this may be an improvement: ``` if not isinstance(context, dict): raise TypeError('context must be a dict rather than %r.' % context.__class__) ``` At least the error message can be improved to explain the expected type.
Are these style changes intentional? Somehow they don't look like that.
This should be handled by the fields themselves, what you've written here is what a special cased `JSONFieldGinIndex.create_sql` implementation would look like.
This can be simplified: ```python self.output_transaction = migration.atomic and getattr(connection, 'can_rollback_ddl', True) ```
Thank you. Needless to say, I would say I find your English actually to be quite excellent.🥇
```suggestion if instance_lookups := getattr(self, "instance_lookups", None): ```
```suggestion self.assertEqual(response.headers['x-foo'], 'foo') ```
This doesn't work with fields that are not "select_relatedable". For instance `Species.objects.select_related('name')` doesn't raise an exception.
`update_fields` should always be passed, so there is no need to use `update_fields or ()`.
This seems wrong to me - we disallow pickle + unpickle between major versions, but get_version() returns minor version, too. It should be OK to unpickle 1.6.1 querysets in 1.6.2.
"... items whose values deconstruct ..."
Can you move that function above `only_relation_agnostic_fields()` and a brief docstring.
Chop the blank lines
We don't need the extra variable here. ```suggestion client.mset({k: self._serializer.dumps(v) for k, v in data.items()}) ```
We're not altering vendored module.
Various things that can be improved here: - Use f-strings for a speed boost over %-formatting - could add up significantly - Avoid unnecessary `elif`s. - Raise `NotImplementedError` in the default case for unknown lookups. ```suggestion if lookup_type == 'hour': return f'{dt.hour:02d}:00:00' if lookup_type == 'minute': return f'{dt.hour:02d}:{dt.minute:02d}:00' if lookup_type == 'second': return f'{dt.hour:02d}:{dt.minute:02d}:{dt.second:02d}' raise NotImplementedError(f'Unsupported lookup type: {lookup_type}') ``` Alternatively it is possible to do the following, but it is likely to be significantly slower as I think it delegates to `.strftime()` under the hood: ```suggestion if lookup_type == 'hour': return f'{dt:%H}:00:00' if lookup_type == 'minute': return f'{dt:%H:%M}:00' if lookup_type == 'second': return f'{dt:%H:%M:%S}' raise NotImplementedError(f'Unsupported lookup type: {lookup_type}') ```
`from django.utils import six` (by the way, try to do a few checks locally and not push a lot of changes to GitHub in quick succession since every push triggers a Jenkins build -- I canceled a few extra builds from this PR a couple hours ago)
Please wrap at 79 chars.
But it will still include m2m relations. I suggest something like this: ``` for field_name, *lookups in references: try: field = cls._meta.get_field(field_name) except FieldError: # handle missing field if not field.is_relation: # Only related fields can result in joins. continue if field.many_to_many or field.one_to_many: # Handle m2m / reverse ForeignKey if not lookups: # If it has no lookups it cannot result in a JOIN. continue # JOIN must happen at the first lookup. first_lookup = lookups[0] if field.get_transform(first_lookup) is None and field.get_lookup(first_lookup) is None # This would result in a JOIN attempt, emit a warning ```
`get_email_field_name()` is a class method so we can use: ```python self.assertEqual(AbstractBaseUser.get_email_field_name(), 'email') ```
This code isn't correct. (2, 7) is the check you want, and then with >= if I am not mistaken.
I would remove this docstring.
😃 Yeah, I can see that. But I was scanning the code and looking for the definition. I wanted to find all the helpers in one place. (As ever, there are different ways of wanting to read it. That's OK.) If you feel strongly you can leave it for now. Tim will have a look before merging it anyway so he can input.
```suggestion # Find migration. ```
no blank line after docstring
I presume who ever put it there had a different opinion ;) I would recommend to leave it be.
We should omit `default_bounds` when the default value is used: ```suggestion if self.default_bounds and self.default_bounds != '[)': kwargs['default_bounds'] = self.default_bounds ```
My recommendation was to make "`list` instead of `[]`" customizable in subclasses so you say have "use `dict` instead of {}` for JSONFIeld..
This could rely on tuple unpacking and there is no need to assign to `rows` above: ```python for key, value, expires in cursor.fetchall(): ```
no longer need trailing comma in tuple here and below I'd chop "In" from the message, otherwise it looks good.
I'm not sure what the use case "customizing the format of the list of strings" means. I think this would be sufficient: ``` Hook for customizing the delete process for the delete view and the "delete selected" action. ``` In my opinion, we don't need to repeat the docstring from `get_deleted_objects()`.
My preference is to describe the expected behavior in the docstring and include a ticket reference only if it's an obscure issue that benefits from the additional context of the ticket.
I'd use the `msg = '...'` style here to shorten this line.
This is not friendly for 3rd-party backends. We should use `connection.ops.max_name_length()` and generate names that are too long.
Single line looks fine here. For consistency with other code, I'd pass`epoch_seconds` as an arg.
I'm not sure we want to allow the hyphen, I thought this patch was partly there to avoid those in locale names.
Remove this and the following line, `_get_current_token` already sets `CSRF_COOKIE`
not sure there is a need to include the ticket in every test. Instead of "expect that", I would phrase it as "the error message should tell ..."
Thanks for confirmation.
The Python datetime module assumes a Gregorian calendar (https://docs.python.org/3.4/library/datetime.html#date-objects). We do not yet support other calendar systems in Django.
These lines could be removed or moved to the docstring or class-level
chop blank line
```suggestion ) ```
I'd make the settings more minimal, omitting things like 'context_processors' which aren't important for the test.
reason for not
put the trailing ) on the next line as done in `ValueError` below.
I would leave only `opt_name` and use `replace()` in `print()`, it should be more readable.
This function feels somewhat artificial. It seems to me that most of the problem solving in here is already solved on the ModelAdmin.
This should only be called when the Django test suite is running. Perhaps with an environment variable which `runtests.py` could set, unless we can come up with a more elegant solution.
Well `.all()` will definitely add a query because it will create a new `Queryset` without `_results_cache`.
What about defaulting to `NOW()` instead? This should be compatible with PostgreSQL and MySQL and that's what I would expect a `Now()` function to be doing.
`finally` will be executed anyway, was there `ImportError` or not, so autopep8 result will be not returned
Add trailing comma please. Include a trailing comma in cases like this so that if more items are added later, this line doesn't have to be modified again.
I'd use `join()` in both places: ```suggestion output += ''.join([ escape(c) if isinstance(c, str) else str(c) for c in self.children ]) ```
Not exactly, we only changed the `parallel` to `1` when it was not given. Please see an example call :point_up:
You want to filter by `table_name IN %` and pass `tables` in params else this will flush all tables instead of the ones specified by `available_apps`'s models.
It would be better if we could refactor the control flow so we don't have to repeat these lines which also occur after the last else statement in this file.
Well that's unfortunate. I see a few options. - Make the `python-memcached` client call `_deletetouch(expected=[b'DELETED'], ...)` directly. - Report an issue upstream to change the behavior of `delete` - Report an issue upstream to allow `delete` to accept a kwarg to change what gets passed to `expected`.
add trailing comma
`IF NOT EXISTS` is not necessary anymore, I'll remove it.
Please chop blank line.
Given that `integer_validator` stays at `\d` I wonder if this one shouldn't stay with `\d` as well. Semantically there doesn't seem much of a diff to me between a single integer and a list of integers that would explain the difference in the regex.
I'm a bit surprised if there aren't any existing file upload tests we could reuse. Maybe in tests/test_client_regress if not here? It would be nice to test that the upload works, not just that no exceptions are raised.
Oh, yes. We're not using pytest either. 👍
This is lifted from Python 3.10 so we should attribute appropriately and also ensure that we remove it when no longer needed: ```suggestion if PY310: from contextlib import aclosing else: from contextlib import AbstractAsyncContextManager # Backport of contextlib.aclosing() from Python 3.10. # Copyright (C) 2020 Python Software Foundation (see LICENSE.python). class aclosing(AbstractAsyncContextManager): """ Async context manager for safely finalizing an asynchronously cleaned-up resource such as an async generator, calling its ``aclose()`` method. """ def __init__(self, thing): self.thing = thing async def __aenter__(self): return self.thing async def __aexit__(self, *exc_info): await self.thing.aclose() ```
```suggestion "Using QuerySet.aiterator() after prefetch_related() is not supported." ```
```suggestion **kwargs, ```
I would revert this change.
I'd use "get" instead of "prepare".
Ah. Yes, quite right. So this could be simplified to: ```python return None if None in args else func(*args, **kwargs) ```
I believe you'll want to use `self.assertIs` so there are better error messages, and for consistency with other parts of the test suite.
``isinstance`` call would be better
actually, one needs to be a little more careful: ``` python conns = (connetions.values() if settings.DATABASE_ROUTERS else [connections[DEFAULT_DB_ALIAS]] if DEFAULT_DB_ALIAS in connections else []) ```
We should be able to use one of existing expressions.
To sum up, the following code should work, IMO: ```python def _set_pk_val(self, value): for parent_link in self._meta.parents.values(): setattr(self, parent_link.attname, value) setattr(self, parent_link.target_field.attname, value) return setattr(self, self._meta.pk.attname, value) ```
This line looks backwards... (If I add a `required` to the select, the HTML validator will trigger on the lack of the empty value.)
`# This backend is specified in the url().`
I think `name.rsplit('-', 1)[-1]` is easier to read.
It's not important for this test.
`group_by = list(self.select)`
And accordingly. ```python # Encode pixeltype into 4 bits with leading zeros. pixeltype = format(pixeltype, '04b') # Set flags with is_offdb, is_nodata, and reserved flags always set to zero. if band.nodata_value is not None: # Turn has_nodata flag on. flags = '0100' else: flags = '0000' # Convert to final integer number. pixeltype = int(pixeltype + flags, 2)
If it's not clear, my suggestion is merely to leave the original implementation of `_get_val_from_obj()` instead of changing it to `return self.value_from_object(obj)` and to change the deprecation warning/docs to avoid implying that the methods are completely identical in their behavior. I can finish this if you have given up on it.
Ticket number is unnecessary.
`E411` -> `W411`
I would rename this method to `assertCollapsed` to be consistent with the unittest assertions.
`self.actions` already contains action names so we don't need to wrap them in `get_action()`. Moreover for a nonexistent name it raises `TypeError: 'NoneType' object is not subscriptable`. We've already ignored them in `filter(None, actions)` so it's safe to use `self.actions`. I will adjust this.
Add a trailing comma.
I am not sure this change is beneficial.
No need to call super in setUp/tearDown
Might as well verify the output with `assertEqual` too. It would be appropriate to have a Trac ticket too.
IMO, the test is simple enough that the docstring isn't needed.
Do we want to return even before conditionally setting `Content-Length`? (I didn't mention `Date` as it's going away in #7392).
Chop blank line.
This file isn't following the indentation style of other tests. Please use hanging 4 space indent.
`self.assertTrue(books and all(book.no_value is None for book in books))`
Chop blank line.
This sounds a little formal, cold and computery. "Password reset sent" is possibly misleading, I'm not sure what would be better wording.
Wrap at 79 chars.
We should add the same to the `django.core.serializers.xml_serializer.Serializer.handle_m2m_field`.
If you can describe the issue instead of simply "Regression test for #25389" that saves looking up the ticket to figure out the issue.
How about something like "assertTemplateUsed and assertTemplateNotUsed are only usable on responses fetched using the Django test Client."
Please chop this blank line.
The parenthesis look unnecessary
Should be `application/json`
Shouldn't we use `as_postgresql` here to make sure a `NotImplementedError` is raised on backend with a missing implementation. Also you should replace `qn` by `compiler`.
It seems this method will not allow for 3rd party fields to define their own rules. This might be OK for a first cut, but we might later on want to have something better. I wonder if we could just have a cast_sql with the following API: ``` def cast_sql(self, input_type, output_type): """ Returns a cast expression from input_type to output_type. For example, if input_type is INTEGER and output_type is FLOAT, then returns CAST(%s AS FLOAT) for PostgreSQL. The return string must have %s placeholder. This will be filled with the input expression, which is of type input_type. """ ```
That's too naive. It has to consider whether or not `self` matches the condition in the first place.
I'd avoid passing `ascii_uppercase` as an argument here and just use the sequence in the `prefix_gen` method.
I think this should probably be `"'ordering' refers to the nonexistent related field or lookup '%s'." % field` to match the other error messages.
I would recommend putting this inside a `clean` function, not in save.
If the override is for the whole method, just use the method decorator.
I think it would be better to make a single check e.g. ```python self.assertEqual(check_model_name_lengths(), [ checks.Error( 'Model name is too long.', hint='Model name should not be longer than 100 characters.', obj=ModelWithNameOfOver100CharactersModelWithNameOfOver100CharactersModelWithNameOfOver100CharactersModel, id='contenttypes.E005', ) ]) ```
In general, I find boolean flag parameters that fundamentally change the operation of a function to be an API smell. (Not sure if there's a name for this principle, but it's often referred to in discussions of Python stdlib APIs.) As an alternative, I think it would be cleaner to have a separate utility function that takes either a string or a model, and returns a string, and then in the place where you'd use the `always_text` flag, wrap the call to `resolve_relation` with a call to that utility. (Yes, that's an additional function call, but we first optimize for readability and nice APIs, and then optimize for performance when we have data showing where our bottleneck is.)
test failure says this should be `(None, None)`
chop blank line
We don't modify `creation` so there is no need to create a new one.
As far as I'm aware, assigning variables to functions is not sth unusual :thinking: > If you're happy to do this I can squash everything down - or if you wanted to do it Please do. Also, `has_transforms` is probably more accurate than `has_lookups`.
How about removing the `GIN_` prefix? It's already defined on the `GinIndex` class.
The map should get automatically populated from the provided models and not specified through initialization as that's an internal data structure.
I don't have a strong opinion on this. When it was like that before, I didn't really like the blank browser popping up before the tests started to run. If we change it though, we need to include the original exception in the error message that's reraised. I think the current simple approach is okay.
This function does two things: 1. Parse labels 2. Re-raise `LookupError`s as `CommandError` I'd probably handle the latter step in `loaddata.py` and `dumpdata.py`. Also, I'm not sure whether changing output of a command is backward incompatible or not(In CPython it's not for example) . I don't think many people rely on exact output of Django management commands.
We can avoid the backslashes in `[…]`, even for `^` as long as it isn't first to avoid turning it into an inverse character set (`[^…]`): ```suggestion pattern = re.sub(r"(\\[bBAZ]|[?^$])", "", pattern) ```
We can use the `maxsplit` argument: ```python header_value, *_ = split(",", 1) return "https" if header_value.strip() == secure_value else "http" ```
[`get()` takes a default to return as a second parameter](https://docs.python.org/3.7/library/stdtypes.html#dict.get).
An alternative is to make the signature `__init__(self, relation_name, *, condition=Q())` to force passing the `Q` as a kwarg. This could be advantageous if more kwargs are added later.
Please wrap this output (and similar outputs below) at 79 chars.
This test needs to cover the case where this line is inadvertently removed (i.e. should test that the extra context values can be used in the email template). Also, `extra_context` should be merged with `context`, e.g. `context.update(extra_email_context)`.
If that is indeed a bug, maybe we should have a test that could catch it 🤔 A test where we should create the missing index even if an index with an expression exists (but with a first field name that doesn't match the dropped index)
Might want to account for the possibility of a custom manager with something like `self.__class__._default_manager.normalize_email`.
This can be moved to the very beginning.
We should also assert that the connection in the parent/current process remains usable. ```suggestion self.assertIs(connection.is_usable(), True) ```
single line is fine
chop the second comma
While you're around, can you use the following style: ``` python return TemplateResponse( request, self.change_user_password_template or '...', context, ) ```
I think the motto apply in the case where you let the exception propagate, when you catch it anyway I see no harm in using `attrs.pop('required', None)` instead.
remove extra newline
not Python 3 compatible
Probably we should also allow for a `list` to do not create any regression, and raise: ```python raise ValueError( 'The ADMINS setting must be a list or tuple containing two values.' ) ```
Are you sure this change is required? From what I can see the `Exact` lookup will make sure to call `IntegerField.get_prep_value` on its right hand side value.
I think we can add ``` sym_friends = models.ManyToManyField('self', through='SymmetricalFriendship', symmetrical=True) ``` to the `PersonSelfRefM2M` without creating a new model.
Did you consider calling this verbose_name? It could be confusing have the same name (`'class'`) in codename/name that get different values.
Since you made it a `property` you can just use `self.level_tag` where `label_tag` was used before (no need to create a temporary variable).
Or use the `self.settings()` context manager if you can't decorate the class since you have a loop.
need to use `from django.test import mock`
chop parenthesis cause it's a property now
don't seem like we need `client=True` -- how about `getattr(urls, 'handler%dxx' str(status_code)[0])`
`_delete_index_sql()` accepts `sql` argument, so you can use `super()._delete_index_sql()`, e.g. ```python def _delete_index_sql(self, model, name, concurrently=False): sql = self.sql_delete_index_concurrently if concurrently else self.sql_delete_index super()._delete_index_sql(model, name, sql=sql) ```
I'd remove this docstring.
We allow up to 119 characters, so this doesn't need to be wrapped. ```suggestion def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False): ```
Wouldn't this approach fix the slicable fields to just these types? A mixin along with `slicable = True/False` on `F` may be an approach. Besides, I believe the policy is to keep `django.contrib.postgres` as separate as possible.
I moved this test to the `tests/invalid_models_tests/test_models.py`.
do you think a ticket to allow using `set_script_prefix()` as a context manager would be useful? (if only in tests)
Ah, I missed that because I looked in the man page, not at `--help` output, and forgot it defaults to the current user's username. And, yes, we'd rather get a chance of connecting to a known, valid database rather than a failure to connect because the user's database doesn't exist (which is highly likely).
Could you wrap it according to PEP8. I know this style is heavily used in this file, but we should change that eventually. ``` python res = self.client.post( '/edit/author/%d/update/interpolate_redirect_nonascii/' % a.pk, {'name': 'John Doe', 'slug': 'john-doe'} ) ```
> Actually, I think we'd want def action(function=None, /, *, permissions=None, description=None): to enforce that function is positional-only and description and permissions are keyword-only. Ah yes, my bad! Gosh these separators are a bit tricky :)
> We define constants like You don't need to define your own constants. You can use e.g. `logging.INFO`, etc. if you need to. I would not modify `DiscoverRunner.__init__()`. Changes can be restricted to the new `DiscoverRunner.log()` using the current `self.verbosity` attribute.
[...] remove matching rows **for rel_b**.
According to http://docs.oracle.com/cd/E11882_01/server.112/e41084/functions213.htm#SQLRF06142 this `if` block may be redundant (it mentions specifically `CLOB`, not `NCLOB`, but it would be surprising if they differ)
Better yet: `empty_label or VERBOSE_BLANK_CHOICE_DASH`
This will pass if you have a proxy for a concrete child model and try to access the parent model's custom manager. You need to check if `cls` is a direct proxy for `self.model`.
You can check `str(response.context['exception'] is '"No sitemap available for section..."` to improve these 404 tests.
`Abs` is already proposed in #9577.
`timestamps_closed_bounds` field is defined with closed bounds in `default_bounds` so the current name is good, IMO. This test is to ensure that `default_bounds` doesn't impact open bounds pass in `DateTimeTZRange`.
I had a similar thought.
I think I mentioned this before -- I find this name rebinding a bit odd. I'd like it better if the `FieldInfo` from `base.introspection` was imported as `BaseFieldInfo`.
I don't think this test demonstrate _why_ this feature is required as this test passes with `exclude(id__in=[4, 5, 6, 7, 999])` and differences between both lookups is the main selling point of the feature.
```suggestion """PO file is properly updated when new changes are detected.""" ```
... as null=True when they aren't.
```suggestion raise NotImplementedError('Subclasses must implement create_connection().') ```
This can fit on a single line.
We're tending towards single quotes everywhere so when things get touched best to update :)
I would not allow customization of `n`, `r` and `p` here (other hashers do not allow that either).
Why is it `ClearableFileInput` and not `FileInput`? Tests are also required.
Okay, perhaps it could be simplified slightly to something like: `Use ContentType.objects.get_for_id() so that lookups are cached...`
Both `local_setter` and `remote_setter` could be defined outside the loop and `remote_setter` could be closed over `name` with a `partial` e.g. ```python def local_setter(obj, from_obj): ... def remote_setter(name, obj, from_obj): setattr(from_obj, name, obj) for name in list(requested): ``` ```suggestion 'remote_setter': partial(remote_setter, name=name) ```
No need to push a change for this and trigger a CI build, just leaving a note to not commit this line change.
Use `[]` (it's actually faster!)
@arthurio I think doing the clone here makes sense. You could have conditionally done it in `emit_post_operation_signal()` only if there was some `post_operation` receivers to avoid the `clone()` if it wasn't the case but given we're planning to add a few receivers for `auth` and `contenttypes` and at least one of them is going to be installed in 99% of projects I don't think it's worth doing the optimization.
I guess you copied form existing tests, but it would be nice to be consistent in use of quotes (I'd go with single here). Also I think we could omit the blank lines.
It's an attribute so folks can try to change it dynamically. I would add `if self.default_bounds and ..`
Just state the expected behavior by chopping "assert that..." since all tests assert things.
No need to call `super()` in setUp/tearDown.
I think it wouldn't hurt to consistently add it there too.
```suggestion 'ignore_conflicts and update_conflicts are mutually exclusive.' ```
This section doesn't seem so efficient as we're iterating the parameters twice. It's also a bit difficult to understand. I played and came up with something like the following: ```python def decorator(func): lazy_func = lazy(func, *resultclasses) first_parameter = None has_multiple_parameters = False for parameter in inspect.signature(func).parameters.values(): if first_parameter or parameter.kind in (parameter.VAR_POSITIONAL, parameter.VAR_KEYWORD): has_multiple_parameters = True break else: first_parameter = parameter if has_multiple_parameters: def wrapper(*args, **kwargs): if any( isinstance(arg, Promise) for arg in itertools.chain(args, kwargs.values()) ): return lazy_func(*args, **kwargs) return func(*args, **kwargs) else: def wrapper(*args, **kwargs): if (args and isinstance(args[0], Promise)) or ( first_parameter.name in kwargs and isinstance(kwargs[first_parameter.name], Promise) ): return lazy_func(*args, **kwargs) return func(*args, **kwargs) return wraps(func)(wrapper) return decorator ``` A few things to note: - Only define the wrapper if we're actually going to use it. Before, both were being defined and then one was being selected. - It is only necessary to look as far as the second parameter. If there is more than one, we have multiple arguments. If the first is `*args` or `**kwargs` we have multiple arguments. - We can tell whether we're looking at the second parameter if we have set `first_parameter` which nicely avoids the need for `enumerate()`.
Shouldn't this be writable? ```suggestion client = self.get_client(None, write=True) ```
I added this hook in #11471.
Ok, let's change this to: ``` def as_sql(self, compiler, connection, function=None, template=None, arg_joiner=None, **extra_context): ``` You'll need to conditionally add function to extra_context before merging it with self.extra: ``` if function is not None: extra_context['function'] = function arg_joiner = arg_joiner or self.arg_joiner template = template or self.template ``` etcetera. The docs for `Func` will need to call out the extra key word arguments for as_sql specifically.
Perhaps `.message()` could be done on the previous line after the ) since the `email` variable is otherwise unused.
If this file is deprecated, might as well revert the whitespace changes to keep the diff cleaner.
I feel like you're just testing argparse here, and this test can be removed. We don't test parsing any other arguments, since we can assume argparse works as advertised.
`CharField` should only accept strings, not integers. This should be `choices=[('1', 'One'), ('2', 'Two')]` and then there is no issue.
This should likely use the `storage.exists()` method.
Yes they do, but I think on restarting and being presented with confirm on top of a blank screen, most people would just click "yes, resubmit".
I think there's little need to keep this -- I don't think any other checks are controlled by DEBUG.
Trailing dot is missing.
Best to make it a separate commit for clarity.
What about having `request` as a required positional argument? Or, if it is to support calls such as `view = views.CustomTemplateView.as_instance()` (no arguments), then what about initializing request like `if request is None: request = RequestFactory().get('/fake')`
Now you're using `subTest`, the docstring isn't quite right.
To avoid the index name, how about this: ``` index = {} for key, val in constraints.items(): if val['columns'] == ['headline', 'pub_date']: index = val break self.assertEqual(index['type'], 'btree') ```
You risk getting this excerpt optimized like this: ``` if any(ti.name == table_name and ti.type == 'v' for ti in connection.introspection.get_table_list(cursor)): constraints = {} else: raise e ``` (or similar, modulo indentation) by our idiomatic code wizards :smile: . See e.g. #9493 and #9532
Sorry. 😬 I thought they made more sense together, but let's go with what Tim said. (Would have needed a full-stop anyhow...)
`.keys()` can be removed throughout ala 21046e77734278cea871dce922220bf29aa5b7b4.
> Why? 🤔 Do you mean that get() shouldn't be called in post()? We use this pattern in many places and I don't see anything wrong in it. Okay, maybe I'm not used to common flows in class-based views. > Is it not already applied when next_page is set? Yes it is applied in that case. Still, a user could: 1. Click "logout", see the "logged out" page 2. Open a new tab and login 3. Restart their browser 4. The browser resubmits the "logout" tab, and the user is logged out again. I guess this pattern was here before, and this could be a separate issue.
One thing that worries me here is that it'll discard any `kwargs` so if `output_field` is provided, since we allow it to be passed as a positional argument it will be lost. e.g. `Subquery(queryset, models.BooleanField())`.
Yes, much better, thanks.
I would remove this docstring.
Thanks, I've checked only `annotations` and `aggregation` tests.
missing newlines (please check your code with flake8)
This can be single-lined.
Good catch, thanks. I will fix this
We could optimize this a bit: ```python if not self.prepare_rhs or hasattr(self.rhs, 'resolve_expression'): return self.rhs if hasattr(self.lhs, 'output_field'): ... ```
Please use `LOOKUP_SEP` from `django.db.models.constants` instead of `'__'`.
format used by DjangoJSONEncoder is
```suggestion cache.clear() # Avoid the failed login delay in the next test. ```
I forget the reason for that restriction. What I meant was something like: ``` python def assertDefault(field, field_name, expected_default): with connection.cursor() as cursor: editor.add_field(Author, field) cursor.execute("SELECT %s FROM schema_author;" % field_name) self.assertEqual(cursor.fetchall()[0][0], expected_default) ```
Sure, if you can provide a patch in another ticket, it would merit consideration.
I wonder if we could add a `SearchConfig` expression :thinking: (maybe a subclass of `Value`): ```python class SearchConfig(Expression): def __init__(self, config): super().__init__(output_field=None) ... def as_sql(self, compiler, connection): ... return '%::regconfig', params ``` This should simplify everything.
OK, we need it :+1:
Also the `%s_id` is probably going to break for fields that define different `db_column`s. This wasn't an issue before because this branch could only be reached with auto-created intemediary models but now that we allow all forms of `through` we should use `attname` or directly `*_name` here.
`"""` -> `'` etc.
You're welcome. Hmm, I see. From my perspective, firstly I think that the extra parentheses make it less readable if another call is then chained. Secondly, using `/` and `.joinpath()` both call `.make_child()` under the hood, but using `.joinpath()` can combine many parts whereas `/` can only handle one. The call overhead for building long paths is not insignificant. In general, using `/` is fine for most cases where it doesn't overly affect readability or performance.
right then I guess this import sequence is not too bad, it's already something we do in tests in a few other places when dealing with optional libraries.
Chop blank line.
This message can be condensed onto one line.
include trailing commas
Interesting, yes -- `_is_callback()` is only used by the admindocs.
And I'd put the actual method after `_check_unique_together` too, to match the order above :)
I don't think we need these two lines: ```python if not self._is_db_exists_error(e): raise ``` because if an exception other than `"database exists" (1007)` is raised in `super()._execute_create_test_db()`, then tests will be stopped earlier by `sys.exit(2)`.
`ExpressionList` is a private API, you will not find it in docs. `Expression` is not private, but it's not usable on its own, you need to create a subclass.
@PluckyPrecious Can you confirm that `DECIMAL_SEPARATOR` is a comma? I found that it's probably a dot `'.'` :thinking:
Ah, CSRF changing on logout saves us, of course. Brilliant. Thank you for testing! Not the kindest user experience but at least nothing breaks, so good from me.
I guess `collapse` isn't needed, is it? Then you don't need the selenium test change.
Needed? No tests are failing with it removed.
@pydolan Thanks for update :+1: I'm sorry but I think that this fix doesn't qualify for a backport based on our [supported versions policy](https://docs.djangoproject.com/en/dev/internals/release-process/#supported-versions).
I guess the `ipaddress` module does these things? I'm not sure if it's behavior should be reiterated in detail.
This needs clarification about what an "invalid string" means. It could probably be a single sentence if you phrase it like "SECRET_KEY must be ..."
Also this doesn't need to be a list. A generator will do, since you loop only once over the result.
```suggestion return settings.DEFAULT_AUTO_FIELD ```
point -> points
Ah I see what's happening. Since MyISAM doesn't support transactions (it basically ignores any `BEGIN` and `ROLLBACK` statement and is always auto-commit) then `TestCase` doesn't perform any form of transaction wrapping and thus the `select_for_update` call is not wrapped in an implicit `atomic` block like it normally is. I see a few options: 1. Leave things as they are 2. Require that this test `supports_transactions` 3. Adjust the compiler to not raise this error when `not connection.features.supports_transactions` Ideally we should raise an error when `select_for_update` is attempted to be used on a backend that doesn't support transactions (as it's a noop) but that would be backward incompatible.
No need for the list comprehension here, you can drop the `[`/`]`.
Omit 0/1. There was a past commit that removed all usage of that since it just adds verbosity.
Are you sure these are necessary? I think they can be removed because `Field.get_lookup` respects MRO and these fields extend the appropriate `IntegerField` since 21e559495b8255bba1e8a4429cd083246ab90457.
single line is fine
You could put both conditions on one line here with an `and` statement.
I think we should go with what we do in lines 170 following: ``` python if hasattr(response, 'render') and callable(response.render): response = response.render() ```
Also, I don't think it's a complete solution as annotations on the LHS still don't work properly, see failing test: ```python def test_exclude_nullable_fields_annotation(self): from django.db.models.functions import Abs number = Number.objects.create(num=1, other_num=1) Number.objects.create(num=2, other_num=2, another_num=2) self.assertSequenceEqual( Number.objects.annotate(x=Abs('another_num')).exclude(other_num=F('x')), [number], ) self.assertSequenceEqual( Number.objects.annotate(x=Abs('another_num')).exclude(num=F('x')), [number], ) ```
This should still be handled by `default_alias`. Something like: ``` @property def default_alias(self): if len(self.source_expressions) == 1 and hasattr(self.source_expressions[0], 'name'): return '%s__%s' % (self.source_expressions[0].name, self.name.lower()) raise TypeError("Complex expressions require an alias") ```
Yes, that feature request is tracked in https://code.djangoproject.com/ticket/19527.
It's true, but decimal and datetime are much more popular.
I guess this is like `assertEqual` where the "Equals" version is a deprecated alias.
I'd suggest not changing these as it's not related to the patch.
Ahh didn't notice the `create_user` call, sorry for the noise.
```python total_ordering_fields = {'pk'} | { field.attname for field in self.lookup_opts.fields if field.unique and not field.null } ```
No need for trailing , in lists. That only applies to tuples. You can use lists throughout the patch.
Interesting. This is definitely the thing to do since `build_absolute_uri` already returns an _uri_ but I assume the removal of the double escaping might generate a new key. Not a big deal but maybe something worthy of a release note.
`User.objects.latest('pk').pk` would look better IMHO.
I dislike this. Can we not do the check in the view but outside, please. This is how it's done for every other admin view. And until the admin is rewritten I'd rather follow one pattern not two.
You can you use the `cached_property` decorator here.
```suggestion # RemovedInDjango50Warning: when the deprecation ends, remove is_dst # argument. def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=timezone.NOT_PASSED): ```
I'm theoretically reluctant to this being a global module rather than something tied to the User model. In practice AUTH_USER_MODEL is already a global singleton so this doesn't change the picture. (Sorry if I brought this up before.)
These strings should not be translated like this as they are used to generate the value for `Permission.codename`. This means that the values could be stored in the wrong language breaking permissions in the admin site.
``` class Topping(models.Model): name = models.CharField(max_length=20) def __str__(self): return self.name class Pizza(models.Model): name = models.CharField(max_length=20) toppings = models.ManyToManyField('Topping', related_name='pizzas') ``` It looks like these existing models are equivalent. If needed, you can create a proxy model of one or more of them as needed, then register those with a separate ModelAdmin. (15b465c584f49a1d43b6c18796f83521ee4ffc22 is a past example of doing that.)
I think we should raise `BadRequest` instead of `PermissionDenied`, because missing parameter in `GET` has nothing to do with permissions. Maybe, I'm picky :shrug:
`source` will be `None`.
I think there's no reason to prefer `smart_str` over `force_str` in these tests. Revised existing usage in https://github.com/django/django/pull/6290.
What I mean is that it should not be allowed to pass expressions of the form `Lower('foo')` (reference to a field) but your patch currently allows that and has inherent complexity because it does (e.g. `resolve_expressions`). Only expressions that resolve to SQL literals or functions with all of the arguments resolving to SQL literals (on backends that support it) should be allowed here. Feels like we need a backend hook similar to `supports_expression` (e.g. `supports_field_default_expression`) that could be called by a check and called again on compilation attempts.
Would be handy if this tells which was was empty. Or change the message to - "One of the submitted files was empty".
Of course, I like a lot more the result after the PR. It's just a bit unfortunate if it will trigger some "fake" migrations (which I'm not sure it will, it was just a guess).
This should be `assertTrue()` as `assert_()` is deprecated.
``=`` -> '=' ``==`` -> '=='
We standardize on `# -*- coding: utf-8 -*-`.
Timezone support is disable by default and we use naive datetimes in many tests. I think we can leave it.
If you add `error_to_raise = None` as a class attribute, you can do `if self.error_to_raise is not None`, which is a little nicer.
I think a better wording would be: "Backwards compatibility for storage backends without support for `max_length` will be removed in Django 2.0."
I'd put `=self.get_resultclass()` and skip the intermediate variable.
This test doesn't fail either in current code. I suggest to simply drop it. No need to update the pull request, I'm going to commit the patch soon.
That seems a bit brittle wrt to `PositiveBigIntegerField` subclassing or subclasses. What about using `__init_subclass__` to determine it from the MRO at class creation ```python class PositiveIntegerRelDbTypeMixin: def __init_subclass__(cls, **kwargs): super().__init_subclass__(**kwargs) if getattr(cls, 'integer_field_class', None) is None: integer_field_class = next(( parent for parent in cls.__mro__ if issubclass(parent, IntegerField) ), None) ``` and then ```suggestion return self.integer_field_class().db_type(connection=connection) ```
Why 403 instead of 404 (in all occasions, not just this one)? If there is a good reason, maybe a commend would be helpful.
```suggestion if ( not self.timezone or _datetime_ambiguous_or_imaginary(self.data, self.timezone) ): ```
I think `get_internal_type` is better to use.
chop blank lines
How about `SlicedF`? It's not 'sliceable' at this point, it has actually been sliced.
`time.perf_counter()` should be used for best resolution
@orf both work, `raise ExceptionType` is common when you don't want to specify a message.
I don't get yet in which cases this occurs / why we need this. Shouldn't `quote_name` only be called for columns and table names and such? Calling it with an expression seems wrong.
the ticket reference doesn't seem necessary since the expected behavior is straightforward
I'm not sure we need to do this as the default behaviour. A subclass can do it's own `.copy()` (or whatever other method you want to do to build the state)
Thanks. You're right too much `and` 😄. The second version is more readable for me.
Don't remove newline at EOF (check code with flake8)
And this one.
Unnecessary whitespace change.
Indexes on `TextField`s are not supported on Oracle (see `supports_index_on_text_field` feature flag), that's why it fails. Including a `TextField` in this index is not crucial so I will remove it.
Seems okay to me.
`Klass` → `model`
Actually `e` is unused here, may as well remove it.
I moved this to a separate PR, see #15426.
We don't need two slugs for a regression test. I would leave only one, e.g. ```suggestion fields = ['name', 'pubdate', 'slug1'] prepopulated_fields = {'slug1': ['name', 'pubdate']} ```
No, I mean that `clean_<fieldname>()` should take care of it. https://docs.djangoproject.com/en/stable/ref/forms/validation/
We can immediately return a supported language instead of building a temporary list.
What about making it a `CITextField(models.Field)` so it's usuable as is? It would still be reusable for subclassing.
flake8 doesn't like the hanging indent here.
Do we need to use `Empty`? We will not hit `__reduce__()` with: ```python def __copy__(self): obj = type(self)() obj.__dict__ = self.__dict__.copy() obj._state = copy.copy(obj._state) obj._state.fields_cache = {} ```
Does it work now? I wouldn't hesitate to simplify fix for 24974.
URLconf is "attribute" the correct term? I think of it as a "module-level variable."
do you think it would make sense to do something like: ``` DEFAULT_LEVELS = dict((v.upper(), k) for (k, v) in DEFAULT_TAGS.items()) ```
```suggestion with self.subTest(s=s), with self.assertRaisesMessage(ValueError, msg): F('name')[s] ```
Maybe: ``` # Don't override a get_FOO_display() method defined explicitly on # this class, but don't check methods derived from inheritance, to # allow overriding inherited choices. For more complex inheritance # structures users should override contribute_to_class(). ```
You are shadowing the original exception here, which could be useful for debugging. I am also not use your exception adds a lot more helpful context. Capturing `Exception` or `BaseException` is usually a red flag, as the underlying error could be anything. I would suggest removing the whole exception handling part. After that, it stands to reason, if you need to new two line method. If not, we should at least include the original exception. ```suggestion try: cls.add_to_class('id', pk_field) except Exception as e: raise FieldError(f"Adding the automatically gennerated primary key field to {cls.__qualname__} failed.") from e ```
Looks like you forgot to change the operator: ```suggestion return Q(self) ^ Q(other) ```
I think `NamedTemporaryFile()` supports context managers, doesn't it. You should be able to use ``` python with tempfile.NamedTemporaryFile(...) as temp_pgpass: # Do some magic ```
```suggestion self.assertFalse(Question.objects.exists()) ```
If we have to multiline, usually we go with hanging indent like this: ``` call_command( 'loaddata', ... ... ) ```
You can pass `set()`, no need to create a list to initialize an empty `frozenset` (or `set`), it be great to assert the return value as well.
Please use hanging indent to make better use of line lengths: ``` python inline_re = re.compile( r"""^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))""" ) ```
I'd use a name like `assertBackendInSession`.
> I think the test for using a related field without a transform already exists - isn't that what `test_joined_annotation` does? Ahh, yes :+1:
Please add a trailing comma.
I admit Django still has much code looking like that, but it should be safe to simply use `if options['empty']:` below without first pushing the result in `self`. Having the value on `self` might make sense when we want to use the value in other methods. Same for `options.get('help', False)`, as we are using the parser in both `call_command` and `run_from_argv`, we can be sure that `'help'` is in the options dictionary, so `options['help']` is fine.
Use `{'default': {}}` for clarity.
It feels like something is missing here. 1. `ids` is now a list of list of returned values, so the name is misleading. 2. Setting all values returned should also happen for `objs_with_pk` so that non-id/pk values are correct. For that matter, do we also need this to happen for `.bulk_update()`, `.get_or_create()`, and `.update_or_create()`? I've not looked into that in too much details and maybe I'm getting ahead of myself with these as I guess that some of these would be using `RETURNING` from `UPDATE`. (We could potentially look at supporting that, and thus generated/virtual fields next cycle...)
It seems much simpler to split `as_json` into two functions, one which returns a string with JSON, and another which returns a json-serializable structure; rather than putting a new flag on this.
Django's code style says to use complete sentences, so capitalize and end with a period.
We should restore this check because in the current version `LiveServerTestCaseSetupTest` doesn't test anything, but I'm not sure how to do this :thinking:
We could keep tests more DRY and use loop (maybe with `subTest`) e.g. ```python def test_formsets_with_order_custom_widget(self): class OrderingAttributFormSet(BaseFormSet): ordering_widget = HiddenInput class OrderingMethodFormSet(BaseFormSet): def get_ordering_widget(self): return HiddenInput for formset in (OrderingAttributFormSet, OrderingMethodFormSet): ArticleFormSet = formset_factory(ArticleForm, formset=formset, can_order=True) ... ```
I'd rather a setUp method and keep the assertions in separate tests since they're not dependent on each other.
I'm pushing an update to this... can you refactor the rest? Also, maybe it's worth moving the non-query tests to a separate SimpleTestCase that's not decorated with skipUnlessDBFeature.
I would chop this sentence, maybe: ``` # Salt with an entropy of at least `salt_entropy` bits. ```
Could you wrap this as ``` python if2 = models.IntegerField( validators=[validators.MinValueValidator(10), validators.MaxValueValidator(100)] ) ``` please.
`must_remain_connected()` is called only here maybe it's better to pass `in_negated` instead of `negated` and don't calculate it twice :thinking:
Yes, we need it, sorry for the noise https://github.com/django/django/pull/14494#discussion_r657703518.
We can move this check to the `BaseDatabaseOperations.window_frame_range_start_end()` and use a new feature flag in it.
Oops, this should be `set()`. None of the subclasses implementations call `super()` which perhaps isn't necessary but I want the CockroachDB backend to call `super()` to get any skips/expected failures from the PostgreSQL backend (which the CockroachDB inherits),
Shouldn't you exclude `self.rel.through` from here? Else your automatically created table will always be present in `registered_tables`.
Please use `with translation.override('xyz'):` instead of the `activate`/`deactivate` couple.
``` py logger.warning("%s - %s", template_name, e) ```
Not needed due to `arity`.
why not `assertFalse` ? ```suggestion self.assertFalse(any( 'CREATE TABLE' in query['sql'] for query in ctx.captured_queries ) self.assertFalse(any( 'DROP TABLE' in query['sql'] for query in ctx.captured_queries )) ```
I guess it could be better as a database feature in case any third-party databases also have that limitation.
As above: no need for casting.
ditto ```suggestion ```
I think a little clearer if less repetitive: ```suggestion args.append('-m') if (modspec.name == "__main__" or modspec.name.endswith(".__main__")) and modspec.parent: args.append(modspec.parent) else: args.append(modspec.name) args += sys.argv[1:] ```
hmmm.. now I think I'm wrong, you want to only have the first partial func.. `func.func` shouldn't anyway be another partial or else that would be problematic I think, as views have to return something else.. Sorry for disturbance ;)
IMO this change can be reverted.
Line 41. By the way, it would make the patch a bit easier to review and see what has changed if you didn't reorder methods (e.g. set is moved above _set) and delete above _discard). Perhaps the reordering could be done in a separate commit afterwards if it's needed.
Got it. Thanks
Only option would be to not test it I think… 🤔
I think we'll want to use `Table` and `IndexName` https://github.com/django/django/blob/65a9d0013d202447dd76a9cb3c939aa5c9d23da3/django/db/backends/base/schema.py#L1033-L1042 Otherwise column renames and deletion in the same migration will break.
Please remove `:` from the end of line.
I still don't understand why `key is not None` is not working here.
We usually define these on `DatabaseWrapper` objects, that is `django.db.backends.sqlite3.base.DatabaseWrapper`. You'll be able to refer to it using `self.connection.sqlite_version`.
Can we limit this to `ImportError`? I think the part about "corresponding WebDriver not installed" is obsolete now since there's not more attempt to instantiate it.
A few observations: - There is no need for the temporary variable. - We cannot just check if falsy as the value could be `0` or `False`. - Compare to a sentinel object to ensure that `None` isn't passed. (I think we can re-use `NOT_PROVIDED` here.) - Add a period to the end of the exception message. ```suggestion if kwargs.pop(field.name, NOT_PROVIDED) is not NOT_PROVIDED: raise TypeError( f'{cls.__name__}() got both positional and keyword ' f"arguments for field '{field.name}'." ) ```
It's probably not a very common use case, but if a cache table is created and then another one is later added, running `createcachetable` again will throw an error because the first table already exists. I think it would be nice to handle that case.
IMO we don't need `databases` here.
I think you should drop the semicolons at the end of SQL statements.
you can use django-box, It is very useful to run tests with other vendors. (https://github.com/django/django-box)
```suggestion return '1' if self.timezone.dst(self.data) else '0' ```
It'd be great if this was implemented as an `Operation` method that defaults to returning `None` and overridden when available. It would make testing easier and remove this chain of instance checks.
This import is not used.
We should state clearly what to use when deprecation ends, there is a risk that we'll remove logging of suspicious session: ```python def decode(self, session_data): try: return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer) # RemovedInDjango40Warning: when the deprecation ends, replace with: # except signing.BadSignature: # logger = logging.getLogger('django.security.SuspiciousSession') # logger.warning('Session data corrupted') # except Exception: # # ValueError, unpickling exceptions. If any of these happen, # # return an empty dictionary (an empty session). # pass # return {} except Exception: return self._legacy_decode(session_data) ```
Either store `content_type` in a local variable or only perform an `in` lookup in `self`: ```python content_type = self.get('Content-Type') if content_type: return '<%(cls)s status_code=%(status_code)d, "%(content_type)s">' % { 'cls': self.__class__.__name__, 'status_code': self.status_code, 'content_type': content_type, } ```
IMO it would be better to use `logger.debug`.
IMO we should add to operations a new method e.g. `query_sql()` with base implementation (`BaseDatabaseOperations`): ```python def query_sql(self, sql, params): return sql % params ``` and use `mogrify()` on PostgreSQL: ```python def query_sql(self, sql, params): with self.connection.cursor() as cursor: return cursor.mogrify(sql, params).decode() ```
We shouldn't mix a new check with existing tests. I would move it to a separate method.
single line looks more readable here
```suggestion """ Upon first access, replace itself with an empty dictionary on the instance. """ ```
```suggestion @ignore_warnings(category=RemovedInDjango50Warning) ```
Chop this docstring.
True, but I think we should take keys into account instead of adding `error_dict`/`error_list`.
Let's make this method name resemble the SQL that will be generated. Also, `update_fields` shouldn't have a mutable default. And `unique_fields` should be here too, not masked in `**kwargs`? ```suggestion def on_conflict_suffix_sql(self, opts, fields, on_conflict=None, update_fields=None, unique_fields=None): ```
You don't need a list comprehension here -- `join` accepts any `iterable`: `'\n'.join(query['sql'] query in self.captured_queries)`
```suggestion template_name = 'forms_tests/form_snippet.html' ```
This test needs to be made to pass or skip when the connection interprets_empty_strings_as_null -- skipIfDBFeature is your friend (on Oracle, line 149 will raise an IntegrityError).
```suggestion yield from adjustable_path_results.values() ```
I'm not sure. A - is much more likely to be an error than a negative number. I can't remember seeing a URL with a negative number.
We can use `create_a()` hook, e.g. ```python def test_protect_path(self): a = create_a('protect') a.protect.p = P.objects.create() a.protect.save() msg = ( "Cannot delete some instances of model 'P' because they are " "referenced through protected foreign keys: 'R.p'.", ) with self.assertRaisesMessage(ProtectedError, msg): a.protect.p.delete() ```
Chop blank line.
```suggestion raise TypeError( 'Cannot call QuerySet.contains() after .values() or .values_list().' ) ```
It seems odd to keep `'point'` here, even though it probably doesn't make much difference. ```suggestion context = widget.get_context('polygon', None, None) ```
I'm hesitant to remove "ManyToManyField" in the message since that's the common case. I'm not sure if adding "or a field with many_to_many=True" to all the messages is worth the additional verbosity.
Is this still simluating a read-only database if the mocking is removed? Chop "Ensure" per https://code.djangoproject.com/ticket/27392.
Could be fixed with `{convert_test_name_pattern(p) for p in test_name_patterns or ()} or None`
This is not going well if the user tries to give permission 0o000. I know, I know, who is in the sound mind gives permission 0o000 to files. But still.....
```suggestion migration_dir.joinpath("0001_initial.pyc-tpl").rename( ```
What if the rhs (`child[1]`) is not an F object, but another expression like`Lower('parent__name')`? Should we handle this as well? Another thing is we don't check the left side of expression when the condition is like ` check=models.Q(parrent__age__lt=models.F('age'))`.
use parenthesis around the expression to avoid backslashes
You might assert `BaseDatabaseWrapper.display_name == 'unknown'`, that would make the `assertNotEqual` more meaningful.
"this is allows bigints" sounds wrong.
Given that `model` also exists, it is weird that `field` refers to `original_model`. (Also where is `original_model` defined -- if nowhere then certainly tests seems to be missing). Maybe also rename to source & target model
Happy New Year :fireworks:
This change is unrelated, I moved it to the #12328 and changed all hard-coded values to the constant.
I'm not sure about the organization here. It would be nice to first do a PR that splits up the existing file into things like `test_checks.py`, `test_views.py`, etc.
`stderr` -> `stdout`
It looks like this test itself isn't isolated. 😄 A context manager like this could be useful for both tests: ```python @contextmanager def _temp_loader_patterns(self, patterns): original_patterns = DiscoverRunner.test_loader.testNamePatterns DiscoverRunner.test_loader.testNamePatterns = patterns try: yield finally: DiscoverRunner.test_loader.testNamePatterns = original_patterns ``` For this `patterns` argument, you will want to pass something _different_ from `['UnittestCase1']`, and the assertion that it's not mutated can go in the body of the test itself.
I think the test names and the tests themselves are straightforward enough that we can skip the docstrings.
I would use `Organization` IDs here and in `test_fields_with_m2m()`, e.g. ```python org_id_1 = Organization.objects.create(name='Organization 1').pk org_id_2 = Organization.objects.create(name='Organization 2').pk ... @mock_inputs({ 'password': 'nopasswd', 'Username: ': 'joe', 'Orgs (Organization.id): ': '%s %s' % (org_id_1, org_id_2), }) ```
A single line looks fine here.
There are two issues I see with this: In terms of code, the `elif key=='TEST'`executed for every key that isn't TEST_\* is a little funny. In terms of semantics, you assume that not including a value in the dict is the same as setting it to None, which isn't true (e.g. `TEST['CREATE_DB']` is a Boolean which defaults to True ). I think it is better to do something like (untested) ``` python test_settings = conn.setdefault('TEST', {}) old_test_settings = {} for key, value in six.iteritems(conn): if key.startswith('TEST_'): new_key = key[5:] new_key = self.TEST_SETTING_RENAMES.get(new_key, new_key) old_test_settings[new_key] = value if old_test_settings: if test_settings: if test_settings!=old_test_settings: raise ImproperlyConfigured(...) else: #not test_settings test_settings = old_test_settings warnings.warn(...) # now test_settings can be used ``` This doesn't pin exactly any mismatch, but that can be done only when an error has been detected (and then TEST_SETTING_RENAMES_REVERSE may still be useful)
This will fail with `AttributeError` if `numpy` is not installed.
Do we need to check that it's a string here? If it's not a list, a tuple, it seems unlikely it'll be some other iterable for which the further checks would be useful. As such - most likely an exception will be raised when it's iterated over and the error message above won't even be displayed. (I'm imaging some people might use a Path instance). This will then become a hard-to-diagnose problem for beginners, who will have a confusing exception rather than a useful error message from django. I wonder if for their sake it's worth always returning here.
extra space after ,
I guess `deps` could be a `defaultdict(set)`
You don't have a to build a list here. The following should do. ``` python self.pet.people.add( Person.objects.create(name='Ellen'), Person.objects.create(name='George'), ) ```
Maybe ```python self.assertEqual(form.fields['username'].widget.attrs.get('autocapitalize'), 'none') ``` to prevent crash when `'autocapitalize'` is not in `widget.attrs`.
Maybe: ``` """A property that can be accessed directly from the class.""" ````
```suggestion def test_migrate_skips_schema_creation(self, mocked_has_table): ```
`[None:start]` works the same as `[:start]`: ```suggestion final_pattern += pattern[prev_end:start] ```
> It's compiled once on import no? We made all module-level regexes to save import time, starting with 2bb1027d6bcdad59624a9d08701e0d2e4a9c0ba7. Often modules are imported but the relevant code paths aren't used. Perhaps that's not so relevant with such short regexes - I benchmarked it as taking about 400ns to compile, which is not much. But good point from Mariusz, if there's no need that's even better.
Use hanging indent: ``` call_command( 'flush', verbosity=0, interactive=False, ... ) ```
```suggestion self.assertCountEqual(queryset, [self.guitar_book]) ```
Add release notes.
Pass `True` as a keyword argument for better readability.
A dictionary mapping domains to extensions could be useful in avoiding if/elif.
Would the following be considered over-engineered? ``` python from django.core.urlresolvers import reverse from django.utils.functional import lazy from django.utils import six from django.utils.translation import ugettext def _password_helptext(): message = ugettext('...using <a href="%(password_change_url)s">this form</a>') password_change_url = reverse('password_change') return message % {'password_change_url': password_change_url} password_helptext = lazy(_password_helptext, six.text_type) ```
I'd chop blank lines: ```suggestion self.range_kwargs = {} if default_bounds := kwargs.pop('default_bounds', None): self.range_kwargs = {'bounds': default_bounds} ```
Is this possible? The constraint names are unique so this would only be possible if someone first manually renames an existing constraint for `unique_together`. IMO we don't need to worry about it.
This should be three tests, not one.
From my testing, unicode is handled correctly.
You'll want to branch of lesser than Python 3.6 here.
I reverted `select.output_field` to `select.field` (I know that's the same) because it's not related with this patch.
Yes please, I didn't audit for all instances.
Not sure either, I was thinking mostly about readability.
yeah we should stick to setting `pk`s.
This replacement of `ignore_conflicts_suffix_sql()` with `on_conflict_suffix_sql()` should be mentioned under the `Database backend API` sub-section of the `Backwards incompatible changes in 4.0` section in `docs/releases/4.0.txt`.
Use of the mixin isn't ideal here since there a lot of unrelated tests which aren't affected. If we have some other deprecation that affects these tests, we might miss updating them.
Under which circumstances is this useful? I'd expect that value to be correct all the time and if it start with a blank so be it.
I don't think it's an improvement, it's less readable IMO.
We could also check `response.context`. Something like (needs to be cleaned up a bit): ``` >>> field_line = [field_line for field_line in [fieldset for fieldset in response.context['adminform']][0]][-1] >>> for f in field_line: print(f.contents()) Brand New Plot ``` This is easier to debug when it fails than `assertContains`.
Please use single quotes throughout.
I think this should use `ordering` because `expected` will already appear in the output if the assertion fails.
IMO we don't need to catch `TypeError` because it will only cause another `TypeError` in the `.match()` call, so I would prefer ``` return datetime.date.fromisoformat(value) TypeError: fromisoformat: argument must be str ``` instead of ``` match = date_re.match(value) TypeError: expected string or bytes-like object ```
Yes, I like that wording better.
`num_fields` / `num_args` seems more natural.
Oh the code looks fine, it's just that this should be 4-space indented not 8.
this changes the semantics of the test, though the test name makes me think it's not actually testing the intended behavior... cookies are not distinguished by port number (https://tools.ietf.org/html/rfc6265#section-8.5) so I would expect this test to have a request with a different port number than the `Referer`
@sir-sigurd Is there any reason to change a regex? :thinking: You added `:`.
Perhaps it would be less verbose to consolidate more cases into a single test with something like: ``` tests = ( ('"ref" integer UNIQUE,', ['ref']), ... ) for sql, cols in tests: with subTest(sql=sql): ... ``` Use`self.subTest()` in the loop.
```suggestion msg = ( "Cannot aggregate over the 'other_age' alias. Use annotate() to " "promote it." ) with self.assertRaisesMessage(FieldError, msg): ``` Use the same pattern in other `assertRaisesMessage`.
don't need a trailing comma for lists with a single element (only needed for tuples)
Seems like we may need a deprecation warning if `ConditionalGetMiddleware` is used but `settings.USE_ETAGS=False` since once the deprecation period ends, the behavior will change. It might be friendlier to use the system check framework (django/core/checks/compatibility) for the warnings. That way we can give the warnings up front and not have to wait until a request (and trigger a warning for most or every one).
Chop "We" "now invalid" -> "invalid according to RFC 7232"
Ah of course... 👀
I would be surprised to see that behavior for any method called `getlist` but maybe it's not unusual.
Haha. Well… 😅 I've done the following before to hook up the ORM to a view in a separate schema in PostgreSQL: ```python class Meta: managed = False db_table = 'schema"."matview' ``` Yay for dodgy hacks and workarounds! 🙈 Slightly different to embedded single quotes though. Yuck. Hopefully nobody has tried to do that on purpose.
The [`Accept-Language` format](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4) and `LANG` environment variable also don't share the same format. For example, I've got `LANG=fr_CA.UTF-8` defined locally while `Accept-Language` should be `fr-ca`.
Ah, yes, obviously!
sure, you can add it here.
That wording is good.
We cannot bump to SQLite 3.27 because it will break all installations with Python 3.6.
```suggestion call_command('makemigrations', 'migrations', interactive=False) ```
I find it odd that this does't appear as `('django.template.loaders.filesystem.Loader', ['dirs'])` while the `POST_APP_DIRS` does.
I know that this may be surprising but it is better performance to provide a list up front. This is probably not a big deal in this particular case.
You could put `text = format_html('<a href="{}">{}</a>', change_url, text)` in the "else" block, `pass` in the `except` block and then a single return statement at the end `return format_html(label, text)`.
Ahh, sorry we cast it to the `NVARCHAR2(2000)` so that's not the issue. Nevertheless, it fails on my local instance with: ``` django.db.utils.DatabaseError: ORA-01450: maximum key length (6398) exceeded ``` because I have a 8K block size. I will remove `TextField` to avoid issues on such configurations.
Chop blank line.
I think we should add this format to the `DATE_INPUT_FORMATS` for backward compatibility.
I presume it was intentional to change this to `.update()` so that `self._settings` is modified? I expect that could just do this instead: ```python databases[DEFAULT_DB_ALIAS] = {'ENGINE': 'django.db.backends.dummy'}
You are silently overwriting a value displayed in a form. You should exclude it entirely form the form or set it dynamically using JavaScript.
Doesn't matter much, but I don't think it's common practice to include a trailing comma on single line tuples of length > 1.
I removed the NotIn assertions in my edits because they are brittle since a typo in the message means they would inadvertently pass. I suppose if error messages were class attributes that would make it more robust, but it seems unlikely to me that a regression could be introduced such that both messages are displayed.
missing space after comma (check code with flake8)
`test_run_as_non_django_module` already exists, please use a different name.
IMO we don't need to create new objects (`objs = [...]`), we should be able to change queries and reuse existing ones, e.g. ```python def test_ordering_grouping_by_key_transform(self): self.assertSequenceEqual( JSONModel.objects.filter(field__d__0__isnull=False).order_by('field__d__0'), [self.objs[8]], ) qs = JSONModel.objects.filter(field__isnull=False).values('field__d__0').annotate( count=Count('field__d__0'), ).order_by('count') self.assertQuerysetEqual(qs, [1, 10], operator.itemgetter('count')) ```
A bit DRYer? ``` python value = self.rhs if isinstance(value, datetime.datetime): output_field = models.DateTimeField() elif isinstance(value, datetime.date): output_field = models.DateField() else: output_field = None if output_field: value = models.Value(value, output_field=output_field) self.rhs = value.resolve_expression(compiler.query) ```
add: "in Django 1.9"
Interesting that this doesn't catch the `SubQuery(aggregation_qs)` case where I had to define the output_field. I guess it's because the select list is longer (aggregation + grouping column), but another property keeps track of what we're actually returning? It'd be really useful to correctly get the output_field for aggregated subqueries too.
The correct syntax is `u'Norwegian Bokmål'` (unless we import `from __future__ import unicode_literals` at the top). It's also fine with Python 3 if we don't have to support Python < 3.3.
Use `SimpleTestCase` to prevent unnecessary transaction wrapping.
Can you use `assertContains()` here to prevent errors due to attribute order in the HTML tags.
I _think_ this will fail on some backends though due the conditional logic off `related_fields_match_type`.
Also, we should mark the `index_together` argument of `set_up_test_model` for removal: ```diff diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py index cf9dd029bb..3f1559b8d6 100644 --- a/tests/migrations/test_base.py +++ b/tests/migrations/test_base.py @@ -255,7 +255,7 @@ class OperationTestBase(MigrationTestBase): unique_together=False, options=False, db_table=None, - index_together=False, + index_together=False, # RemovedInDjango51Warning. constraints=None, indexes=None, ): @@ -263,6 +263,7 @@ class OperationTestBase(MigrationTestBase): # Make the "current" state. model_options = { "swappable": "TEST_SWAP_MODEL", + # RemovedInDjango51Warning. "index_together": [["weight", "pink"]] if index_together else [], "unique_together": [["pink", "weight"]] if unique_together else [], } ```
ln1733 looks redundant. `kwargs["to"]` is reassigned on either branch here. 🤔
`becuase of` has a typo and looks incomplete
I'm not sure about what best practices say about importing at top of file or here in the test method. A fellow will tell.
`redirect_to_login()` is a helper function, not a view.
What is the reason for adding this hasher it after PBKDF2 but before BCrypt? Adding it anywhere but in first position will have no effect anyway. It would only serve to upgrade existing Argon-hashed passwords to PBKDF2e
What do you think about ```python def __repr__(self): template = "<%(name)s: fields='%(fields)s'%(fastupdate)s%(gin_pending_list_limit)s>" template_values = { 'name': self.__class__.__name__, 'fields': ', '.join(self.fields), 'fastupdate': '', 'gin_pending_list_limit': '', } if self.fastupdate is not None: template_values['fastupdate'] = ', fastupdate=%s' % ('True' if self.fastupdate else 'False') if self.gin_pending_list_limit is not None: template_values['gin_pending_list_limit'] = ', gin_pending_list_limit=%d' % self.gin_pending_list_limit return template % template_values```
Use single quotes (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
cleaner as a triple quoted string (`"""`), SQL isn't whitespace sensitive
We shouldn't change the current logic and use `_id` instead of `suffix` from `kwargs`.
I'd rather fix this for as many languages as possible. Let's talk to our users :-)
Isn't it preferable to manage `self.options['indexes']` as a set? Then you avoid any bugs of including-indexes-twice.
use US spelling (behavior)
~Is there a reason this is in the `CANDIDATE_TRAVERSAL_FILE_NAMES` rather than the `CANDIDATE_INVALID_FILE_NAMES`?~ On further reflection, I've realised why. It's because the values in `CANDIDATE_INVALID_FILE_NAMES` return `None` rather than sanitised/fixed names. My apologies for the noise.
This alias doesn't seem needed as it's only used once.
According to the DEP, this should be usable as a class decorator, but I don't see this here... Something like ```python def register_converter(converter, typename=None): if typename is None and isinstance(converter, str): # We're used as a decorator return functools.partial(register_converter, typename=converter) else: ... # current body ``` Alternatively, make `typename` an attribute of the converter class -- then `register_converter` takes a single argument and can trivially be used as a decorator. Making the name accessible in the converter is probably better anyway, for error-reporting in any non-trivial `to_python()` or `to_url()` method.
We don't call `escape()` on lazy or safe strings so we can use `from html import escape` directly.
I think I'm happy with it. It declares the intention.
could this be a separate test method? otherwise LGTM
would it be simpler to call `ensure_connection()`? (no context manager needed)
These doesn't use hooks from `OperationTestBase`.
```python kwargs['min_value'] = max(value, kwargs.get('min_value', value)) ```
I prefer to have it here, because this way the warning appears on startup. If we do it in `post()`, then the warning will appear only in runtime - when handling request. Better to keep it here and assume that `DELETE` http method is an edge case for `DeleteView` :) P.S. It would be helpful to include actual view class name to the warning message, to make it obvious which view must be updated.
I suggest to rewrite it this way: ``` python def get_lookup(self, lookup_name): lookup = { 'in': RelatedIn, 'exact': RelatedExact, 'gt': RelatedGreaterThan, 'gte': RelatedGreaterThanOrEqual, 'lt': RelatedLessThan, 'lte': RelatedLessThanOrEqual, }.get(lookup_name) if lookup: return lookup if lookup_name == 'isnull': return super(ForeignObject, self).get_lookup(lookup_name) raise TypeError('Related Field got invalid lookup: %s' % lookup_name) ```
This doesn't look to be used? (vs `django.utils.autoreload.is_django_path)
`STATICFILES_IGNORE_PATTERS` -> `STATICFILES_IGNORE_PATTERNS`
```python file_hash = ('.%s' % file_hash) if file_hash else '' ```
better to do `if alternatives: ... else: suggestion = "."` (on multiple lines) so `suggestion` is assigned only once
I think the mixin and `TestCase` approach is more common in the tests code base.
As far as I see, it's possible to test the model fields the same way as the others: ``` field = forms.ModelChoiceField(Author.objects.all(), disabled=True) self.assertIs(field.has_changed('x', 'y'), False) ```
This change is unnecessary and unrelated. We support both `password` and `passwd` options in `DATABASES['OPTIONS']`.
I know you didn't write the self.humanize_test, but I would suggest to use subtests here: ```python with self.subTest(i) ```
The only thing that we change is a `function`/`arg_joiner` so I would add a separate classes: ```python class TrigramStrictWordDistance(TrigramWordBase): function = "" arg_joiner = " <<<-> " class TrigramStrictWordSimilarity(TrigramWordBase): function = "STRICT_WORD_SIMILARITY" ```
chop trailing .
```suggestion self.assertContains(response, '<nav aria-label="Breadcrumbs">') ```
I think you should should avoid altering `self` in this case, you should clone `self` and call `set_source_expressions` on the clone.
I believe you would need to add a custom `save_form` method to a `ModelAdmin` and somehow incorporate the `change` flag in it -- perhaps modify the form's cleaned_data to assign the field to a model field before save.
Quotes should be consistent in a single string: ```suggestion " Pruning cannot take place until the following squashed " "migrations are recorded as applied (re-run 'manage.py migrate') " "and have their replaces attribute removed:" ```
Trailing dot is missing.
I would return directly rather than creating an intermediate `value` variable.
I think: `_, ext = os.path.splitext(name)` is a bit more readable than "magical" indexing.
Rename to something which clearly depicts what it is supposed to return, ie like `get_session_auth_hash` below. The current name is not showing a clear intent.
The master branch only supports PostgreSQL 9.4+.
no need for a `list()` casting.
I'd drop the "prefetched_" prefix on the variable name to keep things more readable.
I think you should leave it as it seems to be the docutils interface for these methods. The `if content is None:` block can go though.
one line is fine here (prefer longer lines up to 119 chars when it improves readability) don't think `?next=%s` is needed
(was fixed in b916c27f9a83c019ff85132712267508f126ca83)
I used to know what was needed when, but I forgot, so now I'm cargo-culting from tests/timezones/tests.py :-(
According to the 1.6 release notes, the _has_changed method on widgets has been deprecated, so I don't think this should be necessary? "If you defined your own form widgets and defined the _has_changed method on a widget, you should now define this method on the form field itself." (looks like ReadOnlyPasswordHashField already has _has_changed implemented)
trailing ) goes on the next line (check your entire patch for this style)
I think using a `stale` property here would make more sense. It would avoid a function call in some case and would be more consistent with the current `Origin` API. e.g. `loader_name` uses `@property` instead of being called `get_loader_name()`.
May as well put in the newline here.
I would keep these states in `AutodetectorTests`. You can use them in `AutodetectorIndexTogetherTests` as a class properties, e.g.: ```python self.get_changes( [AutodetectorTests.book, AutodetectorTests.author_with_book], [...], ) ```
I think these should be removed as class attributes as it implies they can be overridden, but as far as I can tell, they will be assigned in `__init__()` no matter what.
I think `if opt_val:` is sufficient.
Maybe wrapping the inline conditional in parentheses would help readability.
It's just a suggestion. Deprecation is tricky for module constants, IMO we should try to avoid side-effects.
```suggestion self.default_bounds = kwargs.pop('default_bounds', CANONICAL_RANGE_BOUNDS) ```
I'm not sure about including the find command here and in the release notes. What about Windows users? :-) I think it's easy enough to search "delete pyc files" and find a solution.
Move above `can_add_related` for consistency.
It doesn't trigger an extra migration in my testing.
```suggestion Prefetch('house', queryset=House.objects.only('address')), )), ```
I mean the revert.
Good shout. (Perhaps other similar exceptions could be updated in another PR.)
Due to the [PEP-249](https://www.python.org/dev/peps/pep-0249/#fetchall) it can be any sequence, so we can change this in advance.
I found sources that claim that it's Sunday :thinking: : - https://www.timeanddate.com/calendar/?year=2021&country=69 - https://en.wikipedia.org/wiki/Names_of_the_days_of_the_week#Days_numbered_from_Sunday
`Return false if field is disabled` instead of `or when field is disabled`
must include -> includes
Please use hanging indent: ``` self.assertEqual( set(request.META.keys()), {'PATH_INFO', 'REQUEST_METHOD', 'SCRIPT_NAME', 'CONTENT_TYPE', 'wsgi.input'} ) ```
The `test_name_patterns` argument shouldn't normally end in `.py` (that's `pattern`). So you can just pass `['UnittestCase1']` via this argument.
What this should do here is something like: ``` c = self.copy() c.set_source_expressions(expressions) return super(Coalesce, c).as_sql(compiler, connection, **kwargs) ``` The theme here is to stop mutating `self` within `as_sql` or `as_postgres/oracle` etc, which is the major point of adding `kwargs`.
For new code, we're using single quotes (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
not exactly true, its select() works, but not on file objects like stdin
What's the purpose of the settings check here? ETag generation will become compulsory when the deprecation is over. Are there advantages in delaying it? With the current implementation, I'm not sure it'll be possible to set `settings.USE_ETAGS=True` to opt-in here while also avoiding the other deprecation warnings guarded by `if settings.USE_ETAGS`.
According to the coverage report, this always evaluates to True.
Add a trailing comma.
```suggestion [sys.executable, __file__, 'runserver'], ```
I guess we could `return list(itertools.chain.from_iterable(admin_form))` as well. https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
Please use single quotes.
Let me know if you need assistance with that. You should be able to achieve it by using a `mock('django.utils.http.datetime.datetime.utcnow')` context manager with a `return_value=datetime(...)`.
`expected_url` is more consistent with naming elsewhere. Also, I would use `%s` formatting consistently rather than `format()`.
Why do you prefer `count(1)` to `count(*)`? Personally, I think column ordering (and the ability to reference a column by number) a bug in SQL, which one should avoid using wherever possible.
(note newer caching of states)
Use hanging indent: ```suggestion request = self.request_factory.get( '/', {'name__in': "|".join(e.name for e in employees), 'divider': '|'} ) ```
simpler: datetime.now().strftime(''%B %d, %Y - %X')
You don't have to subclass `unittest.TextTestRunner` since it has `resultclass` argument. You can pass `resultclass=DebugSQLTextTestResult` without subclassing it.
should remove -> removes
```suggestion "%(min_unique_chars)s unique characters, or it's prefixed with %(prefix)s " "indicating that it was generated automatically by Django. Please " "generate a long and random SECRET_KEY, otherwise many of Django's " "security-critical features will be vulnerable to attack." % { ```
"or the user is inactive" can be removed too (should have been removed in 107165c4b04f4e5a830a60b6c66b2e5d8fb1d242)
It would be good to use `six.reraise` here.
I would chop blank lines in this test.
You can use built-in `django.contrib.auth.backends.BaseBackend` instead of custom `BareModelBackend`.
add period to the sentences
How about adding len(field_name) to _data_size on each iteration? Makes much more sense to me.
`time_keeper` can't be `None`.
I don't know if this is the best solution. It seems to add overhead (extra iteration) for a problem that's only present on PostgreSQL.
Is this really necessary? I don't see any harm in leaving an empty list and all tests work without these lines.
Do we need the `depend_on_deletion` flag? It seems we can always add the same field as a dependency because this is only the case only when we use `RemoveField`/`AddField` instead of `RenameField` :thinking: ```suggestion dependencies.append((app_label, model_name, field_name, False)) ```
I would add this dict above, e.g. ```python serial_fields_map = {'bigserial': 'bigint', 'serial': 'integer', 'smallserial': 'smallint'} if new_type.lower() in serial_fields_map: column = new_field.column sequence_name = "%s_%s_seq" % (table, column) return ( ( self.sql_alter_column_type % { "column": self.quote_name(column), "type": serial_fields_map[new_type.lower()], }, [], ), ... ```
Why do you need this sleep function? If `RandomUUID` returns the same UUID for two consecutive calls at the same second that seems to be a bug in PostgreSQL.
Use tuple unpacking rather than indexing: `model, rhs, obj_dict = state`
This refactor looks good to me.
this method doesn't appear to be necessary
It looks okay to me.
No trailing whitespace after , (there was a past PR that removed all cases like that)
Chop unnecessary blank lines.
```suggestion 3. ^a(?:\w+)/b(?:\w+) => ^a/b ```
The test is incorrect. Testing manually with `manage.py createsuperuser` doesn't work. `django.utils.six.moves.input` returns strings, not integers.
Huh, I assumed that the default is `utf-8`, but seems like it's not. So yes, should pass `encoding='utf-8'` to keep the previous behavior (for `bytes.decode()`, 'utf-8' is the default).
The implementation is slightly different, so I wouldn't make this change.
Maybe you could convert `datetime` to `utctimetuple()` and `date` to `timetuple()` here instead. That's the actual type you'll need for `timegm` anyway and you won't have to deal with naive and aware datetime comparison this way.
If the tests work without it, I think it should be fine to remove.
We cannot import from `selenium` at the module level as it's an optional requirement.
FWIW, I prefer including a trailing comma in dicts like this so if more lines are added later, we don't need to modify the last line again (keeps diffs/git blame cleaner)
Sorry, I had a typo in https://github.com/django/django/pull/12675#discussion_r418965162 -- what I ment to say was: keep `work factor` in safe summary (since it's for display and already translated) and `work_factor` in `decode`. This will also require less changes in the tests.
Since you're referring to `context.render_context[EXTENDS_HISTORY_CONTEXT_KEY]` in a couple of places here it might be a good idea to store it in a local variable. e.g. ``` python extends_history = context.render_context.setdefault(EXTENDS_HISTORY_CONTEXT_KEY, []) parent_name = compiled_parent.name if parent_name in extends_history: raise TemplateRecursionError('Circular template extension error in %s' % extends_history) else: extends_history.append(parent_name) ```
Gotcha - entirely possible that the public `null=True` behavior is solely for M2M fields, yup. That's where I ran into it when upgrading REST framework to pass existing test suite against master.
Please wrap docstring at 79 chars I prefer to use this style, "StateApps.bulk_update() should update apps.ready to False and reset the value afterwards." rather than "Tests that..." in every docstring.
I'd be mildly tempted to change it to say that the model field ought to be unique, because a single value (say, "slug") is always unique. Perhaps `field argument `fieldname` must have unique=True` or some such? Perhaps its not necessary.
While you're at it could you initialize the `expected` list with all the warnings once instead of calling `append()` twice.
I don't care about the underscore, only about the non-existence of the word "inexistant".
We should also change `\d+` to `[0-9]+` in all cases.
I would use kwargs ```suggestion check=models.Q(geom__within=poly), ```
I'd use generic setting names to make it clear what's going to raise the exception and to avoid adjusting these settings if we ever get rid/deprecate one of these settings.
why not an f-string as per my suggestion? We're on Python 3.6 only now.
If the assertion above fails, they signal won't get disconnected. I think it could affect test isolation, correct? I guess some existing tests have that issue also. Maybe a future enhancement could be a context manager to allow connect/disconnect without having to write try/finally everywhere? I'm not insistenting on using try/finally now.
Returns -> Return
save is not needed : objects.create returns an already saved instance
We (and probably others) have existing solutions for this issue, and so would prefer to turn this off, both to avoid conflicts with existing policies and to avoid the slight cache overhead. So I suggest skipping the checks if `DELAY_AFTER_FAILED_LOGIN` is set to 0.
should not b einterpreted as -> isn't
Good for me: https://github.com/django/django/pull/4399.
This is not related with `allows_group_by_pk`, it should contain two columns: ```python self.assertEqual(len(grouping), 2) ```
For the reasons explained above, I would avoid `force_str` if possible. For instance, it's to override `test_dir` with a native string version at the top of the function: ``` test_dir = os.path.dirname(os.path.dirname(__file__)) project_dir = os.path.dirname(test_dir) base_dir = os.path.dirname(project_dir) ```
So the question is whether it's safe to do this. (From security or regressions POV.)
`update_fields` can be any iterable, `iter({}) -> dict_keyiterator` ```suggestion obj.save(using=self.db, update_fields=defaults) ```
Susan, your latest PR doeesn't seem to take the above suggestion into account.
I'd drop these extra blank lines.
Could you try to use subTests? You can grep other tests to see how it is used by Django.
Here we display a message even with `verbosity=0`, so I think it's worth to leave it.
I don't know what you're saying but it sounds rude in cockney rhyming slang... https://en.wiktionary.org/wiki/bristol#Noun
This line can be pushed up a level and re-used.
I think this logic would mark `Children.parent_ptr.auto_created = True` when it should be `False` ```python class Parent(models.Model): pass class Children(Parent): parent_ptr = models.OneToOne(Parent, parent_link=True) ```
I'd think `write_configured_settings()` could be responsible for doing this.
We generally use this indentation style for `assertRaisesMessage()`: https://github.com/django/django/blob/3297dede7fce4b190f7b3bf0b0fc29a734151b61/tests/many_to_one/tests.py#L111-L116
Please add comma: `By default, return...`.
You can't use `connection` here, you need to pass `databases` to `_check_indexes` and follow what `_check_constraints` does.
Use `url = reverse('password_reset_confirm', kwargs={'uidb64': uidb64, 'token': token}))` to avoid the funky indentation (we prefer hanging indent).
I think this should be `if not self._reader` - that covers the same expression, but it's the call that's ultimately failing in the original bug. With this fix, if there were a change to the implementation of `_reader` the original bug would return.
Think the position of the newline should be altered -- above it seems to be so that the line fits in a standard size terminal window -- here the first line is too long -- should break after "non-nullable" instead.
Please remove this blank line as requested by Paolo.
"From Django 5.0" isn't clear to me. Does it mean, "Starting with Django 5.0"? If so, some other ways to say this could be "Starting in Django 5.0," "In Django 5.0 and up," "From Django 5.0 onward," or perhaps simply, "In Django 5.0" if the behavior won't carry forward.
These flags are mutually exclusive and we need to set both to `False` to specify that `ON CONFLICT` is not supported. This complicates the API unnecessarily. I would use: ``` supports_update_conflicts = False supports_update_conflicts_with_target = False ```
I think this should use the `request['path']`.
including trailing comma and chop blank line that follows
It's not an overkill. Mixing different kind of changes makes a project like Django extremely difficult to maintain. I added new PR #12972 .
I'd move it below the `__init__()`.
"deleting it will allow.." is a little ambiguous. "deleting the user will allow.." may sound better.
I wonder if we should pass already resolved expressions instead.
Adding a default kwarg doesn't mean we have to use it everywhere, and doesn't necessarily mean it defaults to None either. We could default to a sentinel object causing a raise. You would only get a default of None of you explicitly specify one. It's true that would be different from `dict.get`. Still seems potentially worth it to me, but I'm happy to go with your preference.
I run both with: ```python # Otherwise, interpret the label as a path. if not path.is_absolute(): return path.parts[0] else: path = path.absolute() rel_path = path.relative_to(RUNTESTS_DIR) return rel_path.parts[0] ``` without it: ``` ~/repo/django> ./tests/runtests.py backends/postgresql ``` works and ``` ~/repo/django> ./tests/runtests.py backends/postgresql/ .... File "./tests/runtests.py", line 155, in get_label_module rel_path = path.relative_to(RUNTESTS_DIR) File "/usr/lib/python3.8/pathlib.py", line 904, in relative_to raise ValueError("{!r} does not start with {!r}" ValueError: '/repo/django/backends/postgresql' does not start with '/repo/django/tests' ``` crashes. Sorry for confusing.
I think this should be an error rather than a warning.
use single quotes for consistency
I think you could use `django.test.utils.register_lookup()` here as well.
This line is indented too much.
That's a matter of perspective. I find consistency across the codebase is also something to consider, particularly where the implementation is following the exact same pattern. Otherwise, you create islands of custom behaviour that may diverge enough to become a problem later.
Would it make sense to have union_all as separate method? That way there would be no need for unbounded kwargs. If not, at least assert here that there are no other kwargs than 'all' given here.
I think we can even simplify to `if oracle or postgis:`
I'd use a single line here since it'll fit.
You should be able to use `absurl.startswith(('http://', 'https://', '//'))` here.
I'd prefer to use supported methods, in case there are new once in the future: ```suggestion # The current implementation of the parallel test runner requires # multiprocessing to start subprocesses with fork() or spawn(). if multiprocessing.get_start_method() not in {"fork", "spawn"}: ```
Again here, condense by removing the assignment to `touched`.
I'm not sure I see a good use case for it. In any case, this check could be relaxed (or moved to the outer `get_response`, outside the middleware chain) later as a separate change (maybe after the old middleware system is gone, which would reduce the complexity of the change).
It's `grep -C10 <line_where_error_occurred> <template_source>`. It could use a docstring.
Remove a level of indentation by flattening this if statement into the previous.
Nice idea, that would also show the possible benefits of using the logging infrastructure.
I'd move it below `test_field_references()`.
One too may newlines
To help conform to our style guidelines, put the ) on the next line and adding a comma after using.
I don't see where this test has anything to do with `tbl_space` - it looks like a duplicate of the previous test.
I do like the solution where you can opt-out per query, or force opt-out for all queries on given connection. This way Django and library code can use cursors without a risk of being incompatible with pgbouncer.
I think we should make `Value` inherit from `SQLiteNumericMixin`.
This is already handled for `&`, `|`, and `<<`, so maybe we can just add `#` to the list of connectors in the line 243, e.g. ```python elif connector in ('&', '|', '<<', '#'): connector = '^' if connector == '#' else connector return 'CONVERT(%s, SIGNED)' % connector.join(sub_expressions) ```
or more simply: ```python if not other: return copy.deepcopy(self) elif not self: # bool(other) is implied to be True by the previous condition return copy.deepcopy(other)
Don't worry about inconsistency with existing code, there is a lot of code that doesn't conform to our latest style.
```suggestion # Normalize an exception raised by the underlying client library to # ValueError in the event of a nonexistent key when calling decr(). ```
@sir-sigurd this would update the parent tags as well.
I think `getLogger()` calls typically go at the top of a file.
Would this message make it more clear about what argument of the field is problematic? ``` "The 'to_field' '%s' doesn't exist on the related " "model '%s'." % (to_field, self.remote_field.model._meta.label), ```
This line is not necessary, because we don't call `save()`.
We can remove the `maxmem` argument and use `self.maxmem`. Updated.
This should probably clean up the environment after the test.
When we register the function to run robustly on commit in an atomic bloc, should we also try/catch it when it is actually run? Meaning that in `db.backends.base.base.BaseDatabaseWrapper.run_and_clear_commit_hooks` we should take into account this info
Yes, that may be a good reason. Let's wait and see.
I would personally have broken this test in two (`test_count_join_optimization`, `test_exist_join_optimization`) and asserted against the results instead of testing the `constrained_target` implementation details but I guess this works fine.
As far as I know, non-automcommit mode hasn't been usable since 1.6. The docs say something that boils down "you're on your own and you aren't going to have fun" because no one could offer a use case for running a web app without autocommit so I didn't put effort into supporting that. If there's an additional regression from 1.9 to 1.10 (unclear to me), the fix should be backported. If not, I don't think it should be backported.
The "1" and "2" confused me initially, like it were numbered steps. I'd use "one" and "two".
I haven't looked at the code and perhaps it's obvious, but where do 'None', 'True', and 'False' come from? I wouldn't expect them to appear given the testing data.
Please use single quotes.
Specifically, without the change to `contrib/auth/management/__init__.py`, `admin_views.tests.AdminViewProxyModelPermissionsTest.test_can_view` errors: ``` django.contrib.auth.models.Permission.DoesNotExist: Permission matching query does not exist. ``` Not instantly clear to me why we don't get 4 errors here. Shouldn't we expect that? It's only removing the change to the get_perm() helper in this file that we see 4 failures.
Fine with me.
Ah yes, you are correct sorry.
to_python() "properly" could be chopped
🦅 eagle eye award
chop "type object"
Perhaps this test can be in `BaseMemcachedTests` and the subclasses can have attributes like `client_library_name = 'pylibmc'`; the test can use `'%s.Client.set_multi' % self.client_library_name`.
Clarified version of what I had in mind: ``` # Helper method to provide a way to access this without caching it. # For example, admin checks run before the app cache is ready and we # need to be able to lookup fields before we cache the final result. ```
This call should be done once at the module level, see e.g. `django/core/handlers/asgi.py`
No worries, try to keep the PR small. I will update the Argon hasher myself (updating to a new argon-cffi version) in a separate PR which should (tm) make this code nicer.
I think this can be made faster and clearer by using a `collections.Counter` across all the namespace names
Wouldn't be nicer if `from_db_value` was declared on Field? Then you can call `from_db_value` without checking `hasattr`
```suggestion return ','.join(data_list) if data_list else None ```
the same suffix as the original file
IMO it's valuable, because it explains why we can always use `self.start` without an extra check.
This points to something weird: if I do `dumpdata --pks 2,3,4 app` I'll get _any_ object of any type with PKs of 2, 3, or 4. That's... weird. I think a better approach would be to make `--pks` only work if you've specified a _single_ model. So `dumpdata --pks 2,3,4 app.Model` will work, but `dumpdata --pks 2,3,4 app app2` would through an error.
Add trailing dot.
We are doing a lot of work here when usually only the first key should be needed. I understand that usually the list will for short; but still… what about: ``` for key in self.keys: valid = constant_time_compare(sig, self.signature(value, key)) if valid: return value ```
oh, I like the idea of this being simple enough to not require more changes. I'm a little concerned about whether this swapping here could potentially cause circular loops. I think the reduction operations currently assume that things will always be added to the front of the operation list, so keeping that consistent might prevent weird optimizer loops like `[A, B] -> [B, A] -> [A, B] -> [B, A]`. I don't think that affects the core reasoning here
IMO migrations should not be applied when `--prune` is used (as with `--plan`). For example: ```bash $ python manage.py migrate --prune ``` applies all migrations and raises `CommandError: Migrations can be pruned only when an app is specified.` at the end.
Looks good, thanks.
While you're here, I wouldn't mind if you single-lined all these: ``` cls.a1 = Article.objects.create(headline="Article 1", pub_date=datetime(2005, 7, 26)) cls.a2 = Article.objects.create(headline="Article 2", pub_date=datetime(2005, 7, 27)) cls.a3 = Article.objects.create(headline="Article 3", pub_date=datetime(2005, 7, 27)) cls.a4 = Article.objects.create(headline="Article 4", pub_date=datetime(2005, 7, 28)) ```
My thinking is that there are many ways that the assertion could inadvertently pass. Sort of like if you use `assertNotContains()` but there's a typo in the string that you're asserting isn't present.
This use case is already tested in `test_icontains()`.
```suggestion self.assertIs(locks.lock(f, locks.LOCK_EX), True) ```
I'd rephrase that to "Raised when an applied migration has some of its dependencies not applied."
I would create a separate `TestMySQLFeatures` class.
A docstring could be nice: "mark_expected_failures_and_skips() isn't called unless RUNNING_DJANGOS_TEST_SUITE is 'true'."
level should be 'error', not 'info'.
This function is not used anymore.
What's this line? Looks similar to what `TransactionTestCase._pre_setup()` does -- I don't think both should be needed and writing code that executes in the class body is a suspicious..
This one as well.
Chop blank line.
Avoid the conditionals woridng-- _The session is not modified if not necessary._
Not really, feel free to remove it in `get_or_create` as well.
`migration_loader.graph._generate_plan(nodes, end_at=True),` (omit intermediate `graph` var and pass True as kwarg for readability.
I feel it's more readable like it was previously.
I think I would use `assertTrue(all(isinstance(name, six.text_type) for ...)` but don't care too much either way.
IMO we don't need an extra check and `test_no_caches` test.
`now` is unnecessary.
I'd use `assertIs` here.
It's not clear to me if some of the extra fields like `disqualified` are needed. In general, it's nice to keep things minimal.
no need to define here if it's defined by the below `if`
That looks like much duplication just to change the passed `srs` value. I think I would have written a common `_test_raster_transform(self, srs)`, then calling from `test_raster_transform_int`/`test_raster_transform_str`/`test_raster_transform_srs` methods. An alternative would be to call `with self.subTest(...)` just above the transform part. @felixxm might have an idea too.
Thanks for that.
could you split this string over multiple lines? ``` name = ( "...." "...." ) ```
```suggestion ChoiceFormSet().template_name, "a/custom/formset/template.html" ```
Adding here these lines fixes the failures: ``` python if connection.features.interprets_empty_strings_as_nulls: self_converters.append(lambda val,*args: None if isinstance(val, six.string_types) and not val else val) ``` but this is getting uglier and uglier
Should it consider "has_delete_permission" also? Maybe a method that encompasses this condition would help readability and ultimately be used elsewhere.
s/strng or or/string or/
`.get()` -> `[]`
... and if can, we should do this in advance.
Yes, we should raise a `ValueError` for incorrect values.
I would fix the test by recreating the tags between each `assert`, eventually we should fix GFK to make their "clearing" consistent with FK (i.e. can't clear if not nullable, and nullify if nullable).
don't need `date_of_birth` field
Oops, sorry, failed to account for the possibility that you added the `__eq__` method later in this PR :-)
This change and `LoggingCaptureMixin` are unnecessary if you will use `assertLogs()`.
This will cause `disable` to be called twice if `override_settings` is used as a context decorator because `TestDecorator.__exit__` always executes `disable()` https://github.com/slafs/django/blob/0d9284b305f417f584a9ed4fd1ca8397a1eed49d/django/test/utils.py#L338-L339 This is an issue because this will cause the `setting_changed(enter=False)` signals to be fired twice and the traceback will be really odd to users as it will be of the form `__enter__` -> `enable` -> `disable` -> `__exit__` -> `disable` -> `(signal receiver trace)` It should be off the form `__enter__` -> `enable` -> `(signal receiver trace)` You should be able to assert this works correctly by inspecting the `__cause__` and `__context__` attributes of exceptions.
```suggestion return columns[0] if columns else None ```
I was about to suggest to move this line within the `if objs` branch but doing an early return on `if not objs` like we do in `_remove_items` is likely even better for readability. That should likely be done in another commit.
should not this be: qs = qs. _get_called_qs().update(foo='bar')
#23925 - The backend path added to the session should be the same one as defined ...
I think this else could be removed and deindent the following return.
Do you think else statement is required in the following example? ```py def greet(): condition = False if condition: return "Hi" else: return "Hello" ```
The important assertions here is that the operation changes were rolledback as well. You want to make sure to call `self.assertTableNotExists('migrations_foo')`.
Well, one concern is that Base64 has a default line length limit, which Python honors. You may not be hitting it now, but someone may in the future.
Not sure if it's safe to do that as it creates a circular reference between `model` and the class. What about setting `__qualname__` directly instead by generating it from `'%s.%s' % (attached_to.__qualname__, name)`.
"actor" variables are unused
I wouldn't move it to a helper method, at least not as part of this commit.
> I can do it, but it would skip for other contributors locally. There is no use for a test which gets skipped. @nasirhjafri other contributors do run tests again other backends even if they are not using django-box.
We can chop this docstring.
```suggestion from django.core.checks.security.base import SECRET_KEY_INSECURE_PREFIX ```
Would be better if this were delegated to the database backend rather than requiring a limit based on one particular database.
I would use a simpler dictionary that covers all the cases.
```suggestion with self.time_keeper.timed('Total database teardown'): ```
We can move check to the [previous `if` condition](https://github.com/django/django/pull/11600/files#diff-0edd853580d56db07e4020728d59e193R1286-R1288).
I think it's useful to use the docstring to state the expect behavior rather than just say "Test ..." so I modified this.
It seems that the third "WGS_1984" on this line is normalized to "WGS_84". With that change, this is passing for me on ubuntu 14.04/16.04.
May as well flatten to one line and use `sys.exc_info()[0]`.
Chop blank line (many blank lines in these tests are unnecessary).
Maybe I'm missing sth, but can we use `@contextmanager`? ```python class TestCase(TransactionTestCase): ... @contextmanager def captureOnCommitCallbacks(self, *, using=DEFAULT_DB_ALIAS, execute=False): self.callbacks = [] start_count = len(connections[using].run_on_commit) try: yield self.callbacks finally: run_on_commit = connections[using].run_on_commit[start_count:] self.callbacks[:] = [func for sids, func in run_on_commit] if execute: for callback in self.callbacks: callback() ```
You should probably use double quotes `""` instead of quotes `''` (there is already some discussion on django-developers here: https://groups.google.com/forum/#!topic/django-developers/MQFrQjrJfoo). The same for L853 and L856.
We can chop these lines.
Oops, yes. I meant PY2.
@raphaelm This line is correct. We use `pk` twice for each object, once in a `WHEN id = ... THEN` clause and once in a `WHERE id IN (...)` clause to filter rows for update.
```suggestion if ( not self.timezone or _datetime_ambiguous_or_imaginary(self.data, self.timezone) ): ```
That's very minor but you can use `assertIn` here.
Why not `TimeKeeper`? We instantiate this later: `self.time_keeper = time_keeper(self.timing)`, which could equally be `self.time_keeper = TimeKeeper(self.timing)`
> because with sqlite3 the in-memory test database cannot be closed. I said in the test for all backends, you can check that calling the method doesn't raise an exception.
Why not have this happen for default verbosity? Looks look a good change otherwise!
I don't think that we need a separate model, I would add ``` field_nullable = ArrayField(ArrayField(models.IntegerField(null=True))) ``` to the `NestedIntegerArrayModel`.
including trailing comma in dicts so if more items are added later we don't need to modify this line again
IMO this doesn't work properly, because it removes an empty option from `RadioSelect()` if `blank` **is allowed** which is incorrect. I also don't understand why we're checking `empty_label` :thinking:. I would expect sth similar to: ```python (required and (initial is not None)) or (isinstance(widget, RadioSelect) and not blank) ```
I think it's required to quote 'django<2': ``` $ pip install django<2 bash: 2: No such file or directory ```
That's fine in my book.
@felixxm I think what Tim means is using different aliases for each annotations.
`for ....` could go on the next line to balance things out
This shouldn't be a "class in a class"; it should be in a utility section at the bottom of the file.
I think the old indentation style was fine -- it allows for longer lines.
We try to avoid line continuation backslashes in Django, and it's not a problem to overcome the 80-chars limit when it makes readability better.
I think you could inline this function call on make it an instance method that expects `model` and `schema_editor` to be passed along.
More "ForeignKey" in messages below.
`# Field is picklable with this cached property populated (#28188).`
```suggestion return 'Remove collation {self.name}' ```
As far as I'm aware this should be moved to the `Q.__xor__`.
This proves that the patch is backward incompatible. Currently we always pass an `id` for foreign keys and a list of `id`s for many-to-many fields. We should keep this behavior.
That seems okay to me.
We should use `column` from `get_attname_column()` instead of `name` because fields may have a custom `db_column`. I would also use only `local_fields` from parents. Moreover current `break` doesn't work if `RawSQL` contains field from different parents. Maybe sth like: ```python def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False, simple_col=False): # Resolve parents fields used in raw SQL. for parent in query.model._meta.get_parent_list(): for parent_field in parent._meta.local_fields: _, column_name = parent_field.get_attname_column() if column_name.lower() in self.sql.lower(): query.resolve_ref(parent_field.name, allow_joins, reuse, summarize, simple_col) break return super().resolve_expression(query, allow_joins, reuse, summarize, for_save) ```
`self.returning = returning or primary_key`
Is there anything wrong with `return type(self)(capi.copy_ds(self.ptr))`? this should be the most efficient way.
`six` appears to be an unused import both here and in the test.
And we are now logging 500s twice... and the names like "Not Found" are now different. It's not worth all these differences and inconsistencies.
I think we don't need this test
no `, ` in def of `fields`
I would move above three lines to the `assertHTMLEqual()`, i.e. ```python self.assertHTMLEqual( '\n'.join(form.as_ul() for form in formset.forms), ... ```
I think "comparison.py" is fine.
I wonder if we could use `addClassCleanup()` instead, it's called even if `setUpClass()` raises an exception (see faba5b702a9c5bb9452a543100928bcb5f66ebcf and 213850b4b9641bdcb714172999725ec9aa9c9e84).
fair enough, I guess I'm just a bit too obsessed with optimization :)
Please revert this change, `verbosity` is necessary.
I think this is unneeded as per c9ae09addffb839403312131d4251e9d8b454508.
Thanks both, I changed to a context manager.
I'm not sure what you mean.
What do you think about standardizing the usage to import each function individually? (here and elsewhere)
Function calls are also quite expensive in Python, so the burden of proof is to demonstrate that these accessor methods add significant value over just directly accessing the attribute.
Could go on the class-level to avoid duplicating it in two tests.
Please chop blank line.
this is assuming you always get a list. I would call them `iterables` and treat them as such. Therefore you will be only able to iterate over them once.
I would use the same format as in `HttpResponse.__repr__()`: ```suggestion return '<%(cls)s status_code=%(status_code)d%(content_type)s>' % { 'cls': self.__class__.__qualname__, 'status_code': self.status_code, 'content_type': self._content_type_for_repr, } ```
Oops. Missed the fact that this pattern is not used in django anymore. @scop sorry for making you do this only to undo when core dev comes :)
You can use the `with translation.override(obj.language_code)` context manager to simplify it.
chop blank line
rq? res? please use better names.
Might consider using the console logger by default for this to be more useful. I don't think most people will configuration logging in development to enable it otherwise. On the other hand, I don't know if this would clutter up the runserver logs.
For these columns, MySQL doesn't:
```suggestion with self.assertRaises((OperationalError, ProgrammingError)): ```
flow 'when' to previous line
These objects are used only in `test_generic_foreign_key`, so we can move creation to the test.
This needs to use hanging indent.
Well, actually it'd better to enforce return from `Node.render()` string or list of strings. Multiple copies of strings leads to square complexity/
I think we should add a system check for using `db_collation` on backends that don't support them, e.g. ``` * **fields.E123**: ``<database>`` does not support collations on ``CharField/TextField``\s. ```
The code will be cleaner if you make the default `None` here and elsewhere, and then check for `None` below, similar to how `method` is done. In particular, you won't need to hard-code the default in more than one spot.
yeah, we probably should replace these intances of the `register`/`try`/`finally: unregister` pattern with `register`/`self.addCleanup(unregister)` as well.
I think I'd add a note on the return 2-tuple here to the docstring.
May as well while we're here
`# Replace any %(model_name)s / %(verbose_name)s placeholders.`
2 spaces above class names is correct -- shouldn't remove this newline.
These lines will be unnecessary with the new version of `resolve_model_field_relations()` (see #14781) because it uses `self.real_apps` and handles `concretes`.
You'll want to use provided `connection` here to make sure we support mixed `DATABASES` backends to a certain extent.
Lastest decision is to use pep8 style docstrings for new code. e.g. "Packs -> Pack"
This is not Python 3 compatible; needs to use `except ImproperlyConfigured as e` instead.
I suggest: "The {} setting must end with a slash."
@charettes Ideas welcome. Can you take a look? I really don't like the idea of using `psycopg2` in expressions.
```suggestion self.assertEqual( ```
In my opinion a single test method would be sufficient to test these four cases. It's a micro-optimization, but the test suite is painfully slow and every little gain is worth it.
above `to_fields` is on a separate line -- would be nice to be consistent.
Ditto I'd avoid asserting against the string representation of the query, and assert against the returned `.values()`.
I think it should be good enough for now if it brings Oracle back to what it was, I was also confused by these failures.
This looks good, but I think we need to "cleanup" after the test and restore `Database.__version__` to its original value. I am thinking we can use `mock.patch` for this once https://github.com/django/django/pull/3649 is merged. The following worked for me after I rebased your branch on the mock PR: ``` diff diff --git a/tests/backends/tests.py b/tests/backends/tests.py index 2d6fba6..cf3e22a 100644 --- a/tests/backends/tests.py +++ b/tests/backends/tests.py @@ -22,7 +22,7 @@ from django.db.backends.utils import format_number, CursorWrapper from django.db.models import Sum, Avg, Variance, StdDev from django.db.models.sql.constants import CURSOR from django.db.utils import ConnectionHandler -from django.test import (TestCase, TransactionTestCase, override_settings, +from django.test import (TestCase, TransactionTestCase, mock, override_settings, skipUnlessDBFeature, skipIfDBFeature) from django.test.utils import str_prefix, IgnoreAllDeprecationWarningsMixin from django.utils import six @@ -247,15 +247,15 @@ class PostgreSQLTests(TestCase): self.assertIn('::text', do.lookup_cast(lookup)) def test_correct_extraction_psycopg2_version(self): - from django.db.backends.postgresql_psycopg2.base import Database, DatabaseWrapper + from django.db.backends.postgresql_psycopg2.base import DatabaseWrapper - only_digit_version = '2.6.9' - Database.__version__ = only_digit_version - self.assertEqual(DatabaseWrapper.psycopg2_version.__get__(self), (2, 6, 9)) + version_path = 'django.db.backends.postgresql_psycopg2.base.Database.__version__' - version_with_non_digits = '2.5.dev0' - Database.__version__ = version_with_non_digits - self.assertEqual(DatabaseWrapper.psycopg2_version.__get__(self), (2, 5)) + with mock.patch(version_path, '2.6.9'): + self.assertEqual(DatabaseWrapper.psycopg2_version.__get__(self), (2, 6, 9)) + + with mock.patch(version_path, '2.5.dev0'): + self.assertEqual(DatabaseWrapper.psycopg2_version.__get__(self), (2, 5)) class DateQuotingTest(TestCase): ```
I don't think that we won't have this restriction anymore for non-integer auto-field (at least not in all databases because PostgreSQL and Oracle support `RETURNING` clause with multiple fields). Let's leave `auto-generated` for now.
Ditto regarding `str(alias)`.
I guess it's not intentional to decorate bot the class and the method with this? (test seems to be passing without both).
This needs to be on the same indentation level as `unregister_model()`, otherwise you're enforcing a rendering of `self.apps` ;)
Can you make this work adding `self.assertTrue(profile.image.closed)` after this line? I wouldn't expect accessing the image dimensions to leave the file opened.
yeah that'd work as well, good idea!
`infinite`, not `inifinite` (no `i` before the `f`)
I think this assertion has been copied from another test. I would use ```python constraint_name = 'ints_between' self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table)) ```
We're looking for the same constraint, not a constraint with the same type :thinking: ```suggestion if constraint is self: ```
Separate rename: I think `fields` -> `update_fields` to keep in-line with `Model.save()` is probably good for sanity
1. Add a URL to urlpatterns: url(r'^$', views.Home.as_view(), name='home'),
Oh, I'm very sorry to only see this now, but you should also use ugettext, instead of gettext (which works on bytestrings in Python 2).
These also need changing to properties like `can_introspect_foreign_keys` because you can't inspect the database version at import time
Possibility - but as discussed I can't think of a nicer way other than maybe prepending the classname to the id.
Is there any reason to duplicate the list of API names here? Could we perhaps use the `__all__` or `__dir__` or `messages.api`
I just cut'n'pasted a working pattern I had in django-contemplation... this was only meant as a PoC [and to shut up the "Oh, but I _want_ it!" whiners :)]
Could `Columns` or some other DDL class be used? I think this was originally written before the DDL classes were introduced.
I think these docstrings aren't needed.
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style) (as you did in `admin_history_url`).
`pixeltype |= BANDTYPE_FLAG_HASNODATA` looks unrelated to the fix. Can you split your PR into two commits, first with refactoring (unrelated to fix) and second with a fix and tests. I will be easier for me to review this ticket.
You don't handle `TimeField`.
no comma needed and you can wrap the docstring closer to 79 characters
Same remark about ordering here
The messages corresponding to these will need updating in `docs/ref/checks.txt`.
Yes... our hope this was just the one version proved wrong.
```suggestion @override_settings( CSRF_FAILURE_VIEW=f'{__name__}.failure_view_with_invalid_signature', ) ```
Excellent. The lexer has no business knowing about origins.
related fields (add 's') non-related (add dash)
I would use `if not isinstance(self, (DurationExpression, TemporalSubtraction))` because custom subclasses of `CombinedExpression` can exist in 3rd party packages.
or to hold
likewise, should keep it here
This is not fixed.
Using `.name` would be better than `str()`: ```suggestion geom_type = gdal.OGRGeomType(self.attrs['geom_type']).name ```
Parentheses not needed
I would use: ``` self.assertRaisesMessage(AttributeError, "'ProxyModel' has no attribute 'test_objects'"):` TestModel.test_objects ```
my understanding reading the ticket is that this is only on necessary on Python 2. Can you confirm? If so, we should probably put this an `if six.PY2:` condition so we remember to remove the logic when we drop Python 2 support.
Please restore the second sentence `You must set output_field.`. It should remain untouched.
We confirmed that `parallelism` should be taken into account.
I guess the docstrings should follow PEP 257 verb style "Error if..."
`black` doesn't change these lines for me, please revert.
+1 "using this flag as only table names are checked" (combine the last sentence)
Use `assertIs(..., True/False)`.
Is this necessary for every special character? If so, that doesn't seem very nice…
We can use `_make` to detect a `namedtuple` but I would still use encapsulation ``` return type(value)(*values) ```
Extra space introduced before `If`.
Seems like BrinIndex would be consistent with GinIndex.
I'll push my edits tomorrow.
We want to save file with the `symlink.txt` name so this assertion doesn't have much value IMO. I would check that the new file exists.
It may not be possible to internally import all of from `django.test` because we can create circular imports.
Maybe we could raise a `ValueError` if `self.use_ssl and self.use_tls`? The message should also make reference to `EMAIL_USE_SSL` and `EMAIL_USE_TLS` since we default to them when `use_(ssl|tsl)` are `None`.
I'd expect to see a test for this. Please audit test coverage carefully and make sure all lines are covered.
`stderr` -> `stdout`
Really a micro-optmiization, but these can be constructed as tuples and then the `tuple()` cast after the ifs can be moved up to just the oracle branch ```suggestion func = ("JSON_UNQUOTE(JSON_EXTRACT(%s, '$'))",) * len(rhs_params) elif connection.vendor in {'sqlite', 'mysql'}: func = ("JSON_EXTRACT(%s, '$')",) * len(rhs_params) ```
I'd simplify a bit: should be -> is
Please revert unrelated changes.
You might use single quotes throughout the new code.
module level constants should be all caps
I think googling that term will give a sufficient reference if needed.
Since what you're appending here is the same as what's being appended in the second `else` clause below, it looks like you could adjust your conditional to handle both of these cases, so there would be two cases in all instead of three.
For joins, we might end up doing LEFT OUTER JOIN for cases where INNER JOIN would be optimal. I don't think that is a blocker. But if we do a INNER JOIN for a case where we should be using LEFT OUTER JOIN, then the query will produce wrong results. For testing a models structure like ``` class Timestamp(models.Model): at_time = models.DateTimeField() class Event(models.Model): start = models.ForeignKey(Timestamp, null=True) end = models.ForeignKey(Timestamp, null=True) ``` should be tested with range queries, where one or both of the start and end time are null.
Actually I think the test with `db_column='CaTeGoRy'` is a slightly different test, and one we may want to include as well.
I'd personally omit the newlines you've added before super (don't recall this is a pattern we've used elsewhere)
There is functional change here, is it? I'd rather avoid it then, to not cause unnecessary conflicts, in particular with https://github.com/django/django/pull/11291/files, which removes this altogether.
I suppose you might use single quotes for consistency.
```suggestion self.assertCountEqual(queryset, [self.jack, self.john]) ```
The docstring on `setup_joins` gives a list of the returned fields of `JoinInfo`. That should be updated to include the new `final_transformer`, or reference `JoinInfo` instead/as well.
``` # If someval is a nullable column, ```
We can single-lined this docstring.
Good catch :+1: Thanks
While we are at it, what about doing the same treatment for `initial`? (`return self.to_python(initial) != self.to_python(data)`? Another cleanup (probably separate commit) could be to harmonize `to_python` for `BooleanField` and `NullBooleanField`, except for the `None` difference.
A concern is that if a custom field overrides these deprecated methods, they'll now be ignored.
`'''` -> `"""`
Please remove empty line.
just calling super() should be ok for python 3.
I think we should update [DATETIME_INPUT_FORMATS docs](https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DATETIME_INPUT_FORMATS) and probably add a note to the `forms.DateTimeField.input_formats` docs.
Empty -> Null
Technically there is no guarantee that this is the name of the view, though that should be accessible from resolver_match
You can drop these parens as well: ```python class NullCharValidator: ```
`asc` is misleading, because it's basically a default ordering. Renamed to the `default_order`.
We don't need to support different bases or other negation signs so I would expect a simplified implementation.
If you look at `__init__`, this is a simple class that is easy to reconstruct, so we don't need to use the `<…>` pattern. Also consider that `varname` could be `None` so shouldn't be manually quoted like this, get it's repr instead. I'd change this to the following: ```python return f'{self.__class__.__name__}(path={self.path!r}, varname={self.varname!r})' ```
You're right, thanks :+1:
Would another option be to define a simple `_load_with_patterns()` context manager and use that in `load_tests_for_label()` around the affected lines? It looks like only `loadTestsFromName()` and `discover()` need to be protected, as some returns don't actually wind up loading.
no need for intermediate variable
I'd use `model._meta.label` (which includes the `app_label`).
prefer `self.assertRaisesMessage` to check the message too (need to inherit `SimpleTestCase` for that)
If it's just those two tests, I suggest to clear the cache explicitly
OK, we can at least simplify `slug2`, e.g.: ```python prepopulated_fields = { 'slug1': ['name', 'pubdate'], 'slug2': ['status'], } ```
Sorry for the previous suggestion but decorator looks weird to me :smile: Method would be better, e.g. ```python def _not_support_combined_queries(self, name): if self.query.combinator: raise NotSupportedError( 'Calling %s() is not supported after %s().' % (name, self.query.combinator) ) ```
Definitively. Thank you!
It's a shame we register the `__iexact` lookup for all fields. I think `not isintance(..., (models.CharField, models.TextField))` would be more appropriate here.
Well, I think we need to return error if hosts is empty, not if it's non-empty, so I don't think `not statement` will work here.
```suggestion ChoiceFormSet().template_name, "a/custom/formset/template.html" ```
The significance of `export_name_map` isn't described.
You've lost the `value = value.strip()` (line 1223 as of `master` at 8714403614c4dfa37e806db4a6708b8a91a827a4) [which needs to happen after the conversion to a text type]
not listing updateddate as the last kwarg is technically backwards incompatible if someone is calling this item using args instead of kwargs but it seems unlikely to me.
It's my suggestion to address your concern: ""we are writing a code thrice instead of once"
> Nice so if constraints must use F that makes things easier. Right you can likely use a similar walk based on `hasattr(expr, "flatten")` with `isinstance(expr, F)` checks.
Don't include `date=rfc850date` in the `subTest()`. That string will already be displayed if the assertion fails.
Chop ":param "
Yes, I remember `raise` vs. `raise e` being a point of confusion in the past. If it's just `raise`, then lines 3-4 below are omitted in the traceback: ``` File "/home/tim/code/django/django/db/models/query.py", line 489, in get_or_create return self._create_object_from_params(lookup, params) File "/home/tim/code/django/django/db/models/query.py", line 528, in _create_object_from_params raise e File "/home/tim/code/django/django/db/models/query.py", line 521, in _create_object_from_params obj = self.create(**params) ``` It could possibly be unclear without those lines, but I'm not sure if it matters.
casted -> cast
I think we can move entire `ordering` logic to a separate branch i.e. ```python if self.ordering: ... sql, sql_params = super().as_sql(compiler, connection, ordering=( 'ORDER BY ' + ', '.join(ordering_expr_sql) )) return sql, sql_params + ordering_params return super().as_sql(compiler, connection, ordering='') ```
Perhaps `assertPostCondition` would be a better name. A docstring about how it should be used may also help future test writers know whether or not to include it in new tests.
Please move this test to the `select_for_update/tests.py`.
Since you're changing this line already, maybe it's worth changing the variable names from agg_{sql,params} to something like a_sql or expression_sql.
IMO copying docstrings from sync versions is of little value. I'd chop them.
I'd drop the blank line here and 2 lines below.
I'm not sure there's much practical difference here, but `CommonMiddleware` uses `path_info`, so I'd say let's keep that.
I think the point is that it's specifically this version that is bundled with macOS 10.15. (I'm on 10.14 and don't see it.)
I'm tempted to suggest making `response` the first argument (before `message`), making the calling signature more concise and allowing Python to handle it as a normal required argument. The downside of course is that it makes the signature less like a normal logging call. I don't have strong feelings, ok with however you prefer to paint this bikeshed.
I'm okay keeping the copying stuff if we have a test to show why they're needed. Also, `dict()` might need to be `deepcopy` instead.
Not 100% sure. I will follow-up with @pganssle about this. Testing you can't get ambiguous results regardless of using `value` or `return_value`, and adjustments of fold: ``` >>> import datetime >>> from django.utils import timezone >>> import zoneinfo >>> d = datetime.datetime(2015, 3, 29, 2, 30) >>> d.fold 0 >>> PARIS_ZI = zoneinfo.ZoneInfo('Europe/Paris') >>> timezone._datetime_ambiguous_or_imaginary(d, PARIS_ZI) True >>> a = d.replace(tzinfo=PARIS_ZI) >>> timezone._datetime_ambiguous_or_imaginary(a, PARIS_ZI) True >>> a2 = a.replace(fold=1) >>> timezone._datetime_ambiguous_or_imaginary(a2, PARIS_ZI) True ```
(In response to Mariusz' question.) `HttpHeader` is doing [exactly the reverse operation](https://github.com/django/django/blob/fc2536fe66c519b306f673672b795d16f87ed57d/django/http/request.py#L382): `replace('_', '-')`. They're clearly related, so maybe there's a refactoring available, but I think it should follow later (if at all). What's interesting here is that we're doing the header mapping in the request for ASGI, where a WSGI server already provides the headers, as part of the spec. ([Here's where `gunicorn` does it](https://github.com/benoitc/gunicorn/blob/dc7b5d5c4876b49f86ea2460698a335d0f5ef7c9/gunicorn/http/wsgi.py#L119-L140).) I'd say it's just _interesting_; I don't think we need a change here.
chop blank line
I think it's just right as a dataclass 👍
There is. Unless we enforce an ordering the result set for subsequent requests can be entirely different. This is unlikely what we want.
I would simplify condition e.g. `condition=Q(pk=-1)`.
```suggestion if not (self.is_vsi_based and self.name.startswith(VSI_MEM_FILESYSTEM_BASE_PATH)): ``` This change should be covered by tests.
This should always be true if the receiver is connected with `sender=migrations.RenameModel` as it is right now.
What about a field_name like `fk1__fk2__geofield`? Wouldn't then the result be `fk1`? It should be `fk1__fk2` IMHO.
What about ```python if rhs.select: self.set_select(col.relabeled_clone(change_map) for col in rhs.select) else: self.select = () ```
only super() should be OK
need to use `six.iteritems` for Python 3 compatibility.
You can use `with captured_stderr()` instead.
Can you use `django.utils.timezone.now()` here, please, even though the previous code didn't do that.
how about escape_uri_path? to distinguish from file system paths, etc.
Could we add some complementary method in the apps registry to handle this use case? Ideally, the management command machinery should not have to fiddle with apps "intern" variables.
I'm not sure about changing the signature. Can we restore the previous one? ```suggestion def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False): return urlizer(text, trim_url_limit=None, nofollow=False, autoescape=False) ```
I'd move it to the `setUp()`: ```python def setUp(self): self.runner = NoOpTestRunner(verbosity=0, interactive=False) ```
Yes, that's good. Suggested wording: If `subcommand` is missing due to misconfigured settings, the following line will retrigger an ImproperlyConfigured exception (get_commands() swallows the original one) so the user is informed about it.
IMO this state should be controlled by the `MultiPartParser` not by a handler, e.g. ```diff diff --git a/django/http/multipartparser.py b/django/http/multipartparser.py index b3472f7be2..7fd7f0b49c 100644 --- a/django/http/multipartparser.py +++ b/django/http/multipartparser.py @@ -150,6 +150,7 @@ class MultiPartParser: num_post_keys = 0 # To limit the amount of data read from the request. read_size = None + uploaded_file = True try: for item_type, meta_data, field_stream in Parser(stream, self._boundary): @@ -159,6 +160,7 @@ class MultiPartParser: # we hit the next boundary/part of the multipart content. self.handle_file_complete(old_field_name, counters) old_field_name = None + uploaded_file = True try: disposition = meta_data['content-disposition'][1] @@ -206,6 +208,7 @@ class MultiPartParser: self._post.appendlist(field_name, force_str(data, encoding, errors='replace')) elif item_type == FILE: + uploaded_file = False # This is a file, use the handler... file_name = disposition.get('filename') if file_name: @@ -275,10 +278,15 @@ class MultiPartParser: # If this is neither a FIELD or a FILE, just exhaust the stream. exhaust(stream) except StopUpload as e: + for handler in handlers: + handler.upload_stopped() self._close_files() if not e.connection_reset: exhaust(self._input_data) else: + if not uploaded_file: + for handler in handlers: + handler.upload_stopped() # Make sure that the request data is all fed exhaust(self._input_data) ```
I don't think you necessarily need this _here_ (if at all, but I get the historic reasoning) fwiw. In the original (if I'm reading the side-by-side correctly) it ends up marked as safe when `dec_pos` is _Falsy_. But in this changed version, it becomes a `SafeString` _before_ checking `if decimal_pos`. If there 's _truthy_ `decimal_pos` you end up doing `SafeString` + sep (presumably str, but could be another `SafeString`) + `str` so you ultimately get back a `str` type regardless, because `'0' * decimal_pos` is the final addition and `SafeString` only defines `__add__` for another of it's kind. If you were able to defer making it a `SafeString` until _after_ the `decimal_pos` check, you can avoid 1 or possibly 2, accounting for sep) in the _wants decimal_ case, because `str` + (potentially) `SafeString` yields `str`. NB: that's all off the top of my head from reading the diff, caveat emptor :)
Use a single line `self.assertEqual(caches[cache_key]._cache.pickleProtocol, pickle.HIGHEST_PROTOCOL)`. I see this is changed in a later commit but it seems the skipUnless isn't needed? Maybe we could just skip this commit since it's immediately moved anyway.
```suggestion # to json.dumps() to json.loads() when using a custom decoder in # JSONField.from_db_value(). ```
``` cursor.execute("CREATE EXTENSION postgis") cursor.commit() ```
Please add a trailing comma in all cases: ```suggestion ['Exa', 'Foo', 'Tes'], ```
Keep using single quote strings.
I don't think we need a separate hook. We can pre-calculate set of column names and reuse it for all aliases.
I'm not sure if it's a correct solution, before db19619545dd99a1d2502c72974d79eca33acff7 we returned `json.dumps(None)` i.e. `'null'`. IMO it's expected. ```suggestion if data is None: return data ```
I think it would be more clear to put this in the `if self.is_local_storage() and self.storage.location:` block
We don't need to check `sys.platform` because `os.chmod()` will be ignored on Windows.
Use `assertRaisesMessage()`, e.g. ```suggestion msg = ... with self.assertRaisesMessage(TypeError, msg): ```
The problem with this line is that further down you're referencing `self.x` and `self.y` directly. If another part of the code calls `set_source_expressions`, you're going to be using old values. You should override get/set_source_expressions to read from and assign to self.x, self.y.
I think upper case is usually reserved for module constants.
Please use hanging indent: ``` python raise http.Http404(_("%(ct_name)s foreign key to Site is None for field %(field)s ") % { 'ct_name': content_type.name, 'field': field, }) ```
State the expected behavior, "An active user can't authenticate."
I prefer checking for the expected syntax since "NotIn" can fail in all sorts of ways (for example, if you have a typo in the string).
`__str__` is not necessary.
I don't see much value in adding `_check_fixture_files_in_dir()`. I would move this to the `_find_fixture_files_in_dir()` or leave it in the main loop.
Since this initializer is a public API, I think we need to add new arguments at the end, for backwards compatibility.
I see the other tests are doing it but, I don't see why we're declaring `func` as an `@property` here and/or passing `None` when calling it. (Would not a normal method do? Why pass any argument at all? `self` would be fine, but is unused.)
what slides? Not sure it's important in which case that sentence could be removed. "To test for window functions." seems redundant with the purpose of the module.
My only concern about this descriptor it that defining `__set__` makes it a data descriptor which means all getter accesses will go through `DeferredAttribute.__get__` and incur a function call while `DeferredAttribute` is a non-data descriptor and only gets `__get__` called on missing `__dict__` values. I guess that's a small penality to take in the name of correctness but I thought I'd mention it even if I don't have a better solution for the problem this patch solves.
There's already a single test for the `yesno`-filter in `django/tests/template_tests/syntax_tests/test_filter_syntax.py`. However, it's probably better to move it into a separate test-class. Please do this in a separate commit. Please see 7fce4dc5ff2d23bf43ee645f5bc0d6024ff1627f for an example.
The model cannot have more than one field with 'primary_key=True'.
Use the following style instead: ``` python tables.update( f.m2m_db_table() for f in model._meta.local_many_to_many if f.remote_field.through._meta.managed ) ```
missing space after `self,` as described above (and two lines below)
I think we can get rid of `replace_metacharacters()` and just do the `re.sub()` here.
What do you think about using an [opener](https://docs.python.org/3/library/urllib.request.html#urllib.request.build_opener) instead? For example: ```python the_path = os.path.join(tempdir, filename) opener = build_opener() opener.addheaders = [('User-agent', 'Django/%s' % get_version())] try: with opener.open(url) as source, open(the_path, 'wb') as target: headers = source.info() target.write(source.read()) except OSError as e: ... ```
The code I've reviewed recently always has mixins on the left. I think it's easier to be consistent than have to think about it, but feel free to propose some different guidelines if you like.
Please revert this change. We can get an unsupported combination of DB features in the future, so it's good to keep it.
@shangxiao Do you have time to keep working on this? If not, I can push final bits (release notes, docs warning for Oracle, and update the feature flag name).
Please revert this unrelated change.
> Ok! I'll change the `self.assertIsNotNone(form.as_p())` to something that asserts the text. We don't need to assert the entire HTML, `self.assertIn('null</textarea>', form.as_p())` is enough. > Do you think we need to check the errors dict? The issue doesn't really have anything to do with validation from what I can gather, which is why I removed the required=True argument from the original PR, but I can re-add it if you want. Bound form is typically used due to invalid input, so IMO it makes sense to check `errors`.
Again, error handling changed.
"model._meta.apps should be used..." seems clear to me.
Is there a more specific name that `_prepare_lookup`? (I can't instantly come up with something ideal but it would be nice to not have to look at the implementation to see what this is for...)
In order to avoid breaking backward compatibility with custom storage class with overridden `get_available_name` we should only pass `max_length` if the inspected method allows it and raise a `django.utils.RemovedInDjango20Warning` if it's not the case.
I think `self.connection.alias` should be used in `transaction.atomic`, exceptions also need to bubble through `transaction.atomic` ```python @cached_property def supports_json_field(self): with self.connection.cursor() as cursor: try: with transaction.atomic(self.connection.alias): cursor.execute('SELECT JSON(\'{"a": "b"}\')') except OperationalError: return False return True
You need to register it: ```python with register_lookup(CharField, Upper), register_lookup(CharField, Lower): Index(F('name__lower'), F('name__upper'), name='lower_upper_func_idx') ```
That looks correct to me.
I don't see a reason for the `order_by` here.
This behavior for `Select()` is already tested in multiple places e.g. `test_basics()` or `test_choices_freshness()`. IMO we don't need a direct test.
I just noticed that you don't ever seem to need `get_max_test_processes()`'s argument. Here you do pass `parallel`, but you're only ever passing the default argument value. So it looks like you don't actually need to accept a value.
You can use `if six.PY2` (import `six` from `django.utils`)
Pushed that in a64f88f5be0f680a7.
On Mysql, Oracle, and SQLite
I think this feature would be hard to get right for the rare case where it's useful. It also go against our stance on trying to _disconnect_ `Meta.ordering` from aggregation as this PR demonstrates. I'd be in favour of won't fixing the ticket as well for these reasons. It feels incoherent with the ongoing deprecation motivated by observed user confusion over the years from the interactions between these two features.
That could be a single line docstring.
Forms don't validate unique_together constraints when only part of the contraint is included in the form to allow using form.save(commit=False) and then assigning the missing field(s) to the model instance.
Also this test is a bit redundant with `test_index_with_collate_f_expressions`. I think we can remove it.
Use single quotes here.
Use single quotes for all strings (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
IPs can be used in URL, so I guess that's what they mean here. Doesn't shock me.
This test passes even without the patch applied. Did you mean to use the id of the `Happening` created in `setUpTestData`? I guess you could assign the `cls.happening` there and use `self.happening.id` here.
prevent ETags in the old RFC 2616 format
We should avoid calling `self.effective_default(new_field)` twice (here and in [line 721](https://github.com/django/django/pull/12612/files#diff-b69190ab88f6c5737b2562d94d7bf36bR721)). Maybe we can make it lazy or refactor this change a bit.
> As per your request @felixxm i have added checks on `ERROR` level also. `ERROR` is still missing.
Should we use `@cached_property`? This might be accessed frequently and the setting shouldn't change during runtime.
use single quotes for consistency
I added `stacklevel=2` back in #12960. IMO, it assists the library user with identifying the line they should modify. Without the argument, the warning points to Django code, but with the argument, the warning points to the user's code that must change. There is more detail in the PR too.
Should also update based on `block_size` and `parallelism`
`and Historique` does not look right. It should give the untranslated `History` here (we are outside of the override).
Can you explain why this method may be called with an already parsed URL ? And is this something you really want to support ? After all, the caller could also do `url = url if isinstance(url, dict) else Service.parse_url(url)`. Note that i'm not defending one pattern or the other, but just wondering about how you made your choice.
I think we generally use `assertTrue()` instead of `assertIs(..., True)` in Django.
Ahh I see, didn't realize that.
If I'm not mistaken `dict.setdefault()` is atomic on some version of Python 3 at least.
They can be equal, so: ```python raise ValueError("'absolute_max' must be greater or equal to 'max_num'."). ```
I suggest you use [setUpTestData](https://docs.djangoproject.com/en/dev/topics/testing/tools/#django.test.TestCase.setUpTestData) instead of `setUp`.
This variable too appears incorrectly named. If I'm not mistaken, we can get to a state where the unmasked version is always called "secret" and the masked one always "token". I think we had that property before, it's just that in some places where we were using a token, we are now changing to use a secret; function and variable names should be changed to match this.
This is now misnamed, IMO. `_get_secret()`, maybe.
> See #15755 Merged, please rebase.
Single line seems fine for this assert. Triple quotes -> single quote should ease line length a bit.
I removed the try...except... — Thanks both.
Might want to assert the message as well.
In this case I'd manually delete `TagUniqueRename` before restoring it `db_table`: ```python def test_unique_name_quoting(self): old_table_name = TagUniqueRename._meta.db_table try: with connection.schema_editor() as editor: editor.create_model(TagUniqueRename) editor.alter_db_table(TagUniqueRename, old_table_name, "unique-table") TagUniqueRename._meta.db_table = "unique-table" # This fails if the unique index name isn't quoted. editor.alter_unique_together(TagUniqueRename, [], (("title", "slug2"),)) finally: with connection.schema_editor() as editor: editor.delete_model(TagUniqueRename) TagUniqueRename._meta.db_table = old_table_name ```
Put the ending `)` on a new line.
`return (.... >= 12, 2)` The unused `oracle_version` property could be reworked to return the complete version tuple and then used here.
I don't think the intermediate `pattern` variable is needed.
Unnecessary whitespace change.
We can move `msg` before assertions ```python msg = "'City' instance expected, got %s" % chicago.pk with self.assertRaisesMessage(TypeError, msg): ... with self.assertRaisesMessage(TypeError, msg): ... ```
include a trailing comma so if more args are added later we don't have to modify this line again
You can omit these parentheses: `if start and start < 0 and end and end > 0:`.
Use single quotes (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
I'd omit the . before 'get'
No need to wrap this. 118 chars is fine.
Use `assertIs` to check booleans: More details at: https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/
After checking changes in tests I think using `repr()` for `expressions`, `fields`, `include`, and `opclasses` makes a representation more readable (it's easy to miss a comma and don't notice the list of values), e.g. ```python ' expressions=%s' % repr(self.expressions) ' fields=%s' % repr(self.fields) ' opclasses=%s' % repr(self.opclasses) ' include=%s' % repr(self.include) ```
could create a module variable so we don't have a second "magic string" in `runtests.py`: `SELENIUM_WEBDRIVER_PATH = 'selenium.webdriver.%s.webdriver.WebDriver'`
I think neither branch here is using a deprecated / semi-deprecated call, but this is a bit more readable, IMO. I think this can be further simplified, though, because I think `.timestamp ` might do the same thing in both the if and else blocks.
This change is not required, please revert it.
Minor you could use `bulk_create`
That would be counter-intuitive, not implementing `get` in the first place would already give you the wanted behaviour. Changing from `TemplateView` to `TemplateResponseMixin, ContextMixin, View` would get rid of the method.
Some explanation on why this is needed would be nice
> Ok, what do you think of a method on `SchemaTests` with just: Looks good, do we need to subclass `GinIndex` instead of `PostgresIndex`? We want to fix an issue in `PostgresIndex`, so using `GinIndex` can be a bit misleading.
You can use `assertRaisesMessage`.
I don't think we should hijack `*args` for fields, a `fields` kwarg makes more sense to me. `model` should be assigned by `Options` just like `Field.model` is. What do you think of the `name`, `db_name` approach suggested above? In this case the signature should look like `(name, fields, db_name=None, **options)` and there would be no need to validate `name`.
This needs to be based of `databases` just like `_check_constraints` is.
Oh, I see `raise_last_exception` also looks like it moved. Maybe it makes sense to do some reordering to keep the diff a bit smaller. Maybe not.
I don't think this first test situation should be deleted and the new behavior should match the new test cases (stderr instead of CommandError) -- `test_showmigrations_unmigrated_app` should be updated similarly
What would you say for: ```suggestion raise KeyError(key) ``` ? That would make the error a bit more descriptive.
I personally wouldn't have newlines between all of these since the ) on its own line it basically a newline. I'd just use a newline to break up each `# Test *` section -- although individual test methods with setUp might be more clear
On second thought, I'm actually in favour of expliciting follow=False, it prevents the test to pass if the redirection to the 404 page occurs.
I second Nick's proposal, but that could also the object of a following commit in another PR.
You can skip the blank lines in these tests as three lines long isn't too difficult too read with spaces.
No need for "Make sure" prefix -- just state the expected behavior per [test docstring guidelines](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
I think `[:2]` is unnecessary.
There should be a space after each comma when defining tuples
`self.assertQuerysetEqual(self.a1.publications.all(), [self.p1])` is a way to remove these repetitive assertions in all the tests below
I think we should protect this filter against invalid inputs from users, e.g.: ``` {}__year=a {}__year=0 {}__month=a {}__month=0 {}__month=13 {}__day=a {}__day=0 {}__day=32 ``` Currently it throws `ValueError` in most cases.
Above `tests` entries could drop the `[]` wrapping if you use `QuerySet.get` here ```suggestion self.assertEqual( queryset.values_list(lookup, flat=True).get(), expected ) ```
Why not just use `JSONBSet`? We already use `JSONBAgg`, it is PostgreSQL-specific so referring to JSONB is fine and it makes it clear that this is the `JSONB_SET` function.
Does that mean something like `admin.site.register(Choice, list_display=['question'])` isn't checked? If so, I that seems like an incorrect restriction.
The closing parenthesis should be balanced, visually (on the next line).
```suggestion self.run_on_commit.append((set(self.savepoint_ids), func, True)) ```
For consistency: ```suggestion to_field_name = remote_model._meta.get_field(to_field_name).attname ```
Maybe `# If the expression can be used in a WHERE-clause.`.
```suggestion filename %s ```
IMHO `len(test_labels)` and `2` and quite explicit `int` operands in this case making it clear the return value of `//` will also be an `int` but well, I think I'm bikeshedding here.
Keep `django` imports together.
Please use spaces rather than tabs for indentation.
They aren't misleading IMO and we try to avoid trivial changes.
Whilst I've not subjected it to exhaustive testing, it did pass some simple doctests: https://gist.github.com/funkybob/6332718
My suggestion is: ``` Convert CharField results from bytes to str. MySQL returns long data types (bytes) instead of chars when it can't determine the length of the result string. For example: LPAD(column1, CHAR_LENGTH(column2), ' ') returns the LONGTEXT (bytes) instead of VARCHAR. ``` I'm not sure if it would make a meaningful difference, but a feature flag might be useful since `isinstance` can be somewhat expensive, I think.
In accordance with the naming of `DatetimeSerializer` this should be `TimedeltaSerializer`.
``` # A string representation is returned for unlocalized numbers. ```
`import_string` can raise `ImportError` which is probably not the best place to be surfaced if you made a typo in your `MIDDLEWARE`. ```suggestion try: candidate_cls = import_string(candidate_path) except ImportError: continue if _issubclass(candidate_cls, subclass): return True return False ```
True, but it's highlighted in most editors so I think it's better to avoid it.
single longer line is okay (we prefer up to 119 characters when it helps readability).
chop blank line
More descriptive test names would be welcome. The existing names are merely from a big test refactoring.
As `supports_microseconds` defaults to True, I don't think we need to create a subclass here, let's just test `HiddenInput`. Same for `TextInput` below.
```suggestion @mock.patch.dict('sys._xoptions', {}) ```
Since 'iso-8859-1' is being used in the line above also, I wonder if it is not better have a variable on top like `FALLBACK_ENCODING = 'iso-8859-1'`
Please include the entire message.
Please update error message for `admin.E409` in `docs/ref/checks.txt`.
I think we should raise `ValueError` on SQLite when a negative precision is passed, e.g.: ```python def as_sqlite(self, compiler, connection, **extra_context): expression2 = self.get_source_expressions()[1] if isinstance(expression2, Value) and expression2.value < 0: raise ValueError('SQLite does not support negative precisions.') return super().as_sql(compiler, connection, **extra_context) ``` especially that it is simply treated as 0. I would also remove admonition about _"negative values for precision argument"_.
I'm going to try to work on Django tomorrow. I'll try to work on this.
No as you are removing that test, I'm just asking to test somewhere the `Cannot resolve expression type` error with some Value having another type that those we are now automatically handling.
I would use a list comprehension rather than `list(map())`
What about accepting a `all=False` kwarg here instead of relying on the `distinct()` method to make the distinction? Else we'll have to make sure not to allow `*expressions` passing to distinct (for `DISTINCT ON`) and limit us if we want to allow `DISTINCT ON` support in the long run. For example, I could see the following query being useful: ```sql SELECT DISTINCT ON field, ... FROM ( SELECT field, ... FROM t1 WHERE ... UNION ALL SELECT field, ... FROM t2 WHERE ... ) ```
loggued -> logged in keep -> stay
Note that ...
path = uri_to_iri(path).encode(UTF8) env['PATH_INFO'] = path if six.PY2 else path.decode(LATIN1)
Might make sense to raise exception in this case: ``` class Test: @cached_property def a(self): pass b = a ```
No... this is just an assumption we can make in the test.
Might care to wrap some lines than went beyond 119 characters now.
Minor but the `else` clause wrapping is unnecessary here given you return in the `except`.
Migrations plans with both forwards and backwards migrations are not supported.
`self.assertEqual(catalog['{count} plural3'], ['{count} plural3', '{count} plural3s', '{count} plural3 p3t'])` may help debug the test more easily if it fails.
This is unused now, besides that, it's looking good. However, I presume one of the follows has more ideas on how to improve the tests. They know the test suite better.
Imports should be sorted too.
The `foo_attrs` variables could be removed.
please make the line a bit longer (breaking near 79 characters) and add a period.
I wouldn't use ternary.
Yes, in case of a failure it gives an easier to debug message.
This is exactly the same as for `models.Field`. What do you think about moving this logic to a mixin (`django.utils.deprecation`) and using it in both places :thinking: ? e.g. ```python class DeprecationForHistoricalMigration(Mixin): system_check_deprecated_details = None system_check_removed_details = None def check(self): if self.system_check_removed_details is not None: return [ checks.Error( self.system_check_removed_details.get( "msg", "%s has been removed except for support in historical " "migrations." % self.__class__.__name__, ), hint=self.system_check_removed_details.get("hint"), obj=self, id=self.system_check_removed_details.get("id", "migrations.EXXX"), ) ] elif self.system_check_deprecated_details is not None: return [ checks.Warning( self.system_check_deprecated_details.get( "msg", "%s has been deprecated." % self.__class__.__name__ ), hint=self.system_check_deprecated_details.get("hint"), obj=self, id=self.system_check_deprecated_details.get( "id", "migrations.WXXX" ), ) ] return [] ```
@hannseman @jamesturk Can I ask for your opinion? :point_up:
Do you have time to complete these changes today? Otherwise, I'll try to take care of it before the feature freeze for 1.9.
```python if step_size is not None: self.validators.append(validators.StepValueValidator(step_size)) ``` Use `django.core.validators.MinValueValidator` as a blueprint and create a `StepValueValidator`. Put the validation code from `to_python` in there.
TBH I'm struggling to come up with a test any more sophisticated that the already existing `test_debug_mode_flag_overrides_settings`... ``` with self.settings(DEBUG=False): runner = DiscoverRunner(verbosity=0, interactive=False, debug_mode=True) self.assertTrue(runner.debug_mode) ``` The trouble is it's just a pass through param... 🤔
Yes, `ValueError` sorry.
I'd like to second @aaugustin's point about this conceptually fitting very well into the custom user models. This does not require yet another setting, so let's not. On the bigger picture I really would like to prevent settings.py to continue to turn into a file full of dictionaries with dotted Python paths and initialization parameters. Let's use the extension API we've built into the auth app for such a case.
I still don't like the `issubclass_skip_raise_exception` name. It just feels cumbersome. I suggest: ``` def _issubclass(cls, classinfo) """ issubclass() variant that doesn't raise an exception if cls isn't a class. """ ``` I think the purpose is clear enough.
Maybe it will be better to raise `NotSupportedError` instead of `NotImplementedError`. I would say `Window expressions are not supported on this database backend`.
I think the plan should be `[a4, b2, a2, a3]`, effectively switching `a4` and `b2`. In other words, working on the app itself as long as possible before touching other apps that refer to this.
The function is definitely useful, but I'm not sure that it should exist as a lookup. There are no other lookups in Django which take multiple arguments like this one does. Expressions are currently the right API for multi parameter functions. Also I'm pretty sure `foo__trigram_distance((F('bar'), F('closeness'))` won't work, whereas you'd get this for free with the expression version.
This seems to check resolvers nested up to a fixed level, rather than checking resolvers and namespaces nested to an arbitrary depth.
I would go with the "could" option and port `FileResponse` to 1.7 rather than change an existing (stable) class.
`"Selenium browser specification '%s' is not valid."`
I was quite surprise that `supports_color()` initialize anything. I would add `HAS_COLORAMA` on the module-level and use it here and in `color_style()` to initialize `colorama`.
Should this use `skip_default()`? Or perhaps the condition should be moved into some private method with a more semantic name and used here and in `skip_default()`.
+1 for exp_{sql|param} or ann_{sql|params}.
Only two empty lines required. You can run `flake8` on source to spot these kind of warnings.
Django doesn't use _-prefixes consistently in general, and never uses them for class names.
You cannot remove the `cx_Oracle` < 8 branch, it's deprecated but still supported.
~~Do we want to use [`.setex()`](https://redis-py.readthedocs.io/en/stable/#redis.Redis.setex)?~~ ```suggestion client.setex(key, timeout, self._serializer.dumps(value)) ``` ~~This is just an observation that can be ignored. Maybe it is better to keep `.set()` as for `.add()` above where there is no combination of `.setex()` and `.setnx()`, requiring the use of `.set()` instead.~~ **Edit:** Definitely ignore this as I read the following [here](https://redis.io/commands/set): > Note: Since the SET command options can replace SETNX, SETEX, PSETEX, GETSET, it is possible that in future versions of Redis these commands will be deprecated and finally removed.
You can remove the empty line above and the two empty lines below.
Chop blank line.
I understand what you wanted to do here, naming is fine for this case.
Given `initially_deferred=True` implies `deferrable=True` both flags are unlikely to be used together. `initially_deferred=True` translates to `DEFERRABLE INITIALLY DEFERRED` `deferrable=True` translates to `DEFERRABLE INITIALLY IMMEDIATE` That seems like a more consistent API with the rest of the ORM to me as we've generally avoided to expose flags pointing to constants. The only exception I can think of is `on_delete` but it's actually accepting callables and not some raw SQL defined as constants.
extra newline. also, commit message should be in past tense "Fixed #...."
Is the method necessary for this? If it can't be a class attribute then make it a property.
Use `subTest()` in this and the other new test methods below to reduce copy-paste.
remove extra newline (please check code with flake8)
Fair, but we are still in a critical section of code performance-wise.
This is what I mean: ``` def construct_email(self, subject_template_name, email_template_name, subject_template_name, email_template_name, ...): ``` Basically wrapping at 80 characters.
`assertEquals()` is deprecated, use `assertEqual()` instead.
Please use set literals: `{'max-age=0', 'no-cache', ...}`
I'm probably missing something, but it seems like this test and the next one are shadowed by tests of the same name later in the same `TestCase`.
I don't think this is useful to test 0 call count, because if questioner will be called, it will produce side effect (for this case). It makes sense for cases where questionnaire is actually called
Ah, got it. In that case you should rely on try-finally. ``` python temp_pgpass = None try: if passwd: temp_pgpass = tempfile.NamedTemporaryFile(...) ... subprocess.call(args) finally: if temp_pgpass and os.path.exists(temp_pgpass.name): os.unlink(temp_pgpass.name) ```
remove extra blank line
Usually, the first condition is put on the same line as the if statement.
Master supports Python 3 only, so there's no need to use six anymore.
Making use of the arguments, perhaps by asserting their values, may be useful.
`call_command()` raises an exception so these lines are unreachable.
Good catch :dart: I didn't notice this :eagle: Definitely `SECRET_KEY_FALLBACKS`.
Then we should drop this, according to https://github.com/hynek/argon2_cffi/blob/master/src/argon2/low_level.py#L58 it should already select the latest.
This can be simplified to-- ```python if col in self.query.extra_select or self.query.combinator: ``` by changing the order of the two cases.
``` py % (float_number) ``` Note: The parentheses are not required here.
We don't need columns, so I would use `SELECT 1 FROM ...`
please omit the blank line
> @kezabelle Is there a reason to have a local `modules` variable and use it only in `not in` check? Err, only because I suck :) Notionally it was to avoid `LOAD_GLOBAL` followed by `LOAD_ATTR` twice (once for the key check, once for the getattr) to try and make it As Fast As Possible (in the context of the aforementioned PR) ... but that only has value if you then use it in both places 🤦 Guess I'll have to re-run my benchmarks again when fixing that PR. Good catch ;) FWIW, I'm not tied to it being a separate function (vs just inlining the `if x in sys.modules`) for the purposes of _this_, but as alluded to on that other thread, I can see there being hot paths in Django which _do_ hit the import machinery every time, which might be a good reason to introduce such a function. However, I've not actually bench'd any of those places, so I can't say for _certain_ that it's of any further conseqence. Mostly I just wanted to surface the peeking into `sys.modules` as an option, whatever the implementation ends up being.
I'd remove this docstring, the test method name is self-explanatory.
You're right, I misunderstood what was going on here. For some reason (I think because I hadn't loaded settings) my exceptions weren't printing messages, which didn't help.
I don't think Django has existing workarounds for this issue, e.g. https://github.com/django/django/blob/f021c110d02fd7ca32ae56f511b46e5d138b6c73/django/core/handlers/wsgi.py#L83 I think it adds necessary complexity.
[`hashlib.new()`](https://docs.python.org/3/library/hashlib.html#hashlib.new) also accepts `usedforsecurity` as of Python 3.9. So I think it would be cleaner to eliminate the `md5`-specific `if` statement, and use a `hashlib.new()` wrapper that passes `usedforsecurity` if available.
add trailing comma
Similarly, you could define `model_key` before the `self.models[app_label, model_name].fields[name] = field` line above, which would let you use it there as well.
start the string with `(` and then you don't need the ending backslashes.
I remember issues with objects returning `unicode` in `__str__` and `__repr__` on Python 2. Better be extra safe and return `str('<Deferred field>')` in both cases.
Do you mean a comprehension, @auvipy? That would only be making a shallow copy, which `dict()` does above. However, I'd suggest `credentials.copy()` as it is more explicit.
`based of how` → `based on how`
Is `EmailMessage` correct? When running tests, I see `body_msg` is something like `SafeMIMEText` or `SafeMIMEMultipart`. Please use a period at the end of the sentence.
You could avoid the object creation and use `SimpleTestCase`. ```suggestion g = Group(name='Users') ```
I see you just copied the docstring above but it seems like "Return a list of all..." would be simpler.
I think that you should use `connections[self.db].set_operators['union']` (resp. `'intersect'`, `'except'`) instead of `UNION`(resp. `INTERSECT`, `EXCEPT`) constants and maybe feature flags check can be helpful.
We seem to be calling `str()` twice here. Maybe: ```suggestion errors_str = str(bf_errors) if not isinstance(errors_str, SafeString): warnings.warn( 'Returning a plain string from ErrorList is deprecated. ' 'Please customize via the template system instead.', RemovedInDjango50Warning, ) errors_str = mark_safe(errors_str) # RemovedInDjango50Warning: remove check and replace errors_str # with str(bf_errors) fields.append((bf, errors_str)) ```
I'm not entirely sure about this name. I don't have any better suggestions right now though.
It might improve readability to return a dictionary, `{'fks': x, 'uniques': y, 'indexes': z}` rather than having to remember the order.
I tend to include trailing punctuation in messages.
You can just use a generator, without the `[` and `]` here: ``` if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1: ```
```suggestion "Heterogeneous disjunctive predicates against window functions are " ```
In American English, the punctuation usually goes inside the quote.
Are the different models testing two different code paths? It's unclear to me why the second test isn't sufficient for testing the number of deleted rows too.
```suggestion output.append(server[5:] server.startswith('unix:') else server) ```
Use `raise .. from ...` as in 6e55e1d88a5c4453e25f0caf7ffb68973de5c0ba to get the benefit of exception chaining. Perhaps the original exception type should be preserved rather than converting ValueError to TypeError, otherwise that change could be backwards-incompatible (although it might be more helpful in the long run if user code only has to catch TypeError). For the message, perhaps something along the lines of `"Field '{}' expected a number but got {!r}"` would be more clear. Some test updates are required.
I think the blank lines could be omitted between the model fields.
We should be able to assert `stdout`. You can find similar tests in `tests/migrations/test_commands.py`.
`request` is unused.
If we hit an exception in the block before the default_handler is recorded, then I think we will hit an `UnboundLocalError` here because `default_handler` is not assigned. This is obviously pretty unlikely, since there aren't many exceptions that can be thrown from the previous block. However, it would be slightly safer to have a narrower `try ... finally` block just around the signal-handling stuff.
use assertRaisesMessage to check the msg too
Please alphabetize, add it before `SmallIntegerField`.
This import is unnecessary.
This will _not_ close connections when `settings.CONN_MAX_AGE > 0`.
I think creating the objects is really out of scope for this function. Also it's tricky, what if a custom default manager filters out some objects? We may try adding them again.
```suggestion # Count all visible fields. ```
IMO, this warning can be confusing for users using `Trunc*()` or `QuerySet.datetimes()`. Maybe a note: _"... to make_aware(), used by Trunc() database functions and QuerySet.datetimes(), is deprecated..."_ :thinking:
Maybe: ```suggestion # Tokens of length CSRF_TOKEN_LENGTH. ```
the indentation on this line is incorrect - I'm not sure why pep8 didn't catch this :(
I also made this change in https://github.com/django/django/pull/7912 if you want to merge that first to have a separate of concerns (I could make the misc. six removal there also).
python -> a
It looks unnecessary to me.
prefer simply describing the behavior: "APPEND_SLASH should preserve ..." rather than prefixing every docstring with "Tests that"
> By using a matching tag (`syntax_error`), the test will still pass with `NameError`. It would be better to (1) use a non-matching tag, and ... I wanted a regression test for the scenario described in the ticket. > ... (2) perhaps test that it's really a `SyntaxError`. Thanks. I've changed to a `SyntaxError`.
no need for nested conditionals here, just combine them using `and`
Please fix indentation in these lines (see flake failures).
We can reuse existing states.
``` py self.assertIs(type(f.__repr__()), str) ```
basically, if you put the `return prepared_migration_statement` in the `except:` clause it should work fine.
The guideline is "don't include unrelated cosmetic changes in bug/feature patch."
`SetCookie` -> `Set-Cookie`
I think with the corrected naming the docstring doesn't add much. ```suggestion ```
Please use hanging indentation as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style)
I'd raise ``ImproperlyConfigured`` as in other cases: ```suggestion try: import selenium except ImportError as e: raise ImproperlyConfigured(f'Error loading selenium module: {e}') ```
Yeah, good question. I was confused when I read it the first time but had an idea why it might be enough. But on second thought that doesn't make sense to me.
~I think you should leave the setting in the test as it's part of what behaviour changes you'd requested in the ticket right? 🤔~ ~ie make sure with setting "de" it still returns None…~ actually nvm asserting against the default is probably enough "coverage" 🤷‍♂️
> In the face of ambiguity refuse the temptation to guess ;)
This is the same as the inner block of `populate_relation_from_model_state()`, maybe we should refactored out another hook, e.g. `resolve_model_field_relations()` and use it here and in `populate_relation_from_model_state`.
Move import to top.
Add a trailing period.
I think can be a separate test method, it doesn't seem to depend on anything above.
FWIW I actually got bitten by this updating a project. See ticket-33362
Good point, updated :+1:
Happily - I will get onto it today.
"for BRIN indexes" doesn't seem consistent with usual error messages.
I think we can drop `catch_warnings` and the related assertion.
@NyanKiyoshi if either of the above PR get merge we can completely remove the `for_where` kwarg juggling as it would become unnecessary.
@codingjoe it's the remote field in test and not the local one. The URL is `'autocomplete_admin:admin_views_question_autocomplete'` (which is bound to the `Question` model) and `'question_with_to_field'` is an `Answer` field. What I'm suggesting we do instead is pass `?field_name=uuid` which is a field local to `Question` and have `Answer` admin pass `field.remote_field.name` in `AutocompleteMixin.build_attrs` instead which is `'uuid'`. That's what the other admin views are doing and doesn't require you do extra `model` and `app_label` sanitization when walking your way back to the local field from the remote one.
Make this a global import.
I don't know that "invariable" is the best word -- actually, I didn't know it was a word. I'll try to suggest something if you don't have any alternatives.
`necesarily` -> `necessarily`
I've changes to `django.utils.inspect.func_supports_parameter()`.
Remove `self.function = 'CONCAT_WS'` and the following line which mutates `self.template` and instead: ``` return super(ConcatPair, self).as_sql( compiler, connection, function='CONCAT_WS', template="%(function)s('', %(expression)s)" ```
Best to be conservative and error rather than silently swallow mistyped arguments :) I think `ValueError` or `TypeError` are more appropriate, they're normally used for argument validation.
```suggestion """Render as <tr> elements excluding the surrounding <table> tag.""" ```
is not specified.
prefer listing the ticket number and a brief description (if necessary) rather than the full link to the ticket as that can clutter things up.
This section of this test looks broken—or at least misleading. It's really just checking `is_staff` and `has even id`: there's no point putting all the different staff users through it. The `# Test redirection when using row-level change permissions. Refs #11513.` looks like it belongs in a separate method. (Same with matching code in `test_change_view` above.) (Not necessarily a complaint about this PR!)
Please add parentheses around the `and` block, precedence isn't obvious.
(Ment the lines above :D)
Although fast, it's an order of magnitude slower than attribute access: ```python In [1]: from decimal import Context In [2]: %timeit Context(prec=1) The slowest run took 29.15 times longer than the fastest. This could mean that an intermediate result is being cached. 1000000 loops, best of 3: 613 ns per loop In [3]: %timeit dict.update The slowest run took 19.66 times longer than the fastest. This could mean that an intermediate result is being cached. 10000000 loops, best of 3: 53 ns per loop ``` Not to mention the poor garbage collector!
Remove this blank line.
I think this could be increased to 10 just in case the system is really slow. The important thing is that it doesn't loop forever.
I think the name should be generated as part of the index class and should be database backend independent, otherwise your migrations would yield different names depending on the database used to generate the migrations.
Please don't add a new private method, just do this check in `__new__`.
I don't think it makes a difference here, but the other tests use `html=True` ```suggestion self.assertContains(response, "<td>view_tests.views.technical404</td>", status_code=404, html=True) ```
I think the setup/teardown is obsoleted by my PR only running checks for models in installed apps
include a trailing comma so if more arguments are added later, this line doesn't have to be modified again
No need, I will commit the patch soon.
max_length could be omitted, the default is 245.
include a trailing comma
Maybe: ```suggestion self.assertSequenceEqual(x.lists(), [('a', [3])]) ``` I think we can use the same in below tests.
Change the following: ```python import hashlib ``` Into: ```python from hashlib import sha1, sha224, sha256, sha384, sha512 ``` Then: ```suggestion return sha1(text.encode()).hexdigest() ``` And for `_sqlite_sha224()`, etc.
We might want to mention we use `super()` to avoid checking against `self.filter`.
No reason it was fixed in other places, but this also doesn't change anything here.
Remove `()` -- that's a fixed default which gives a check warning when running the tests.
nit: It doesn't actually set anything in the context, it's just a context processor that returns values that will be set in the context.
We can use `Path(f_name)` to check `storage.delete()` support for `pathlib.Path`.
Looks like adding this field changed the way some database returned unordered sets. You might need to add a `Meta.ordering = 'pk'` below.
This would be a good opportunity to use `subTest`.
Do you really want to make the `parameters` parameter mandatory? This might break third-party backends.
missing `if current_version != pickled_version`
As discussed, move into the top of `RedisCacheClient.__init__()`.
Remove this line - unnecessary addition.
It might be worth making the name a bit more descriptive such as `check_queryset_method_allowed`.
I'd locate this in `tests/backends/base/test_operations.py`.
Check against `(base._meta.label_lower if isinstance(base, models.base.ModelBase) else base.lower() for base in self.bases)` to catch mixed types bases duplicates (e.g. `bases=(MyModel, MyModel._meta.label_lower)`)
```suggestion # winreg is available only on Windows. ```
That is also consistent with `SlugField.allow_unicode` which defaults to `False`.
I think use of [`.joinpath()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.joinpath) to avoid the parenthesis soup would be better here: ```suggestion self.test_dir = Path(tmpdir.name).joinpath("test_project").resolve() ```
convert to feature flag? or at least make a ticket for it.
Can you add something like "Skipping optimization" here, please
I included the `any()` call to prevent problems with `RenameField` operations that that involve a field that's in an `foo_together`. Turns out, the `RenameField` handles the state changes itself. No need to check for it here.
I also noticed that in the first commit you did for this ticket there is ```operator.itemgetter(*[…])``` which could also be changed to use a generator to avoid the list instantiation.
You removed `'%y/%m/%d'` from the original PR, can you confirm this change.
`opts.update(extra_email_context)` (since `extra_email_context` is a dictionary)
`_generate_plan() doesn't readd migrations already in the plan (#29180).`
"Called for each db column fetched from cursors. Return numbers as strings so that decimal values don't have rounding error."
```suggestion trailing_punctuation_chars = '.,:;!' wrapping_punctuation = [('(', ')'), ('[', ']')] ```
Please add a trailing comma.
You can use `self.assertContains()`: ```suggestion self.assertContains(response, 'This is a test. val is the value.') ```
`if not (user and token)` looks more readable to me.
member -> attribute
The PR looks good, but these line and the other docstring line needs a more verbose description. here is a docstring from another regressiontest: ``` """ Regression test for #12913. Make sure fields with choices respect show_hidden_initial as a kwarg to models.Field.formfield() """ ``` it describes what the Test does so that people directly know what it does ;) +1 if the docstring gets updated.
We might want to avoid storing this flag in `self.query` as iterating over this same queryset later on (by invoking `self.__iter__()`) would also use `chunked_fetch`. As you've mentioned this doesn't change anything now since `self._fetch_all()` calls `iterator()` under the hood but I don't think we want to use server side cursors for every query. I suggest we pass `chunked_fetch` as a parameter to `self._iterable_class()` and make `_fetch_all` uses `list(self._iterable_class(self))` instead of calling `iterator()`. Passing the _chunked_ parameter on `BaseIterable` subclasses instantiation could also us to define a `BaseIterable.__del__` method to delete the named cursor in cases where the iterator is not completely exhausted but falls out of scope in autocommit mode.
Django only supports Python 3 now so six isn't needed.
I see. Adding an `if base is not models.Model` to the generator should do.
reordering (chop dash)
Do we want to capture bad values early in the regex or leave it until later when constructing a `datetime` object as we currently do? ```suggestion __D = r'(?P<day>0[1-9]|[12][0-9]|3[01])' __D2 = r'(?P<day> [1-9]|[12][0-9]|3[01])' ``` Is is valid for `__D2`, i.e. `ASCTIME_DATE`, to contain a zero-padded day? (Given it's looking for space-padded.)
This should use `self.subTest`, I also don't think that we need a `namedtuple` and `self.script_name_test_cases` variable, e.g. ```python tests = ( # SCRIPT_NAME ends with no slash, settings start with slashes. ('/somesubpath', '/static/', '/somesubpath/static/', '/media/', '/somesubpath/media/'), # SCRIPT_NAME ends with no slash, settings start with no slashes. ('/somesubpath', 'static/', '/somesubpath/static/', 'media/', '/somesubpath/media/'), ... ) for script_name, initial_static_url, final_static_url, initial_media_url, final_media_url in tests: with self.subTest(...): ... ```
Is this the right name? If I'm using `settings.CSRF_USE_SESSIONS` then no cookie gets set.
I think the current version is clear. You could change the `[...]` to `(...)` though
`"""` -> `'`
could use single quotes here for consistency
Remove try/except as that hides the original exception and makes debugging more difficult (see c9ae09addffb839403312131d4251e9d8b454508).
Not sure what the best option is, maybe ``` f'Method `decode`not fully…` ``` lets see if someone else chimes in.
Please wrap docstrings at 79 characters.
I think we should add `'%Y/%m/%d'` format to the `DATE_INPUT_FORMATS` for backward compatibility.
Should we add sanity-check for duplicates in `bases`, `_check_for_duplicates()`? (e.g. [`CreateModel.__init__()`](https://github.com/django/django/blob/ef082ebb84f00e38af4e8880d04e8365c2766d34/django/db/migrations/operations/models.py#L55-L59)).
We can combine this with the previous test class (rename it you like) and move the `@unittest.skipUnless` decorator to the class instead of each method.
This should be fixed.
```suggestion copytree(source_code_dir / self.work_subdir, self.test_dir) ```
could you use hanging indent style instead? ``` __new__( ..., ..., ) ```
I wonder if you made any conscious choice between `exc` and `err`. Just seems odd to change this one when other places use `exc`.
`test_choice_value_hash` is sufficient. IMO we can remove this test.
It seems appropriate to remove `and callable(backend.get_user)` then.
I wouldn't refactor the other test but `stderr` instead of `err_buffer` is more consistent with the majority of tests.
Might want to avoid mentioning `PDB` since `ipdb` will be used if present? ```suggestion help='Runs the debugger on error or failure.' ```
> I think this isn't a great trade-off to make, the special branch for "is the length exactlyt the same" will cost more than it saves across a range of different input string types. Only a few will match it. Yeah, I wondered whether the exact length check might be detrimental. > Regardless this is a rarely used DB function, this is too much time spent optimizing it already :) 😄 Yup. Happy with your solution.
OK I pushed fix.
Thanks for the sleuthing folks!
rephrase: signed more than max_age seconds ago (also remove extra newline in docstring)
OK, thanks. I'll squash it down then. 😄
This change looks suspicious to me and must not be covered by tests since `SortedDict` is not imported from anywhere.
We can add a second nullable column to the `Number` model.
I think normally we don't `raise NotImplemented` but just return `False` so ```py return ( isinstance(other, CheckConstraint) and self.name == other.name and self.constraint == other.constraint ) ```
Unfortunately these is an issue here! fields_map calls relation_tree, that is a cached property. If any of these two raise an exception (due to premature relation tree) or cache less information then cached_property will not work correctly.
right, I missed that :)
```An object that contains a slice of F expression.```
`pk = self.query.get_meta().concrete_fields[self.query.get_meta().pk_index()]` > `pk = self.query.get_meta().pk]`
Missing another trailing comma here - please check all of these final elements in tuple, list and function arguments.
I think that only applies to `SDO_FILTER` but I never recall seeing operators being used in constraints.
this should appear above the code in green as it does in the original file.
```suggestion return 'ON CONFLICT(%s) DO UPDATE SET %s' % ( ```
You have to set up the iterator in each loop executed by `%timeit` otherwise it only consumes on the first loop after which it is empty... I guess it depends on the size of the response being consumed. If you used `HEAD` on a response which was reasonably large, then the plain for loop is going to be slower.
`state=state` is more typical than assigning `state_id`.
It seems that the convention is to use a `msg`-variable and keeping `assertRaisesMessage` on one line.
Please add a blank between # and the following word.
We should check to be sure len(intermediate_values) == len(objs).
Okay, I understand the idea. Suggested wording for this line: "here (assigning None to a non-nullable field), delegate..." I've forgotten exactly what I wanted to check tonight, so I'll return to it Monday. When backporting, you could probably include 681df1aeafb30092430157f7977f713e1ce234ca too in order to minimize conflicts.
That code is marginally longer, but I think it's clearer. I'll leave it up to what you think is best though.
@hannseman I see what you mean! Going through the `set_source_expressions` route would be very hard as you'd have to set it for all the nested expression leading to the `Col`. I guess `copy()`'ing all expressions preemptively would be best way forward ```suggestion if self.table != table: return renamed_expressions = [] for expression in enumerate(self.expressions): renamed_expression = expression.copy() for col in self.compiler.query._gen_cols(renamed_expression): if col.target.column == old_column: col.target.column = new_column renamed_expressions.append(renamed_expression) self.expressions = renamed_expressions ```
why cast this into a list, normal brackets (generator) will do
check flake8, two newlines above functions expected I think.
I understand why you bumped indexes in below assertions, but changing `'uuid-ossp'` is not related with this PR and should be moved to a separate commit/PR.
On the other hand this code is checked in `LimitChoicesToTests` and we don't have a warning anymore so both tests seem redundant. I removed them.
```suggestion model_state = self.models[app_label, model_name] ```
which again brings the question :)
would be -> is
should be `disable`
Have you thought about what happens if you don't have jinja2 installed? IMHO jinja2 shouldn't be a hard dependency for Django. Maybe it should fall back to a DTL based Renderer in that case.
You shouldn't need to set the model here? You wouldn't have access to it in the migration file anyway. I think `state_forwards` should set up the connection for you
No one has objected on the mailing list thread, so I think we can proceed with skipping the deprecation.
```suggestion # The redis backend does not support cull-related options like `MAX_ENTRIES`. ```
Can you confirm that `DATE_FORMAT`, `DATETIME_FORMAT`, and `YEAR_MONTH_FORMAT` should contain the `г.` suffix for a year? I think it was copied from the `tg` format.
Use `super()` as master only supports Python 3.
Sorry for the confusion. I mistook the `try ... except` as being in test methods. Yes, you should `try` the import. Also, you'll need to define `Cursor` in case of `ImportError` to make the rest of the code syntactically correct. Maybe something like this: ``` try: from MySQLdb.cursors import Cursor except ImportError: class Cursor: pass ```
If only `QuerySet.extra()` is affected, we can skip it since `extra()` usage is discouraged.
Consider `isolate_lru_cache` -- that seems to make it clearer that it clears both on enter and exit. Don't mind if it's not changed though.
I think (hope?) Python packaging is at a point that if Django wanted to make argon2 the default that it could just depend on argon2-cffi instead of bundling. That being said though, the first mandatory dependency being a C based one might be ambitious, and there isn't much reason to worry about having PBKDF2 as a default. PBKDF2 is considered secure and is a perfectly fine password KDF.
```suggestion pizzeria, = Pizzeria.objects.bulk_create([ ```
We can use generator.
I wonder :thinking: if we could move this repetitive logic directly into `_constraint_names()`, e.g. ```diff diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py index 0522abcaad..daeb210ad7 100644 --- a/django/db/backends/base/schema.py +++ b/django/db/backends/base/schema.py @@ -1116,15 +1116,17 @@ class BaseDatabaseSchemaEditor: with self.connection.cursor() as cursor: constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table) result = [] + meta_constraint_names = {constraint.name for constraint in model._meta.constraints} + meta_index_names = {constraint.name for constraint in model._meta.indexes} for name, infodict in constraints.items(): if column_names is None or column_names == infodict['columns']: - if unique is not None and infodict['unique'] != unique: + if unique is not None and (infodict['unique'] != unique or name in meta_constraint_names): continue if primary_key is not None and infodict['primary_key'] != primary_key: continue - if index is not None and infodict['index'] != index: + if index is not None and (infodict['index'] != index or name in meta_index_names): continue - if check is not None and infodict['check'] != check: + if check is not None and (infodict['check'] != check or name in meta_constraint_names): continue if foreign_key is not None and not infodict['foreign_key']: continue ``` It works for me.
this should use `django.utils.six` as imported at the top of this file
Django coding standards prevent non-trivial f string interpolation I'm afraid 🙂 … (although tests might be another story and Carlton may be ok with it)
Let's make `write` a keyword-only argument. ```suggestion def get_client(self, key=None, *, write=False): ```
Please revert unrelated changes.
fs -> fieldset
I guess the problem is that this crashed before the patch but perhaps an assertion like `self.assertForeignKeyExists()` would be the test look more complete.
That seems convincing, especially if we'll throw out this code sometime soon anyway.
It wouldn't hurt to evaluate the queryset to make sure it doesn't break somewhere down the line.
`_csrftoken` please to not collide with user set variables and also use the variable in tests instead of hardcoding
came case names is only for assertions
It would be nice to be consistent with your indentation style. Personally, I prefer: ``` data_not_concrete_abstract = models.ForeignObject( Relation, from_fields=['abstract_non_concrete_id'], to_fields=['id'], related_name='fo_abstract_rel' ) ``` over ``` friends_abstract = models.ManyToManyField('self', related_name='friends_abstract', symmetrical=True) ``` Feel free to have lines that are longer than 80 characters, like: ``` m2m_abstract = models.ManyToManyField(Relation, related_name='m2m_abstract_rel') ``` if it improves readability.
rst -> docutils maybe? I think we could put the stuff after `.get(` on the same line too if you want. otherwise, LGTM.
This is fine as is.
This unfortunately doesn't guarantee that all transactions are always rolled back. _dirty is never set if you run read-only queries in the default autocommit mode, yet transaction is started by any query (the cursor.is_dirty() checks if transactions are managed before setting ._dirty). It seems making sure ._rollback is called after every request would be a god idea if the connection isn't going to be persisted. Even better approach is to make the _dirty flag behave somewhat sanely. But this is not this issue's problem.
move import to top of file
Horizontal and vertical filters keep selected options.... (#22955).
We're just checking the number of queries, so a single test with two columns sounds fine.
That could be a set: `{}`
`assertFalse()` matches anything falsy. If you want to check for `False` only you need to use `assertIs(…, False)`.
deindent text comma after get_group_permissions() nor -> or
I meant all branches.
check the group permissions before `is_active = False` too.
I like that it's a highly improbable edge case but you've handled it anyway :) Yep that text (or something like it) seems clearer to me, as it's giving instruction for resolution, should it ever happen to anyone.
This feels like a copy-paste of `delete_many()` that you have proposed in #10258. Perhaps this could be rebased on top of that branch and all of this expiry code can condense to use: ```python self.delete_many(self, expired_keys, version=version) ```
```suggestion 'conflicts with specifying unique fields that can ' ```
I think it's slightly more maintainable to use `self.cross_origin_opener_policy` as the variable name
Please use single quotes `'none'`.
Made moot by change to use `url` pattern kwargs.
If it doesn't provide any useful functionality, I'd omit it.
since it's only used in a single test, I think this can be moved inline to the test method
We can add assertion for number of queries `self.assertNumQueries(0)` because that's the real impact of this optimization.
FWIW - These lines were committed in 2010, before python 3.2, when the `__wrapped__` attribute was added. Originally these lines would have worked without introducing any bugs, (but they still would have been semantically incorrect, since `view` isn't being wrapped).
You don't need to declare `options` here.
assertEquals (deprecated alias) -> assertEqual
should not -> doesn't
Might make sense to rework this function as method.
Negation is unnecessary here so I would simplify this a bit: ```suggestion self.assertEqual(Book.objects.annotate(has_pk=Q(pk__isnull=False)).count(), 6) ```
Please use `PermissionError` for this PR and I'll change it when backporting to 1.11.
We should check if it is supported and raise exception if it's not, e.g. ```python if no_key and not self.connection.features.has_select_for_update_no_key: raise NotSupportedError('NO KEY is not supported on this database backend.') ```
I think we don't need it. but lets @felixxm decide about it. Thanks for the patch :+1:
Return... (use PEP257 verb style for new docstrings)
simply this by just stating the expected behavior: ``` """ Initial data should be recreated in TransactionTestCase._fixture_teardown() after the database is flushed so it's available in all tests. """ ```
I think there's a mistake in `GinIndex.deconstruct()` also... these should be guarded with, e.g. `if self.fillfactor is not None` similar to logic in model fields' `deconstruct()`.
I don't think removing this check is the right thing to do.
There's likely a way write a test for this without involving a many-to-many relationship which just makes it harder to reason about. From my understanding the issue happens when `Subquery` is involved.
> #14830 This is the newly proposed optimized version of sys.modules, but why turn it off ... It's exactly the same as this PR. We don't need multiple PRs with the same proposition.
Please add all initialization parameters to the `__repr__()` and keep the order from `__init__()`. We should also use `repr()` for most attributes, e.g. ```python def __repr__(self): return ( f'<{self.__class__.__qualname__} dirs={self.dirs!r} ' f'app_dirs={self.app_dirs} ' f'context_processors={self.context_processors!r} ' f'debug={self.debug} loaders={self.loaders!r} ' ... ) ```
It seems a bit odd to be that we assign a new value to `self.rhs` at SQL compilation time. Isn't it something that can be done at initialization time? ```python def __init__(self, lhs, rhs): if isinstance(rhs, datetime.date): output_field = models.DateTimeField() if isintance(rhs, datetime.datetime) else models.DateField() rhs = models.Value(rhs, output_field=output_field) super(self, DateTimeRangeContains).__init__(lhs, rhs) ```
I think `return str(self.success_url) # success_url may be lazy` as you did elsewhere looks good.
I changed this to `SmallIntegerField` -> `SmallAutoField` conversion. Generally, changing `Integer` to `SmallAuto` is not sth that we want to support.
Would not it be better to check this at the very beginning and return `None` or `""` immediately? ```python def format( ... ): if not str_number: return str_number use_grouping = ( use_l10n or (use_l10n is None and settings.USE_L10N) ) and settings.USE_THOUSAND_SEPARATOR ... ```
No it's not, without this patch it raises, e.g. ``` ValueError: Cannot serialize function: lambda ``` with this patch: ``` ValueError: Error during <django.db.models.fields.IntegerField> serializing: Cannot serialize function: lambda ``` It's not more descriptive, IMO. You can have hundreds of `IntegerField`s in dozens of apps. I would expect: ``` ValueError: Error during 'test_app.models.MyModel.field_1.default' serializing: Cannot serialize function: lambda ``` I don't see much value in this change if it's not feasible to get `<app label>.<model name>.<field name>.<parameter>` or at least `<app label>.<model name>.<field name>`. Maybe we should fix this in `FunctionTypeSerializer`, it should be doable to get at least `test_app.models.MyModel` from `__qualname__` and `__module__` :detective:
@ziima OK That's fine. Thanks. I created a new ticket for the (query) logic error here. https://code.djangoproject.com/ticket/29089
Do we need to actually test the changelist_view HTML here? (It's a bit yucky.) * It was `get_queryset()` that was of interest, and that's tested above. * Presumably we can rely on `get_queryset()` being called by the view, since that's tested elsewhere.
Use single quotes (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
I would stick to `%` formating for the sake of consistency with other `_check` methods.
Please add trailing dot.
Trailing comma... ```suggestion exclude=redis_excluded_caches, ```
A single line is okay here as per line length guidelines at https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style.
`assertIs(... , True)`
It's not clear to me why it's valuable to change the semantics here so that this validation doesn't happen first if `fail_silently=False`. I don't think the message must be changed to add "like".
By the way, something else that just occurred to me. It seems like this `for` loop could be simplified or eliminated if `self.allowed_origin_subdomains` were to instead cache a dict mapping scheme to hosts. For example, something like: ```python return any( is_same_domain(request_netloc, host) for host in self.allowed_origin_subdomains.get(request_scheme, ()) ) ```
Do we need a custom exception class? Maybe `ValueError` would be enough, e.g. ```python ValueError('Unsupported algorithm %s' % algorithm) from e ```
Chop blank line.
We prefer test names (and docstrings if more detail is needed) that describe the specific condition / situation the test is checking, rather than a reference to the ticket number, which requires more work to dereference when reading the code. (If needed, the ticket number is always available via the commit message).
Maybe: "To bypass ...., don't use person.houses.all() here."
No empty line at the beginning.
Sounds good, thanks. Please use the commit message from the pull request title or something similar when updating. Then uncheck "Patch needs improvement" and I'll give it a final review.
`resolve_expression()` implementation is the same as in `SearchQuery` and `SearchVector` so maybe we can add (in a separate commit) some mixin for this.
Good point. We should likely use `six.text_type` though because someone's crazy verbose_name is quite likely to include non-ascii characters which would blow up on py2 if we just user `str`
Using the decorator form would be a bit more concise: ```python @DecimalField.register_lookup class DecimalLessThanOrEqual(DecimalComparisonLookup, LessThanOrEqual): pass ```
Unrelated to this change but this `else` branch is unnecessary given we return on `IndexError`.
If we could assert it's None or the large value, that seems slightly better. Otherwise, LGTM.
Unless I'm missing something, `dest='exclude'` is actually not needed, but I see that it's the common pattern in other files in `django/core/management/commands/`.
Then we could slap an `if six.PY2` around it, what do you think? That way we'll know to remove it when we drop Python 2 support.
We don't use keys so maybe shorter: ```python messages.error(request, ', '.join(_search_form.errors.values())) ```
I'm sorry, the short variables had misled me, in fact there aren't any. Thanks
Right, but it's the `disabled` bit that breaks right? (Wasn't the weirdness from the ticket that exactly the same thing worked or not depending on that value? So a regression test for that is worth having.)
e.g. ``` except http.Http404 as e: status_code = 404 logger.warning('Not Found: %s', request.path, extra={ 'status_code': status_code, ... ```
Please use hanging indentation due to the [coding-style](https://docs.djangoproject.com/en/1.11/internals/contributing/writing-code/coding-style/).
Typo in the test name.
I think data is usually not passed as a kwarg, at least it's not needed here.
might want to verify the rest of the email attributes. It will probably identify the bug I pointed about above
`u1` and `u2` variables are unused, we can remove them ```python UniqueNumber.objects.create(number=1) UniqueNumber.objects.create(number=2) ```
this get_field_by_name should be adjusted with formalized model meta API I guess
`from django.utils.six.moves import range` (move from other file to fix flake8)
OK, thanks. Don't worry someone will prepare a patch.
Please remove it and put it into a module level variable in the csrf module (and start it with an underscore) -- I really dislike settings, especially when it comes to security ;)
I might be missing something but it looks like this attribute isn't used anywhere.
The usual style is to put the closing parenthesis on the next line and include a trailing comma on this line.
I think `schemes.css` would be a more explanatory name.
This is getting hard to read, I would recommend to name the separate parts, e.g.: ``` has_alias = getattr(expr, 'alias', None) is not None ```
Please add a trailing comma.
We usually model these names off of the unittest came case convention, e.g. assertRequestLogs
a OrderedSet, like @timgraham suggested
Double-checked, `meta.get_field()` does actually work for m2m and reverse fields. Probably we need tests to verify `Q(m2m_field=3)` and `Q(reverse_field=2)`. As I understand, the code above won't emit the warning for the m2m or reverse ForeignKey field. ``` User._meta.get_field('cities') <django.db.models.fields.related.ManyToManyField: cities> User._meta.get_field('profiles') <ManyToOneRel: profile> ```
I think we should use `self.exception_class` in the `ConnectionHandler` and keep this import only for backwards compatibility.
including the file name in the header would be helpful as there could be more than 1 file.
`module_label` -> `module_name`
nitpick: we are not so attached to the 80 chars limit, I think having those 3 lines on one should be fine.
You are completely right. What about this? Too ugly?: ``` js_catalog_template = \ r"""{% autoescape off %} ... ```
chop blank line
I created https://code.djangoproject.com/ticket/27753 to track the eventual removal of these functions.
Changing the names of variables which is not necessary for this patch makes it harder to review, can we revert them? e.g. `total_seconds_since -> since`, or ``` for index, (seconds_per_chunk, chunk_name) in enumerate(TIMESINCE_CHUNKS): ``` -> ``` for i, (seconds, name) in enumerate(TIMESINCE_CHUNKS): ```
return here without a `kwargs` variable.
I think these _could_ be: ``` __str__ = render __html__ = render ``` Avoiding +1 depth (and it's faster). Off the top of my head, the only reasons _not_ to would be: - `x.__str__` would report `<bound method X.render of ...>` instead of `<bound method X.__str__ of ...>` - you _could_ technically manually call `x.__str__(template_name='a')` but I mean, who's doing that? Discuss amongst yourselves whether to change it, I don't think it really matters much :)
master is now Django 1.8 so we start the deprecation now and remove it in two release which will be Django 2.0
`max()` handles the `None` case correctly.
I'm asking to change the code so that a u'' prefix isn't generated in the output.
Can we customize this class to check if it really works? e.g. ```python class MyExceptionReporter(ExceptionReporter): def get_traceback_text(self): return 'My custom traceback ' + super().get_traceback_text() ```
I think shorter lines would enhance readability. ``` clean_lookups = { LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part]) } ```
This sentence ``` "To validate an individual application's models rather than all applications' models, call ``self.check(app_configs)`` from ``handle()``, where ``app_configs`` is the list of application's configuration provided by the app registry." ``` is still valid. I will restore it.
You don't need to check each part separately.
@vanschelven or @expleo -- any input on this issue? Seems you two may have looked into it a bit from your previous work on the patch.
We can use f-string: ```suggestion f"Accept the default '{default}' by pressing 'Enter' or " f"provide another value." ```
I'd use six.assertRaisesRegex to check the error message as well
space after #
I would use the model `_meta.app_label` and `object_name` instead of its representation.
I have one concern :disappointed: Should we clear cached instance when a value is the same? because this leads to unnecessary queries. Maybe we should check value before clearing an instance, e.g. ```diff diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py index 346f67289e..0b51b68ebe 100644 --- a/django/db/models/fields/related_descriptors.py +++ b/django/db/models/fields/related_descriptors.py @@ -73,7 +73,7 @@ from django.utils.functional import cached_property class ForeignKeyDeferredAttribute(DeferredAttribute): def __set__(self, instance, value): - if self.field.is_cached(instance): + if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance): self.field.delete_cached_value(instance) instance.__dict__[self.field.attname] = value ``` You can find below tests that don't work anymore after the second commit. ```diff diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py index 5efe137730..cf3bea86d4 100644 --- a/tests/many_to_one/tests.py +++ b/tests/many_to_one/tests.py @@ -164,6 +164,8 @@ class ManyToOneTests(TestCase): self.assertFalse(Parent.bestchild.is_cached(parent)) self.assertEqual(parent.bestchild, child2) self.assertTrue(Parent.bestchild.is_cached(parent)) + parent.bestchild_id = child2.pk + self.assertTrue(Parent.bestchild.is_cached(parent)) def test_selects(self): self.r.article_set.create(headline="John's second story", pub_date=datetime.date(2005, 7, 29)) diff --git a/tests/one_to_one/tests.py b/tests/one_to_one/tests.py index 76f9d75417..0bc94bbb32 100644 --- a/tests/one_to_one/tests.py +++ b/tests/one_to_one/tests.py @@ -213,6 +213,8 @@ class OneToOneTests(TestCase): self.assertFalse(UndergroundBar.place.is_cached(b)) self.assertEqual(b.place, self.p2) self.assertTrue(UndergroundBar.place.is_cached(b)) + b.place_id = self.p2.pk + self.assertTrue(UndergroundBar.place.is_cached(b)) def test_related_object_cache(self): """ Regression test for #6886 (the related-object cache) """ ```
I see the parallel to how they are assigned in `WSGIRequest`, but still I would put them on separate lines here.
Indeed, then `obj.tags = obj.tags.union(tags)`, it's a bit faster.
Previously, this test didn't crash when we change `BaseModelFormSet.edit_only` to `True`. I pushed small edits.
I noticed that, with this removal, `django.forms.utils.flatatt()` is only used in one other place. Perhaps, in a follow up commit, we can change `AdminReadonlyField.label_tag()` to also render using templates: https://github.com/django/django/blob/eeed488a3439c5c5c3f0b5991ee400851057e127/django/contrib/admin/helpers.py#L193-L198 This would allow removal of `django.forms.utils.flatatt()` plus a bunch of tests in `tests/forms_tests/tests/test_utils.py`.
Wonder if it might be worth to also specify the `app_label` for clarity here. ``` python "The verbose_name of %s.%s is longer than %s characters" % ( perm.content_type.app_label, perm.content_type.model, verbose_name_max_length, ) ```
I was considering the case where close might fail and as a result does not set `self.connection` to `None` because it returns before that (probably via raise). But if `close_if_unusable_or_obsolete()` doesn't handle it any differently I guess we are fine -- we can add it later if needed.
Special-casing this flag here looks weird.
Isn't this off by one? If I construct ``` x = Decimal("1.1e1") val = DecimalValidator(2, 20) ``` then `val(x)` throws, even though `int(x) == 11`
You could use `setdefault((model_state.app_label, model_state.name_lower), {})` here.
I don't think it's worth doing fudges like that without a definite use case. For reference I checked `dataclases` and it leaves generated functions with their standard `__qualname__`: ``` In [1]: from dataclasses import dataclass In [2]: @dataclass ...: class X: ...: y: int ...: In [3]: X.__init__ Out[3]: <function __main__.__create_fn__.<locals>.__init__(self, y: int) -> None> ```
Django docstrings usually follow [PEP0257](https://www.python.org/dev/peps/pep-0257/), I would keep `"""Create a cursor. Assume that a connection is established."""`.
no blank line before class attrs needed
On master, I'd rather see a simple `str()`. Of course, the backport for 1.11 should keep `force_text`.
I think `*args, **kwargs` are unexpected.
This is the sole `BaseSerializer` subclass that returns `None` on `serialize` failure.
This should always be the case when you have `arity` set.
I'm trying on SQLite and the new test isn't skipped. If I revert the changes in django/db/models/fields/related.py it fails, but if I revert the change in this file, it still passes.
These test should be moved to the `TestQueryingWithRanges`.
`unrecognized_options` instead of `unknown_options`, also test is needed.
`check_site_id_type` -> `check_site_id`
Much clearer, thanks!
Unneeded since it's the default.
Perhaps "Cannot convert DateField '%s' to DateTimeField." (I'm not certain it's an issue here, but we're favoring '%s' over %r until we drop Python 2 support to avoid possible u'' prefixes.)
Reference to old style url()
1 line is okay --- we prefer longer lines up to 119 characters when it helps readability.
IMO this should not raise a warning.
prefer ``` test_urls = [ '/lookahead-/a-city/', ... ] ``` rather than putting them in the loop.
We usually try to keep `expectedFailure` usages for tests we plan to fix in the future as the test runner doesn't consider _unexpected success_ as failures. Using `self.assertRaisesMessage(AssertionError, 'Signal was unexpectedly sent.')` would be more appropriate here.
a single file or a list ...
@timgraham I wasn't sure how to push to this branch. Here's the commit to cherry-pick https://github.com/django/django/commit/4a89f24b9bb7a2b2b9a5a4d143fa80ad3871ce88
In Django we break after the operator, that's why `W504` is ignored. It's checked by `flake8`.
I think I'd rather leave this. Leading/trailing whitespace is allowed but in-between multiple values... Grrr. https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2
Single-quotes, unless double quotes are needed because you're mixing them.
Use `{}` rather than `set()`
Right :+1: OK let's leave it as it is.
I'd say, "Return a (sql, params) fragment to add or drop (depending on the drop argument) a default to new_field's column."
simpler? ``` if self.object._deferred: obj = obj._meta.proxy_for_model return obj._meta.model_name ```
I think you want to allow an extra parameter when it's a class based view In other words ``` # Class based views always take two arguements, (self, request). ``` Is not not true ```suggestion if signature.parameters.get('self'): num_parameters += 1 args = [None] * num_parameters ```
Does Simon's suggestion not work? If not, I don't understand why not.
@santiagobasulto What are your thoughts on renaming this to `CaseInsensitiveMapping`? `Mapping` being the stdlib ABC you're implementing. (c.f. `ImmutableList.complain()`: we're taking measures there to avoid mutation. I don't think we want or need to get into any of that here.)
Move `has_view_permission` above `has_add_permission` for consistency.
This would no longer raise `ValueError` but `PageNotAnInteger` or `EmptyPage`. I think this PR needs some more consideration and tests.
Trailing white space.
I think dash can't be used in an app name, correct? e.g. "'foo-bar' is not a valid app name. Please use only numbers, letters and underscores."
Nope, I guess it is as good as it gets. One option would be to rename `allowed_origins` to `allowed_origins_exact` but not sure if this is worth it.
0 is uneeded
Chop blank line.
I don't understand why an explicit `app_label` is specified here. It looks strange to me that this model is supposed to belong to the `exoplanets` application but is created as part of the `migrations` apps migrations.
I'm not convinced we need such a fancy solution -- after all, this is only for users who manually bypass the delete confirmation page.
This message should be updated also in `migrate` command.
This will probably break for `zh-CN` and others because Django returns lower cased language names. I do not have a good idea on how to fix that though.
Add a space after comma: `SELECT sql, type...`.
I think an output like `num_employees=(Max(Value(1))` would be more readable. That's what Simon suggested as well.
You could use `{!r}` so that `repr()` is called to include the quotes on strings.
Maybe you can do the following: ``` python if user.last_login: login_timestamp = user.last_login.replace(microsecond=0, tzinfo=None) else: login_timestamp = '' value = (six.text_type(user.pk) + user.password + six.text_type(login_timestamp) + six.text_type(timestamp)) ``` to avoid to have two conditions and to avoid inline ones.
Don't need to change this.
`# The database's limit on the number of query parameters.`
:+1: grrr, presence of items with `None` vs non-existence. Thank for the nudge.
Move this `# math` section above `# text` to keep sorted in the same fashion as the imports.
I changed this and pushed some minor edits in the #11687.
fget is the first positional argument, just do property(fget) (and probably use my_property or something similar instead of fget as method name)
and Python 3
Why y, x instead of x, y? Is this from PostgreSQL's function definition. If so, OK, if not, then I think the order should be x, y.
I don't think we should have that here
Everything testing stuff with LC_\* needs careful treatment for windows etc…
@pauloxnet Ahh, sorry, just merged.
I can confirm it is (I tried writing this patch a few months ago)
You'd made something similar use an f-string elsewhere: ```suggestion PO_FILE = Path(f"locale/{LOCALE}/LC_MESSAGES/djangojs.po") ```
You could use `self.module.autodiscover()`, but that might be obscure :)
If I were writing this from scratch, I'd consider "a bunch of functions that all take an optional `password_validators` arg and call `get_default_password_validators()` if it's not given" to be an indication that perhaps a higher-level class is in order that you can instantiate with a set of password validators and then call methods on (and a default instance of that class based on settings could be provided at module level). But I don't feel strongly enough about this to suggest actually rewriting it on that model.
add trailing comma
I'd would directly compare `callbacks`: ```suggestion self.assertEqual(callbacks, [branch_1, branch_2, leaf_3, leaf_1, leaf_2]) ```
:thinking: ```suggestion arg_joiner = ' <<-> ' ``` Paolo, Can you take a look? (\cc @pauloxnet) :point_up:
`ValidationError` can be single lined.
```suggestion """Validate a table NOT VALID constraint.""" ```
instead of "(1.7)", I'd suggest "(remove in 1.8)"
I would like to avoid using of regexp here, it is always clunky. We should take into account that only the `ArrayField` is affected but it's more complicated then it looks like, e.g. if we decrease a size and change a `base_field` in a single alteration then we still have a data loss: - `_field_data_type(ArrayField(IntegerField(), size=5))` returns `integer`, - `_field_data_type(ArrayField(CharField(max_length=16), size=4` returns `varchar`. So for `ArrayField` we should cast only when `base_field` is different and `size` (in any dimension) is not smaller than the previous one. It's complicated :disappointed: and would require a very special treatment of `ArrayField`'s. (\cc @charettes )
Please use single quotes throughout the test.
This is not a correct message for `@cache_control`, I'm going to move this check to decorators.
Looks like this will need to do the following to deal with transforms. ```suggestion select = self.select[0] return getattr(select, 'target', None) or select.output_field ```
Generally, your coding style uses many more blank lines than the rest of Django.
These entries are redundant; they cover the same line of code. A single one should suffice ```suggestion valid_hosts = ['localhost', 'subdomain.localhost', '127.0.0.1', '[::1]'] ```
Q never used
I would say "certain Python 2.7 versions" so we know that it's fine to remove when dropping support for it.
I think this pattern is more readable: ``` tests = ( (LTrim, 'John '), ... ) for transform, trimmed_name in tests: ```
Put `db_field.many_to_many` first, please.
I see no reason to uppercase these variables :thinking:
Chop blank line.
I think it would be much preferred if the tests didn't introduce a dependency on the template system.
Use `next(iter(self.choices), None)`
Seems okay to me. I don't think `Meta.db_table` can be any other falsey value.
This skip condition could be removed.
chop blank line
`# Valid POST creates a new article.` (instead of 'New Article should be created.' message)
The add_geometry_metadata sql, is, as far as I can see, not DDL -- and so, it can be executed by passing arguments rather than splicing them. This would require the elements of geometry_sql to be (sql, args) pairs instead of just strings.
:+1: on @charettes (thanks for the hint, didn't know this function exists :smile: )
The template name should have quotes around it.
I would have simply written: "Please do not add spaces around commas".
```suggestion insert_statement = self.connection.ops.insert_statement(on_conflict=self.query.on_conflict) ```
Well `self.field_name not in instance.__dict__` is not Python 2.3 compatible so I assume it was the reason 🤷‍♂ As of things are right now it's not possible for `DeferredAttribute` to end up in `instance.__dict__`.
I would revert this change, the previous version is clearer to me.
Shouldn't we pass in lhs_sql, rhs_sql, lhs_params and rhs_params? The problem is that if the connection needs to reuse the same part of the SQL multiple times, or it needs to have the expressions in reverse order, then the params will be in wrong order. Maybe this is an existing problem? If so, we could create a new ticket for this, and not care about this problem in this pull request.
I still missed one!
`# Storing language in sessions is deprecated - RemovedInDjango21Warning` (for greppability when doing the removal)
looks like the wording of this message should be updated in `docs/ref/checks.txt`
Just reverting this chunk should be sufficient.
OK. I already have them returning at a lower level but public update method still just returns the number of rows affected. I'll look into the `bulk_create()` case. Thanks
Since this is testing a change in `Field`, it might be better in `forms_tests/field_tests/test_base.py` and named something like `test_field_deepcopies_widgets`.
`get_random_string()` will never allow you to connect to the same memory database instance. You can probably use `self.connection.alias` for that so each database alias has it's own unique memory database. This also allows it to work with `threading.local`.
The docstring is not accurate here.
please use a variable for this string so that if it changes, we don't have to update it below as well
Some behavior has changed here. On the file-backend, the output of `get_payload(decode=True)` is now `b"Je t'aime tr\xe8s fort"` as opposed to `b"Je t'aime tr\xc3\xa8s fort"` originally (and with the other backends). I guess this might be a bug but I don't have much expertise. 5dfd824d38ec7d1f695494e46d603e89cae68661 may be relevant.
Not related to these changes but this code is `O(2n)` by making a list and then performing a containment check on it. The following would be better IMO ```python columns = self.connection.introspection.get_table_description( self.connection.cursor(), table ) for column in columns: field_column = field.column if ignores_table_name_case: column = column.casefold() field_column = field_column.casefold() if column == field_column: found_add_field_migration = True break else: return False, project_state
OK, so maybe we can at remove `active()/deactivate()` round-trip with: ```diff diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py index ccf4c242cf..c7be1f2634 100644 --- a/tests/i18n/tests.py +++ b/tests/i18n/tests.py @@ -390,12 +390,10 @@ class TranslationLoadingTests(SimpleTestCase): """Clear translation state.""" self._old_language = get_language() self._old_translations = trans_real._translations - deactivate() trans_real._translations = {} def tearDown(self): trans_real._translations = self._old_translations - activate(self._old_language) @override_settings( USE_I18N=True, @@ -423,8 +421,7 @@ class TranslationLoadingTests(SimpleTestCase): # All translations are loaded by the second pass. for rnd in range(1, 3): for language, nickname in tests: - with self.subTest(language=language, round=rnd): - activate(language) + with self.subTest(language=language, round=rnd), translation.override(language): self.assertEqual(gettext('local country person'), nickname) ``` It works the same for me.
I would read it as "validators in a 'U' 'L'" so I would say "in a" rather than "in an" but if you read it as "unordered list" than "an" is fine.
I think I might prefer `scope` (or similar) to `from_name`. (As ever with naming...) Maybe make it kwarg-only so we'd call it like this: ``` _user_get_permissions(self, obj, scope='user') ``` Otherwise, _"What's the string for?"_ — but this function is only used in this files, so maybe it's clear enough.
This should be in the existing `from .views` block.
must be -> is e.g. -> usually
You can drop the `or module.__spec__ is None`, both are now contained in the `module.__spec__ is None` check.
I've solicited input: https://groups.google.com/d/topic/django-developers/7bZbYVV6hg4/discussion
I think although `JSON` is better, I'd rather this was consitent with all of the other `HttpResponse` classes. Doesn't make the correct, but consistence should come first here.
It parallel's AddField/RemoveField (the latter takes only the name).
This check is also redundant.
I would use `log`: ```suggestion def log_lack_of_migration(self, field_name, model_name, reason): if self.log is not None and self.verbosity > 0: self.log(f"Field '{field_name}' on model '{model_name}' not migrated: {reason}") ```
> Wonder why having queryset class is so important here. I believe it's required because of the way [`SubqueryConstraint` deals with a `QuerySet` rhs](https://github.com/django/django/blob/1ec1633cb294d8ce2a65ece6b56c258483596fba/django/db/models/sql/where.py#L201-L213).
We decided to leave similar asserts in other hashers. Users should not call `encode()` directly.
This seem a bit arbitrary, is it the original logic? I'd type check against `base` instead.
```suggestion 2. ^(?:\w+(?:\w+))a => ^a ```
Remove blank line.
This should be removed in a separate commit if it's unused.
This looks like the only test failure that's fixed so the other tests should go in the first commit of "existing passing tests". Similarly, the commit message could be improved to describe more specifically what situation is fixed considering some scientific notation seems to already work.
Is there any reason you can't do the following? ```python md5 = hashlib.md5 ``` Also, it may be cleaner to do this in an `else` of the `try`.
For example: ```python class OtherModel(models.Model): pass class OtherModelM2M(models.Model): m2m = models.ManyToManyField(OtherModel, related_name='+') ``` `makemigrations` didn't detect any changes with this PR.
IMO this check is unnecessary: ```suggestion errors.extend(operation.check()) ```
Would `obj.__class__` not be more helpful? (That way I get the full import path, rather than just the name, which may not be unique.)
I guess those exceptions would be reraised later on at some point though. I think the consistent history checks aren't so critical that some small chance of incorrectly skipping them will cause big problems (after all, we've had migrations since 1.7 and the chance of inconsistent history is fairly low in the first place). Unless someone has an alternate proposal that isn't too invasive, I'm inclined to go with the exception catching that I proposed. We might revisit the issue in 1.11 if needed.
@collinanderson That is a good point, at first I wanted to be safe against leaking anything (just to be on the safe side), but the DOS argument is more important.
"whether this expression is about to be used..." (or add a question mark at the end if you prefer the "is" version)
I don't think "qry" is advantageous over "query".
```suggestion RemovedInDjango50Warning, ```
1. Please try to refrain from making unrelated cleanups like this (when otherwise not touching the code) as it's confusing with looking through commit history. 2. ModelClass instances -> ModelAdmins and Fix -> Fixed in the commit message 3. Thanks!
```suggestion msg = "'Ensure this value is a multiple of step size 0.02.'" with self.assertRaisesMessage(ValidationError, msg): ```
This would need updating in `checks.txt`
replace try/except with `if 'class' in attrs:`
The oracle error code names looked right when I read them here, but then when reading the code that uses them in the test I had to pause and say, "wait, what's ora-01031"? So I think they would be better named something like `_execute_raise_user_already_exists()` etc
Is this really necessary? Which information do we leak by using a normal any? To the best of my knowledge you'd leak which `SECRET_KEY` you used, which imo shouldn't be a problem? I also think it is maybe not the best idea to try against all secret keys if the first one (the common one) already matches, this creates extra work that should not be needed imo. In that sense I'd loop and break out early if you get a valid sig.
You want to use set operations here: ```suggestion if not set(route).isdisjoint(string.whitespace): ```
We could move this hook to a separate PR, and change current checks in few places e.g. `db/models/sql/compiler.py`.
no need for docstring
[`PermissionError`](https://docs.python.org/3/library/exceptions.html#PermissionError) only corresponds to `errno.EACCES`, `errno.EPERM` is there a reason to inspect the `errno`? :thinking:
```suggestion @mock.patch.dict('sys._xoptions', {'utf8': True, 'a': 'b'}) ```
no blank line
`"on_delete will be a required kwarg for %s in Django 2.0." % self.__class__.__name__` I assume this should apply to `ForeignObject` as well.
I changed `objects` to `foo` here and all the migrations tests still passed, so I think there may be another test needed.
For consistency, let's use also `prefix + 'MinimumBoundingCircle'`
Missing `self` :)
Comparing instances without primary keys and exactly the same instances is probably the rarest case. I don't think it's desirable to do this every time.
... or simply accept `tuple` if that's the case on MariaDB.
I don't like importing from admin.tests here. Maybe we could factory out the minimum shared logic (which I believe is just setupClass and tearDownClass) and put it somewhere in django.test.
`Cot.__init__()` is unnecessary.
It works. But it exceeds 80 characters.
This could be simplified to use `m.groups()`...
no blank line
I know about pep8. Django codebase is not following pep8 for all cases (https://github.com/django/django/blob/6afa6818fcf25665bbf61f0921c8c8c6fa8f223e/setup.cfg#L7). Also, if you're adding or changing logic it should not contain formatting changes to look cleaner.
I have the same doubts to the `static_storage_changed()` receiver.
Do we need this? if so, it is not tested.
~~I've switched `except` to `finally`~~. Reverted.
This can be a class attribute: ``` py class SessionStore(SessionBase): session_class = Session def __init__(self, session_key=None): # ... ``` Then you can subclass `SessionStore` and update the `session_class` attribute: ``` py class MyCustomSessionStore(SessionBase): session_class = CustomSession ```
It makes sense to me that you would leave it unset unless `self.reason_phase` explicitly sets it.
I know it's a bit weird but I think to keep it, since we want to ensure that the `doseq=False` behaviour is correct. (I guess that's covered elsewhere but having both means the test, and what hangs on the switch, is easy to read.)
I think that's a good name if the code were more complicated but `modeladmins` and `for modeladmin in modeladmins:` seems okay to me.
Added level fix as well
Just missing spaces at the end of these strings - I've added them.
I suggest `model.__name__` rather than `str(model)` (x2).
``` python if 'required' in attrs: del attrs['required'] ``` or `attrs.pop('required', None)` might be better here unless I am missing something or you want to handle `KeyError` specifically.
`assertEquals` is deprecated in Python 3. Also not sure if this test belongs in `expressions.tests`. ```suggestion self.assertEqual(instance.annotation, "1") ```
Well, this is not what PEP 257 recommends. https://www.python.org/dev/peps/pep-0257/
Avoid using "we" (https://github.com/django/django/pull/8284/files#diff-50c5e52240e2649c752f13682164fd60R55)
Why not `first()`? :thinking: ```suggestion ).first().sibling_ids, ```
Actually I guess the ideal way to test this would be something like: ``` backend = ModelBackend() backend.get_user_permissions(user) ```
Perhaps you'd like to import the messages from django.middleware.csrf to reduce the repetition and the need to edit all the tests if a message changes.
```suggestion 'name_local': 'Melayu', ```
Sort these formats alphabetically.
There is no need to compare generated queries. Please remove it.
Maybe @felixxm or @carltongibson can guide, but I believe it'd be good practice to use a `warnings.warn` in `__init__`, although a deprecation timeline has not been determined for `django.contrib.postgres.field.JSONField`.
Please wrap at 79 chars.
```suggestion assertIs(self.set_up_called, True) ```
I probably missed your reply to this, but connection is a confusing name since it usually refers to `django.db.connection`
... that doesn't _allow_ migrating ...
I would prefer to keep a slice logic with `start` and `stop` instead of `low` and `length`.
@jdufresne I don't think that it's worth to change existing code.
`max_length` -> `maxlength`
```suggestion 'min_unique_chars': SECRET_KEY_MIN_UNIQUE_CHARACTERS, 'prefix': SECRET_KEY_INSECURE_PREFIX, ```
Maybe `__qualname__` is better? Besides that, left you a small suggestion how your exception message may be improved. ```suggestion raise AttributeError( f"{cls.__qualname__} already has an attribute '{name}' which would be " f"overridden." ) ```
this attribute should be `non_picklable_attrs` I think.
This is already tested and it works without the patch, so I removed it.
```suggestion call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out) self.assertIn( "to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', " "models.DO_NOTHING, to_field='people_unique_id')", out.getvalue(), ) ```
Use `force_update` in this case to make sure an error is thrown if it doesn't exist.
I'd use an approach from other tests that iterates over the key/values and checks the key is there but not the value.
Could use `assertSequenceEqual` with `values_list` ```suggestion authors = Author.objects.annotate( md5_name=MD5('name'), ).values_list('md5_name', flat=True).order_by('pk') self.assertSequenceEqual(authors, [...]) ```
I'm not sure there's much value in testing two invalid codes instead of just one.
could also assert they are all gone Also *if* we leave 1 item with `=` as a special case (which I don't believe is necessary, as I wrote above), it will need its own test for 100% coverage
This will not work. `cls._meta.ordering` is defined in `django.db.models.options.Options#_prepare` if `order_with_respect_to` used, so it will fail if I will use only `order_with_respect_to`.
We cannot use `id` because a model can have a custom primary key. I've changed to `pk`.
True, `exc` -> `cm`.
I can see a decent reason to use the `DjangoJSONEncoder` as the default as it gives us `Decimal` and `datetime` support for free. These are very common use cases for django sites (especially datetime!).
```suggestion subprocess.run(["black", "--", *written_files], capture_output=True) ``` so that filenames that look like command line options don't break the command.
You can drop the `all()`.
I don't think the two lines (`*_normal`) are needed here since this functionality is most likely tested elsewhere (and you don't make use of those variables in your assertions later on).
Add a new line between `__future__` and stdlib imports to appease isort.
Should be `del self.request_factory`.
While we're at it we could also specify which related field to select; only `'content_type'`.
This assertion doesn't fail without a patch, IMO we can remove it.
migration_class, model_name, etc.
maybe: `# If no browsers were specified, skip this class (it'll still be discovered).`
Yes, this code looks a bit suspicious. Perhaps a signal handler that listens for `setting_changed` might be appropriate.
chop blank line (and below too)
Also, you've defined `fetch_returned_values()` for Postgres as `cursor.fetchone()`, which is wrong when many rows are expected.
I believe there's a typo in that `pat` should be `part`.
Any problem with: ``` @property def media(self): ```
I think this one requires a savepoint, but create() calls save(), and save has savepoint=False.
I think this works fine and is a bit simpler: `with mock.patch('django.utils.timezone.now', return_value=aware):`
`# Avoid infinite loop if there's a cyclic reference (#29393).`
For the sake of consistency, can we convert `model_name` to lower in here. All occurrences are calling `.lower()` explicitly.
prefer hanging indent to allow longer lines
can simply use "a" rather than "a#" in this, the next, and some of the other tests.
It feels wrong to pass a negated option to `MigrationWriter`. It feels like `include_header=self.include_header`
Returns -> Return It's not obvious to me what "real URL" means.
Oh never mind, I see that you are now using multiple `return` statements; that's OK.
Maybe something like: SQL to create a procedure for use by the Django test suite. The functionality of the procedure isn't important. (not sure if that second sentence is correct -- feel free to revise)
I removed these decorators because we added a system check so they don't ignore anything.
Please ignore, my suggestion is invalid syntax.
For new code, new PEP257 docstring verb style: "Return..."
`pass` might be fine here since we don't need the return value
`- The dictionary of PG* environment variables, or {}.`
Subjective opinion: keep the same layout as `do` => ```suggestion Thing.objects.create(num=num) transaction.on_commit_robust(lambda: self.notify(num)) ```
Ditto about `no_color=True`
You can likely just resolve the F() expression using resolve_expression() once you have removed the outerq prefix from the F obj.
Handlers are not frequently created and can be monkey-patched so I don't think we should use `__slots__` here, see ticket-12826.
Moved in #15947.
Yes, we should probably add an actual message like you've done here and use `exc_info=True`. Please do it in a separate commit or pull request using "Refs #18773 -- ..." in the commit message (for reference, the commit is dc5b01ad05e50ccde688c73c2ed3334a956076b0). Thanks!
has a limited
I'd use `namespace, table_name` instead of string indexing. (or _ instead of namespace if unused variable names is a problem with the first suggestion).
Right, I see. With the following: ```python f = SingleZipWriter('test.txt.zip', 'w') f.write('abc') f.write('123') f.close() ``` I get: ``` /usr/lib/python3.8/zipfile.py:1517: UserWarning: Duplicate name: 'test.txt' return self._open_to_write(zinfo, force_zip64=force_zip64) ``` Thanks for taking the time to look.
`OrderBy` should also support reverse ordering.
This is redundant because `total_unique_constraints` returns only `UniqueConstraint`s.
I'd use more descriptive variable names, e.g. `nonempty_qs_index, nonempty_qs = `
A reason for the longer suffixes was to simplify inspectdb. Using different names would require mapping the names that PostgreSQL returns to whatever names we picked.
Right, I think we could use model fields as a parallel -- we don't include all options a field is initialized with in the `__repr__()`. Here's the implementation: ``` def __repr__(self): """Display the module, class, and name of the field.""" path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__) name = getattr(self, 'name', None) if name is not None: return '<%s: %s>' % (path, name) return '<%s>' % path ``` So I'm +1 to not implementing a custom `__repr__()` for each subclass unless someone can present a counter argument. \cc @akki I created https://github.com/django/django/pull/8643 to remove `BrinIndex.__repr__()`.
Collapse this decorator into a single line.
I think this changes the logic (possibly in a way not detected by CI if tests are run in a UTC locale). Needs to handle the USE_TZ case to get the UTC time.
Okay, then I think there should be a regression test for sure, to make sure code using the helper method is behaving the right way with regard to the order.
add trailing comma
For backwards compatibility reasons, users using the widget like `SelectDateWidget({'id': 'myid'}, [2012, 2013, 2014], True)` this is going to break. It'd suggest to move `months=None` to the end of the argument list.
I usually alphabetize foo.bar before any foo.bar.*
Oh sorry, I did mix it up with `dict.get` -- /me goes into the shame corner
Extra spaces around `=` are not necessary: ```suggestion return ( f'<{self.__class__.__qualname__}: model={self.model.__qualname__} ' f'model_admin={self.model_admin.__class__.__qualname__}>' ) ```
chop blank line
While this is technically correct I prefer ``` if not (many_to_many or foreign_key) ``` as it describes the intent better.
`article_inline_formset` -> `formset` would be fine, I think.
```suggestion 'The extra_tests argument is deprecated.', ```
Using `CollectionTestCase` gives us existing directories in "static" settings.
`name` is always a string so we don't need to serialize it. I changed this.
Please use `assertRaisesMessage()`.
I think we should add also `RemoveCollation()` to fully support managing collations via migrations.
I wish `mock` has a less verbose interface to count the number of calls while keeping a function around.
This test requires a little bit more validation - all this checks is that force_insert is a valid argument (or, at least, and argument to save() that doesn't raise an error). It doesn't verify that force_insert is passed into the underlying save method.
As you mentioned, the situation could occur when two users are using the admin simultaneously, one deleting the object and the other changing the foreign key. I think redirecting to the intermediate page which informs the user that the object is protected is most helpful in that case.
as below for i18n41
You are not using `removed_for_migrations.get('message')` as a primary source here.
Could be nice to fix and test this typo separately.
Chop "we" per our [style guide](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
You could pass a literal boolean using `Value(True, output_field=models.BooleanField())`.
I'd be great to have bit more clarity about which failure case we're handling here with `KeyError`. This seems like a complex routine wrapped in a catch all.
"and PostgreSQL's interval format." (no comma)
Don't see a test failure with this reverted.
It would be more correct without the comma in the empty case, and I think a test wouldn't hurt.
Should `template=None` be a local variable rather than an (unused) kwarg? I don't think the `as_vendor()` methods typically take any kwargs. Similarly for `function=None` for `as_postgresql/sqlite()`.
Missing 1 space of indentation.
Ah, so this won't be triggered by accessing request.POST. It seems fine to me then. :)
As Collin said, slightly longer lines are okay rather than awkward wrappings like this.
Please use periods
`assertEqual` -> `assertTrue`
I think this should be `old_m2m_model`.
separate issue but I have no idea what the existing SAVED_USER/SAVED_PASSWORD stuff is and it doesn't seem to be explained anywhere
I think that `self.select_for_update_of` should be a tuple rather than a dictionary.
Please move it outside of the context processor: ```suggestion self.isolated_local_models = [Author] ```
We can try to refactor [existing code](https://github.com/django/django/blob/a9cf954e6174450057ea1065aa2ccbbd12f59b65/django/db/models/sql/query.py#L1351-L1375) and add some internal hook instead of having similar (identical?) logic in two places.
This is not strictly related with functional indexes, I'm going to move it to a separate PR.
Do you need a `model_admin`? The ticket only mentions a model instance (`model` is a class not an instance). I'm not sure how a model admin class can be used in templates :thinking:
Is there any more complication than adding `val` in the string interpolation: `duplicate %s (%s)`? Just seems like it's a trivial addition without any downside.
Blank line is missing: ```suggestion from .sites import CustomAdminSite ```
this works (need it to be a list instead of generator): ``` ignored_roots = [os.path.normpath(p) for p in (settings.MEDIA_ROOT, setting.STATIC_ROOT] ```
I would omit that part. Git history should allow us to get back to the original ticket if needed.
This is actually done by `SimpleTestCase` now.
This looks unnecessary, because we compare with a one-item list :thinking: (the same in L791).
`BOOLEAN` data type is generally not supported in SQL on Oracle, that's why you cannot compare `BOOLEANS` to anything. However it's possible when wrapped with `CASE ... WHEN`. The main issue is that check constraints handle `NULL` in a special way, i.e. ``` > SELECT CASE WHEN NULL > 30 THEN 1 ELSE 0 END FROM DUAL 0 ``` but check constraints with the same are not violated. Maybe: `supports_comparing_boolean_expr` :thinking:
```suggestion from django.utils.deprecation import RemovedInDjango50Warning ```
Do we not also need to change this as `.count()` will include the duplicate values? I noticed that previous patches attached to ticket-11707 took this into account. If this is changed there should also be a test for this.
Maybe a final comma. I caught you :-)
I think a more extensible solution would make `MAX_NAME_LENGTH` usage in `set_name_with_model()` a class attribute of the index which this subclass could override.
This can be single-lined. ```suggestion '<option value="" selected="">---------</option>', ```
All the blank lines don't add much for me but I won't insist.
OK, so `PostgresConfig.ready()` enforces calling `register_type_handlers` that we need for `hstore`. It should also be called when we create a new extension, I'm not sure why it's not called with `spawn` :thinking: .
Chop blank line.
single line looks better here
I don't see much value in this docstring: ```suggestion ```
How about: > Call the parser's add_argument() method, suppressing the help text according to BaseCommand.suppressed_base_arguments.
Nitpick but use `isinstance(other, Tag)`.
Ahh true, sorry for the noise. No changes are required.
The following pattern is getting used here a lot: ```python if 'all_relations' in self.__dict__: ... else: self.all_relations ``` It seems like it should be possible to make this pattern simpler and easier to understand. For example, it looks like the current pattern relies on `@cached_property` setting a key in `self.__dict__`, but it doesn't seem like that should be necessary as it relies on a couple implementation details. (A `cached_property` is more common for cases where the caller doesn't care about whether the value has been cached yet -- you just access the property like a normal property -- but here you do care.) What about making it so that the check can instead be `if self.all_relations is None` (and not using `cached_property`), and then call a method to set it if it is `None`? Another idea would be to make the if check an appropriately named method call that returns a boolean and sets it if necessary. Then no `else` clause would be needed each time this pattern is used.
Remove this empty line, to keep the style consistent.
(suggesting to delete this test anyway, however, this could fit on the previous line and if not, use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style)).
you can actually do `set(self.field_names).difference(fields)` here.
Should be lowercase.
Why would the Last-Modified header not be set when it is not found in ALL maps? shouldn't it be set as soon as one is found.. and only NOT set if no last_mod is found.
no u'' prefixes -- we use `from __future__ import unicode_literals`
I know existing tests are bad about this, but seems like we should have "cleanup" in a finally block.
Shouldn't `w[0].message` be `w[0].category`? You could also deindent this line.
The default value it not necessary, IMO: ```suggestion def __init__(self, defaults=None, specified_apps=None, dry_run=None, verbosity=1, log=None): self.verbosity = verbosity self.log = log ```
You can remove this docstring.
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
the comma here isn't needed
`response = ` (don't think the abbreviation helps much)
This docstring could use another sentence explaining the new `now` functionality. Something like "If the `value` parameter is omitted, returns the current time in the current timezone."
1. I think you just need a `urlpatterns` variable at the module level. 2. Maybe a simpler test could just call `get_context_data()` on an instantiated version of the mixin or one of its subclasses and verify 'form' is there.
In fact, this should be moved into the definition of `context` above: ```python 'can_change_related': self.can_change_related, ```
LGTM besides extra newline that fails flake8.
We could also do not pass `default_bounds` when not provided, e.g. ```python class BaseRangeField(forms.MultiValueField): ... def __init__(self, **kwargs): ... self.range_kwargs = {} if default_bounds := kwargs.pop('default_bounds', None): self.range_kwargs = {'default_bounds': default_bounds} super().__init__(**kwargs) def compress(self, values): ... try: range_value = self.range_type(lower, upper, **range_kwargs) except TypeError: ... ```
The abstract model will not be registered, thus not be included in your test. You might need to call the check manually to validate your change.
no dash needed for "subexpression"
I don't think this assertion is necessary -- if it's None we'll get an error in the next assertion which should be just as easy to debug.
Maybe we could add a new hook for the unique constraint names (we have for example `_fk_constraint_name()`).
Don't see why not.
I think the usage of `partition` is correct here.
Find the minimum max allowed length
We can also check the name: `self.assertTrue(name.startswith('__unnamed_constraint'))`
There is the problem that many people actually do use runserver in production despite all our warnings, so the current thinking among the core team is that we do have to treat runserver problems as security issues.
I'm saying if a database has `connection.ops.max_name_length() >= 74` this test won't pass because the database will be able to handle "verylongmodelnamezz...."
Removed, see #11564
```suggestion # A composite constraint containing NULL value cannot cause ```
Couldn't give you an opinion without spending a lot of time figuring out the purpose of this patch.
Perhaps be explicit and return `None` here.
That's my fault: in an earlier version, the `colorama.init()` was at the module level, but I didn't think having that there for everyone was a good placing. > ...use it here and in `color_style()` Makes sense.
Could you please keep the cross-app reference that we had before.
I moved `child` and `parent` to a separate templates.
I might just call `first()` here too. (That way you can drop the `get()` later...) ``` fan = Fan.objects.annotate(fan_for_day=Cast("fan_since", models.DateField())).first() ```
Just trash it IMO, and the corresponding one in gis. The converters changes already completely removed/renamed two (private) methods on DatabaseOperations and Compiler
1-52 or 1-53. For example 2017 will have only 52 weeks (based on ISO). IMO it should be clear, that week 53th doesn't always occur.
I don't suppose it actually makes a difference, but would we not do this in the other order? (i.e. the `super()` call at the end.)
This test is cute <
could you please use this style so lines don't exceed 119 characters? ``` self.assertEqual( '/ns-included1/test4/inner/37/42/', reverse('...') ) ```
Delete this blank line.
This check would benefit for being a little stronger. As currently phrased, it's checking that every value of f.rel in local_fields is _either_ a related.ManyToManyRel or None. This doesn't validate that the right field is returning the right result (e.g., a data field returning M2M for some reason).
I should have suggested introspected_field_types (plural, to match similar attributes in DatabaseOperations) rather than singular.
I think you can use `assertRaisesMessage` throughout these tests.
```suggestion 'Accept': '*', 'Host': 'example.com', ```
I think it would be better to put these tests in `tests/auth_tests` unless there's some reason that's not feasible.
One of the `self.GT` elements should be `self.GE`.
Not sure about the value of the docstring here.
```suggestion self.assertEqual(value, (72, 75)) self.assertEqual(value, pickle.loads(pickle.dumps(value))) ```
It looks like the `lon_lat()` and `coords()` methods are no longer tested directly.
limit line length
Ddon't think this is needed since the next line would raise KeyError anyway
Or rather, you can delete the assignment from `_get_current_token` and leave the check here.
use: ``` msg = ( "Using model name %r in queryset lookup " "...." ) ``` to avoid backslashes.
Am not sure that I follow the argument for this.
I'd like `import_string` to catch `ValueError` and `AttributeError` and re-raise `ImportError` for those cases as described in the ticket. Otherwise this looks great (and needs another rebase for my deprecation timeline re-ordering earlier today... sorry about that).
I might be worth sorting instances by content type first to avoid duplicates `Q` clauses; `groupby` expects objects to already be ordered by group.
This change is unrelated, I will move it to a separate PR.
remove u'' prefix (syntax error on Python 3.2 and unnecessary since this file has `from __future__ import unicode_literals`).
Might want to replace "old" with "pre-Django 4.1" and "new" with "Django 4.1+".
chop blank line
Is there any reason to use `exc` instead of `sys.exc_info()`?, as in other cases :thinking:
We could add a `files_copied_msg = "static files copied"``attribute and`self.assertIn(self.files_copied_msg, output)` so that something in the output is verified.
Please revert this unrelated change.
this could be a single line - we prefer longer lines up to 119 characters when it helps readability
Please wrap docstrings at 79 characters. The second sentence is missing a period.
another PEP8 error is no comma after , -- if you'd like to clean that up, you can just remove ",None" as that's the default if the key doesn't exist.
Thanks for the report, I've prepare a fix #13529.
Should this be `old_field.db_index or old_field.unique` since `unique=True` also creates indexes? (at least until https://code.djangoproject.com/ticket/24082 is fixed)
I've got an idea for how we can separate MySQL/MariaDB on the DB backend coming...
I think we can drop this docstring. We don't need to repeat it for every object that implements deconstruct().
I'm pretty sure you want to keep using `isolate_apps` here.
Maybe this should be a class docstring :thinking:
chop blank line
shouldn't the translation be deactivated in the end? (i.e. activate the language prior to the first activate call)
but -> and
We don't need to test multiple cases because we want to ignore only locales with hyphens.
Sorry - I could have done this more cleanly: ```python if not getattr(connection.ops, 'spatialite', False) or connection.ops.spatial_version < (4, 3, 0): return self.as_sql(compiler, connection) ```
Yeah, we will need a testcase either way ;)
I'd use `.objects.create()`
Swap the apps in `call_command()` but leave them sorted in the error message.
Maybe we could make it less coupled if there were some attribute on the handler class that could be checked here.
If I remember correctly there was discussions about making sure `ready()` is always idempotent as it can be called multiple times (during testing when using `allowed_apps` or overriding `INSTALLED_APPS` if I remember correctly). Now both alternatives aren't technically idempotent but closing all opened connections looks like it has more chance of having undesirable side effects then executing queries on already opened connections in a testing scenario given how Django's testing infrastructure uses transactions for example.
I guess `**through_defaults, **{…}` would work as well given surfacing a `TypeError` if any of the ids properties are provided through `through_defaults` is probably a better idea than simply dropping them.
Those two arguments are required for `DecimalField` (I assume `None` isn't a valid value).
Please wrap all message at 79 chars.
Can we move tests for callable that returns `pathlib.Path` to a separate commit? It works before this change.
Ups, nevermind; you have it in 1.5 now :/
I don't think we should suggest doing it this way, hence I'd suggest removing this test.
might as well have a trailing comma.
Doesn't matter much, I guess.
Maybe just put these tests in a separate TestCase to avoid useless creation and deletion of companies? Especially since you have two tests doing identical setup of alternate company data.
This test is not decorated with `@isolated_apps` so we should use `local_models`. Please move it also outside of the context processor: ```suggestion self.local_models = [AuthorWithUniqueName] ```
I think the loop makes it look more complicated than it needs to be. How about something like: ``` python NullableFields.objects.bulk_create([ NullableFields(int_or_null=1), NullableFields(int_or_null=None), ]) ```
Newline after the open parenthesis, and then just a four-space hanging indent for following lines. Avoids losing so much horizontal space to indentation.
We can use a new instance instead of changing `admin_email_handler`: ```suggestion handler = AdminEmailHandler(include_html=True) ```
These checks should be run against `engine_cls.template_class` and not `engine_cls`.
I think you can drop the `list()` here.
Can you elaborate on this except branch. Trying to figure out when this happens.
these lines are a bit long... ``` m2m_field = models.ManyToManyField( VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz, related_name="rn1", ) ```
> Weird stuff! Oracle doesn't ignore unnecessary `ORDER BY` clauses in subqueries, i.e. it raises an error if a subquery doesn't use `DISTINCT`, `FOR UPDATE`, or is not sliced. I renamed `supports_ordered_subquery` to `ignores_unnecessary_order_by_in_subqueries`, it's more accurate, IMO.
Please revert this unrelated change.
You can use `schema_editor._index_include_sql()`, e.g. ```suggestion 'include': schema_editor._index_include_sql(model, include), ```
Use the context manager version, please.
Then we can get rid of these. ```suggestion ```
A list of expressions can be represented by a Func expression that only has arguments and no function call. See: ``` class ExpressionList(Func): template = '%(expressions)s' arg_joiner = ', ' def __init__(self, *expressions, **extra): if len(expressions) == 0: raise ValueError('%s requires at least one expression' % self.__class__.__name__) super().__init__(*expressions, **extra) ```
I think you should use `self.assertIsNot()` instead.
Chop blank line.
missing spaces around *
Use generators to avoid massive memory consumption when huge lists are being used: ``` for batch in (objs[i:i + batch_size] for i in xrange(0, len(objs), batch_size)): ```
Maybe store the data type instead of getting it twice? ```python db_type = connection.ops.cast_db_types(self.get_internal_type()) if db_type: return db_type % self.db_type_parameters(connection) return self.db_type(connection) ```
rm 'postgres' 😉
I think so (although some of the formatting improvements are welcome). A second opinion from someone who worked more with the new style wouldn't hurt.
You could assign `start_transaction_sql` to a variable to avoid calling it twice.
Add trailing comma and use single quotes.
Correct - there is a significant performance improvement when no fields need a converter (defined in the db backend or as `from_db_value`). Arguably it would be nicest if `ArrayField` only defined it when it was needed, but this would cause inheritance issues so I'm happy for it to be there all the time.
Move `has_add_permission` above `has_change_permission`.
please wrap docstrings at 79 characters
Since this is a bug, it will be good to have a separated test for this issue.
I'd like a docstring, especially to explain the applied_migrations parameter.
Revert this unrelated change.
Since utilities functions can be called in tight loops it's best to minimize the number of Python function calls when readability doesn't suffer too much.
> You test effectively fails against main but passes against this branch without any further changes. It also passes if we remove the changes in RelatedIn.get_prep_lookup that this thread is attached to. True, so it's a proper regression test for `In()` lookup, and at the same time using `set_values` is not necessary for this to work.
no spaces around = (mangle_from_ = False)
```suggestion # Use XeLaTeX for Unicode support. ```
not sure the difference, but I see we use `codecs` rather than `io` here: admin_scripts/tests.py: with codecs.open(path, 'r', encoding='utf-8') as f:
Hey @patrys — Nice. 👍 > The last puzzle piece is... I'd gotten to just before this, but was missing this, so 👯 — Thanks! We need to have a little think about how we structure calls to not run into this — especially if they're nested somewhere inside a context manager, as @felixxm hit for `CaptureQueriesContext` — but tomorrow... 🛏️ 🎁
```suggestion 'admin:%s_%s_change' % ( remote_field.model._meta.app_label, remote_field.model._meta.model_name, ), args=[remote_obj.pk], ```
Ahh I see, the test is the other way around; if the filter wasn't applied all results would be returned 👍
Remove `debug=False` since that's the default.
WDYT about adding `or self.title` here? ``` python self.title = title or self.title or self.lookup_title ``` This would add support for the following: ``` python class MyStaffFilter(BooleanFieldListFilter): title = "By can haz admin" # no effect :( overwritten in __init__ @admin.register(User) class UserAdmin(UserAdminBase): list_filter = ( ("is_staff", MyStaffFilter), ) ```
In theory a locale dependant pattern could be provided and `locale.setlocale` be called but this is really unlikely.
, -> .
Thanks for checking the usage elsewhere. If the same pattern exists elsewhere (you're right, it does), then its needlessly pedantic of me. It's fine as is.
"Return" would be PEP 257 verb style.
NotEqual (chop s)
Is the class name correct? I don't see any F expressions -- maybe I misunderstood what "FLookup" means.
Ok, I'm a bit disappointed :smile:
Since it's impossible to decide...., it's left ...
This is worrying :thinking:
You don't need a context manager here anymore (handled inside of `unapply_operations()`. Can you additionally check for the state changes after rename (see lines 417 ff on how to do that).
This check was my least favorite part of this change. It feels odd to issue a warning for using the default. I never came up with a clever way to make this warning more meaningful/reduce false positives.
I think it can fit on one line.
Please have a look at https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/
This doesn't seem right. Surely `show_save_and_continue` should only be available if you can change an existing item. If you only have the _add_ permission and not _change_, once you have added an item, you can no longer change it.
This is already covered by `test_file_from_disk_as_attachment()`
~~`verbosity` is already validated `django.core.management.base.BaseCommand`,~~ I don't think we need any validation for `level`.
`contrib.postgres` stuff shouldn't go outside of `tests/postgres_tests`. That said, the related modules stuff should be tested here by recreating a similar setup with a custom field.
to match the behavior of `_get_raw_host()` I think this reconstruction should only occur in the `SERVER_NAME` scenario.
A concern I have, looking at this, which I didn't explicitly mention in the original ticket [because I've never done such], is that this would allow the same accidental non-error if given an `OrderedDict`, because it supports the same expansion but isn't a subclass of the `dict` type. I think I'm now reaching for real niche use-cases that have presumably never knowingly happened [or they'd have been reported long before I noticed], but still...
I think list() is redundant with sorted(), e.g. https://github.com/django/django/pull/4666
An equivalent, somewhat less ugly option: Instead of the above, add a `from_db_value` method: ``` python def from_db_value(self, value, connection, context): if ((not value) and isinstance(value, six.string_types) and connection.features.interprets_empty_strings_as_nulls): return None return value ``` `super(ForeignKey, self).get_db_converters(connection)` then invokes it. But I'm really not sure that's what `from_db_value` was intended for.
IMO splitting this with a new `RecursiveAsymmetricalM2MTests` class is not necessary.
I would code it like this: ``` DEFAULT_USER_ATTRIBUTES = ('username', 'first_name', 'last_name', 'email') def __init__(self, user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7): self.user_attributes = user_attributes ```
Chop this line with above change.
chop blank line
I believe the reporter suggested that this should be -61 seconds. If this is correct, it seems that existing cases like '-15:30' also need to be changed.
The classes should be sorted alphabetically in the file.
We could add a small release notes about this change in the [Database backend API](https://docs.djangoproject.com/en/dev/releases/4.0/#database-backend-api) section, e.g.: ``` * ``DatabaseOperations.year_lookup_bounds_for_date_field()`` and ``year_lookup_bounds_for_datetime_field()`` now take the optional ``iso_year`` argument in order to support bounds for ISO-8601 week-numbering years. ```
no blank lines please
You shouldn't modify `DiscoverRunner.__init__()`. All of the logic can go in `DiscoverRunner.log()`. In addition to not being necessary, a problem with setting `self.level` is that there will now no longer be one source of truth. For example, a caller that sets `DiscoverRunner.verbosity` after instantiating the runner will get incorrect results when calling `DiscoverRunner.log()`.
This doesn't feel right.
I don't think testing against the invalid (missing quotes) introspection SQL is necessary given the assertions below already fail without the `get_filters` changes.
Error message doesn't contain information about specific constraint so we can merge this to a single message.
Use RequestFactory? (the existing tests probably pre-date it)
Since you moved the warning into `decode` you can drop the additions from `must_update`
You can join these two lines, e.g. ```python tests = ( 'test@example.com', ('test@example.com',), ['test@example.com', 'other@example.com'], ('test@example.com', 'other@example.com'), ) for setting, mail_func in ( ('ADMINS', mail_admins), ('MANAGERS', mail_managers), ): msg = ( 'The %s setting must be a list or tuple containing two values.' % setting ) for value in tests: with self.subTest(setting=setting, value=value), self.settings(**{setting: value}): with self.assertRaisesMessage(ValueError, msg): mail_func('subject', 'content') ```
Now that Django only supports Python 3.5+ this can be much more simply defined: ```python try: ... except FileNotFoundError: return False ``` You don't need to catch any other type of `IOError` as it is just re-raised. Also don't forget to remove the `errno` import that was added.
You can drop `\`. ``` py if (not field.null and not field.has_default() and not isinstance(field, models.ManyToManyField) and not is_no_default_allowed): ```
Maybe `_output_decimal_converter` to keep consistency of converters names.
A docstring would be nice.
Please use single quotes, and remove the unnecessary semicolon.
using hanging indent: ```` template_values = { '...': a, '...': b, }
Yeah. For me that would be fine.
Ditto. ```suggestion # Check empty result when query must be executed. with self.assertNumQueries(1): ```
I think you can omit `_ =` (here and below).
Please use hanging indentation due to the [coding-style](https://docs.djangoproject.com/en/1.11/internals/contributing/writing-code/coding-style/): ```python self.assertEqual( repr(Variance('a', sample=True, filter=filter)), "Variance(F(a), filter=(AND: ('a', 1)), sample=True)", ) ```
while we are here, I think "Text Node" should be `self.__class__.__name__` instead (this is consistent with other code)
Chop blank line.
It should use model's class instead of constraint's class. ``` 'class': cls.__name__.lower() ```
drop u prefixes on strings (we use `from __future__ import unicode_literals` instead)
Neither do you need `lower()` here.
``# The response and file buffers are closed.``
The changes here seem to break the assertion on this line. (Ref e00d77c4834b40f06f9bf271da5fdfb526ad8f56) ``` ... vvvv File "...tests/admin_widgets/tests.py", line 1119, in execute_basic_operations self.assertSelectedOptions(to_box, [str(self.jason.id), str(self.john.id)]) ... AssertionError: Lists differ: ['14', '10'] != [] ```
This test making a ProjectState with all options. We shouldn't remove `index_together` but mark it for removal when deprecation ends: ```suggestion index_together = ["bio", "age"] # RemovedInDjango51Warning. ```
What about `None` tags? I think we should add `tag is None or ...` to all checks. Maybe we can add one line hook in the _"django/utils/translation/trans_real.py"_ which we will reuse everywhere, also in the [check_for_language()](https://github.com/django/django/blob/master/django/utils/translation/trans_real.py#L376-L377).
I've noticed that we missed a `prefix` here. Fixed.
Usage of `template=None, **extra_context` params seems untested. Not sure if it's important.
I'm not sure this needs to be changed. Testing the default value seems useful.
I think it's fine. Separate test cases are normally a good thing since they can fail individually.
Oracle doesn't support multiple constraints on the same fields, so we need to skip this test on Oracle.
not_annotated -> unannotated
Cases from lines 361 and 363 work with the previous implementation.
```suggestion raise self.exception_class(f'The connection {alias!r} doesn't exist.') ```
what about `return [] if settings.ALLOWED_HOSTS else [W020]` -- That is explicit and readable.
Oh I meant the opposite sorry ```suggestion if not self.rhs_is_direct_value(): ```
set the safe
Use the context manager version of `open()` so you don't need to worry about closing it manually.
@akaariai suggested "If the field has manually assigned column, use that directly without any truncation or validation. Assume the user knows what he is doing." The user has manually assigned a column if `db_column is not None` (of course we would also include the length check in addition to that).
`mask_hashable()` returns a tuple or primitive so we don't need to wrap it into another tuple.
```suggestion def remove_field(self, app_label, model_name, name): ```
This can cause as isolation issues :thinking: Give me few minutes to figure out if it's worth testing.
I think we can simply reuse existing `TestCollectionDryRun` instead of creating a separate test, e.g.: ```python @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage') class TestCollectionDryRunManifestStaticFilesStorage(TestCollectionDryRun): pass ```
I'm not sure if this was generated by your editor but please avoid cosmetic changes in such patches.
Is this necessary? If we're passing this `self.base_field.to_python` value of `coerce` to `self.base_field.formfield()`, is that not the same as assigning `self.to_python` within `.formfield()`? 🤔 If so, then we don't need this line or the change to `defaults["coerce"] = kwargs.get("coerce", self.to_python)`
I prefer "... raised (#24654)." to save a line also wrap 1st line at 79 chars
You're right, thanks. I proposed `Aggregate.__repr__()` refactoring in #8759.
The flake8/test failure is because the above `help` is missing a closing parenthesis, hence a `SyntaxError`. You can always repush to the branch to rerun the tests.
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
```suggestion description=gettext_lazy('Delete selected %(verbose_name_plural)s'), ```
As far as I'm aware this can be simplified to: ```python char_count = math.ceil(self.salt_entropy/math.log(62, 2)) ``` also there is no need to calculate this for each `salt`, so I would move it to the cached property ```python @cached_property def char_count(self): return char_count = math.ceil(self.salt_entropy/math.log(62, 2)) ```
We can reuse an existing migration: ```suggestion call_command("sqlmigrate", "migrations", "0002", stdout=out) ```
As a separate commit, I think that it is also probably worth moving that global function to be a `@staticmethod` on the `CaseInsensitiveMapping` class. It is closely associated with this class and would avoid the need to import it separately in `django.http.response`.
IMO we should re-use existing `form[f.name].field.empty_values` instead of `(None, '')`.
If I read correctly `origin_verified` isn't used anywhere else so we can simplify this to: ```suggestion # Reject the request if the origin header doesn't match an allowed # value. if 'HTTP_ORIGIN' in request.META and not self._origin_verified(request): return self._reject(request, REASON_BAD_ORIGIN % request.META['HTTP_ORIGIN']) if request.is_secure(): ```
u prefix won't be there on Python 3
``` python msg = 'Input should resemble a dictionary.' with self.assertRaisesMessage(exceptions.ValidationError, msg) as cm: field.clean('["a", "b", 1]') self.assertEqual(cm.exception.code, 'invalid_format') ``` Note that the assertions must be run outside the context manager else they will never be executed as the `ValidationError` raised by `clean()` will force an immediate `__exit__()`.
It's fine 👍
Please undo this change (it's the only double-quote to single-quote change left).
This is the only change that should be required.
I wonder if it would also be possible to test the namespacing on other backends. For example, we could use the database name on MySQL and create a schema on PostgreSQL. I'm not sure if this is testable on SQLite.
IMO we could simplify this with using `dict`, e.g. ```python def choices(self, changelist): choices = { None: _('All'), True: _('Yes'), False: _('No'), **{lookup: title for lookup, title in self.field.flatchoices}, } for lookup, title in choices.items(): lookup_val = str(int(lookup)) if lookup is not None else lookup yield { 'selected': self.lookup_val == lookup_val and not self.lookup_val2, 'query_string': changelist.get_query_string({self.lookup_kwarg: lookup_val}, [self.lookup_kwarg2]), 'display': title, } ... ```
This is not testing the new functionality, merely that an arbitrary permission object created manually is accessible in the user's permissions.
I moved this hook to a separate PR, see #15457.
That implies that the constraint cascased, again I don't know if this is the case of all DBs.
Could be reduced to `yield from iter(clone._result_cache)`.
This docstring doesn't have much value, I'd remove it.
It might be useful to make these assertions in tuple form so that if something goes wrong, it's slightly easier to see what might be wrong, e.g. `assertEqual((fks, uniques, indexes), (1, 1, 0))`
So I forgot to mention that checking `REMOTE_ADDR` is not going to be enough. Most serious deployments will have connections proxied so we would need to check for other headers such as `X-Forwarded-For`, etc. The challenge is that this cannot be blanket-enabled as we cannot assume that user's have configured their server correctly and we don't want those headers to be set by the client rather than the proxy. [`django-axes`](https://pypi.org/project/django-axes/) makes use of [`django-ipware`](https://pypi.org/project/django-ipware) for handling identification of client addresses. We'd probably want have a way of providing a setting pointing to a function that allows users to customise how this cache key is built? Because I doubt that we're going to want to add a (soft) dependency on another external package.
technically your test only needs to do: `When(Q(), then=Value(True))` :) The queryset isn't even being constructed as the exception is happening before.
I removed this extra call.
Is there a difference between using `BaseDatabaseOperations(connection=connection)` and `connection.ops`? I guess we should use one style consistently.
Does it need to be a separate test case from the one above? I don't see the distinction.
`any()` is nice but it's over-engineering for me, we don't need to create a tuple and use `any()` to check two values. ```suggestion if self.protocol is None and protocol is None: ```
obj is not really used typo: through*
Leave the `.` (Makes the diff smaller if nothing else. But it's probably OK for it to be a fully-formed sentence. 🙂)
We should move this check to `__init__()`.
"This avoids the same computation...."
`instance` and `ct` are not used in this branch, we should move them to the second branch: ```python if ct_id in custom_queryset_dict: ... else: instance = instance_dict[ct_id] ct = self.get_content_type(id=ct_id, using=instance._state.db) ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys)) ```
```suggestion if ct_id in custom_queryset_dict: ```
We cannot move these skips, because that will cause running queries before a test database is created, see 493b26bbfc9cc0ad223ece131741cba2312ced0f (ticket-31888).
It would help readability to use a name like "nonexistent_app" rather than "duth..".
We could even do this in advance in a separate commit/PR (introducing `RangeOperators` with docs and using them in lookups) :thinking: .
This docstring needs rewording. It should focus on what the function is doing and not on what the caller should do with the returned value.
Drop `on_delete=` for consistency with other code. I think the ForeignKey could be to 'self' to avoid the need for the other model.
The only other `isnull`filter I could find uses `'True'`. Lets be consistent and use `'True'` and `'False`' instead of `'1'` and `'0'`.
We could use `self.CaptureQueriesContext()` and assert that `JOIN` is only used once.
+1, but taking verbosity into account.
Question mark has been moved here but not in `ask_rename_model` or `ask_merge` - I think it should go back to before the `[y/N]` for consistency with those.
I'm not sure it's useful to implement _set_container in the base class, as the path seems different depending on stream.
IMO there is enough to use `attname`, loop shouldn't be necessary. All tests work for me with (instead of L96-L102): ```python to_field_name = getattr(source_field.remote_field, 'field_name', remote_model._meta.pk.attname) to_field_name = remote_model._meta.get_field(to_field_name).attname ```
There is no such settings as `DIRS`. This is unnecessary. ```suggestion ``` We also try to deffer accessing `__file__`, see ticket-32316.
could you explain why the existing test was removed? I see it says "unused" on the ticket, but I don't really understand.
I wonder if this check is a good idea. On the one hand, it can catch mistakes/misspellings. On the other hand, new values will surely be added in time, and once the programmer adds a value Django doesn't know about, it triggers the warning. I think the check is valuable, but will be better as a separate warning, so it can be disabled on its own.
I would use `NotSupportedError`.
I think combining this with the previous test case is okay.
```suggestion if sign and d: ```
It depends, but it can be public. You can solve metaclass conflicts manually creating class inhertiting from all of your metaclasses, or automatically by using this function (`metaclassmaker` or `six_with_metaclassmaker`), that would do exactly the same new metaclass for you.
chop "we"; add period to second sentence
prefer hanging indent style: ``` raise ValueError( "Can't apply ..." ) ```
I'd `conditional_escape()` each argument.
I think we should use `setdefault()` ```suggestion kwargs.setdefault('disabled', False) ``` There is no need to enforce `disabled` if someone specify if explicitly.
suggested wording :`# The django_migrations table must be present to record applied migrations.`
``` # Unmanaged origin model that is not a table. ```
Is this meant to do anything? `AttributeError: 'User' object has no attribute 'items'` I don't think it's necessary. Some fields on the user model could be sensitive too. A mention in the 1.10 release notes is appropriate too.
A better name would be `test_graph_iterative()` now.
Please use the indentation style of `co_mapping`. If someone were to fine an autoformatter that could fix the `inter_mapping` style throughout Django (it's rare), that would be nice.
`grouping[0][0]` is a name of the first column, so these two assertions are unnecessary: ```python self.assertNotIn('name', grouping[0][0]) self.assertNotIn('contact', grouping[0][0]) ```
use `open()` as a context manager instead of try/except.
Use `getattr(field.model._meta, 'concrete_model', None)`.
I'm not sure about the proposed API. Josh suggested adding a `robust` kwarg to the `on_commit()` function which is much more handy, IMO (\cc @jarshwah).
Please add a trailing comma: ```suggestion on_conflict=None, update_fields=None, unique_fields=None, ```
"Return" would be PEP 257 verb style.
Please use hanging indentation (everywhere).
Since `self._remove_trailing_nulls` is not meant to `raise ValidationError` I'd only call `to_python` in the `try` block ```suggestion try: data = self.to_python(data) except ValidationError: pass else: data = self._remove_trailing_nulls(data)[0] ```
I know -- there are other tests on `contrib.postgres` that could run without a database, but we ran into other requirements like `django.contrib.postgres` must be in `INSTALLED_APPS` that made it inconvenient. I think it was 36e90d1f45a13f53ce25fdc2d9c04433b835c9af.
```suggestion form = PartiallyRequiredForm({'f_0': 'Hello', 'f_1': ''}) ```
Maybe pinterest/pymemcache#58 related alias. `BaseMemcachedCache.get_many` calls pylibmc or python-memcache client's [`get_multi`](https://github.com/django/django/blob/3.1/django/core/cache/backends/memcached.py#L93). So override pymemcache client's `get_many` and alias it to `get_multi`. CC: Original author @jezdez
+1 for the ordered set... It would fit right in the original iteration without the extra method. If you do insist on keeping the extra method, consider prefixing it with a '_' to denote it is only used in this class. When I approach large codebases I like it when I can just see the intent of code and not have to switch from reading to a Silver Searcher search to guess from where it might be called.
Your assumption here is that the order of the fields doesn't change. I think we should check for the `to` model and the `through_fields` instead.
Chop unnecessary blank line.
I would do keep two lists `construct_inline_exclude = list(exclude)` and append to each of them, passing `construct_inline_exclude` to `construct_instance()`, rather than the list comprehension. A commend as two why we need the two different variables would be helpful.
3rd party imports go below django imports
Maybe we need a field property. It doesn't look nice to put `isinstance()` special cases here.
Does the raised exception have the same `errno` on both platforms? If that's the case you could do: ``` python with self.assertRaises(IOError) as ctx: # .... self.assertEqual(ctx.exception.errno, errno.WHATEVER) ```
As with the old `_batched_insert` code, I think we should pass the db alias here `self._insert(objs_without_pk, fields, using=self.db)`, it defaults to that but passing it seems more explicit.
It just seems overkill when you are checking the string ends with a particular value.
`call_count` isn't really necessary any more, as accessing `user` or `password` would be an `AttributeError` if the function hadn't been called, but this is a minor issue
Yes, I believe that's the point of the suggestion -- so you can override the method if you want to customize the behavior.
Please move these above `test_collations` above and flip the order: ```suggestion supports_update_conflicts = True supports_update_conflicts_with_target = True ```
This a the kind of `O(m*n)` operation we'd want to avoid doing as it will become increasingly slower as projects get larger. Having a reverse map that allows direct access to objects pointing to an object being removed is necessary IMO. In other words, you need to find a way to perform this operation in constant time.
> Maybe we can have a different PR (or even ticket) to split the tests and make the `index_together` tests redundant with `unique_together` and easily delete-able. Yes, please :bow: , we could move `index_together` tests to a separate class, e.g. `AutodetectorIndexTogetherTests`. A different PR with `Refs #27236 -- ...` would be fine.
```suggestion # Inline annotations in order_by(), if possible. ```
In fact, maybe the tests could be refactored to use a loop and list of options for each iteration like filename and mimetype.
I meant -- isn't the call to `localtime` going to raise the same exception as the template engine? Because the template engine calls this function or an equivalent one.
@Ian-Foote thanks for the clarification I always mix up the two terms.
Docstrings should generally try to state the expected behavior, be a single line if they are short enough (within the 79 character limit), and end with a period.
This seems to be a change in Oracle 12. Oracle 11 works with SDO but also doesn't pass the `self.assertIn` later. This affects the deprecated GeoQuerySet test also. I'm happy to merge this as is and leave it up to you as to whether or not it's worth fixing separately. ``` ====================================================================== FAIL: test_asgml (gis_tests.geoapp.test_functions.GISFunctionsTests) ---------------------------------------------------------------------- Traceback (most recent call last): File "/home/tim/code/django/django/test/testcases.py", line 1119, in skip_wrapper return test_func(*args, **kwargs) File "/home/tim/code/django/tests/gis_tests/geoapp/test_functions.py", line 116, in test_asgml self.assertTrue(gml_regex.match(ptown.gml)) AssertionError: None is not true ====================================================================== FAIL: test_gml (gis_tests.geoapp.tests.GeoQuerySetTest) Testing GML output from the database using GeoQuerySet.gml(). ---------------------------------------------------------------------- Traceback (most recent call last): File "/home/tim/code/django/django/test/testcases.py", line 1119, in skip_wrapper return test_func(*args, **kwargs) File "/home/tim/code/django/tests/gis_tests/geoapp/tests.py", line 645, in test_gml self.assertTrue(gml_regex.match(ptown.gml)) AssertionError: None is not true ```
I don't think that we need to pass a table name because `_insert()` is a `QuerySet` method so it already contains `self.model` with a table name :thinking: but yeah let's leave it for a separate discussion.
```suggestion return f'Create collation {self.name}' ```
This test doesn't work properly because we check if `'' in 'The STATICFILES_DIRS...'` which is always true.
How about `An incorrect implementation of get_queryset.`
This addition of LOCALE_PATHS seems redundant with the one three lines below.
```suggestion black_path = shutil.which("black") if black_path: subprocess.run([black_path, "--", *written_files], capture_output=True) ```
This can be single lined: ```python self.assertEqual(Media.merge([1, 2], [2, 1]), [1, 2]) ```
I'm starting to think if this is an expected change :thinking: This can force updates each time when the password is checked for password created with a `salt` passed manually to the `make_password()`.
Oh, interesting. Is that because of mutability? What about a frozenset then? I'm not suggesting to change it here (I don't think it matters much) but you made me curious now :)
Is this the best way to handle this? (cc @codingjoe)
You're right. We don't have `if six.PY2` for `__ne__` methods anywhere else so let's keep it consistent.
Avoid the _if truthy return true else return false_ anti-pattern; use: `return perm == 'modeladmin.view_band'` Please also fix this for `MockUser`, `MockAddUser`, `MockChangeUser` and `MockDeleteUser` cases in a separate commit.
This can be single-lined.
This isn't a related field at all; related fields are the ones referenced through the `__` notation and involve JOINs
You could just put `(#11154)` in the docstring.
Forget about the single quotes, we use them in this location all over this file.
Avoid using conditional wording in test docstring, also use the identifier wording.
I guess this does follow other existing methods, but: ```python return force_text(value) if isinstance(value, bytes) else value ```
Initialize `models_to_check` with `list(self.bases)`.
Remove it please.
We support (and transparently use instead of the stdlib one) external installations of pysqlite. So I'd change this kind of checks to verify the version of the underlying sqlite3 is >= 3.7.13.
Why we don't use `super().deconstruct()`? ```python def deconstruct(self): path, args, kwargs = super().deconstruct() kwargs['expressions'] = self.expressions if self.condition is not None: kwargs['condition'] = self.condition if self.index_type != 'GIST': kwargs['index_type'] = self.index_type return path, args, kwargs ```
These are not related with the `fallback` feature so I moved them to a separate test.
A semantic test name or a docstring could be useful. (e.g. "A {% with %} tag shouldn't reset the {% cycle %} variable.")
Still looks bad to me; maybe the force push didn't work. CI should rebuild force pushes.
I think that word `anymore` is unnecessary. `'FileSystemFinder should not raise ImproperlyConfigured.` sounds better to me.
Chop blank line.
This should also use UTC now. The test should used a fixed year and find a way to mock `parse_http_date`'s way of obtaining a current year.
Drop the blank line.
My understanding is that `raise Exception` doesn't matter here -- it could just as well be `pass` -- the important thing is what arguments `authenticate()` takes.
consider assertRaisesMessage so you can check the error message as well.
Need to remove u'' prefix on strings for Python 3.2 compatibility.
Ditto, I think this will always be `True`.
And this one.
Did you try the ORM rather than raw SQL? I'm not sure if there's a reason the test above doesn't use it.
The major difference between `migrate` and `showmigrations` is that the former only ever takes a single app name. What are your thoughts about having support for multiple app labels as you did right now? Is this by coincidence. Intentional. I would have thought of just mimicking the `migrate` API with a single app label as opposed to multiple.
python 2 code here
I think it would be better to move `side_effect` to the `mock.patch`, i.e.: ```python error = PermissionError(errno.EACCES, 'message') with mock.patch('django.core.files.move.copystat', side_effect=error): ```
`new_field.unique` is in both sub-conditions so we can simplify this: ```python return ( not new_field.primary_key and new_field.unique and (not old_field.unique or old_field.primary_key) ) ``` Also, `_unique_should_be_added()` in `django.db.backends.oracle.schema.DatabaseSchemaEditor` is redundant and can be removed: https://github.com/django/django/blob/fb05ca420da1341c0d39cf1f0e2fb659be836c92/django/db/backends/oracle/schema.py#L177-L181
Please use hanging indentation per our [coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style). Maybe small rewording: ```python raise TypeError( 'sensitive_variables() must be called to be used as a decorator, ' ' e.g., use @sensitive_variables(), not @sensitive_variables.' ) ```
```suggestion def alter_field(self, app_label, model_name, name, field, preserve_default): ```
Is new code needed? The sense of error is the same, I think you should use `fields.E003` here too.
Having the migration name hard-coded in here doesn't strike me like the cleanest solution. I don't have an alternative right now, tho.
Same potential issue with multi-db support here.
Please use a period.
Not a native speaker but wonder if _collides_ instead of _overrides_ would be more appropriate.
```suggestion def insert_statement(self, on_conflict=None): if on_conflict == OnConflict.IGNORE: return 'INSERT OR IGNORE INTO' if on_conflict == OnConflict.UPDATE and Database.sqlite_version_info < (3, 24, 0): return 'INSERT OR REPLACE INTO' return super().insert_statement(on_conflict) ``` Please also update to use a feature flag as mentioned in https://github.com/django/django/pull/13065#discussion_r668440287.
Why is the order non-deterministic... a set somewhere? I think we should try to avoid that if possible.
instead of character1 and character2 I would use threepwood and marley and then use threepwood.name, etc. instead of repeating the string
I think that there is no need to check all empty values, so maybe: ``` # Default should be populated on an empty value. pub_form = PubForm({}) pub_form.mocked_mode = '' pub = mf2.save(commit=False) self.assertEqual(pub.mode, default_mode) ```
This is very much work in progress. I think we should move the lookup registration to some other place (django.db.models.**init** perhaps) to avoid circular imports. The lookups <-> fields circularity is a bit nasty to have.
Type of `condition` and `deferrable` is checked in `__init__()` so `str()` is not necessary.
`CharFieldMixin` looks a bit too simple of a name. It's more like `MySQLReturnsBytesForCharFieldFix` (somewhat joking). As I just mentioned on the ticket, it would be nice if we found or filed a MySQL ticket for this to better understand the behavior and to see if it might change someday. That might help dictate how elegant we want to make the fix.
so we can -> to
Usually we've preferred list comprehensions as more readable than map.
If I'm not completely mistaken this will fail if the attacker requests a page where `csrfmiddlewaretoken` or `HTTP_X_CSRFTOKEN` is shorter than the `CSRF_KEY_LENGTH`.
I don't think we should include a default implementation of this. Simply refactoring: ``` while user_data[field_name] is None: raw_value = input(force_str('%s%s: ' % (capfirst(field.verbose_name), ' (%s.%s)' % (field.rel.to._meta.object_name, field.rel.field_name) if field.rel else ''))) try: user_data[field_name] = field.clean(raw_value, None) except exceptions.ValidationError as e: self.stderr.write("Error: %s" % '; '.join(e.messages)) user_data[field_name] = None ``` Into something like: ``` while user_data[field_name] is None: user_data[field_name] = self.get_input_data(...) ``` so that the method can be overridden as necessary is enough. But let's have Chris give his input before proceeding.
Not required as `__ne__` defaults to `not self.__eq__(other)` on Python 3.
```suggestion 'DEFAULT_AUTO_FIELD', ```
`field_names` are used only when `self.ignorenonexistent is True`, so we can optimize this part, e.g.: ```python field_names = set() if self.ignorenonexistent: if Model not in field_names_cache: self.field_names_cache[Model] = {f.name for f in Model._meta.get_fields()} field_names = self.field_names_cache[Model] ```
I just tried this (merged into master) on Oracle, this assertion fails (I ran only the model_inheritance_regress tests).
Trailing dot is missing.
Something like `self.assertGreater(len(editor.deferred_sql), 0)` might be appropriate to ensure there is `deferred_sql`. I'm always cautious about assertions within loops without something to check that the loop is executed.
"of the" (though maybe it's redundant with the docstring if we add one to the base class)... in that case, the "E.g." still seems helpful.
`else` can be removed, i.e.: ```python ... elif end is None: return self.UNBOUNDED_FOLLOWING raise ValueError('Illegal argument for end, must be either a positive integer, zero or None') ```
Maybe the following will be more explicit: ```python first_author_books = result[0].books.all() self.assertEqual([self.book1], [first_author_books]) self.assertEqual([self.reader], [first_author_books[0].read_by.all()])) ```
```suggestion Conveniently add attributes to an action function:: ```
We might add `('Forbidden user agent')` to the exception.
Yes, this is covered in `tests/timezones/tests.py` `LegacyFormsTests.test_form_with_ambiguous_time()`
I don't think so, at least PEP8 suggests: ``` For sequences, (strings, lists, tuples), use the fact that empty sequences are false. Yes: if not seq: if seq: ``` (https://www.python.org/dev/peps/pep-0008/)
This code assumes that the filesystem uses 'utf-8', because that's what `force_str` defaults to. Furthermore, under Python 2, when `force_str` (ie. `force_bytes`) is called on a bytestring with as encoding argument that isn't utf-8, it decodes the string with utf-8 and re-encodes it with the given charset. In this case, that isn't desireable. I think it'd be safer to use: ``` os.environ['djangocompilemo'] = pf + str('.mo') os.environ['djangocompilepo'] = pf + str('.po') ``` (assuming code works, I didn't test) IIRC Python 3 automatically encodes environment variables set to unicode values. That techniques offloads the problem to the language :)
`OrderableAggMixin` contains `_get_ordering_expressions_index()` hook so you don't need to calculate this again. I would also simplify this and remove temporary variables, e.g. ```python def set_source_expressions(self, exprs): # Extract the ordering expressions as ORDER BY clause is handled in # a custom way. self.ordering = exprs[self._get_ordering_expressions_index():] return super().set_source_expressions(exprs[:self._get_ordering_expressions_index()]) ```
Stick to `.format` for now. Until we settle to switch to f strings for the whole code base we should stick to format.
There's [a ticket](https://code.djangoproject.com/ticket/27795) for auditing existing `force_text()` usage.
Actually it should be `if on_delete and not callable(on_delete)` -- or just turn the `if` into an `elif`.
There are problems on Windows with this line "The process cannot access the file because it is being used by another process." I think we have had similar issues before -- maybe you can search for some history if it's unclear how to solve it.
This change isn't correct. The test database name isn't the alias.
Please use single quote.
Is it expensive to restore the old language? I'd think it'd be less error prone if the method didn't have side-effects by default and simpler if we could drop the `deactivate` parameter, but I'll let you decide as the i18n expert.
What about using `(pk=cls.b4.pk)` instead? I think it would be easier to find the origin of the data this way.
please check this test on Python 3 ``` Traceback (most recent call last): File "/home/tim/code/django/tests/admin_views/tests.py", line 3735, in test_limit_choices_to_as_callable self.assertEqual(response.content.count('threepwood'), 2) TypeError: expected an object with the buffer interface ```
This test is already passing without the changes in this PR so perhaps better to omit or put in a separate commit? non_existing -> nonexistent
It's possible we need to guard this code with `if settings.USE_I18N` is some way. Also, I'd like to make sure we are not interfering with the `Trans/_trans` black magic this module performs by putting this signal receiver here.
Although you changed this, I think you missed the the bit in https://github.com/django/django/pull/14437#discussion_r658641917 that the `if` can now go outside of the `for` to avoid a pointless iteration when `timeout` is `None`. ```suggestion # Set timeout for each key individually as .mset() doesn't support # setting the timeout for all keys at the same time. if timeout is not None: for key in data: client.expire(key, timeout) ```
`and 'DummyCache' in`
I don't think touching docstrings for wraps at 80 characters instead of 79 is worth the churn.
I'm against providing `float` (see my email to django-developers. The regex for UUID must enforce the location of dashes to avoid the "duplicate URLs for the same view " problem.
I don't think there is any point in creating `BaseCacheSerializer` and we can rename `PickleCacheSerializer`: ```suggestion class PickleSerializer: ```
single line for this would be fine. I adjusted the commit mesage in the PR title. I think it's better to use "Refs" for follow up commits so it doesn't appear as the main fix for the ticket.
Can we use instead `assertEqual()` and `assertIsNot()`? ```suggestion self.assertEqual(clone, source) self.assertIsNot(clone, source) ```
`asvar` can be `None`, so I added `repr()`.
Oracle doesn't support primary keys on `LOB`, so `TextField` or `BinaryField` cannot be a primary key. We can remove it from this mapping.
Please add a docstring: ``` """ If you have a field named defaults and want to use it as an exact lookup, you need to use 'defaults__exact'. """ ```
look, you added unique true to last name not in email
Drop this empty line
I'm wondering if it makes sense to have `self._name` default to `None` and a property `name` that either returns `self._name` or automatically generates one and stores it on `self._name` which is then returned. With the current implementation the following won't easily be possible to deconstruct for migrations: ``` python class MyModel(models.Model): class Meta: indexes = [Index('id')] ``` because `indexes[0]` doesn't have a name which we always want to add to the deconstructed index class to ensure we can change the way index names are generated and not break other people's code.
``` change_url = reverse('admin:admin_widgets_school_change', args=(self.school.id,) self.selenium.get(self.live_server_url + change_url) ```
```suggestion with self.assertRaises((OperationalError, ProgrammingError)): ```
Can `@override_system_checks` be moved to the class? Not sure if it works there, I know `@override_settings` does.
So it looks as though you've run `black` over this as there are changes other than quotes. We're not currently ready to use `black` as it is still in pre-release.
The projection of this raster is `3086`, somehow the `WKT` version of the GDAL info does not have the number in it explicitly. I can update the raster such that the srs gets the correct srid from it (in my experience, from the WKT version is not always very clear what srid it really is depending on what software the raster was generated and how).
I think the standard message of assertEqual is enough? `AssertionError: 200 != 201`
`mus` → `must`.
So question, can the autoreloader take care of these registrations itself? (Haven't looked into it but...)
According to the [Python docs](https://docs.python.org/3/library/datetime.html): > %V - ISO 8601 week as a decimal number **with Monday as the first day of the week**. Week 01 is the week containing Jan 4.
I lean toward repeating the `skipUnlessDBFeature` decorator rather than creating a separate test case since it'll require less refactoring when dropping support for 9.3.
Missing trailing comma after `dictionary`.
We currently use single quotes and this can be condensed a little and use f-strings. We can also drop the `hasattr()` check as the [`sys.implementation` docs](https://docs.python.org/3/library/sys.html#sys.implementation) state that it _must_ exist. ```suggestion if sys.implementation.name == 'cpython': args.extend( f'-X{key}' if isinstance(value, bool) else f'-X{key}={value}' for key, value in sys._xoptions.items() ) ```
I would personally structure this a bit differently by combining `time_keeper` and `time_it`: ```python class TimeKeeper: def __init__(...): self.records = [] @contextlib.contextmanager def timed(self, name): t1 = time.time() yield self.records.append(...) def __iter__(self): yield from records ``` Then you can do: ```python keeper = TimeKeeper() with keeper.timed("test"): ... for line in keeper: print(line) ``` or something akin to that, which feels more natural.
```suggestion '\n'.join([form.as_ul() for form in formset.forms]), ```
move this line outside `assertRaises` (keep `assertRaises` blocks as small as possible so it's clear what is expected to throw the error)
as a tuple
I am not so sure about that change. This is not an integer field, but a FK. It's not nullable, it has an index and some databases have other pseudo tables to reference a FK field. I am not sure if this actually works using all Databases. I would recommend to be extra careful when changing old migrations.
Some time later... 🙂 About to mail the list re whether this change is acceptable.
This is not a PostgreSQL-specific test. I moved it to the `tests.model_indexes`.
> But since we're already adding len(field_name) + 2 on top of what we read this seems pointless now. Good point.
You might want to consider returning a generator yourself. In which case you should just `yield from` the generator instead of returning a list.
```suggestion 'Add another Inner4 stacked', ```
Passing `group` to the `call_command()` is unnecessary because it's already passed via `DJANGO_SUPERUSER_GROUP`.
the requested browsers "and raise appropriate exception" can probably be considered part of validation.
I would also avoid `yield`ing the model if it's unused.
You at least have to reset this at the end of the test to not leak this change into other tests (use try/finally)
Maybe it would be better to catch `TypeError` instead of adding complicated checks :thinking: ```python try: if code.co_argcount == 2: # one argument is 'self' return attr(obj) else: return attr() except TypeError as e: raise ImproperlyConfigured(...) from e ```
I think that we usually don't add a space between comma and bracket.
Nitpick, but shouldn't these be assertEqual()? This would be consistent with `if len(queryset) == 2` instead of `if len(queryset) is 2`.
instead of `in (1, 2, 3, ...)` it would be something like `in (self._str_types[x] for x in ['Point', 'LineString', ...])`
Can you combine these 2 tests using `subTest()`
I'm sorry but it's still the same :shrug: . You can manipulate with tests to create an unreachable state where you will get an expected message but that's not the correct solution. Please check an [attached project ](https://code.djangoproject.com/raw-attachment/ticket/25370/ticket_25370.tar.gz) and try to run: ``` $> python manage.py makemigrations ``` it raises: ``` ValueError: Error during <django.db.models.fields.IntegerField> serializing: Cannot serialize function: lambda ```
Alright, missed that!
Just use `_resolve_special(status_code)` as noted below, I don't think we need different `resolveXXX` variants.
I think this `__init__()` could be removed too.
typo ("templat ename")
``` ====================================================================== ERROR: test_case_valid_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests) ---------------------------------------------------------------------- Traceback (most recent call last): File "/home/tim/code/django/django/db/backends/utils.py", line 85, in _execute return self.cursor.execute(sql, params) File "/home/tim/code/django/django/db/backends/oracle/base.py", line 510, in execute return self.cursor.execute(query, self._param_generator(params)) cx_Oracle.DatabaseError: ORA-00920: invalid relational operator The above exception was the direct cause of the following exception: Traceback (most recent call last): File "/home/tim/code/django/tests/expressions/tests.py", line 602, in test_case_valid_in_filter_if_boolean_output_field ordered=False File "/home/tim/code/django/django/test/testcases.py", line 931, in assertQuerysetEqual items = map(transform, qs) File "/home/tim/code/django/django/db/models/query.py", line 267, in __iter__ self._fetch_all() File "/home/tim/code/django/django/db/models/query.py", line 1171, in _fetch_all self._result_cache = list(self._iterable_class(self)) File "/home/tim/code/django/django/db/models/query.py", line 53, in __iter__ results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size) File "/home/tim/code/django/django/db/models/sql/compiler.py", line 1053, in execute_sql cursor.execute(sql, params) File "/home/tim/code/django/django/db/backends/utils.py", line 68, in execute return self._execute_with_wrappers(sql, params, many=False, executor=self._execute) File "/home/tim/code/django/django/db/backends/utils.py", line 77, in _execute_with_wrappers return executor(sql, params, many, context) File "/home/tim/code/django/django/db/backends/utils.py", line 85, in _execute return self.cursor.execute(sql, params) File "/home/tim/code/django/django/db/utils.py", line 89, in __exit__ raise dj_exc_value.with_traceback(traceback) from exc_value File "/home/tim/code/django/django/db/backends/utils.py", line 85, in _execute return self.cursor.execute(sql, params) File "/home/tim/code/django/django/db/backends/oracle/base.py", line 510, in execute return self.cursor.execute(query, self._param_generator(params)) django.db.utils.DatabaseError: ORA-00920: invalid relational operator ====================================================================== ERROR: test_exists_in_filter (expressions.tests.BasicExpressionsTests) ---------------------------------------------------------------------- Traceback (most recent call last): File "/home/tim/code/django/django/db/backends/utils.py", line 85, in _execute return self.cursor.execute(sql, params) File "/home/tim/code/django/django/db/backends/oracle/base.py", line 510, in execute return self.cursor.execute(query, self._param_generator(params)) cx_Oracle.DatabaseError: ORA-00920: invalid relational operator The above exception was the direct cause of the following exception: Traceback (most recent call last): File "/home/tim/code/django/tests/expressions/tests.py", line 591, in test_exists_in_filter self.assertCountEqual(outer_2, outer_1) File "/opt/python3.6.4/lib/python3.6/unittest/case.py", line 1165, in assertCountEqual first_seq, second_seq = list(first), list(second) File "/home/tim/code/django/django/db/models/query.py", line 267, in __iter__ self._fetch_all() File "/home/tim/code/django/django/db/models/query.py", line 1171, in _fetch_all self._result_cache = list(self._iterable_class(self)) File "/home/tim/code/django/django/db/models/query.py", line 53, in __iter__ results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size) File "/home/tim/code/django/django/db/models/sql/compiler.py", line 1053, in execute_sql cursor.execute(sql, params) File "/home/tim/code/django/django/db/backends/utils.py", line 68, in execute return self._execute_with_wrappers(sql, params, many=False, executor=self._execute) File "/home/tim/code/django/django/db/backends/utils.py", line 77, in _execute_with_wrappers return executor(sql, params, many, context) File "/home/tim/code/django/django/db/backends/utils.py", line 85, in _execute return self.cursor.execute(sql, params) File "/home/tim/code/django/django/db/utils.py", line 89, in __exit__ raise dj_exc_value.with_traceback(traceback) from exc_value File "/home/tim/code/django/django/db/backends/utils.py", line 85, in _execute return self.cursor.execute(sql, params) File "/home/tim/code/django/django/db/backends/oracle/base.py", line 510, in execute return self.cursor.execute(query, self._param_generator(params)) django.db.utils.DatabaseError: ORA-00920: invalid relational operator ```
This can be simplified and put in place of `format_string` below: ```python '= %s' if len(key_map) == 1 else 'IN(%s)' % ', '.join(['%s'] * len(key_map)) ```
You could add that as an assertion (that is, assert len(lookups) > 0). I think that would make sense - len(lookups) == 0 is an error somewhere in Django's code, that is, it is a condition that really shouldn't ever happen. Anothre thing we could do here is supply the allowed field names, like we do in other cases where lookup fails. But this can (and probably should) wait for another PR.
I think the issue is simple enough that we can omit the docstring.
Fine with me either way, just wanted to point it out so it is not lost. Maybe we can rename it shortly before merging? (IE when all other reviews are done -- but in the end a second PR is fine as well)
You should also collect class based unique-constraints, you get can them from `opts.total_unique_constraints`.
Looking at the diff, there are still unrelated whitespace changes.
indent style: ``` @override_settings( AUTHENTICATION_BACKENDS=[ 'django.contrib.auth.backends.ModelBackend', 'django.contrib.auth.backends.AllowInactiveUsersModelBackend', ], ) ```
do you need `six.assertRaisesRegex` or would `self.assertRaisesMessage` work? (latter leaves less work to do when dropping Python 2).
In my searching, only group 1 is used, so perhaps can avoid unnecessary capturing: ```suggestion r'^(.*)\s(?:ASC|DESC).*', ``` Here are the results of the search: ``` django/db/models/sql/compiler.py 381 without_ordering = self.ordering_parts.search(sql).group(1) 394 without_ordering = self.ordering_parts.search(sql).group(1) ```
or `''.join(newurl)`. Also, you could just use it in line 86: ``` py % {'method': request.method, 'url': ''.join(newurl)} ```
It feels like `MigrationWriter` shouldn't have to deal with a negated option and it should be the commands responsibility to deal with the fact the flag is negated. That's the main reason why I suggested `include_header=True` in the previous PR.
Actually... I might just merge this as is, and clean up a couple of docs problems once it's in trunk.
Could update this to use `assertRaisesMessage` while you're here.
longer lines are okay if they help readability (I moved `model='Fake'` to the previous line)
I think it's more readable without multiple `message_*` variables, e.g. ```python if settings.DATABASE_ROUTERS: for db_table, model_labels in db_table_models.items(): if len(model_labels) != 1: errors.append( Warning( "db_table '%s' is used by multiple models: %s when ' 'database routers are installed." % (db_table, ', '.join(db_table_models[db_table])), obj=db_table, id='models.W029', ) ) else: for db_table, model_labels in db_table_models.items(): if len(model_labels) != 1: errors.append( Error( "db_table '%s' is used by multiple models: %s." % (db_table, ', '.join(db_table_models[db_table])), obj=db_table, id='models.E028', ) ) ```
More testcase would be nice, such as: ``` () ('url', 'title', 'content', 'sites') ('url', 'title', ('content', 'sites')) (('url', 'title'), ('content', 'sites')) (('url', 'title', 'content', 'sites'),) ```
We should also test loading the queryset doesn't perform any queries either.
redundant, remove ```suggestion ```
``app_labem`` -> ``app_label``
Can the new tests go in a separate test case? I think that would make things simpler.
In general django doesn't allow contrib imports from core, but it might be worth making an exception in this case.
Ah, I see. I was curious whether that was a common style in Django, etc. Thanks for the reply @timgraham > On Feb 24, 2015, at 7:49 PM, Tim Graham notifications@github.com wrote: > > In django/forms/forms.py: > > > @@ -580,12 +586,16 @@ def value(self): > > if not self.form.is_bound: > > data = self.form.initial.get(self.name, self.field.initial) > > if callable(data): > > - data = data() > > - # If this is an auto-generated default date, nix the > > - # microseconds for standardized handling. See #22502. > > - if (isinstance(data, (datetime.datetime, datetime.time)) and > > - not getattr(self.field.widget, 'supports_microseconds', True)): > > - data = data.replace(microsecond=0) > > - if self._initial_value is not UNSET: > > I don't really mind either way but discussed briefly in IRC and concluded: "Code is clearer when objects of a given type always have the same set of attributes - the presence of a sentinel value is a clearer marker of intent (as opposed to bug) than the absence of an attribute entirely." -Carl Meyer > > — > Reply to this email directly or view it on GitHub.
We have to use `six.string_types` until we drop Python 2 to support unicode names under Python 2.
@charettes, do we need `@isolate_apps('proxy_models')` here and the test below? Some of the other tests have it but not these. Not sure the reason if there is one.
... and here https://github.com/django/django/pull/13065#discussion_r668443543 :wink:
I'm adding a little more explanation to the message, and making it more consistent with the others such as the DEBUG check
True, sorry for an undoable request. Folks can always use `sqlite3.enable_callback_tracebacks(True)` to see this message :shrug: .
I'd use a `kwargs = {}` variable and pass it to `self.as_sql(compiler, connection, **kwargs)` by making sure to set `kwargs['db_type']` if `type(self._output_field) in self.mysql_types`.
FYI - so does Oracle. But I don't think that distinction matters here because we aren't guarding functionality behind the decision, just the test. Generally Django prefers skipping based on features rather than vendors, but this isn't worth a feature flag IMO.
```suggestion # List of datatypes to that cannot be extracted with JSON_EXTRACT() on # SQLite. Use JSON_TYPE() instead. ```
```suggestion type(model_admin).__qualname__ ```
Probably want to use `**extra_context` added in 53361589905c7c07692cd77f398ce6cb5ac39779 rather than mutate `self`.
Can you move the exception to `django.db.migrations.exceptions`, please.
`if m2m_db_table in registered_tables` should do!
Suggested name: `get_sql_create_params`. `BrinIndex` should override this function rather than overriding `create_sql`.
Also, we should re-raise an exception to the compiler when `empty_aggregate_value` is not implemented, e.g. ```python except EmptyResultSet: arg_sql, arg_params = getattr(arg, 'empty_aggregate_value', NotImplemented), () if arg_sql is NotImplemented: raise ```
As above, use a more descriptive docstring like "The logout view should send "no-cache" headers for reasons described in #25490."
We can use `CaptureQueriesContext` instead of mocking `BaseDatabaseSchemaEditor.execute()`.
wrap docstrings at 79 characters.
In this test `stdin=MockTTY()` is still required.
What about `//www.example.com`? I think this should be allowed.
Yeah I'd absolutely leave it as `isinstance` too if performance is the reason. It's a constant time cost, and as you say, is faster (pretty sure it's _more_ than 10% faster if the incoming `set` is large enough, YMMV) 👍
```python return {**DEFAULT_CONVERTERS, **REGISTERED_CONVERTERS} ``` Python 3 FTW
Actually this should be `classmethod` for `InlineModelAdmin` and a regular method for `ModelAdmin`.
Do you feel strongly about not including the rest of the Base classes as defaults here? That would save having to import them in the dummy backend and perhaps make it more clear all the attributes that should be overridden.
Using `query` directly should be safe here. `QuerySet` is really just a wrapper around `Query` to expose a public API.
Maybe: `'Aborting: --start-at and --start-after are mutually exclusive.'`
As I wrote below for `generic()`, good idea to make the new arg kwarg-only ```suggestion def __init__(self, *, json_encoder=DjangoJSONEncoder, *, headers=None, **defaults): ```
I think you could skip this check if `item` is falsy. I haven't done any measurements but I'd suggest changing this to: `if item and item not in self._css_lists`
I think we can simplify this test: ```suggestion self.assertIn('renamed_field', new_state.models['test_rfwdbc', 'pony'].fields) self.assertNotIn('field', new_state.models['test_rfwdbc', 'pony'].fields) self.assertColumnExists('test_rfwdbc_pony', 'db_field') with connection.schema_editor() as editor: with self.assertNumQueries(0): operation.database_forwards('test_rfwdbc', editor, project_state, new_state) self.assertColumnExists('test_rfwdbc_pony', 'db_field') with connection.schema_editor() as editor: with self.assertNumQueries(0): operation.database_backwards('test_rfwdbc', editor, new_state, project_state) self.assertColumnExists('test_rfwdbc_pony', 'db_field') ```
I think that's OK too. It simply looks a bit odd that all that `Func` machinery is used to output constant string.
I have been trying to think of cases where this could lead to an infinite loop and the following simplified scenario , while unlikely, could cause issue. ```python class A(Model): b = models.ForeignKey('B', CASCADE, primary_key=True) class B(Model): a = models.ForeignKey('A', CASCADE, primary_key=True) ``` Since this is going to be backported to a LTS I'd favor we rely on a memo to prevent this from happening just to be extra safe. ```python to_python_field = pk seen = set(to_python_field) while to_python_field.remote_field: to_python_field = to_python_field.target_field if to_python_field in seen: break seen.add(to_python_field)
It should be `number=F('number') + 1`.
wo -> without
I'm not sure this can be removed without a proper deprecation. In any case, it needs a ticket.
It's not obvious to me why you put the class here -- it looks like it's in the middle of two collectstatic test classes, perhaps it could be better ordered.
That's the only thing that I think we should change here is too make the caller assign `subquery = True` and assert `query.subquery` here. Altering an argument is usually bad practice so I think `get_aggregation` should assign `inner_query.subquery = True` instead.
I think this is doing what it should, but a minor suggestion, perhaps use `key_map.keys()` instead of `list(key_map)`, they are equivalent, but do not test the developer on whether a calling `list()` on a dict returns a list of keys or values. Not a blocker for my approval, but a personal preference. Take it or leave it.
We can keep `invert` directly in the `SearchQuery` instead of `extra`, e.g. ```python ... self.invert = invert super().__init__(*expressions, output_field=output_field, function=function) ```
Simply iterate over `constraint.values()` since you don't use `name`.
are you sure about this point of "consist of only A-z0-9-_=", as opposed to those characters may not appear in the separator? (not too familiar with this restriction myself) I don't know that the complexity of a `setter` is necessary. I'd just modify the test to initialize a `Signer` each time.
You can reuse `resolve_model_field_relations()`.
not sure about the purpose of this test. I don't really like using `assertNotEqual` since there are an infinite number of "not expected" strings that will cause the test to pass.
IMO this should not raise a warning.
Please give it a try, I'd like to see the new error.
`)` onto the next line.
include parens after method names: get_RELATED_order()
`self.assertEqual(uct.call_count, 4)` But IMO it is better to use patch as decorator instead of context manager.
If `value` is a `dict`, `set(value)` suffices, but maybe that's obscure and you chose the more explicit version on purpose.
If the user is able to make the server sign arbitrary data of their choosing, using the same salt and key will yield the same signature. However, if we slightly modify the key, they can't. This makes chosen plaintext attacks less vulnerable.
You could put that on two lines, it would increase readability IMHO.
@adamchainz - of course... hadn't had my morning coffee!
Check ticket it's explained there.
Condense this to the following? ```python filelike_close = getattr(filelike, 'close', lambda: pass) ```
This assertion should stay in the `Index` class.
Please use `self.assertEqual`
Put this above `to_wsgi_names()` to keep the methods that act on multiple headers together.
That's not a proper fix, because it doesn't test the same cases, see RFC-850.
That's already better, but there is even a cached_property decorator in django.utils.functional that does the job of caching the value.
Use single quotes.
```suggestion del self.headers[header] ```
This is now an unused import - `strftime` is a method of the `datetime` instance
Any thoughts about joining by `self.sep` instead? I find it more readable ```suggestion return self.sep.join([value, 'sha1', self.signature(value)]) ```
`DEGREES` doesn't exist on Oracle.
I think `if not hasattr(...)` and raising an exception would be more in line with Django's style.
Oh, you already have the warning in `OneToOneField` also? Then I see no reason at all to keep this warning here. Just make `on_delete` a fully required arg to `ForeignObject` with no default, and get rid of this warning.
I would only add this validator `if self.max_digits is not None and self.decimal_places is not None` instead of checking it in `DecimalValidator.__call__`.
We do not have to overdo it, but `if not all(val)` seems easier and brings over the intent better than `if not val[0]`
Sorry typo: ```python dump_cmd = ['mysqldump', *dump_args[:-1], '--routines', '--events', source_database_name] ```
If size can be `None`, I suggest to make it an optional parameter like `def batches(iterable, size=None):`
Does the use of double quotes for the separator argument matter here? I'm used to most string values having to use single quotes, but I'm not a mysql user so I'm not entirely sure it matters. I did a quick search and it appears that mysql supports double or single quotes for string literals.
so it turns out using `mock.patch.dict` isn't necessary, because `run_django_admin` is actually setting up `os.environ` for the sub-command. so you can refactor this test to just: ```py out, err = self.run_django_admin(['startproject'], 'bad_settings') self.assertOutput(err, "You must provide a project name", regex=True) ```
This is only the case if a pattern name is passed in, and the result of `reverse()` is returned, other urls are returned as-is.
`# Filter out fields contributed....` (chop comma before as)
this should be from `django.utils import six`
I think these tests could the rare cases where a docstring explaining what it tests could be valuable given the large amount of boilerplate required. What about ``` """Related filtering of prefetched querysets is deferred until necessary.""" ```
a separate test method would be preferred
Please revert this unrelated change.
Why the method for this? Just make it a class attribute called `salt`.
Revert this new line addition as it makes blaming harder.
```suggestion remote_field.model._meta.model_name, ```
Actually maybe not, I had `noop == function` in mind but that's for `RunPython`.
`postgres_tests` is for testing `django.contrib.postgres`. Use `tests/bulk_create` and `@skipUnlessDBFeature('can_return_rows_from_bulk_insert')`.
`allow_cascade` doesn't change anything on MySQL, so I'll merge this test with `test_sql_flush()`.
As you're reordering here anyway, I'd reformat this to: ```suggestion if ( lookup_name == 'exact' and lookup.rhs == '' and connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls ): ```
Ah, sneaky 🤗 Too early in the morning!
Use single quotes.
probably want something like: `sorted(_SEP_UNSAFE)` so the order isn't random. Might be clearer to output something like "0-9A-Za-z-_=" though.
Do we really want this to be GET requests or are POST with CSRF better suited. Thinking about DoS here :-/
You don't need to add a new unexisting language, 'xxx' should already play this "role".
I guess I'm not strongly -1 but multiple variable assignment on one line is an uncommon style that I'm not sure we want to encourage.
Theis changes isn't needed, we allow longer lines up to 119 characters.
This seem to be duplicated for some reason.
for the end of a list, I prefer this style: ``` 'object_id_concrete', ] ``` This has the advantage of not needing to modify a line like `'object_id_concrete'],` when adding more items to list which keeps subsequent diffs and git blame cleaner.
I'd remove the ticket reference here.
What about testing with a non-sequence primary key instead so we can get MySQL coverage as well? I was initially thinking about suggesting the use an empty string which is also falsy but we'd loose Oracle coverage.
Ignore other point, I didn't realize `missing_args_message` was an argparse convention.
`<head>` and `<title>` are missing if we want to have a valid HTML5 page, maybe ```python ERROR_PAGE_TEMPLATE = """ <!DOCTYPE html> <html lang="en"> <head> <title>%(title)s</title> </head> <body> <h1>%(title)s</h1><p>%(details)s</p> </body></html> """ ```
The point is that I am not using `exclude` myself, and it is good that `status` is excluded from checks itself. But the constraint is for `name`, and `status` is only used in the condition there: ``` class Meta(…): constraints = [ UniqueConstraint(fields=("name",), condition=Q(status="draft"), name="uniq_name_draft"), ] ```
I would either rename `old_rel` to `_` or `_old_rel` here to denote it's unused.
domin -> domain
I think we should add also `lzma` format.
We can't do this without a deprecation warning first. And there really out to be a system check (initially a warning, later an error) so that this is caught early rather than surprisingly at runtime.
prefer hanging indent, also `status_code=302` is unneeded since it's the default: ``` python self.assertRedirects( response, 'http://testserver%s' % obj.get_absolute_url(), fetch_redirect_response=False, ) ```
Chop blank line.
Let's not block the merge on this. The current implementation matches the DEP which was largely discussed. I'm brainstorming to avoid future problems. Seeing the code sometimes gives new ideas.
Error should be passed in `args`: ```suggestion logger.error( f"Error calling {func.__qualname__} on_commit_robust() (%s).", e, exc_info=True, ) ```
```suggestion with time_keeper.timed('Total run'): failures = test_runner.run_tests(test_labels) time_keeper.results() ```
Please move this below `PositiveIntegerField`.
`Substr.__init__()` does. I think it might provide some value. It looks like the other functions don't have parameters that need much explanation.
prefer single quotes unless the string contains a double quote
We should try to keep similar naming, like `BaseMemcachedCache._class`: ```suggestion self._class = self._options.get("CLIENT", RedisCacheClient) ```
nit: since the error message says "the elements" shouldn't this check all elements? ```suggestion if not all(val): ``` alternatively, we can leave the if-statement as-is and instead change the error to something like "the first key in the list must not be empty"
I think `sys.maxint` would make more sense here.
Does this make a difference to the tests? I'm not a fan of the bilateral attribute - it was introduced before expressions were a thing. Not sure we want to propagate their use.
the depth parameter is gone as of Django 1.7
Using `elif approximate >= ApproximateWith.YEARS:` and keeping the final `else` clause as is would remove a nesting level.
I think it would improve the readability of the test to use the approach of `test_unique_history_per_loader` and put the templates in the Python rather than having to look up those templates to see what's going on. Also, please use single quotes throughout, unless a string contains a double quote. You can squash commits when updating.
This will only work for up to 3-5 sites. I would recommend using a select input.
Ah yes. Sorry for missing this.
No indentation is needed: ```suggestion "Optimizing from %d operations to %d operations." % ```
I think we can raise an error in this case.
I would remove this reference. IMO adding a note to the ticket [18867](https://code.djangoproject.com/ticket/18867) about open PR in PyYAML would be more appropriate.
```suggestion return NamedValuesListIterable.create_namedtuple_class(*names)(*values) ```
Casting the list to a tuple, as my code example does, allows it to be a key in the cache. Tuples containing immutable objects are immutable, and therefore hashable: https://docs.python.org/3/glossary.html#term-hashable
I think the idea was to replace <a> with <img>. Maybe the change is fine as I guess it's still possible; it just requires overriding the entire `template_with_initial` instead of `url_markup_template`.
Please provide a message, e.g., `TypeError('Slicing must be of type made either int or slice.')` and write a test as well similar.
I guess the count aggregation passes in `['count']` as `aggregate_names`. I think some explanation in the docstring of what the `aggregate_names` argument is for. It seems to have the effect of reducing the number of cases in which a subquery is needed, but I don't really fully understand why that should be the case.
Previous message was incorrect, IMO. We tried to delete a `P` instance so we should get a message about `P` even if restricted foreign keys are from other models (`R` in this case). Restricted foreign keys can be reached from a long and complicated paths so I don't think we can do much to improve this message.
I think the `FieldError` is an artifact of your test iteration process, you should be able to remove the `try` statement now.
For `main` we could maybe pull this fragment into a decorator to be applied both here and in `options()`. 🤔 (In a separate PR.)
`alter_index_together()` also uses `self.sql_delete_index` :disappointed:
As below, use `django.utils.six`.
This change is unnecessary, reverted.
I think it is worth just spewing it out as a complete text blob. Otherwise we would be adding specialised parsing which is not worth it for a textual output.
Revert this change.
Please chop the ticket number from the test method name.
``` # Exit out to async mode, if needed. ```
`AutoFieldMixin.validate()` is missing , I think we should restore `AutoField.validate()` implementation, i.e. ```python def validate(self, value, model_instance): pass ```
Another option is to remove the `check_consistent_history` call from `makemigrations` in 1.10 and revisit it in 1.11.
```suggestion # Nested coalesce ```
No need to interpolate `'abc'` in the message -- this might be done in some existing tests for Python 2 compatibility to account for u'' prefixes on Python 2 but could be removed now.
Either lookup works as a regression test. The important thing is that `lookup_name != 'exact'` as the docstring says.
Line break for future black compat? 😇 ```suggestion @action_method( permissions=['delete'], description=gettext_lazy("Delete selected %(verbose_name_plural)s"), ) ```
The hook idea was twofold: 1. Encapsulate the logic, to make the flow ~~clearer~~ easier to read. 2. Allow overrides, for say a DateTimeField. (Not really unique but often good enough...) and so on.
I'll try to move the test to `test_state.py` and commit this patch without this untested line unless there's further feedback.
As long as there is only 1 test method I'm not sure we really need all the extra variables, setUp method, etc. It makes things look more complex than they are.
Similarly, could this be an empty string to simply (please simplify other values if possible as well).
I think usually we use a try/finally block if this is only applicable to 1 test.
Use `'%s'` to avoid the `u''` prefix in the message on Python 2.
The `mtime` kwarg breaks Py2. Is it even used? The only use I can find is a direct assignment to `FileSystemOrigin.mtime`.
Please wrap at 79 chars.
This and the few following cleanups are strictly unrelated to this patch. Presumably, they're here because of the feedback for similar items on #9636. There are lots of inconsistencies left in this file, around both docstrings and formatting of simple (e.g.) `post_data` dicts. Despite being strictly unrelated, I'm inclined to leave these few changes as they are here, and include them.
Please use a style like this: ``` python reverse( 'admin:%s_%s_change' % (opts.app_label, opts.model_name), args=(quote(pk_value),), current_app=self.admin_site.name, ) ```
This import can live in the above line.
I think we should remove them.
See commit 7d81ee6efc3 for an example of a test needing to simulate command line.
I think names like `float_nan` would be more consistent with our coding style.
Nitpicking: The current migration output uses both `('app_label', 'migration_name')` and `app_label.migration_name` scattered all over the place. I'll open a ticket to use the dot-notation across the board which I find easier to read / write. In the mean time I'd use that format here already.
Please remove the added trailing comma -- there's little usefulness in making a change like that.
This can be single-lined.
The current coding style prefers single quotes. Please fix throughout, but new code only. ```suggestion if 'PICKLE_VERSION' in options: ``` _(Eventually it will be double quotes when we can use `black`.)_
set, with and without...
Put the model near the model it relates to.
Chop `Ensure that`.
Do we need all these tests? IMO these two should be enough: ```python obj = IntegerArrayModel(field=[]) form = Form({'field_0': '', 'field_1': ''}, instance=obj) self.assertFalse(form.has_changed()) obj = IntegerArrayModel(field=[1]) form = Form({'field_0': '1', 'field_1': ''}, instance=obj) self.assertFalse(form.has_changed()) ```
You don't need a list comprehension here.
... error is ignored when...
It could be `url_uname=url_name` but I don't think it matters much as it's only cosmetic.
Only change your own code, please. We don't like to mix unrelated cleanups with bug fixes.
I'm not sure if we can decruft this a bit? ```python def cached_import(module_path, class_name): # Check whether module is loaded and fully initialized. if not ( module := sys.modules.get(module_path) and spec := getattr(module, '__spec__', None) and getattr(spec, '_initializing', False) is False ): module = import_module(module_path) return getattr(module, class_name) ``` You'll have to double check this - just knocked it up quickly.
I don't think that we need to call `django.setup()`. I would prefer to load only necessary apps, i.e. ```python try: import asgiref from django.conf import settings from django.apps import apps except ImportError: pass else: settings.configure() apps.populate(['django.contrib.contenttypes', 'django.contrib.auth']) ```
I'd put each key/value on its own line and please include a trailing comma on the last item (habit so that if more items are added later, we don't need to change that line again)
Oh I see, it would fail with pylibmc. Sure you can remove this commit.
I think you're probably right about these four lines. The only reason I see for a separate PR, though, is if that PR were to include a battery of tests (using mocking as @timgraham suggested) for the different combinations of pre-existence of user & tablespace and values of the `keepdb` flag.
I should be more precise. `update_fields` are always passed when `on_conflict == OnConflict.UPDATE`. We current signature is fine with me.
@orf Please rebase from master and use `_get_repr_options()` instead of `__repr__()`.
```suggestion on_conflict=None, update_fields=None, unique_fields=None, ```
Nitpicky: but I find it more readable when the name starts with the verb when the function returns a boolean. ```suggestion def is_field_selected(field): ```
No need for the parameters, they are not relevant to the test I think: ```suggestion msg = "The make_random_password method is deprecated." with self.assertWarnsMessage(RemovedInDjango51Warning, msg): UserManager().make_random_password() ```
Do you think we're adding value with such complicated `__repr__` methods? I've thought maybe we should ditch worrying about including of Index's params in them and just let `Index.__repr__` show the basics. Does the repr should up anywhere important? I can't think of anywhere.
Actually, should probably use a constant for this rather than repeating the string everywhere: `DJANGO_VERSION_PICKLE_KEY = '_django_version'` (in `django.db.utils`, I think)
That's not actually resolving anything it's only collecting aliases.
I would use `get_version()` instead.
`.as_sql()` is the default implementation. `as_{backend.vendor}` is the backend specific implementation *if it exists*. `compiler.compile` checks if a backend specific implementation exists first and uses that, falling back to `as_sql` if one does not exist. So, `self.compile(transform_function(..))` I think would be correct.
IMO we shouldn't inherit from `IndexOperation` it's misleading and we do this only to have the `model_name_lower` property.
You have a spelling error here. It's `DATABASES`. Even if you correct that, this would raise a warning: ``` tests/settings_tests/tests.py:472: UserWarning: Overriding setting DATABASES can lead to unexpected behavior. with override_settings(DATABASES=databases): ``` I'm not at all sure you can use this here. At the very least it would need to decorate the test method (or whole test case), but the databases are set up at the beginning of the test run, so instead of using `override_settings` I think you will need to declare a new alias just to serve as the mirror here.
This could be extracted too. Also it's a pep8 warning on the latest pep8 - apparently you shouldn't assign lambdas and should use `def` instead.
```suggestion if sql: ```
Why this variable is called `unnamed_...` since it also stores named group? :thinking:
```suggestion # RemovedInDjango50Warning settings.FORM_RENDERER = "django.forms.renderers.DjangoDivFormRenderer" ```
Is this really necessary? I don't see any harm in leaving an empty list and all tests work without these lines.
Why not use decorator syntax for classmethod? While you're at it, why not hide the queryset_only attribute in a decorator: ``` python def queryset_only(method): method.queryset_only = True return method ```
I'd move this block into e.g. `_sort_operations()`
`tried` can be also an issue for function-based views because `URLResolver` is not pickleable, everything depends on the order in `urlpatterns`, see e.g. ```diff diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py index 29b6185292..0efb713959 100644 --- a/tests/urlpatterns/path_urls.py +++ b/tests/urlpatterns/path_urls.py @@ -3,13 +3,13 @@ from django.urls import include, path, re_path from . import views urlpatterns = [ + path('included_urls/', include('urlpatterns.included_urls')), path('articles/2003/', views.empty_view, name='articles-2003'), path('articles/<int:year>/', views.empty_view, name='articles-year'), path('articles/<int:year>/<int:month>/', views.empty_view, name='articles-year-month'), path('articles/<int:year>/<int:month>/<int:day>/', views.empty_view, name='articles-year-month-day'), path('users/', views.empty_view, name='users'), path('users/<id>/', views.empty_view, name='user-with-id'), - path('included_urls/', include('urlpatterns.included_urls')), re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'), re_path(r'^regex_optional/(?P<arg1>\d+)/(?:(?P<arg2>\d+)/)?', views.empty_view, name='regex_optional'), re_path( ```
But as I said, I think that is a bad idea as it will have the wrong extension on it. The two acceptable choices to deal with this are: 1. Fail loudly as the user expected a compressed file. 2. Strip the extension and continue with an uncompressed file, but show a warning.
> both `CombinedExpression` and `Lookup` combine a left and a right expression. Not always, many lookups are complicated expressions or even function calls. The only common factor for me is that both have two arguments. Also `CombinedExpression` has a lot of unnecessary logic, e.g. `SQLiteNumericMixin`. We should probably compare `Lookup` subclassing `Expression` vs. `CombinedExpression` :thinking:
did you consider using `setUpTestData` for this class? Might make things a bit simpler. In particular, this test is a bit long and I think each `From..., prefetch ....` could be a separate test method.
yes, that's what I was thinking
Okay, would be nice to have some tests for that if possible.
Some tests seem missing as removing this line entirely doesn't result in any test failures.
`DatetimeFormatsIterator` -> `DateTimeFormatIterator`.
We shouldn't mix file names that are candidates for path traversal with sanitizing non-printable chars. I moved it to a separate test method.
Might want to move the `not chunked_fetch` local variable checks before performing a double attribute lookup with `self.connection.features.can_use_chunked_reads`.
We can chop this docstring.
Please use "real" names, not `foo`, `bar`, `foobar`, e.g. `Author`,`Song`.
`timeit` on Python 3.7 suggests that the iterator version is slightly faster: ``` $ python3 -m timeit -s 'import sys' 'sorted(list(sys.modules.items()), key=lambda i: i[0])' 20000 loops, best of 5: 10.8 usec per loop $ python3 -m timeit -s 'import sys' 'sorted(sys.modules.items(), key=lambda i: i[0])' 20000 loops, best of 5: 10.5 usec per loop ```
this would fix https://code.djangoproject.com/ticket/23912 too
okay, but would be helpful to say _why_ we need to always return True.
Wouldn't that break with `choices=(0, "zero")`
This is a "database cache"-specific tests, so it's not required. I removed it.
the following with an async `__call__` works for me! ``` class Test: async def __call__(self): return True ``` and `inspect.iscoroutinefunction(Test.__call__) -> True`
Please add a trailing comma, and in all other assertion method calls below.
Small nit: I would suggest using a name that is not a built-in. Perhaps `all_` or `_all`.
I wonder if testing the `LogEntry` items instead of calling the view would be a bit more precise testing. To be evaluated.
I didn't actually expect, or mean for you to benchmark it, as either is "fast enough" IMHO. I simply didn't notice the trailing comma on L24, hence my assumption it was just one message (in which case _I'd_ consider it more idiomatic to use `append`)
The message should only be visible when DEBUG=True so I don't think there's a concern about information leakage if you raise 404 with a message.
The purpose of this class isn't obvious to me. Is this code adapted your use case? Maybe you can add a bit more explanation to the ticket. I'm not sure what "custom default settings" are.
```suggestion field__len=models.OuterRef('field__len'), ```
PEP8 E226: you need to have whitespace around the + signs
sure, in `selenium.py` sounds okay.
It looks that `test_sqlmigrate_replaced_second_migration()` and `test_sqlmigrate_replaced_migration()` are redundant. Please remove one of them.
Please wrap this output (and similar outputs below) at 79 chars.
I won't complain as long as your choice makes sense and is within 119 chars.
Use `asserRaisesMessage` for the message part, keep `cm` around for the `code` assertion.
All tests work without it that's why I'm wondering if we need it.
I think you can simplify this expression removing the `default` and using `const='full'` instead of `const=True`: ```python '--add-location', dest='add_location', choices=('full', 'file', 'never'), const='full', nargs='?', help="Control '#: filename:line' lines. The optional type can be either 'full', " "'file', or 'never'. If it is not given or 'full', it generates the lines " "with both file name and line number. If it is 'file', the line number " "part is omitted. If it is 'never', it completely suppresses the lines " "(same as --no-location).", ) ``` This would avoid having to treat the `options['add_location'] is True` below.
If we wanted to test it at the compiler level instead we could do something along the following ```suggestion def test_aggregation_filter_exists(self): queryset = ( Book.objects.values('publisher') .annotate(cnt=Count('isbn')) .filter(cnt__gt=1) ) query = queryset.query.exists(connection.alias) self.assertEqual( len(query.get_compiler(connection).pre_sql_setup()[2]), 1 ) ``` It heavily depends on implementation details of `django.db.models.sql` but avoids a query and reliance on backend specific output.
I'd move fake_initial to the next line and include the trailing comma
Ah yes, makes sense, `argon` is to complicated in that matter most likely :/
Please add a period: ```suggestion raise TypeError('The XOR operator is not supported on this database backend.') ```
This line is related to the `save` method, and should sit beneath it, rather than the new `get_updated_model` method.
This signature change should be mentioned under the `Database backend API` sub-section of the `Backwards incompatible changes in 4.0` section in `docs/releases/4.0.txt`.
simpler suggestion: ``` """ Return a BoundField instance that will be used when accessing the form field in a template. """ ```
chop blank line
I'd format it like this to prevent a long line: ``` return self.opts.default_related_name % { 'class': self.opts.model_name.lower(), 'app_label': self.opts.app_label.lower(), } ```
This line is not needed.
Include a trailing comma in cases like this so that if more items are added later, this line doesn't have to be modified again.
FYI, you can exclude filenames in github search - I find this very useful for excluding copies of Django code: https://github.com/search?utf8=%E2%9C%93&q=django.utils.synch+RWLock+-filename%3Alocmem.py+-filename%3Asynch.py+language%3APython&type=Code Two pages of usages in a few modules, not too much.
needed? don't think any books would be deleted by this query.
```python mo_path = po_path.with_suffix('.mo') ```
> @felixxm thanks for the extra context, I misread `self._meta_ordering` as `self._meta.ordering`. I did the same at the beginning.
I don't think this is needed. Or `requires_system_checks` or the non-required arguments -- try to simplify this as much as possible and remove unused things like `if options['verbosity'] > 0:` (I assume this was copied from another command).
I think you should keep the old code here -- that way, you avoid new semantics as much as possible (also, with this change I think you lose the deprecation warning)
```suggestion """Render as <tr> elements excluding the surrounding <table> tag.""" ```
IMO it will me more readable to move `base` outside, also we resolve `F()` expressions twice (line 28 & 29), so maybe, e.g. ```python if isinstance(expression, str): expression = F(expression) if isinstance(expression, F): expression = base.resolve_expression(query=query, simple_col=True) else: expression = expression.resolve_expression(query=query) ``` Moreover I think we don't need to iterate twice over the expressions: ```python for expression, operator in self.expressions: ... expressions.append('%s WITH %s' % (sql % params, operator) return expressions ```
Should always prefer a literal. ```suggestion return {} ```
I've pushed small edits to remove the `quoted` kwarg.
Please use single quotes.
Ahh, true. I've convinced myself that `alias` is unused if `EmptyResultSet` is raised :facepalm:
`not user.is_active` not needed.
Again, the `.all()` seems to be unnecessary, and will add a lot of overhead on combined QS's.
Do we need to do this recursively? I think we may be more restrictive and raise an error when `message` contains `\*`, `*/` or `--`.
Setting `self.__dict__['regex']` doesn't work with `@property` (tested on 2.7). I don't think it's even possible to override the return value of a property like this. You'll have to dynamically return the right value in the `regex` getter.
Please add a docstring and remove this blank line. Also, this block is indent 8 spaces instead of 4.
Please use more specific assert methods where available, in this case: `self.assertIsInstance()` Having said that, it looks as though the `isinstance()` check here still causes the tests to fail...
Yes, assuming it can be used in the test.
```suggestion if os.environ.get('TERM_PROGRAM') == 'vscode': ```
``` items["imports"] += ( "..." "..." ) ```
Move the leading period to the initial definition of `msg`.
Can you check for the correct error message, please.
```suggestion # RemovedInDjango50Warning: when the deprecation ends, remove is_dst # argument. def __init__(self, expression, output_field=None, tzinfo=None, is_dst=timezone.NOT_PASSED, **extra): ```
Seem like all of these could be merged in a single `alter_model_option` method and even possible merged with `alter_model_options`.
Actually the `filterable` attribute would have a different meaning here, scratch that.
`FinderTestCase` -> `TestFinders` (parallels `TestHashedFiles` / `TestDefaults`) or similar? Otherwise LGTM.
Could we maybe use a name that doesn't conflict with `django.db.models.indexes.IndexExpression` since this one has about no knowledge about _indexes_ per-se.
chop "Make sure that" prefix. e.g. "Non-ASCII characters encoded as valid UTF-8 is correctly transported and decoded." (better yet, explain what "correctly" means)
import at top of file please
We're not currently handling this correctly I think. Follow up at https://code.djangoproject.com/ticket/33738
Does this mean that support for this is limited to `SELECT` statements? - PostgreSQL supports `SELECT`, `INSERT`, `UPDATE`, `DELETE`, and others that are irrelevant to Django... - MySQL support `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `REPLACE`.
Maybe even in advance with the current form.
Add 1 empty line before the method declaration, and 1 empty line after it. Make sure the empty lines don't contain any whitespaces. This is for the flake8 failure as well
We're generally preferring `assertCountEqual()` and `assertSequenceEqual()` over `assertQuerysetEqual()` to remove the need to put a bunch of `__str__()` strings.
I don't that we should do this. `BaseBackend` contains only basic methods.
I removed it from my code.
These lookups are duplicated in the list.
This whole logic can be simplified to ```diff diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index 4e120d2741..0d39671f0b 100644 --- a/django/db/models/sql/query.py +++ b/django/db/models/sql/query.py @@ -1620,17 +1620,22 @@ class Query(BaseExpression): _resolve_cols(self.annotations[name].get_source_expressions()) return set(cols) + @classmethod + def _gen_col_aliases(cls, exprs): + for expr in exprs: + if isinstance(expr, Col): + yield expr.alias + else: + yield from cls._gen_col_aliases(expr.get_source_expressions()) + def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, simple_col=False): if not allow_joins and LOOKUP_SEP in name: raise FieldError("Joined field references are not permitted in this query") - if name in self.annotations: - if not allow_joins and self.annotations[name].contains_column_references: - for alias in ( - {getattr(self.annotations[name], 'alias', None)} - if isinstance(self.annotations[name], Col) else - self.resolve_cols(name) - ): - if alias and isinstance(self.alias_map[alias], Join): + annotation = self.annotations.get(name) + if annotation is not None: + if not allow_joins: + for alias in self._gen_col_aliases([annotation]): + if isinstance(self.alias_map[alias], Join): raise FieldError('Joined field references are not permitted in this query') if summarize: # Summarize currently means we are doing an aggregate() query @@ -1639,7 +1644,7 @@ class Query(BaseExpression): # that case we need to return a Ref to the subquery's annotation. return Ref(name, self.annotation_select[name]) else: - return self.annotations[name] + return annotation else: field_list = name.split(LOOKUP_SEP) join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse) ```
4 space indent for consistency with test below
We can revert changes in `_alter_field()`.
`maxsize=None` is a bad idea like Aymeric says in #8825.
maybe drop spaces around =
This would be better styled as: ```python try: import MySQLdb except ImportError: pass else: # ... warnings.filterwarnings(...) ```
why is this method needed? It seems redundant since `View.as_view()` calls `__init__()`.
What if something else throws this `TypeError`? If we want to give a message like this at all, I think we need to find a better way of ensuring the case you mentioned is causing it.
`if it is present.` -> `, if provided.`
Oops sorry, I missed the import somehow and thought you were using `django.test.TestCase`
Might help to be explicit here: django.template.loaders.base.Loader
This whole function can probably be redefined as ```python repetitive_index_names = {k for k, v in Counter(names).items() if v > 1} return ( Error(...) for model, index_name in zip(models, names) if name in repetitive_index_names ) ```
Include expression if it is a PK or if the alias is not one an alias of a PK? Wouldn't this include all fields that have an alias? (I know I must be reading this incorrectly because the tests pass..)
```suggestion self.assertEqual( res.context_data['form'].errors['__all__'], ['You must confirm the delete.'], ) self.assertEqual( res.context_data['form'].errors['confirm'], ['This field is required.'], ) ```
```suggestion def __init__(self, *args, on_conflict=None, update_fields=None, unique_fields=None, **kwargs): ```
But `formats.get_format()` is not lazy, am I right? :thinking:. We can also use `yield from ... ` without `chain()`, e.g. ```python def __iter__(self): yield from formats.get_format('DATETIME_INPUT_FORMATS') yield from formats.get_format('DATE_INPUT_FORMATS') ```
You can change it in a separate commit in the same PR.
this and the check in `get_group_permissions()` is redundant with the check in `_get_permissions`
Thanks -- is there ever a case where singular is empty but not plural? I thought `kwargs['singular'] or kwargs['plural']` could guard against that if it makes sense.
I'm more inclined to put the test in `test_base.py` rather than create a new file for behavior specific tests. The tests look like they're organized by class here.
omit trailing , before ) (only include it if the tuple is multilined)
```suggestion self.assertSequenceEqual(qs1, [self.objs[7]]) ```
I think it should be a `deploy` check.
Maybe you've made some other changes, but `$ ./runtests.py file_storage` passes for me with this change: ``` diff diff --git a/django/core/files/storage.py b/django/core/files/storage.py index 1471d4e..702f6a6 100644 --- a/django/core/files/storage.py +++ b/django/core/files/storage.py @@ -76,7 +76,7 @@ class Storage(object): """ return get_valid_filename(name) - def get_available_name(self, name, max_length=100): + def get_available_name(self, name, max_length=None): """ Returns a filename that's free on the target storage system, and available for new content to be written to. @@ -88,9 +88,11 @@ class Storage(object): # exists) to the filename until the generated filename doesn't exist. # Truncate original name if required, so the new filename does not # exceed the max_length. - while self.exists(name) or len(name) > max_length: + while self.exists(name) or (max_length and len(name) > max_length): # file_ext includes the dot. name = os.path.join(dir_name, "%s_%s%s" % (file_root, get_random_string(7), file_ext)) + if max_length is None: + continue # Truncating file_root if max_length exceeded. truncation = len(name) - max_length if truncation > 0: ```
use the `timezone.override()` context manager
Perhaps the duplicated code between this and the MySQL backend suggests a need for some refactoring.
IMO it's more readable without `get(model, {})`, e.g. ```python def clear_restricted_objects_from_set(self, model, objs): if model in self.restricted_objects: self.restricted_objects[model] = { field: items - objs for field, items in self.restricted_objects[model].items() } ```
I think I got confused myself here. Will review.
The following properties indicate if
Here however, you shouldn't use a list comprehension as it makes you call `regex.match` two times instead of one. Plus a dict iterates on keys by default, so you don't need to write `.keys()`.
Actually, shouldn't this be ```suggestion coalesce.is_summary = summarize ``` Or even ```suggestion coalesce.is_summary = c.is_summary ``` Otherwise, annotations of aggregate functions using `default` will be marked `is_summary` even if they are not used for `.aggregate` and that could cause other problems [if a subquery pushdown must take place](https://github.com/django/django/blob/30a01441347d5a2146af2944b29778fa0834d4be/django/db/models/sql/query.py#L403-L411).
`join()` is unnecessary ```suggestion msg = ( '<p>\n<foo>\n</p>' ' != ' '<p>\n&lt;foo&gt;\n</p>\n' ) ```
`max_length` can be `None` for non-`CharField` instances of `Field`. You might want to assign the attribute only if it is not `None`.
Maybe something like: `RuntimeError("setup_test_environment() was already called and can't be called more than once.")`
Some docstrings like this one are doubled.
I would assert with an explicit representation (except `TEMPLATE_DIR` which depends on OS) e.g. ```python self.assertEqual(repr(engine), ( f"<Engine dirs=[{TEMPLATE_DIR!r}] app_dirs=True " f"context_processors=[] loaders=[" f"'django.template.loaders.filesystem.Loader' " f"'django.template.loaders.app_directories.Loader'] " ... )) ```
width, height, and offset
This should be `RemovedInDjango50Warning` I think.
The logic needs to be smarter than that. It needs to take into account that other indices might be covering this field (`index_together`, other `indexes` entries) as well. Under such circumstances it's not necessary to create another index. Also only the first field on `index.fields` need to be considered for the `ForeignKey` case. If a foreign key appears as a second element in a composite index MySQL won't be able to use it internally to enforce the constraint. Let me know if that makes sense to you.
I think it would be enough to test that the default implementations return the `LogEntry`. You're indirectly testing it now by calling `super()` but the custom methods don't seem necessary.
Wrap at 79 chars.
It will be more readable with f-string, IMO: ```suggestion return f'{user.pk}{user.password}{login_timestamp}{timestamp}{email}' ```
Sorry to be picky, could you rename the test function name to something a bit more verbose? a suggestion could be: "test_exception_raised_if_model_declared_outside_app"
IMO we can omit catching this exception.
Also make the comparison case-insensitive, i.e. ```python if self.index_type.lower() != 'gist': ```
I think the test name is good enough, so I'd remove the docstring or replace it with a more informational one.
Unfortunately as far as I can tell this doesn’t work in VoiceOver, due to the `ul` still being present. None of the content within the `ul` is announced. The content is correctly announced with the `div` alone, removing the list markup. I also tried adding `role="presentation"` to the `ul` so screen readers bypass the list semantics, that worked as expected, but since the error list still is visually displayed as a list it’s pretty jarring to have to force it to not be announced as once.
I'd write this loop as ``` for pos, prefix in enumerate(prefix_gen()): if prefix not in self.subq_aliases: self.alias_prefix = prefix break if pos > local_recursion limit: raise Runtime... ```
Ditto. ```suggestion # Check empty result with non-execution optimization. with self.assertNumQueries(0): ```
From a second read on the ticket it looks like we should always validate the table name even when not explicitly specified. You can remove this early return.
Why we're adding a constraint manually and not with `AddConstraintNotValid()`? Also, please use hanging indentation.
It would be better to use `extra_context=_sentinel` similar to what was done in 9a30acad8a1996c914351bad981d937de4db29a4.
Not sure an intermediate variable is needed.
I don't think it's possible to hit the second deprecation warning. `on_delete` needs to remain a kwarg so it's optional, but after that, something like `models.ForeignKey(Question, 'pub_date', on_delete=models.PROTECT)` will raise `TypeError: __init__() got multiple values for keyword argument 'on_delete'`.
```suggestion from django.utils.deprecation import RemovedInDjango50Warning ```
```suggestion self.assertContains( response, '<h1>Oh no, an error occurred!</h1>', status_code=500, html=True, ) ```
That's fine. I tend to lean toward concise, and in this case `sys.exec_info()` is a well-known function, but am happy either way.
```suggestion raise TypeError('Cannot call delete() after .distinct()') ```
Yes, that's the idea. I'm not sure if we need to include a long list of schemes though. As Claude suggested on the ticket, some minimal validation like alphanumeric + period is probably sufficient. That way we don't have to maintain a list. Any projects that require such a list can supply it.
please use this indent style: ``` _hextobyte = { (fmt % char).encode(): six.int2byte(char) for range in _decode_ranges for char in range for fmt in ['%02x', '%02X'] } ```
Can we restore the previous "style"? ```suggestion return repr(self.value).replace('datetime.timezone.utc', 'utc'), set(imports) ```
`register_to` rather than `registry_to`
I'd just rename this test to avoid references to _table_ since it doesn't make sense for non-database backends. ```suggestion def test_cull_delete_when_store_empty(self): ```
Line line is preferred here (lines up to 119 chars are allowed if it helps readability.
You could avoid the two branches with: ``` self._options = params.get('OPTIONS') or {} self._options.setdefault('CLIENT_OPTIONS', {}) ``` on line 27.
we can wrap this line at 80 chars
I would make sure one of the index name ends with `_like` or simply iterate over `constraint.values()`.
Put the ending parenthesis on a new line and add a trailing comma to `...self.using`.
`site` is a field on `Redirect` therefore it will be displayed even if `django.contrib.sites` is not installed.
Ah... That's irritating. I still think it would be better to improve the error message, but it looks like it'll require slightly deeper changes.
I can't see a need for it...
`['%s.Router' % __name__]`
Well, I think the staleness issue could be easily addressed by having `Manager.contribute_to_class` invalidate the cache. But you're right, this is probably only worth it if we try my other suggestion of trying to reuse this at runtime instead of re-copying on every access. And _that_ is probably only worth it if we can show that the copying-at-runtime is a noticeable perf regression.
Please use `cached_property` from `django.utils.functional`.
include trailing comma please
MEDIA_TYPES is not a module level constant anymore, I'd rename it to `media_types`.
I think the logic is a bit easier to follow if we don't have any nested boolean expressions: ```suggestion if ( not connection.features.supports_expression_indexes and 'supports_expression_indexes' not in cls._meta.required_db_features and any(constraint.contains_expressions for constraint in cls._meta.constraints) ): ```
Just checked, it's safe to only catch `ImportError` as `ModuleNotFoundError` is a subclass of it: https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError
You could assert the `count()` value as well.
```suggestion model_state = self.models[app_label, model_name] model_state.options = {**model_state.options, **options} for key in alter_option_keys: if key not in options: model_state.options.pop(key, False) self.reload_model(app_label, model_name, delay=True) ```
`((app_label, model_name), [fields])` LGTM On April 1, 2015 3:46:12 PM GMT+02:00, Alex Hill notifications@github.com wrote: > > - from those operations and use them to provide a nicer error > > message. > > + > > - This will work for any function passed to > > lazy_related_operation that > > - has a keyword argument called 'field'. > > - """ > > + > > - def extract_field(operation): > > - # Expect a functools.partial with a kwarg called 'field' > > applied. > > - try: > > - return operation.func.keywords['field'] > > - except (AttributeError, KeyError): > > - return None > > + > > - extract_fields = lambda ops: list(filter(None, > > map(extract_field, ops))) > > + > > - # Generate pairs of (("app_label", "modelname), [fields]) > > Yes you do. The idea was to give an example of the literal contents of > the variable rather than its origins, hence the quotes surrounding each > element. I'm happy to go with `(app_label, model_name)`, without the > quotes. > > --- > > Reply to this email directly or view it on GitHub: > https://github.com/django/django/pull/4423/files#r27569838
Use single quotes.
By the way, I don't find `assertFormNotValid` compelling as we already have `assertFormError`.
This will crash with `TypeError: 'Q' object is not iterable` if `limit_choices_to` is a `Q` object due to the use of `sorted` hence the previously suggested `if` construct. Looking at `make_hashable` it looks like it has a bug as it should be using `sorted` when dealing with `dict` otherwise two dict with different insert order won't generate the same hash. In other words `hash(make_hashable({'foo': 'bar', 'bar': 'foo'})) != hash(make_hashable({'bar': 'foo', 'foo': 'bar'}))` when dict are equals which breaks the expected `__eq__` and `__hash__` property. I think the right way forward is to adjust `make_hashable` and use it directly here without the `tuple(sorted(...))` wrapping.
Undo unrelated change.
It's only `__repr__()`, I don't think it's worth to test all cases.
You can also add a deprecation warning for usages like `from django.forms.extras.widgets import SelectDateWidget`.
It doesn't work with `property` as it defines a `__set__` method. Using a readonly descriptor (only defining `__get__` à la `cached_property`) should work here and be worth it as it would prevent a function call in what seems to a be a performance critical path.
Please revert unrelated changes.
This may affect query counts tested by `assertNumQueries` in `TransactionTestCase` which should be mentioned in the release notes.
Why is it necessary to register a separate lookup for Year type? Isn't it possible to reuse common lookups in a generic way? In other words, using lookup Gt lookup linked with Year transform.
If you handle the positive case first, this can be the simpler `if new_existing:`. You could also use an assignment expression to simplify further (`if new_existing := existing.difference(field_names):`).
Good shout, thanks! Forgot about `__dir__()` when I proposed this.
Indentation is off here, please check code with flake8.
We call `get_start_method()` multiple times (one of them in a loop below) in this function. Let's pull it out into a variable as we do elsewhere in this patch: ```python start_method = multiprocessing.get_start_method() ```
you could probably use the same pattern here and deduplicate this message.
chop first comma "this feature" -> "a password_changed() method"? wrap docstrings at 79 chars
`Exception as e`
Please move `fail_on_restricted` to the next line.
You'll need to catch `ImproperlyConfigured` errors raised by `get_model()` if you want the mention about `model` and `get_model()` to be meaningful. ``` python try: model = self.get_model() except ImproperlyConfigured: raise ImproperlyConfigured( "%(cls)s is missing a QuerySet. Define " "%(cls)s.model, %(cls)s.queryset, or override " "%(cls)s.get_queryset() or %(cls)s.get_model()." % { 'cls': self.__class__.__name__ } ) return model._default_manager.all() ```
I didn't see any indication this is a regression. Please add details about where the regression was introduced to the ticket.
The docstring should probably be updated so that it more accurately describes the new and improved function :)
fair enough, I was just taking a very narrow view here
I would use `force_text` here as "%s$%s" is always unicode due to unicode_literals import.
Wrap at 79 chars.
@orf we don't have [flake8-mutable](https://pypi.python.org/pypi/flake8-mutable) installed on CI.
Now my question is if that's the right behavior. Django currently assumes that any geometry field has a spatial index by default. So IMHO the introspection should not add a `models.Index` in that case.
The committer can amend this when merging, but there's no advantage in using restructedtext markup like ":setting:" in docstrings.
Include a trailing comma in cases like this so that if more items are added later, this line doesn't have to be modified again.
I don't see much value in check that bad representation doesn't exists. I moved the entire row to a single assertion.
Please wrap docstrings at 79 characters. Ticket references are only needed for obscure issues that benefit from the additional context of the ticket. Not sure that's the case here.
for multi-line docstrings we use this style: ``` """ Detect... """ ```
You should be able to use `self.assertInHTML()` which is defined on `django.test.testcases.SimpleTestCase`.
I'd call the variable `interpolated_perms` -- "translated" gives the idea that some translation happens.
Can combine these two `if` statements with `and`. ```suggestion if hasattr(settings, 'SITE_ID') and not isinstance(settings.SITE_ID, int): ```
```suggestion def rename_field(self, app_label, model_name, old_name, new_name): ```
I understand the motive behind the reformatting of the conditionals but I'd stick to the previous one to reduce the patch noise ratio.
```suggestion # These views can be called when CsrfViewMiddleware.process_view() not run, ```
This should also include the "Could not load .." part of the error message -- otherwise the test passes without the change.
Yeah if `FieldDoesNotExist` is raised, I think that's fine, I just couldn't remember what `.get_field` (or whatever it calls internally from there) would return, `None` or an error.
prefer lines longer than 80 characters if it improves readability as described in https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style
Revert change on this line (caused by find/replace, I guess).
This is, we already have `username = UsernameField`.
This exchange is a little bit curious (coming to review). I try with `None` as default for both parameters. I get two failures in `test_follow_307_and_308_redirect`, both with the same trace ending: ``` File "../django/django/core/handlers/wsgi.py", line 83, in __init__ self.content_type, self.content_params = cgi.parse_header(environ.get('CONTENT_TYPE', '')) File "../lib/python3.6/cgi.py", line 319, in parse_header parts = _parseparam(';' + line) TypeError: must be str, not NoneType ``` So it has to be `''` when we get right down to it. Plus we're passing `**extras` around in most methods, and there's no real place where we're checking that. `_base_environ` may be a candidate, but that's way out of scope for this ticket.
```suggestion @ignore_warnings(category=RemovedInDjango50Warning) ```
@graingert Probably it doesn't worth it, but still doable :-) ``` In [85]: class desc: ...: def __init__(self, f): ...: self.name = f.__name__ ...: ...: def __get__(self, instance, cls): ...: if instance is None: ...: return self ...: ...: for cls in cls.__mro__: ...: name = '_%s%s' % (cls.__name__, self.name) ...: if cls.__dict__.get(name) is self: ...: return name ...: ...: class A: ...: @desc ...: def __x(self): ...: pass ...: ...: ...: class B(A): ...: pass ...: In [86]: a = A() ...: a._A__x ...: Out[86]: '_A__x' In [87]: b = B() ...: b._A__x ...: Out[87]: '_A__x' ```
I would do this in reverse, e.g. ```python if self.connection.mysql_is_mariadb and self.connection.mysql_version >= (10, 5, 2): return super().sql_rename_column return 'ALTER TABLE... CHANGE...' ```
I'd avoid allowing passing any form of raw SQL here, I'd suggest the constants are some form of slugs and that the actual SQL generation is handled at the backend level.
I think so. Ideally in a separate commit.
Use set literals, `{...}` here and above.
No, what I'm saying is that the optimisation you are referring to is currently limited in scope. - https://docs.python.org/dev/whatsnew/3.11.html#optimizations - https://bugs.python.org/issue28307 Currently it supports `%a`, `%r`, and `%s` only. (python/cpython#5012). Support for numeric format types, e.g. `%d`, is still unmerged. (python/cpython#26160) And even if that does get merged, there are a [bunch of caveats](https://bugs.python.org/msg393740).
```suggestion i = BigAutoField(primary_key=True) ```
Trailing dot is missing.
Update copy/pasted docstrings.
I would have put the strings in a list, then finally ugettext(", ").join(the_list)
We dropped `sequence_reset_by_name_sql()` intentionally in d28396f5268f1974ef1e84d13bcf1ac107005ced. It's redundant after `TRUNCATE`, we should call it only in `DELETE FROM` branch.
I think you should be using `assertRaises` here.
Needs a rebase (these files are now alway included as of 28e8c54d7d2800a8ac98cf646a9e074055bc1b1b).
```suggestion HAS_COLORAMA = True ```
What about allowing multiple positional `*lookups` instead, it would make the code more readable. ``` python @contextlib.contextmanager def register_lookup(model, *lookups): try: for lookup in lookups: model.register_lookup(lookup) yield model finally: for lookup in lookups: model._unregister_lookup(lookup) ```
I would use an early return (in both cases): ```suggestion return OnConflict.IGNORE ```
Revert unrelated changes to blank lines.
Same here, can you use `assertContains()` here to prevent errors due to attribute order in the HTML tags.
@Jacobkg the place to make this change would be in the definition of the `client` property: ```python @cached_property def client(self): return pywatchman.client(timeout=5.0) ``` but neither place affects the client used to test for `pywatchman` availability, inside the `check_availability` method: ```python client = pywatchman.client(timeout=0.01) ```
We generally try to describe the issue sufficient so that a ticket reference isn't needed.
chop blank line I would probably consolidate the opening closing brackets a bit like the other tests do so the test doesn't appear so long
Usually we prefer for test names to describe the functionality, not reference the ticket. git blame can always be used to get back to the ticket if needed.
Okay, it can be done separately consider this is an existing error message.
Can you switch to the same logic as in the decorator: `if isinstance(..., (list, tuple)): ...`
Maybe: ```suggestion try: self.assertInHTML('<th>1</th>', f.render()) except RecursionError: self.fail('Cyclic reference in BoundField.render().') ```
Sure, not this issue, however I don't think we interpreted the discussion the same. f-strings should be excluded in translatable strings, but I don't see what's preventing us to use them at other places.
Right - you want to compare the `__func__` attributes of the bound methods, which point to their underlying functions: ``` In [4]: UserManager.normalize_email.__func__ is BaseUserManager.normalize_email.__func__ Out[4]: True ```
Missing asserts here? Also, please split the test into smaller parts.
You could create a new field instead of requiring an extra column with an arbitrary default on existing models. e.g. `field = self.model._meta.get_field('value').__class__(validators=[MinValueValidator(1), MaxValueValidator(3)])` And remove `ranged_field` from all the models.
It was definitely relevant, let's continue the discussion over there.
Minor point: There are a couple of these blank lines after docstrings that I'm not sure about.
```suggestion return md5(password.encode()).hexdigest() ```
I pushed Simon's suggestion and fixed `flake8`/`isort`.
Unicode should be capitalized.
```python follow = extra.pop('follow', None) if follow is not None: s['follow'] = follow s['headers'].extend((key.lower().encode(), value.encode()) for key, value in extra.items()) ```
I will change to `try ... except` (see ticket-27818).
Yeah, maybe in OPTIONS for the database. Maybe MAX_INDEX_CHARACTER_SIZE.
`# MySQL allows only one auto-increment column per table.`
Seems ok to me.
this can be one line for better readability
Maybe: ```suggestion "datetime.datetime" "(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc)", ```
I'd use something like `null_character_not_allowed`
I'd also go for `<!doctype html>` (lowercased).
This one is fair-enough, yes.
You could avoid an extra list creation by doing: ```python allowed_origins = [good_origin, *self.allowed_origins_exact] ``` Or you could avoid any list creations and skip extra request processing in some cases (fast path) by doing: ```python request_origin = request.META['HTTP_ORIGIN'] if request_origin in self.allowed_origins_exact: return True good_origin = '%s://%s' % ( 'https' if request.is_secure() else 'http', request.get_host(), ) if request_origin == good_origin: return True ``` Also, if you do that, you could make `self.allowed_origins_exact` return a set rather than a list since it's being used for a membership test.
I have no opinion, Django-MySQL doesn't touch `EmptyResultSet`
Could you add a message here: ``` python raise NotImplementedError('Subclasses of BaseSerializer need to implement the serialize() method') ```
I'm not sure if waiting until `save()` is the best approach. Wouldn't you expect this assertion to pass after the `reporter_id` assignment and before the save? `self.assertEqual(self.a.reporter, self.r2)`
to be safe: ``` try: errors = BookAdminWithListFilter.check(model=Book) finally: Book._meta.apps.ready = True ```
This line is never executed. Instead: ``` with self.assertRaisesMessage(ValueError, msg): Note.objects.bulk_update([], fields=["note"], batch_size=0) ```
This seems to be on the right path but I'm not sure `query.annotations` is correct as some might have been excluded through `.values`? Do we want to check `.select` and `.extra_select` as well? There must be a way to merge this logic with the one below that already cover all of these paths.
Since the same result is expected as above, wouldn't it be clearer to save the output in a variable? Something like: ``` expected = ( "[ ] author_app.0001_initial\n" "[ ] book_app.0001_initial\n" "[ ] author_app.0002_alter_id\n" "[ ] mutate_state_b.0001_initial\n" "[ ] mutate_state_b.0002_add_field\n" ) ```
The name provided in the "transform" call could be passed to the clone function to create the clone in the expected location.
This looks like a leftover after rebase, `classproperty` is currently in `django.utils.functional`.
More simply: `# Drop indexes on varchar/text columns that are changing to a different type.`
The parentheses on this line are unnecessary.
A parameter the controls whether a tuple or a single item is returned from a method doesn't seem like a great API. I'd be inclined to drop `rows_count` unless you discussed this with someone else.
This implementation has a race condition if another thread does `set` / `delete` on the same key in between the set and get here. I would feel more comfortable with it just raising `NotImplementedError` and allowing the backends to pass through to their proper `touch` command.
Simpler could be: ``` if JSON_CONTENT_TYPE_RE.match(content_type): try: return json.dumps(data, cls=self.json_encoder) except TypeError: pass return data ```
Maybe using single quote is more compatible.
I don't think what we need to split this test to db-specific variants, the only difference is in tested SQL `RETURNING %s.%s, %s.%s INTO` (Oracle) vs. `RETURNING %s.%s, %s.%s` (PostgreSQL). IMO testing against `RETURNING %s.%s, %s.%s` is sufficient for both.
I'd say no.
I think an explicit `for` loop wouldn't hurt here.
```suggestion 'If you want to keep a False value for this setting, explicitly set ' ```
Did you check `%timeit`? It suggests that `index.__class__.__name__` is faster.
I'd just stick with `env` over `extra_env` which will keep the diff to a minimum: ```suggestion args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters) env = {**os.environ, **env} if env else None ```
I wonder why `ordered=False` with a result of length 1.
```suggestion str(ErrorList(['Grace is not a Zombie'], error_class='nonform')) ```
Might be less clunky putting the form in a local variable: ```suggestion if form_obj := context.get(form): continue if not form_obj.is_bound: self.fail( f"{msg_prefix}The form {form_obj!r} is not bound, it will never " f"have any errors." ) ``` `context[form]` is repeated an awful lot further down too. You'll probably want a better name than `form_obj` though... 🤔
rquest -> request
Please open a ticket to track the bug (all non-trivial changes should have a ticket).
You can omit the tuple and just put this on the previous line.
I don't see a reason to include `mode` in this method, we always return the passed value.
I think this line is unneeded.
New tests pass without this change.
chop blank line
This bit of code implies that you can change `AUTH_USER_MODEL` and Django will deal with it. I don't think that's true. Changing `AUTH_USER_MODEL` at runtime would require rebuilding the entier app registry. Think about the common pattern `ForeignKey(settings.AUTH_USER_MODEL, ...)` for example.
aren't supported in PEP 249, but the database driver may support them (e.g. cx_Oracle).
Yes, that's what I was suggesting. Distinct PR / commits aren't a big deal. In fact, if I was writing the code, I'd create two commits, one to improve `localtime` first and then one to add `localdate` but that doesn't matter much anyway.
If we were starting from scratch, we'd probably go with this, but I'd rather not change it now. Use a local `status_code=40X` variable in the `except` clauses if you don't want to respond the int.
This docstring can be single-lined.
This fails for me: ``` AssertionError: <MagicMock name='WatchmanReloader()' id='140033332456584'> is not an instance of <class 'django.utils.autoreload.StatReloader'> ``` perhaps that's the failure that Jenkins encountered.
I would reduce the test to a simpler expression: ``` python with obj.normal as normal: obj.normal.open() obj.normal.open() obj.normal.file.seek(0) ```
We can use a different count variable not only `'count'`, so it's probably better to use `self.countervar` instead.
I went with `addCleanup()` — Thanks for mentioning that @orf.
This 'filter-syntax24' key is duplicated. seems good to use 'filter-syntax25'.
Use `__bool__` as master is Python 3 only.
It seems these could fit on a single file. We could define `args = (str(self.name), bases, body)` to avoid repeating them.
```suggestion BookFormSet = modelformset_factory(Author, fields='__all__', renderer=renderer) ```
Please use `GLOBAL_PERMISSIONS` instead of `GLOBAL_PERMS` everywhere.
no blank line needed
`response.client._base_environ()['SERVER_NAME']` would be better but it might be a bit overkill.
Use `assertIn` instead.
What if the prepared value contains unicode? (As I said before, you should use a list comprehension instead of a generator, it'll be about 2 times faster here)
We didn't change anything in building frames so it's enough to check that frames are not empty.
Shouldn't the line 112 also be adapted ? `chunks()` could have split the bytes between a `\r` and a `\n`, hence the following code might lead to unexpected results: ``` Python if line[-1:] in (b'\n', b'\r'): yield line ```
I prefer keeping imports at the top of modules.
I'd suggest moving the `item.prefix_references` part to the `if isinstance(item, Orderby)` instead as all expressions are already wrapped in an `OrderBy` and the latter always has a `prefix_references` method so this conditional is unnecessary ```python if isinstance(item, OrderBy): results.append((item.prefix_references(f"{name}{LOOKUP_SEP}"), False)) continue ```
I wonder if `Model.validate_constraints` should handle and silence this at first as to not force all `BaseContraint` subclasses to implement this method.
A list comprehension may be more readable/Pythonic.
When declaring models in test methods, you need to use [`@isolate_apps()`](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#django.test.utils.isolate_apps).
Currently, pymemcache has `get_multi`. So also works ```python def get_multi(self, keys, gets=False, *args, **kwargs): # pymemcache.client.hash.HashClient may return {'key': False} result = super().get_multi(keys, gets, *args, **kwargs) return {k: v for k, v in result.items() if v} ```
... but we can of course unify imports in docs and tests.
You want to do it the other way around; no adjustments should be required to the base schema adaptor. In order to achieve that you'll want to have the PostGIS `_create_index_sql` method *not* pass `fields` but `expressions` when necessary ```python def _create_index_sql(self, model, *, fields=None, **kwargs): if fields is None or len(fields) != 1 or not hasattr(fields[0], 'geodetic'): return super()._create_index_sql(model, fields=fields, **kwargs) field = fields[0] template = None if field.geom_type == 'RASTER': # For raster fields, wrap index creation SQL statement with ST_ConvexHull. # Indexes on raster columns are based on the convex hull of the raster. template = self.rast_index_wrapper % '%(expressions)s' elif field.dim > 2 and not field.geography: # Use "nd" ops which are fast on multidimensional cases template = "%%(expressions)s %s" % self.geom_index_ops_nd expressions = None if template is not None: fields = None expressions = [Func(Col(field.column), template=template)] using = ' USING %s' % self.geom_index_type return super()._create_index_sql(model, fields=fields, expressions=expressions, using=using) ```
`field_names_cache` should be moved an initialized in the `__init__()`, currently we clean it for each `obj`.
I've changed to `CaptureQueriesContext()`.
@codingjoe the issue with `assertTrue` is that it's more of an `assertTruthy`; any value that evaluates to `True` will pass (e.g. `1`, `'hello'`, ...).
preferred format is just to prefix the message with the ticket number. "#23063 - Test that ..."
My think was that the `setUpTestData` changes would be the first commit and changes like this would be included there so that the bug fix commit doesn't have to make changes in unrelated tests.
I'd've used `assertNotIn('SELECT', sql)`
I would chop blank lines and test these in a loop, e.g.: ```python for name, inline_class in ( ('alternate', AlternateInline), ('media', MediaInline), ): request.name = name self.assertEqual(ma.get_inlines(request, None), (inline_class,)), self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class) ```
I think we should still catch `TypeError` because `isinstance(key, str)` will not work for subclasses of `SafeExceptionReporterFilter` that use bytes pattern in `hidden_settings`. Maybe: ```diff diff --git a/django/views/debug.py b/django/views/debug.py index 68dba4b500..53e6b2d4dc 100644 --- a/django/views/debug.py +++ b/django/views/debug.py @@ -91,18 +91,18 @@ class SafeExceptionReporterFilter: value is a dictionary, recursively cleanse the keys in that dictionary. """ try: - if self.hidden_settings.search(key): - cleansed = self.cleansed_substitute - elif isinstance(value, dict): - cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()} - elif isinstance(value, list): - cleansed = [self.cleanse_setting('', v) for v in value] - elif isinstance(value, tuple): - cleansed = tuple([self.cleanse_setting('', v) for v in value]) - else: - cleansed = value + is_sensitive = self.hidden_settings.search(key) except TypeError: - # If the key isn't regex-able, just return as-is. + is_sensitive = False + if is_sensitive: + cleansed = self.cleansed_substitute + elif isinstance(value, dict): + cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()} + elif isinstance(value, list): + cleansed = [self.cleanse_setting('', v) for v in value] + elif isinstance(value, tuple): + cleansed = tuple([self.cleanse_setting('', v) for v in value]) + else: cleansed = value if callable(cleansed): ```
should be `extra_context or {},` (include a trailing comma)
This shouldn't be needed once you add the custom `deconstruct()`.
No need to assign to `self.widgets` ```python if isinstance(widgets, dict): self.widgets_names = [ ('_%s' % name) if name else '' for name in widgets ] widgets = widgets.values() else: self.widgets_names = ['_%s' % i for i in range(len(widgets))] self.widgets = [w() if isinstance(w, type) else w for w in widgets] ```
This can be single-lined.
Restoring the inner import fixes the errors when psycopg2 isn't installed.
`Value` wrapping and `output_field` is unnecessary on the main branch ```suggestion annotated_field=2, ).filter(order__gte=6) qs2 = ReservedName.objects.annotate( annotated_field=1, ``` or ```suggestion annotated_field=Value(2), ).filter(order__gte=6) qs2 = ReservedName.objects.annotate( annotated_field=Value(1), ``` both work
This can simply be `if` when the prior `if` block always returns or raises. There are a few more instances of this below.
I think it is a mistake Lookup is a subclass of RegisterLookupMixin. Because registering lookups or transforms on a Lookup doesn't make any sense.
I don't think that creating a custom `ArticleForm` or setting `initial` data is required for this test, we should be able to simplify this, e.g. ```python def test_formsets_with_order_custom_widget(self): class FormSet(BaseFormSet): ordering_widget = HiddenInput ArticleFormSet = formset_factory(ArticleForm, formset=FormSet, can_order=True) formset = ArticleFormSet(auto_id=False, prefix='articles') self.assertHTMLEqual( ... ```
Chop blank line.
Did you try to move it to the base class? By the way, I would keep the `_destructor` name if possible, by consistency with `_constructor`.
We have many old tests in `queries` with unnecessary docstrings.
I think `Furrow long` should be an alias instead of `Furlongs`, also please alphabetize.
Wouldn't it make sense to call `int` on `interations` alread in `decode`? From the naming alone I think it would make sense to move it into `decode`.
I think that we should also change `on_conflicts` → `on_conflict`. ```suggestion def __init__(self, *args, on_conflict=None, update_fields=[], unique_fields=[], **kwargs): ``` It makes sense to have `ignore_conflicts=True` and `update_conflicts=True`, but when combining into a single parameter we should make it singular. When using the enum as suggested this becomes `on_conflict=OnConflict.IGNORE`.
Remove this line as `preserved_filters` is already added by `ctx = Context(context)`.
Is this required? Don't see a failing test with it reverted.
Looking at collections source code I think you mean `collections.Iterator` here.
@timgraham I confirm this was my intent to make sure that constants are used as fieldnames.
Possible one-liner alternative implementation : `locales = list(chain(*[l.split(',') for l in locale]))` (chain from itertools)
Does it make sense to add the hasher here? It will not get used anyways *scratches head*
`self.assertSequenceEqual(trans_real.parse_accept_lang_header(value), expected)` (switch order)
Yeah, makes sense, now that I read the code again.
Users would use field names not column names :thinking: we must take this into account, e.g. ```python columns = [from_model._meta.get_field(field).column for field in self.old_fields] ```
Why 70? "sha256" = 6 + "$" = 1 + "<sha256 hash>" = 64 would give 71.
Okay, then I think you could skip the `is_multipart` variable and put the calculation directly in the dict.
prefer adding `()` to avoid backslash
I'd use `'%s:%s_%s_changelist'` here.
prefer hanging indent style (allows longer lines, indentation always multiple of 4): ``` rasterheader = ( 1, 0, ... ) ```
The assignment to `self.choices` has no effect. Not being a subclass of `ChoiceField`, it's not used in validation. (Nothing fails removing it.)
use set comprehension: `{m[0] for m in plan}`
do we really need that `is not None` check? `check_token` should return `False` for None tokens.
I think that we should keep `skipUnless`, to omit `import` that will not work for other databases.
`timezone.now()` should be used for `DateTimeField`.
I don't mind what Claude proposed. I think it would be better to test this at a lower level, probably in `tests/serializers`. That should help verify there aren't any uuid issues with the other serializers too.
Is there any reason not to use the normal registration process for this method, overriding the relevant lookups and removing any which are not valid? The current implementation would not allow for a third part lookup (which may be useful if there is a non standard `db_type` for example).
Not sure who marked this as resolved, because it isn't.
Usually we don't repeat the docstring from the base class.
Please chop blank line and remove temporary variable (`furlong`), i.e. ```python d = D(m=201.168) self.assertEqual(d.furlong, 1) ```
Wrapping wasn't reverted here (I didn't check the patch exhaustively perhaps you can give it another look).
Equally, as this is in `get_aggregation()` we can probably have: ```suggestion empty_result = [ ```
I think that this docstring should be simplified. There is no need to mention that this originated from the admin site.
Can we use `unwrap()` instead? Also this doesn't handle wrapped callable objects e.g.: ```python class MyCallable: @custom_decorator def __call__(self): return 1 ``` Maybe we should unwrap in advance :thinking: ```python if callable(attr): try: code = unwrap(attr).__code__ except AttributeError: code = unwrap(attr.__call__).__code__ if not code.co_argcount: raise ImproperlyConfigured(...) ```
I think this patch is still valid, to be honest. Having a reverse proxy or load balancer is a valid use case and it is not unusual or against the HTTP spec for those to include a port number in the `HOST` header.
Yes, that's true. :-)
Maybe I missed sth but why not add this inside the `_create_index_name()` :thinking: . Probably other indexes names are also affected.
Please use: ``` msg = ( "..." ) with assertRaisesMessage(ValueError, msg): ``` to make the test easier to follow.
I think ideally we could refactor this so that SQLite doesn't get some special treatment (`conn.vendor == 'sqlite'` check) in `TestCase`. Maybe we can leave thing as-is for now (don't introduce this method) since that's outside the scope of this ticket.
``` self.assertRegexpMatches(warning.msg, ( "..." "..." )) ```
When the stream is empty an empty string is returned immediately.
Any thoughts about using a `Deferrable(Enum)` for this purpose? ```python class Deferrable(Enum): DEFERRED = 'deferred' IMMEDIATE = 'immediate' ``` The same enum could be used to replace the `DEFERRED` and `IMMEDIATE` below and to enforce a valid value is passed to `UniqueConstraint.__init__`.
Yes, actually, I also wondered if this was a backwards-incompatible change.
think this should be a separate error code since the message is different
True, thanks :+1:
No `list()` casting needed here.
add trailing comma
`else: assertFieldType('text_field', "models.TextField(null=True)")` (might be taken care of by general improvement described at bottom of method)
```suggestion with self.assertWarnsMessage(RemovedInDjango50Warning, msg): ```
Close, but not quite! 😉 ```suggestion def _sqlite_log(base, x): if base is None or x is None: return None # Arguments reversed to match SQL standard. return log(x, base) ```
What I meant about splitting the tests in a separate commit only applies to the tests that already pass before the fix. The tests that are fixed by the change should go in the second commit along with the fix. Actually, I only see this assertion failing before the fix, so it might be that the other tests need adjusting so that they're proper regression tests: `self.assertIsNone(g('/de-simple-page/'))`
This `u` prefix is not required because of the `__future__` import.
I guess yes - having multiple foreign keys to same related field (composite or concrete) doesn't make sense. No need to actually do that pre-commit though.
I suggest "'string_if_invalid' in TEMPLATES OPTIONS must be a string (got (value) (type))." I think the part about "Change it.." isn't necessary.
"Simulate test database creation raising..."
These lookups should be available for all `RangeField`'s not only for `DateRangeField` and `DateTimeRangeField`.
Yes. Good. We need something like: ``` if settings['FORM_RENDERER'] == 'django.forms.renderers.Jinja2': ``` before applying the `skipIf`. (It's not very pretty but...)
Please put on a single line.
will be -> is
``` py media_types = [('css', dict), ('js', list)] ``` looks better to me.
Unwrap this if statement, please use single quotes.
Shouldn't we add an `else: raise` here? Then the `if settings.configured:` below would be unnecessary.
`_select_on_conflict` name is misleading because this method mainly checks options. Maybe `_check_bulk_create_options(...)` :thinking:
I think we should use `NUMBER(5)` on Oracle (I know that it is not consistent with `SmallIntegerField`), but in that way we will be able to introspect `SmallAutoField` and it would give a real optimization.
Also, it seems that you are not actually calling your new function yet, which should be fixed (or will be automatically fixed if you integrate into `_check_constraints`, which I would prefer).
These assertions are redundant with tests where `qs1.difference(qs2).exists()` is `True`.
I would leave creating widgets' instances in a single line, e.g. ```python if isinstance(widgets, dict): self.widgets_names = ... self.widgets = widgets.values() else: self.widgets_names = ... self.widgets = widgets self.widgets = [w() if isinstance(w, type) else w for w in self.widgets] super().__init__(attrs) ```
If `getattr()` is not necessary, do we need this round trip at all? ```python if val is None: ... val = data[field_name] data[field_name] = val ``` It looks that we can remove [this line](https://github.com/django/django/pull/13036/files#diff-1e7fc0d7d1b36358e371fab97bd1ddb1R152) :thinking: , e.g. ```python if val is None: instance.refresh_from_db(fields=[field_name]) else: data[field_name] = val ```
Please assert an error message, e.g. ```suggestion msg = 'perm_list must be a list or tuple.' with self.assertRaisesMessage(ValueError, msg): ```
I think there is, just so folks have a little less to learn between the two.
If we believe that most users of Django won't be able to reverse-engineer or remember the reason for having two distinct modules — and I do — then we should put everything in the same module.
This doesn't work. The substitution must happen after the translation: ```suggestion _('Can %(action)s %(verbose_name)s') % {'action': action, 'verbose_name': opts.verbose_name_raw} ``` I think, in this case, you can use `gettext` instead of `gettext_lazy`.
Single quotes please. Also, can we use `size` instead of `dims` for consistency with the other tests? ```suggestion size = images.get_image_dimensions('missing.png') self.assertEqual(size, (None, None)) ```
One day, black will do this for us
chop blank line
Also what's the reason for using `getvalue()` over `.content`? ```suggestion if not response.streaming and response.content: ```
Maybe add a note that we are deliberately not deconstructing `hints` here because we don't auto-generate the operations? Otherwise somebody is getting confused at some point. (Same for `RunPython`)
for kind in ['day', ...]:
couldn't we provide backwards compatibility by falling back to 'django_language' here if '_language' doesn't exist? we could remove that after 1 release.
put `warnings.warn()` outside the if/else so you don't need to repeat it
Minor but you could avoid repeating `case_insensitive` multiple times ```suggestion ci_collation = "case_insensitive" def drop_collation(): with connection.cursor() as cursor: cursor.execute(f"DROP COLLATION IF EXISTS {ci_collation}") with connection.cursor() as cursor: cursor.execute( f"CREATE COLLATION IF NOT EXISTS {ci_collation} " "(provider = icu, locale = 'und-u-ks-level2', " "deterministic = false)" ) ```
I think this is an extra import that isn't used anywhere. Same in each of the `backends/*/base.py`.
Maybe we should keep this and rephrase to "To use one of the built-in backends, use 'django.db.backends.XXX', where...
This docstring still uses `render` rather than `stream`. I think it would help to move part of these docstrings to `annotate_exception`. Example: ``` diff @contextmanager def annotate_exception(context, token): + """ + Checks for errors during template rendering. If debug is True, contextual + line information is added to the exception before it is reraised. + """ try: yield except Exception as e: @@ -944,10 +942,9 @@ class Node(object): def render_annotated(self, context): """ - Render the node. If debug is True and an exception occurs during - rendering, the exception is annotated with contextual line information - where it occurred in the template. For internal usage this method is - preferred over using the render method directly. + Render the node with debug information if an error occurs. For + internal usage this method is preferred over using the render method + directly. """ with annotate_exception(context, self.token): return self.render(context) @@ -960,10 +957,9 @@ class Node(object): def stream_annotated(self, context): """ - Render the node. If debug is True and an exception occurs during - rendering, the exception is annotated with contextual line information - where it occurred in the template. For internal usage this method is - preferred over using the render method directly. + Stream the node with debug information if an error occurs. For + internal usage this method is preferred over using the render method + directly. """ with annotate_exception(context, self.token): for chunk in self.stream(context): ```
We should respect also description for `None` (test is required).
I would use `.objects.create()` rather than separate save calls.
This line seems unnecessary as it's apparent from looking at the code.
Changing this list is outside the scope of this ticket and also backwards-incompatible.
We should add short release note about this change in the `Backwards incompatible changes in 3.0 -> Database backend API`.
```suggestion context["widget"]["attrs"].setdefault("disabled", False) ```
Let's keep it.
I feel like it should be `_delete_unique_sql`'s decision to do the bool casting. Maybe some backends will need access to the condition to appropriately delete it. Lets just pass `condition=condition` and let database backends do `if condition`.
Minor nit, but I prefer stating the expected behavior like this: `# SRS and SRID may be assigned to None.` since all tests are obviously for testing things.
`test_foreign_key_GFK` -> `test_prefetch_GFK_fk_pk` Please move this test below `test_prefetch_GFK_uuid_pk()`.
```suggestion RemovedInDjango50Warning, stacklevel=2, ```
This causes a test failure: ``` FAIL: test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests) ```
What happens if you have two models with two through models like the following? I suspect an endless recursion. But haven't tried it. ``` python class A(models.Model): b_s = models.ManyToManyField('B', through='AB') class B(models.Model): a_s = models.ManyToManyField('A', through='BA') class AB(models.Model): a = models.ForeignKey(A) b = models.ForeignKey(B) class BA(models.Model): b = models.ForeignKey(B) a = models.ForeignKey(A) ```
Please rebase your branch on master and remove `http.` after 0e212a705e6b2e49a246b16286036c40ec2ac4f8.
json.dumps(). (add parens and period)
The last parenthesis should be moved to the next line (as in the `test_dense_rank`). Please check also other tests.
I haven't followed the entire logic, but I think you can minimize the mutable state a bit by instead keeping `health_check_delay` (immutable) and `last_health_check_at: Optional[float]`, where `None` means same as `health_check_done == False` and otherwise `health_check_at` is `last_health_check_at + health_check_delay`.
If `user_attributes` is set to `()` or `[]`, the default set of attributes will be used. That may be surprising. Can you make a strict check for `user_attributes is None`? I understand that the validator doesn't do anything then and can simply be removed from the settings in that case, but I can imagine situations where someone would control `user_attributes` (e.g. through an UI) and not `AUTH_PASSWORD_VALIDATORS`.
You can drop the `.all()` here.
```suggestion self.assertSequenceEqual(Author.objects.all(), []) ```
[limit try clauses](https://adamj.eu/tech/2019/10/02/limit-your-try-clauses-in-python/): ```suggestion try: view = _get_failure_view() except ImportError: msg = ( "The CSRF failure view '%s' could not be imported." % settings.CSRF_FAILURE_VIEW ) errors.append(Error(msg, id='security.E025')) else: try: inspect.signature(view).bind(None, reason=None) except TypeError: msg = ( "The CSRF failure view '%s' does not take the correct number of arguments." % settings.CSRF_FAILURE_VIEW ) errors.append(Error(msg, id='security.E024')) ```
I think it's a perfect use-case for a set. Changing it to `set(['DATABASES', 'CACHES'])` would be compatible with python2.6+ (which is what we support for now).
Although, having said that. If you made the suggested change below there would be no longer be a need to update this function.
Do we need to call `bool()` again? it's already called in `RedisCacheClient.touch()`.
I think this is problematic as it will result in an unhandled exception instead of displaying an error to the user.
Hi, thanks for the patch. Please add a space after commas. (see PEP8). `elif not isinstance(fieldset[1]['fields'], (list, tuple)):` `return must_be('a list or tuple', option=label, obj=cls, id='admin.E008')`
Yes. Effectively we should propagate the renderer passed in from formset to form to widget and errors.
We should check `err`, also temporary variable `args` is unnecessary: ```python _, err = self.run_django_admin(['startapp', 'test_app', target_dir]) self.assertNoOutput(err) ```
I wouldn't omit parenthesis here
Hey @Stranger6667. No problem. With the changes from https://github.com/Stranger6667/django/pull/1 (suitably tidied) my concern over this point is ≈resolved. For me, now, it's just a test on the new `Lookup` API in core and then a final nitpick.
Arh, nothing to do with this PR but the lack of a label for each `<select>` is a problem 🙈. This is worth opening a bug ticket if anyone is up for it.
Why is this conditional addition of `original` necessary? In fact, I don't see why `preserved_filters` or `opts` need to be added either. They are already added to `ctx` from `context` when `ctx` is instantiated.
This one should be reverted. You'll be doing extra accesses because it is now in a loop!
Just to be sure, the new implementation is guaranteed to behave the same as the old one? Maybe the docs could call this out "which behaves exactly the same."
```suggestion model = SomeChildModel fields = ['name', 'position', 'parent'] widgets = {'position': forms.HiddenInput} ```
You could also put this data in separate tuples as other tests do as this indentation isn't the prettiest.
Perhaps this would be better as a single test: ``` assertion = self.assertIn if connection.features.supports_index_on_text_field else self.assertNotIn assertion('text_field', self.get_indexes(AuthorTextFieldWithIndex._meta.db_table)) ```
Don't monkey-patch the exception, make a new one: `self._update_errors(ValidationError({f.name: e}))`
Please use hanging indent: ``` LookupError( e.args[0] + ' You may be missing this app in your ' ''INSTALLED_APPS setting and have a migration which ' 'depends on it.' ) ```
On my pull request #4097 I don't see the `else` executed either in Django's own test suite. The `except`, however, and the `raise ValueError()` inside is actively used. The entire for loop can practically be replaced by the same code which is used during Django's boot process: "here are a bunch of Python modules, go and find all model classes in there and register all relations".
This could be removed now.
I wonder why we quote a collation name in all backends when altering a field, but we do this only on PostgreSQL in table creation :thinking:
This change indeed isn't necessary. Delete wraps signals, too, inside atomic. So, for the delete case the .atomic() doesn't do anything.
tried_codes -> possible_lang_codes (the first name implies to me that they are being tried as the list is constructed which doesn't seem to be the case)
You're repeating `not grouping`, I am sure there is a way to rearrange the if statements a bit.
Wrap docstrings at 79 characters.
For better readability rather than splitting the string across two lines: ``` msg = "can't apply.. " with self.assertRaisesMessage(ValueError, msg): ```
I forget if there was a reason to prefer the current version but yes, we don't need the check twice.
Hm, it seemed to work for me when I pulled down your branch and made the changes.
This was not fully clear when I wrote the original patch either. 🙂 I added constant_time_any just for good measure. I discussed it with @MarkusH at DjangoCon EU in Copenhagen and (IIRC) we figured that it would be a good idea to keep the constant time check just to be extra careful. That said, yes, it could leak which secret key that was used but... I cannot see why that would be a problem. I do not have a strong opinion either way.
Use hanging indentation as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style). ```suggestion return TimestampSigner(key, salt=salt, fallback_keys=fallback_keys).unsign_object( s, serializer=serializer, max_age=max_age, ) ```
You should omit partial unique constraints, please use [`total_unique_constraints()`](https://github.com/django/django/blob/0352a44dd61c19bebf0c0b305dbbc3f710ff9945/django/db/models/options.py#L830-L840).
```python with schema_editor.connection.cursor() as cursor: cursor.execute(... ```
Thanks @prestontimmons — that's really handy. I appreciate it was a long time ago now, but just wanted to see that no immediate red flag popped up for you. (The discussion on #6498 is a monster 😅)
We can start using f-string ```suggestion raise base.DeserializationError( f"Invalid model identifier: {model_identifier!r}" ) ```
This doesn't seem to be necessary to reproduce the bug. Just refreshing the page without making any changes caused the select options to clear.
If line length isn't an issue... `self.assertEqual(self.client.session[LANGUAGE_SESSION_KEY], lang_code) # RemovedInDjango21Warning` or something like "The following assertion is RemovedInDjango21Warning"
```suggestion if settings.APPEND_SLASH and self.append_slash and not request.path_info.endswith('/'): ```
Typo in both test names: `relatedobjectcoesnotexist` -> `relatedobjectdoesnotexist`
Could you add two `Rider`s here and check both of them for `0` in `_order` below.
Wouldn't it be possible to have an insecure referer and a secure request? Thinking about the case where you have a separate API.
The temporary variable could be avoided here by merging this line into the one using the variable below.
Just use: ``` datetime.utcfromtimestamp(ts).replace(tzinfo=timezone.utc) ``` This will be more efficient. You don't need `make_aware` here because UTC doesn't have DST. Sure, this is a micro-optimization, but I like avoiding overhead at the lower levels ;-)
```suggestion to_field.model != self.remote_field.model._meta.concrete_model ```
chop the blank lines before each attribute
`GET` works without this patch. Extra tests are fine but should be moved to a separate commit.
The whole setup with related fields and their related fields is really confusing :) I tried to do an improvement in here some time ago, but not sure if it just got things worse... A major cleanup would be welcome, but unfortunately these fields and attributes are used all over the place, and thus it's really labour-intensive to actually fix this.
I believe `params` should no longer contain any more `Expression` objects, and I ran the test suite with this change and didn't see any related failures. Trying to special case `Value` (and other expressions like it) seems like a losing battle because they may be nested inside other expressions. ```suggestion return sql % tuple(self.quote_value(p) for p in params) ```
no blank line needed
This line should use `connection.features.introspected_field_types["IntegerField"]`. (INTEGER is introspected as `BigIntegerField` on CockroachDB.) PR: https://github.com/django/django/pull/15750
Got your point. I wouldn't use schema_editor here either.
This can be single-lined.
So definitely part of this change. No problem. (Didn't know if it should be there anyway...) (Not a biggie)
```suggestion raise NotImplementedError('Subclasses of RenderableMixin must provide a get_context() method.') ```
import at top of file
Either use `subTest` or collect all the attributes and use `assertCountEqual`.
I don't see any value in testing the number of queries in this test.
I'm not sure the usage of `settings.FORMAT_MODULE_PATH` is correct here. Now the `format_module_path` keyword argument is no longer used (thus the failing test, I think).
@adamchainz Sorry for the late reply, didn't catch this in my emails. Definitely noting this and adding it to my forum post. I'm taking my time going through my original PR and trying to flesh out the PR more and noting the current blockers. Thanks for the catch.
This is only ever called once. Do we need the default? (Same with SQL version)
I think so :neutral_face:
```suggestion # Optimize migration. ```
You still have to iterate over `lookup_params_all` don't you? ``` python >>> a = {'a__a': 1, 'b__b': 2, 'c__c': 3} >>> any('a' in key for key in a) True ```
Please wrap these lines at 79 chars.
Let's delete that empty line and reorder the lines alphabetically.
I don't think that this header is whitespace-sensitive. :thinking:
Yes -- arguably it might be better if it does crash if required is provided so people know to update their code.
This won't pass on py3k, since `repr(u'abc')` -> `'abc'`.
You can inherit `AbstractUser`, where are all these fields, and only add the `id` field. It will be generated only if you will not specify it, but if you add it explicitly, it will work as you need.
You end up cloning twice (the first original one, then this one) through this code path. Consider an else clause which handles the original case of just calling _clone.
I think we can run this only if database has native UUID field i.e. `connection.features.has_native_uuid_field` :thinking:
This should be `assertTrue()` as `assert_()` is deprecated.
Only `list` and `tuple` only would be fine by me, you're right it's unclear the other default json types would be used.
Do we need to define `async_generator` in `__aiter__`? ```python async def _async_generator(self): # Generators don't actually start running until the first time you call # next() on them, so we make the generator object in the async thread # and then repeatedly dispatch to it in a sync thread. sync_generator = self.__iter__() # So, you can't raise StopIteration up through sync_to_async as # too much of the Python async system was originally built on # generators. Instead, we capture it inside a custom sync function # and change it to an exception we *can* propagate. # We should probably move this logic inside asgiref at some point. def custom_next(gen): try: return next(gen) except StopIteration: raise StopAsyncIteration() while True: try: yield await sync_to_async(custom_next)(sync_generator) except StopAsyncIteration: return # Note: __aiter__ is a *synchronous* method that has to then return an # *asynchronous* iterator/generator. Thus, we nest an async generator # inside it. # Also note: This is a generic iterable converter for now, and is going to # suffer a performance penalty on large sets of items due to the cost of # crossing over the sync barrier each time. We should write custom ones # for each Iterable subclass, but we'll need some work in Compiler first. def __aiter__(self): return self._async_generator() ```
Please don't use a ticket numbers in tests, maybe: `script_with_inline_function`.
I thought `formset = ChoiceFormSet(self.data, auto_id=False, prefix='choices')` could go in `setUp()` also.
I don't understand how this should work with a `Node` instance. `forwards_plan()` would expect `node.key` I think.
We might instead replace other instances by `self._ptr`, to convey the idea of a private and internal variable. Just a suggestion.
`Django detects another configuration automatically` reads awkwardly to me. I assume it should be taken to mean Django detected another candidate to use as the default? Or put another way - the test case (elsewhere in the PR) which shows the full output of this warning being raised doesn't tell me (as someone seeing it for the first time) what the _actual_ problem is, nor what I should to do to fix it (beyond review my configuration)
```suggestion f"Error calling {func.__qualname__} on_commit_robust() ({e}).", ```
1. It's best practice to name mocks after the function 2. You don't need `_ =`. Python discards unused return values by default. ```suggestion @patch('faulthandler.enable') def test_faulthandler_enabled(self, mocked_enable): DiscoverRunner(no_faulthandler=False) mocked_enable.assert_called() @patch('faulthandler.enable') def test_faulthandler_disabled(self, mocked_enable): DiscoverRunner(no_faulthandler=True) mocked_enable.assert_not_called() ```
We usually use `get` to avoid the try boilerplate ```python user_agent = request.META.get('HTTP_USER_AGENT') if user_agent is not None: for user_agent_regex in settings.DISALLOWED_USER_AGENTS: if user_agent_regex.search(user_agent): raise PermissionDenied('Forbidden user agent')
LaTeX has always been tricky! 😄
_shadown_ looks like a typo to me.
It would be better to factor out shared elements such as these variables and MultipleLocaleActivationTests setUp/tearDown into a `base.py`.
The known set of chars is needed to implement the Viogniere<sp?> cipher... look below at line 40
Please do switch to gunicorn, or finally fix this swallowing of errors! You get the "populate isn't reentrant" message also, when your binary dependencies are not correct. I just had this error once again on Arch Linux after updating the system...
Trailing commas :)
We should return `NotImplemented` if objects are not comparable: ```python if not isinstance(other, self.__class__): return NotImplemented ... ```
Can we check `fk_field` instead to avoid unnecessary queries? e.g. ```python for field in self._meta.private_fields:) if field.is_relation and hasattr(field, 'fk_field') and field.is_cached(self): if getattr(self, field.fk_field, None) is None: raise ValueError( "%s() prohibited to prevent data loss due to unsaved " "related object '%s'." % (operation_name, field.name) ) ```
You can use `sr1.ingredients.set([i1, i2, i3])` to make that less verbose.
If we use `import inspect`, we can make this a bit simpler: ```suggestion # Remove "self" from the generated view function signature. signature = inspect.signature(view) parameters = tuple(signature.parameters.values())[1:] view.__signature__ = signature.replace(parameters=parameters) ```
Please use test skipping: `@unittest.skipIf(six.PY2, "Python 2 doesn't support Unicode package names.")`
```suggestion htmls = [content for (content, _type) in msg.alternatives if _type == 'text/html'] ```
```suggestion # SQLite < 3.35 doesn't support an INSERT...RETURNING statement. ```
using `assertCountEqual` would save all the fuss with ordering here
We prefer hanging indent like this (with some suggested wording): ``` raise NotImplementedError( 'subclasses may provide a check() method to verify the finder is ' 'configured correctly.' ) ```
This would be clearer (to me) if the sense were reversed and it were named `is_descriptor` instead of `is_cache`. Would that naming be wrong in some way that I'm missing? I find this naming confusing because it's named `is_cache` but isn't really describing whether anything is (or is not) "a cache." An alternative to `is_descriptor` if you want to keep the same sense would be something like `is_cache_safe` -- but I still think `is_descriptor` is clearer.
Yes I think we need a separate ticket. I'm not sure if there is a valid use for custom handlers that return files with empty filenames :thinking: I removed the 2nd commit.
Use hanging indent as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
Chop this line.
I guess it could assert that the foreign key does exist but that another index doesn't through introspection.
I'm not sure if `isinstance(pages_per_range, int)` is required. I think Python/Django doesn't do strict type checking like that in general.
That's not the correct solution, with e.g.: ```python DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'OPTIONS': { 'service': 'django_ticket', } }, } ``` the connection parameters will be set to: ```python {'database': 'postgres', 'service': 'django_ticket'} ``` The default `postgres` db shouldn't be used in this case.
This can be removed now that `values = list(values)` is done above.
There's a tab on this line that crashes CI on Py3.
Remove `self.template = ..` and replace with: ``` return self.as_sql(compiler, connection, template='STATEMENT_TIMESTAMP()') ```
Why `LocalBasedCache`? I think we can chop it.
I've also noticed a warning in Pycharm that the signature of `as_sqlite` and `as_oracle` doesn't match the superclass. I'd guess it's better to deal with this in a different PR.
To preserve the 1.11 move to HTML5 boolean syntax I believe this line should be changed to `checked_attribute = {'checked': True}`. Same for the `Select` class on line 690: `checked_attribute = {'selected': True}`
This could be simplified to match the implementation in `_sqlite_datetime_extract()`: ```suggestion month_in_quarter = ceil(dt.month / 3) ```
example -> data
These last four lines are duplicated in both conditions, should therefore come after the if block.
I'd expect the set to be done after mangers & admins are added
As far I'm aware if we want to keep the same order as in PostgreSQL, it should be :thinking: ```python TrigramWordSimilarity(string, expression) ``` For example ```python TrigramWordSimilarity('cat', 'Cat sat on mat.') ```
Oops, didn't saw it.
NVM then, I didn't notice it was a pattern used around the file. Let's be consistent here.
It is not only about ordering. Condition can be more complicated, e.g. ```python check=Q(Q(field_1='a') & Q(Q(field_2='b') | Q(field_3='c'))) check=Q(Q(Q(field_3='c') | Q(field_2='b')) & Q(field_1='a')) ``` Moreover they can be logically equivalent, e.g. ```python check=~Q(Q(field_1='a') | Q(field_2='b')) check=Q(~Q(field_1='a') & ~Q(field_2='b')) ``` etc. Users can assume that Django protects them against duplicate constraints. Furthermore I'm afraid that someone somewhere in the universe :alien: uses a subclass of `CheckConstraint` where the same conditions make sense (we had regressions in many checks).
Remove the blank line
`email = EmailMessage('Subject', 'Content', 'bounce@example.com', ['to@example.com'])`
My instinct would be to use a `sub_` prefix for these names (possibly confirmed by an existing sub_params name in other code).
only() works with proxy models
We can use a `subTest()`: ```suggestion def test_file_upload_temp_dir(self): tests = [ None, '', Path.cwd(), str(Path.cwd()), ] for setting in tests: with self.subTest(setting): with self.settings(FILE_UPLOAD_TEMP_DIR=setting): self.assertEqual(check_setting_file_upload_temp_dir(None), []) def test_file_upload_temp_dir_nonexisten(self): for setting in ['nonexistent', Path('nonexistent')]: with self.subTest(setting): with self.settings(FILE_UPLOAD_TEMP_DIR=setting): self.assertEqual(check_setting_file_upload_temp_dir(None), [ Error( "The FILE_UPLOAD_TEMP_DIR setting refers to the " "nonexistent directory 'nonexistent'.", id='files.E001', ), ]) ```
Need a trailing space here I think.
is this limited to TLDs? it seems all labels are limited to 63 characters.
unicode -> str (Python 3, first)
I can confirm that this doesn't fix the issue.
I'm not sure if it deserves for a separate hook :thinking:
I'd suggest this for the indentation: ```python return [ force_text( capi.get_field_name(capi.get_field_defn(self._layer._ldefn, i)), self.encoding, strings_only=True, ) for i in range(self.num_fields) ] ``` Any concern about having no tests for the `self.encoding, strings_only=True` bit? I'm not sure we would expect non-string values in the first place? Also, at least on my system, there are no failures with it removed here or in `layer_name` above.
Would it make sense to put this into a try/except so we ignore errors from close? Maybe also add a `self.connection = None` after the `close()` so we can be sure we are not able to reuse it.
The following should work ```python query.add_q(Q(Coalesce(self, True, output_field=BooleanField()))) ```
Add blank line above per isort.
single line looks okay here
In Python3, `super()` is enough.
Assuming we don't wrap `db_default` in `Value` in `Field.__init__` could this be simplified to ```suggestion def db_default_sql(self, field): """Return the sql and params for the field's database default.""" db_default = field.db_default if not hasattr(db_default, 'resolve_expression'): return '%s', db_default query = Query(model=field.model) compiler = query.get_compiler(connection=self.connection) sql, params = compiler.compile(field.db_default) return '(%s)' % sql, params ``` Looks like subclasses overrides should be pretty straightforward as well.
**For me** I'd be happy to start using them, in new stuff, where appropriate. (I don't really want to see a changes of existing code just for the sake of it, if that makes sense.) (There was a thread on django-developers: I think it was, "shall we go through and replace all uses..?" — To which the answer was "No. We're happy even with the old `%` usage..." IIRC)
Thanks, I missed this use case!
This will subtly change existing code. First, if the queryset is already evaluated, then currently **contains** checks against the cached results. Second, when calling x in qs, the queryset doesn't get evaluated any more. My preference is to not change this unless there is large-scale support to change the behavior.
You can omit `for_tag_` in the test name. Having it on every test name in the class seems silly.
I moved arguments to the `extra_context` to avoid escaping `%`.
In the end the algorithm below that generates `change_map` has a single requirement with regards to alias; the initial alias must be shared. I think it would be great if we could reuse `bump_prefix`'s usage of `change_aliases` while making sure that this particular initial alias (`self.get_initial_alias()`) is not _bumped_.
These tests don't pass TypeError: today() takes no arguments (3 given) happens again in test_date_list_order
For Python3 compatibility, you should use `b"foo bar baz quux\n"`
A message similar to the one raised in `get_object()` would be more appropriate: ``` python raise ImproperlyConfigured( "%(cls)s is missing a Model. Define %(cls)s.model or " "override %(cls)s.get_model()." % { 'cls': self.__class__.__name__ } ) ```
Why should an import error pass silently? This doesn't seem to be covered by a test. Assuming it's not needed, this could be simplified to `return any(_issubclass(import_string(path), subclass) for path in candidate_paths)`.
The second part about `replaces` is always true. I'm not sure if adding `and/or` will make it clearer :thinking:, maybe ``` Cannot use --prune because the following squashed migrations have their 'replaces' attributes and may not be recorded as applied: migrations.0001_squashed_0002 Re-run 'manage.py migrate' if they are not marked as applied, and remove 'replaces' attributes in their Migration classes. ```
nevermind, I see it was. You might consider using `assertRaisesMessage` to make the test a bit more specific.
You don't need a list comprehension here, `set("%s.%s" % ...)]` was just fine.
I think we should keep this property or add `c.is_summary = summarize` to the `resolve_expression()`.
Better to use the file handler's write than `print`.
Use single quotes (unless a string contains a single quote) as described in [Python coding style](https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#python-style).
Move this class below `ManageRunserverEmptyAllowedHosts`.
This could mask actual errors if the referer is on another domain but happens to have the same path as the missing page. I think the correct check is to compare the referer with a rebuilt URI including the scheme and domain.
Just wanted to point out https://github.com/django/django/commit/770b9ea77fb5e39d616e62b54c06755e6d4f4d36 which was committed recently.
It is slightly more correct to have this line before the `try:`. If registering the lookup fails, we don't want to also try to unregister it.
And `\r` or `\n` -- I dunno if Django protects from header injection
`name` should be used to follow `ModelOperation.__init__` signature and `super().__init__(name)` should be called.
``` py self.assertRaisesMessage( ImproperlyConfigured, '...', ) ```
I'd use: `return 'BigAutoField' if description.is_autofield else 'BigIntegerField'`
There would have to be a `reverse_many_to_many` as well for consistency and since these are pretty much on/off flags, I think we should aim at convenience.
Ahh right just read through the whole discussion. I wonder if this could be an opportunity to solve the issue. e.g. ```python def __set_name__(self, owner, name): if self.name is None: self.name = name self.func = self.real_func elif name != self.name: # Re-assignment of a cached property to a class # creates a new instance. instance = type(self)(self.real_func, name) setattr(owner, name, instance) ``` That would make ```python @cached_property def is_postgresql_9_5(self): return self.connection.pg_version >= 90500 has_select_for_update_skip_locked = is_postgresql_9_5 ``` The equivalent of ```python @cached_property def is_postgresql_9_5(self): return self.connection.pg_version >= 90500 has_select_for_update_skip_locked = cached_property( is_postgresql_9_5.real_func, 'has_select_for_update_skip_locked' ) ``` And address the bug preventing the `__dict__` level caching bug discovered by @sir-sigurd.
oh, and only models are allowed to be named with strings (in the migration itself) - right you are 👍
I think `IncludeNodeLoggingTests` would be a better name.
Could you wrap this line after the comma.
Even though you are running the test only if the db doesn't `supports_long_model_names`, you are using `allowed_len` without checking if it isn't `None` (which is the default).
We have to be sure that a real setting has been accessed at least once before. After checking some code paths, I think it is the case and this should be safe to do.
"... know anything about this migration ..."
I wonder if this initialization needs to be done in `setUpClass()` or if doing it at the class-level would work? ``` class DateInputTest(WidgetTest): widget = DateInput() ```
use a single line instead
Oracle doesn't support a database index on these columns.
Please use single quotes.
Oh, I must have missed the `not` in `is not None`. Yes, `.get()` is equivalent.
`Do not set is_staff.` sounds tricky. `is_staff must be set to True` sounds more clearly.
I think it would be best if these warnings at least named the relevant view which received a bad template name (and perhaps the template name which could not be found, as well). The information can be found in the stack trace (at least the former can, not sure about the latter), but there's no reason not to make it available right in the error message, is there? Same for the other errors.
I would simply say `# Hook for subclasses to run these tests with alternate models.` (details about which other classes use it may go stale)
I'd follow the indentation pattern of the rest of this page, e.g.: ``` return [ checks.Error( 'An admin for model "%s" has to be registered to be' 'referenced by %s.autocomplete_fields.' % ( field.remote_field.model.__name__, type(obj).__name__, ), obj=obj.__class__, id='admin.E036', ) ] ``` Also, E036/37 are missing from `docs/ref/checks.txt`.
Any chance to separate the rename of `node` to `target` from the commit adding the iterative fallback. I suggest to first rename `node` to `target` and then add the iterative fallback.
Same as above: try using `assertInHTML()` to make the test deterministic.
As far as I know, formsets always ignore forms that haven't changed. The test that fails with these lines removed is: https://github.com/django/django/blob/64e1a271f50d921a54388539b6ff7102a31c3d29/tests/admin_views/tests.py#L3858-L3902
It's a little delicate... neither `makemigrations` nor `migrate` should work at this state, but I think `showmigrations` should work and this breaks it as well.
You don't need to catch and reraise the exception: ```python with self.assertRaisesMessage(ProtectedError, msg) as cm: a.protect.delete() self.assertEqual(cm.exception.protected_objects, [a]) ```
Entry in `ALIAS` is missing.
please use 4 space indent
Same thing with `remote_field` being possibly `None`.
as above, chop "Tests that"
I think this line should be: ``` try: os.makedirs(...) finally: os.umask(old_umask) ``` so the umask is reset in case of an exception
Ah, sorry, you're rolling it into the create/delete operations rather than optimising it in, my bad. It's fine then!
The [`Subquery` wrapping should not be necessary here](https://github.com/django/django/blob/024abe5b82d95ee60cb18a77ebf841ad715467fa/tests/queries/tests.py#L2057-L2069).
I wonder if it's worth pointing to the alternative here. 🤔
As far as I'm aware, on some databases `UPDATE` makes exclusive table lock regardless the set of updated rows :thinking: I'm just trying to think about the potential side-effects. > If they do match rows then they shouldn't be any worse than the previous IN `potentially_long_list_of_ids` queries? Yes, that's true.
instead of using `lst[0]` and `lst[1:]` I would recommend: ```python head, *tail = lst ````
This should just fit on one line I think. (It's exactly 120 characters. 🙂)
This can also use `+=`.
Since the args/kwargs aren't used directly, would this be simpler to maintain as `*args, **kwargs` instead? (I can just see a case where it ends up out of sync with `BaseMemcachedCache`)
I think it's make more sense to rename "view" to `status_code` and pass it as an integer instead of a string.
The reason it's here is that it has been implemented more or less this way for a long time (though the code hasn't been even this clear before compiler expressions refactor). MySQL has been the only backend to reach this part of code. If some backend would allow grouping by primary key only, and wouldn't need expressions in having either, then that backend would get extra expressions in GROUP BY. This is non-optimal, but not an error. Of course, if somebody wants to clean this up, +1 to that.
I would put this test method right before `test_contains()` to match the order of the methods in the class.
I think there's no reason that 'template' and 'arg_joiner' need to go into `data` -- they aren't meant to be interpolated into `template`, correct? Instead of the `data.get()` lines below, wouldn't this work: ``` python template = template or self.template arg_joiner = arg_joiner or self.arg_joiner ```
Maybe there's a benefit to using `utils.formats.FORMAT_SETTINGS` and adding `USE_THOUSAND_SEPARATOR` to it? For simplicity, even adding `USE_THOUSAND_SEPARATOR` to that list would likely be fine.
TODO: Use new `_set_content_type_params()` helper.
I don't think this and the lines below are useful. We can simply use `force_login` in the test as far as the login process itself is not significant in that test.
I mean `chunk = handler.receive_data_chunk(chunk, counters[i])`
Should we use `next_concrete_model.from_db` here? https://github.com/django/django/blob/991dce4fc5b656e04af08a595181bd576f2bd857/django/db/models/base.py#L507-L518
We should leave here `for_update_part = None` (in the same line as it was previously) and calculate it only in `not combinator` branch, because it's not used for combined queries.
Yes, thanks for pointing that out. I'll create a ticket to make sure those error views are also changed. In the meanwhile I suggest we do it the right way here.
It's fine to say "is_gfk" here, because we're in contenttypes, which is defining GFKs. However, we should be capturing the underlying use case - it's a field of type X, which has a specific set of properties and behaviours.
Lately, we're using single quotes except for strings that contain single quotes. I guess it's not worth being inconsistent in the new tests though.
No blank line needed in cases like this.
@apollo13 you're completely right. Look I missed the inclusion of `'%'` in `safe` somehow.
Please change to `field = self.annotation_select[name].output_field`. `output_field` is part of the expressions API. The field property is there for backwards compatibility with older code.
`self.fail` will actually exit the method the moment it's called, which means that `os.environ['PATH']` won't be restored. How about rewriting the test this way instead: ``` def test_find_command_without_PATH(self): """ find_command should still work when the PATH environment variable doesn't exist (#22256). """ current_path = os.environ.pop('PATH', None) try: self.assertIs(None, find_command('_missing_')) finally: if current_path is not None: os.environ['PATH'] = current_path ```
Wonder if we should go further and simply change the expression if `col.alias == old_table` that seems in line what other implementation of `rename_table_references` does ```suggestion if col.alias == old_table col.alias = new_table ```
I think you can prepend `admin/js/` and simplify the line below
The proposed implementation isn't exactly what I had in mind, but I'll have to look a bit later to see if the idea I had in mind is any better. For `BrinIndex`, I guess those features weren't considered by the patch author. Probably no reason not to add them.
Remove this blank line.
This can be single-lined.
chop blank lines
I would change this to a `NotSupportedError`, e.g. ```python raise NotSupportedError( 'Bulk create a multi-table inherited model is not supported ' 'on this database backend.' ) ```
I would put both of these before `TEST_DATA` because they are simpler.
Subclassing `BigIntegerField` and `SerialField` should do here.
This isn't actually Immutable. I didn't trace far back enough to see if the WSGI `environ` is immutable but cursory inspection would indicate that `.META` is not actually immutable although it would probably be a bad idea to manipulate it (I might be wrong on this point).
Don't include tickets numbers in test methods, e.g. ```suggestion def test_aggregation_random_ordering(self): ```
The tests fail on Python 3: ``` python Traceback (most recent call last): File ".../tests/queries/tests.py", line 391, in test_avoid_inifinite_loop_on_too_many_subqueries context.exception.message, AttributeError: 'RuntimeError' object has no attribute 'message' ``` http://djangoci.com/job/django-pull-requests/1656/
This also stands for non-`ForeignKey` such as `ForeignObject` the way it is defined right now. So I'd perform this check in `ForeignKey.resolve_related_fields` since it's the only one that has this restriction. That will allow `ForeignObject` to keep relying on this pattern and makes this patch slightly less backward incompatible. That means that `ForeignObject(ChildModel, from_fields=('ref_id',), to_fields=('key',))` would still be allowed since `ForeignObject` doesn't require the enforcement of a database level foreign key and can span multiple tables.
Also, you don't need to wrap the set in a `list`, since it's later passed on as `*field_names`.
I would suggest to use the ungettext_lazy('%(number)d minute', ''%(number)d minutes', 'number') syntax, if possible.
indentation of 11 spaces seems curious. I usually just intent 4 spaces, in a case like this, other people line it up with the parens, but I would follow the style of the file when in doubt.
As I was trying to point out on the ticket, I'm confused on why this is an issue at all. When using `sqlmigrate` Django produces the correct SQL. However, when running `migrate` Django seems to be doing the wrong thing. I'm think it would be worth investigating in that direction a bit further to see why and where those differences come from, before removing the delayed rendering (entirely)
Perhaps a better, shorter name would be: ```suggestion non_database_fields = [ ```
If changing to `None` from `''` in `.slice_expression()` above, then: ```suggestion if self.end is None: return f'{lhs}[%s:]', params + [self.start] else: return f'{lhs}[%s:%s]', params + [self.start, self.end] ```
I see the pattern is used in other tests, but I wouldn't alias the function if it's only used once
Yes I hope people do read help texts, but the help text doesn't imply the current behavior. It overwrites the domain provided in a form, no matter what.
`Sqlite` -> `SQLite`, wrap at 79 chars.
I tried something similar but it turned out to be more annoying that I felt it was worth. I think the chances of someone changing one value and inadvertently not changing the other value is low. As for what the test values should be... whatever works.
Can we always assume we are getting a list returned? I believe `SQLInsertCompiler.execute_sql()` always returns a list now? (Although we may need a note in the backward incompatibility section for database backends?) If all that were the case, we could possibly condense this whole section to something like the following: ```python returning_fields = None bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert if bulk_return and not ignore_conflicts: returning_fields = self.model._meta.db_returning_fields return list(itertools.chain.from_iterable( self._insert( item, fields=fields, using=self.db, returning_fields=returning_fields, ignore_conflicts=ignore_conflicts, ) for item in (objs[i:i + batch_size] for i in range(0, len(objs), batch_size)): )) ```
be more specific than Django -- e.g. "CommonMiddleware"
It seems you will need to vary this part of the message based on Python 2 or 3.
might want to add a `and isinstance(self.upload_to, six.string_types)` as `upload_to` can be a callable.
Unfortunately, we cannot remove `Collate` from `wrapper_classes` because it will break, e.g. ```python Collate(F('title').desc(), collation=collation) ```
I think these tests don't belong in this patch considering they already pass and `ChoiceWidget.format_value()` isn't modified.
Unneeded empty line.
Book PKs are assumed to be in order, which may not be true on CockroachDB. ```suggestion sorted([self.b1.pk, self.b4.pk, self.b5.pk, self.b6.pk]), ```
Please use hanging indentation due to the [coding-style](https://docs.djangoproject.com/en/1.11/internals/contributing/writing-code/coding-style/).
Nitpick: Append a \ to the end so it doesn't generate an empty first line.
All of these empty tests look awkward. I'll try to find a better way to share some tests -- probably along the lines of ``` python class CSRFTestBase(object): # all the common parts go here class CSRFCookieTest(CSRFTestBase, TestCase): # Cookie-specific tests and utilities class CSRFSessionTest(CSRFTestBase, TestCase): # Session-specific tests and utilities ```
I should be able later today.
, combine all nonempty querysets.
Please don't use double underscores in test method names.
Can you undo this change, please.
You want to avoid interpolating params yourself as that could result in SQL injections. ```suggestion if self.query.order_by: order_by_sql = [] order_by_params = [] for _, (sql, params, is_ref) in self.get_order_by(): order_by_sql.append(sql) order_by_params.extend(params) query += ' ORDER BY ' + ', '.join(order_by_sql) params += tuple(order_by_params) ```
It's risky to use a mutable default. I've changed this to `None`.
chop "we". Explain "Oddly".
I still think think should be `if empty_label is not None`, otherwise types other than list, tuple, or string will be silently ignored.
Yea, I think we need a better way to identify the dummy backend. I haven't found one yet.
Usually non-test code doing connection.vendor checks should instead use some database feature flag or backend method. At least this needs an explanation why this is done.
Does this need to be a separate method? Seems unnecessary to me.
When updating the tests, please use the indentation style of the existing tests, e.g. ``` python self.assertQuerysetEqual( Number.objects.all(), [ '<Number: -1, -1.000>', '<Number: 43, 42.000>', '<Number: 1338, 1337.000>' ], ordered=False ) ```
I don't think there is a need to copy docstrings from sync variants, maybe only: ```python """See get_many().""" ```
I believe you can replace this whole block with: ``` tz = timezone.get_default_timezone() dt = timezone.make_aware(dt, tz) ```
I'd omit the whitespace change.
with UNION and with DIFFERENCE if the first queryset is nonempty.
no blank line
We might need to handle the case of custom users that don't have an `is_active` attribute.
so maybe `hash((self.message, self.code, make_hashable(self.params)))` :thinking:
I'd check `hash()`: ```suggestion def test_choice_value_hash(self): value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1) value_2 = ModelChoiceIteratorValue(self.c1.pk, self.c2) self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None))) self.assertNotEqual(hash(value_1), hash(value_2)) ```
I did. I see what's going wrong, a set has no defined order. So the order of the select options is not guaranteed. But if I'm not mistaken, neither dicts have no defined order either. Maybe there's something in itertools you can use. Otherwise collections.OrderdDict.fromkeys will guarantee the order is kept.
```suggestion self.records = collections.defaultdict(list) ```
is this test needed? I'd suspect it's already tested.
We can remove this - it's always included above.
Also, I think it would make sense to subclass `TableColumns` instead of `Reference`, e.g.: <details> ```diff diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py index e1e6deb4c8..2f9fbf64c8 100644 --- a/django/db/backends/ddl_references.py +++ b/django/db/backends/ddl_references.py @@ -203,7 +203,7 @@ class Statement(Reference): return self.template % self.parts -class Expressions(Reference): +class Expressions(TableColumns): def __init__(self, table, expressions, compiler, quote_value, opclasses): self.table = table self.compiler = compiler @@ -212,25 +212,17 @@ class Expressions(Reference): ] self.quote_value = quote_value self.opclasses = opclasses - - def references_table(self, table): - return self.table == table - - def references_column(self, table, column): - columns = (col.target.column for col in self.compiler.query._gen_cols(self.expressions)) - return self.table == table and column in columns - - def rename_table_references(self, old_table, new_table): - if self.table == old_table: - self.table = new_table + self.columns = (col.target.column for col in self.compiler.query._gen_cols(self.expressions)) def rename_column_references(self, table, old_column, new_column): if self.table != table: return expressions = [deepcopy(expression) for expression in self.expressions] + self.columns = [] for col in self.compiler.query._gen_cols(expressions): if col.target.column == old_column: col.target.column = new_column + self.columns.append(col.target.column) self.expressions = expressions def __str__(self): ``` </details>
kwarg -> arg
I tend to think of the user doesn't have an `is_active` attribute, it should be accepted regardless of `allow_inactive_users`. Should make the behavior clear in the docs.
I don't think `follow` is necessary here, since you should receive a 404.
I'd go with `return self.dirs if self.dirs is not None else self.engine.dirs` -- it's possible that someone might instantiate the loader with an empty list (say in a debugging scenario if they are temporarily removing the one entry in the list to test something), and it's surprising to fall back to engine-dirs in that case.
Yes, I'm also thinking that might be simplest. It makes sense that deprecation warnings occur in the public-API class, not in an internal base class. And this doesn't really save us any duplication anyway, since `ForeignKey` still has to duplicate the warning.
Lately, we've been preferring hanging indent so everything isn't stuck on the right side/indented non-multiple-of-4: ``` def request_context_response_with( func, response_class, ...) ``` We could also update the docstrings to "Return ..." while they are being touched.
I'd say it's less likely to cause problems if Django pins `<1.0.0` for the time being, and then if there is a breaking release, users without very good pinning won't be affected. Django can always issue a patch release to move the pin if a new sqlparse comes out and it is compatible.
I would add: `return self.features.minimum_database_version is None or ....` so that this method doesn't crash if a minimum version isn't specified.
no blank line
For what I've read about performance, sets perform better when testing membership and lists perform better when iterating over (which seems the case here). To be checked...
please include newlines between methods
why `strings_only=True`? otherwise make sense to me.
I see now. I think a more readable structure would be to rename `SimplePoFileTests` to something like `PoFileAssertionMixin` and use that as well as `SimpleTestCase` in the subclasses.
I wonder if a crash similar to 170b006 can happen if the lhs is a `Subquery` annotation.
Could unpatch in just that one test
I guess we could eliminate the `has_none` variable and simply check `if none_title` -- I don't think a user would define an expected title of an empty string.
Condense? ```suggestion if result is NotImplemented or result is not None: return result ```
I would recommend to call `super` here after overrides
I can't come up with a way to differentiate both instance either. Ideally they would have a similar API.
Randomly ordering ascii letters is unlikely to break this test, since the input will always end up being a string of ascii letters. The reason for using the random string is so that zlib won't compress it and shorten the length of the message. An alternative would be to hard code a random string of ascii letters that was 406 long. But if the message size changed, say as a result of the cookie storage limit changing, then the test would break.
At first sight, I don't understand why you replaced `repr` by `str`, but if you have a good reason go ahead.
As noted on the build failure, "Usage of field.related has been deprecated. Use field.remote_field instead."
Can we add this attribute in the alphabetical order? (in all contrib apps)
this line could go in "else" of try/except/else
I think chaining `filter`/`exclude` should be an `AND` not an `OR`. It makes more sense to me and I'm pretty sure that what queryset `filter`/`exclude` do.
"If the charset is set to `None` no unicode decoding is performed and raw bytes are returned.". In that case you are returning unicode (already decoded) not raw bytes.
I'd use: `def strip_quotes(table_name)` (considering the leading quote is removed also, not just the trailing one).
Actually, no, it's not a bug in flake8: ``` python if (foo and bar): pass ```
Don't put each parameter on its own line.
I don't see any value in this docstring please remove it.
I think we should add this format to the `DATE_INPUT_FORMATS` for backward compatibility.
This doesn't take into account the weighting that can be present, and assumes that the first item is the preferred one, which is AFAIK only true if _none_ of the options have a q weight (in which case they all have a `q=1`)
@carljm, yes, I was a little confused, `bool()` will be enough.
Getting an error about an index when creating a constraint is confusing unless you understand the implementation details.
add trailing comma
This is the version of mysqlclient, not of MySQL. Look at `self.connection.mysql_version` in this file for the correct version.
Use single quotes.
Giving a last review before committing. Thanks Michael for your efforts and your patience. Don't you think this block would be more readable in this form?: ``` python # We need an email.Message object if isinstance(content, EmailMessage): # convert content into an email.Message content = content.message() elif not isinstance(content, Message): # For compatibility with existing code content = message_from_string(content) ```
Hey! This test passes as it is ensuring that one particular error doesn't occur but the assertion is suppressing another error: <img width="1792" alt="image" src="https://user-images.githubusercontent.com/10276811/117889344-082ce100-b2d1-11eb-9d95-6fc5ba25296b.png"> Refer to my PR (#14382) for a way to assert that no error is occurring.
```suggestion orig_settings_dict['TEST']['PASSWORD'] = orig_settings_dict['PASSWORD'] ``` Not sure how the tests passed here... Unless username and password are the same...
I think you should either make that an `or`, or drop checking `reverse_method`. A resolver without `resolve` makes no sense. A resolver without `reverse` might.
It would be nice to align the various `FROM`s and `JOIN`s with there corresponding `SELECT`s (like in all other queries of the file) for better readability. Also, all other queries seem to prefer putting `AND`s at the beginning of the line.
In what case is this branch reached? Should there be a test for it? I guess you meant `raise CommandError(e)`.
Flatten this to one line. The temporary variable doesn't add anything.
You'll want to only perform the optimization `if self.target_field.db_constraint` as `backends.tests.DBConstraintTestCase.test_many_to_many` shows. Also the filtering is wrong, it should be by `self.source_field` because now you're filtering by the primary key of the intermediate table's `pk`. ```python def count(self): # If the through's target field's foreign integrity is enforced # the COUNT can be performed against the through table instead of # INNER JOIN'ing the target table. if self.target_field.db_constraint: hints = {'instance': self.instance} manager = self.through._base_manager.db_manager(using=self._db, hints=hints) return manager.filter( **{self.source_field_name: self.instance.pk} ).count() return super().count() ```
You have `quote_name` and `quote_value` so you don't need to write vendor specific quotes. Anyway, it was meant as a thought, because I think it looks a bit weird with those sequences of `x < y`.
I'm not sure it's really necessary to use `strict=True` after `tempfile.TemporaryDirectory()` as it should raise if the path cannot be created. Not that it really hurts.
please alphabetize imports
I prefer to include the ticket reference only for obscure issues where additional context provided by the ticket is helpful.
Checking list of fields is not enough. Indexes with any custom options (`condition`, `deferrable`, `include`, `expressions`, etc.) should not be taken into account.
happy new year ! yeah effectively finally this is required for python < 3.5 as you explain (I just tested it in an interactive session). I'm happy to open a PR with this specific change so.. should not be too long to come..
"The reason for not ..." substracting -> subtracting
Perhaps combined into a single pass, something like... ``` sub_message['changed']['fields'] = get_text_list( [gettext(field_name) for field_name in sub_message['changed']['fields']], gettext('and') ) ```
```suggestion 'field_name': 'related_questions', ```
@timgraham I was the one who suggested storing `db` in a locale variable to prevent multiple attribute lookups in the primary assignment loop. Might be overkill as you both pointed out.
`# Check for subtags, e.g. 'ab-cd-x-informal'.`
I think so. It would be better to use `errno.EPERM` instead of `1`.
Doesn't this line need to be outsite the `{% for %}` loop? Otherwise it gets called for each `o` and won't actually cycle...
Unfortunately this doesn't work on Oracle where bind variables are not supported in DDL statements: ``` django.db.utils.DatabaseError: DPI-1059: bind variables are not supported in DDL statements ``` We should use a solution similar to that used in the functional indexes.
My thought overnight was just to have a warning and leave it at that. The sidebar still works without the request: we're just missing the CSS highlight for the current model, and an aria-role. 98% of projects have request context in play already. A warning is enough for the 2%. Discuss.
This is not a proper regression test because we don't have any `author` here.
I feel like this will break when the field is a reserved keyword (also for all other backends). At the minimum we should also have tests that will show that reserved fields will work as expected (ie are quoted properly)
I think it's "Transaction isolation level" i.e. no capitalization of every letter
Strike that: ``` In [1]: '\.' Out[1]: '\\.' ```
I tried saving this model in from admin page, I get the following validation error: ``Select a valid choice. ['a1', 'b1'] is not one of the available choices.``
Nothing, it is just my personal preferences and it was just a suggestion.
put this on the class so you don't have to repeat it in each method
Various things that can be improved here: - Avoid unnecessary elifs. - Raise NotImplementedError in the default case for unknown operators. ```suggestion if operator == '+': # typecast_timestamp() returns a date or a datetime without timezone. # It will be formatted as "%Y-%m-%d" or "%Y-%m-%d %H:%M:%S[.%f]" return str(real_lhs + real_rhs) if operator == '-': return str(real_lhs - real_rhs) if operator == '*': return real_lhs * real_rhs if operator == '/': return real_lhs / real_rhs raise NotImplementedError(f"Unsupported operator: {operator}") ```
I'd omit "Make sure" in the spirit of https://code.djangoproject.com/ticket/27392.
I think you can just use `signal.SIG_IGN` instead of this lambda.
should be `datetime.datetime.now().time()`
, -> .
```suggestion cache.clear() # Avoid the failed login delay in the next test. ```
Same situation here - it may be easier to check the reverse case (`isinstance bool`)
Would it work to declare the async middleware like this? ``` class AsyncBaseMiddleware(BaseMiddleware): _is_async = True class AsyncTeapotMiddleware(AsyncBaseMiddleware): async def __call__(self, request): response = await self.get_response(request) response.status_code = 418 return response ```
Thanks :+1: IMO, we can also remove this assignment and simplify the code: ```python ... if self.localize: value = formats.sanitize_separators(value) try: return Decimal(str(value)) except DecimalException: raise ValidationError(self.error_messages['invalid'], code='invalid') ```
Single quotes throughout please 🙂 (As an aside, are we about ready to push forward with black? The DEP is accepted and nearly two years old. It feels like it is time - even though I in my heart I'll always be in the single quote camp! 💔)
trailing comma please
should this consider both updateteddate and pubdate together? i.e. right now if entry A has updatedated date yesterday and entry B has pubdate today, it looks like entry A will be considered the latest.
Comma before 'or' per https://en.wikipedia.org/wiki/Serial_comma.
This could be PostgreSQLSimpleTestCase I believe.
According to the coverage report, this line isn't executed.
You can call `['python', '-m', 'django', '--settings', 'integration_settings', 'check']` instead to avoid creating a dedicated `manage.py` file.
prefer hanging indent: ``` model_signals = { signal: name for name, signal in vars(signals).items() if isinstance(signal, signals.ModelSignal) } ```
Colorize is not tested currently: http://ci.djangoproject.com/job/Django%20Coverage/HTML_Coverage_Report/_var_lib_jenkins_jobs_Django%20Coverage_workspace_django_utils_termcolors.html#n43 So testing the return value makes sense for me.
I don't see much value in adding an example in this docstring. Please remove it.
Revert unrelated change.
Might want to rename that to `test_ptr_accessor_assigns_state`.
Can we simply fix for ticket-24974? I don't see any tests failures with: ```diff diff --git a/django/forms/models.py b/django/forms/models.py index 5bd7ef256a..95bce27d9a 100644 --- a/django/forms/models.py +++ b/django/forms/models.py @@ -258,21 +258,12 @@ class ModelFormOptions: class ModelFormMetaclass(DeclarativeFieldsMetaclass): def __new__(mcs, name, bases, attrs): - base_formfield_callback = None - for b in bases: - if hasattr(b, "Meta") and hasattr(b.Meta, "formfield_callback"): - base_formfield_callback = b.Meta.formfield_callback - break - - formfield_callback = attrs.pop("formfield_callback", base_formfield_callback) - new_class = super().__new__(mcs, name, bases, attrs) if bases == (BaseModelForm,): return new_class opts = new_class._meta = ModelFormOptions(getattr(new_class, "Meta", None)) - formfield_callback = opts.formfield_callback or formfield_callback # We check if a string was passed to `fields` or `exclude`, # which is likely to be a mistake where the user typed ('foo') instead @@ -310,7 +301,7 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass): opts.fields, opts.exclude, opts.widgets, - formfield_callback, + opts.formfield_callback, opts.localized_fields, opts.labels, opts.help_texts, ```
I don't think `'site' in locals()` is acceptable. How about `site=None` to start and then checking if `site is not None` here? A regression test and a Trac ticket are also required.
This class was doing some checks about the geometric parameter. It's clear that if we want to accept more widely expressions, it will not be possible to check that like we did it before. However, I'd like to see new tests about what happens when wrong parameter (not geometric or without srids) are passed to geometric functions. We should ensure that the error messages are clear for the developer.
Might want to avoid `type` shadowing.
This looks incorrect to me, we should check that object exists only when a condition is fulfilled ```suggestion if (self.condition & Exists(queryset.filter(self.condition))).check(against, using=using): ```
catched -> caught
Should be replaced with [`assertRaisesMessage`](https://docs.djangoproject.com/en/1.9/topics/testing/tools/#django.test.SimpleTestCase.assertRaisesMessage).
Shouldn't we have a decorator for that? (kinda off-topic, I know)
```python if not meta.parents: context_manager = transaction.mark_for_rollback_on_error(using=using) else: context_manager = transaction.atomic(using=using, savepoint=False) ```
It wouldn't validate the following: - http://.com - http://. - http://.. - http://../ - http://.www.foo.bar/ - http://.www.foo.bar./ It would indeed validate the following URL (but they are actually valid): - http://example - http://example. All the others are about leading and trailing hyphens, if we really want to filter them out despite the increased complexity then I suggest we break the pattern into multiple variable for readability: https://gist.github.com/386830e46e8d2aca9dcb Regarding formal grammar, it's spread out among a bunch of RFCs, I doubt it's worth the effort.
Was a previous iteration of the code more complicated? Not sure the intermeidate `css_classes` variable has much benefit.
We likely want to be forcing the usage of `schema_editor.connection.alias` in the `ContentType` query above and the `Permission` one below as well else they could be against different database. Given you run `migrate --database=other` with the current code a transaction/savepoint will be created against `other` but these queries will be run against either `default` of whatever `db_for_write` routes to.
I would move all internal import to the module level, e.g. ```python with ignore_warnings(category=RemovedInDjango50Warning): from django.utils.baseconv import ( BaseConverter, base2, base16, base36, base56, base62, base64, ) class TestBaseConv(SimpleTestCase): ... ```
Maybe: ```suggestion state.pop('_stdout_buffer', None) state.pop('_stderr_buffer', None) state.pop('_original_stdout', None) state.pop('_original_stderr', None) ```
This bare `except` will catch anything, including the exception that marks a failing test, I think :-) Better to use `assertRaises` and explicitly assert that the specific expected uncaught exception bubbles up.
It looks like both `__init__` method can be removed as they simply delegate to `AlterFooTogether.__init__`.
It would be less duplication to do something like: ```python if 'content-type' in self: content_type_bit = ', "{}"'.format(self['content-type']) else: content_type_bit = '' return '<{cls} status_code={status_code}{content_type_bit}>'.format( ... ``` ditto below I think moving to `str.format` is better but idk Django's current policy since there's a lot of `%` formatting around still.
We should test that `datefield__year__(exact|gt|gte|lt|lte)` actually uses these lookups as the suite pass with them unregistered.
This is a very minor thing, but I wonder why I didn't make the savepoint-ids item in this tuple a set instead of a list, considering its only used for containment checks? I think it would be a trivial change, just change this from `self.savepoint_ids[:]` to `set(self.savepoint_ids)`
I think you meant to use `self.get_context()`.
@charettes Many thanks!
Can this test case be moved into the first section of `test_history_view`, directly above? It doesn't look like the "can't change" bit is being tested.
I don't have strong feelings about this. One possibility is to remove this, and if we get complaints about the removal during alpha or beta we can reintroduce it back. Another approach is to check how hard it is to write code that works both in 1.7 and 1.8 for those cases that use RelatedObject.
Would calling `admin.site.check()` work, e.g. `self.assertEqual(admin.site.check(), [])`? That avoids running checks for all installed apps which should be a speed improvement. Other tests could be refactored later.
--file-name or --filename? Something like --squashed-name might be more intuitive.
It seems that ordering is an issue, therefore: ```python qs = Employee.objects.annotate(nth_value=Window( expression=NthValue('salary', nth=20), order_by=F('salary').asc() )) self.assertListEqual(list(qs.values_list('nth_value', flat=True).distinct()), [None]) ``` will work properly.
Missed whimsy: if Black didn't normalize it to 'rf', this could be a 'fr', or French string.
include trailing comma so if more kwargs are added, we don't need to modify this line again
This change looks unrelated :thinking: Please revert.
The parenthesis here are unneeded
looks like we explicitly discard `name` so that's why it doesn't need to be present in `non_database_fields`.
This should go up before `import logging`.
~~I think we should pass `True` in all cases, because we're selecting a flag not declaring a value.~~
You don't need to assign the result to a variable here.
Please put it on the next line and include a trailing comma.
This could use set comprehension also. There was another commit that converted most places but perhaps this slipped through.
One of these should have an explicit instance namespace other than `'app'`, otherwise the nested namespaces are not unique.
Couldn't this possibly cause issues if `operation` is not a `ModelOperation` and happens to have a matching `name_lower` (e.g. `FieldOperation`) Pretty sure we'll want something along the lines of ```python def can_reduce_through(self, operation, app_label): return ( super().can_reduce_through(operation, app_label) or ( isinstance(operation, AlterTogetherOptionOperation) and type(operation) is not type(self) ) )
And this would be... ```suggestion self._serializer = PickleSerializer(pickle_protocol) ```
Generally I'd multiline this since it's long. ``` msg = ( 'You have provided a value for the LANGUAGE_CODE setting that is ' 'not in the LANGUAGES setting.' ) ```
I would chop this docstring.
Having child class initialization delete parent attributes won't fly. What if your parent has two children ```python class A(models.Model): foo = True class B(A): foo = models.TextField() class C(A): pass assert C.foo # AttributeError. ```
...or is the empty string. I wonder if it's worth adding that to the check above? (ln 39.) There's no point passing `''` to `identify_hasher`.
funct -> func -- I think? or "function"
Small nitpick but since an empty `list` evaluates to `False` the `len(...) > 0` isn't required and makes the whole check less readable IMHO.
No need to create a `set()` here.
change -> reverse? I'm not sure if `TypeError` is the best exception.
Remove print statement: ```suggestion ```
Only the docstring is the same, obviously the test is different.
Yes, these two lines are necessary, and `test_fields_with_m2m_by_env` is a regression test for them.
I'd chop the blank lines in this function.
Oh no, sorry, I see now.
I never think mutable keyword arguments are a good idea, even in this case where they will never be (currently) mutated. I am surprised `flake8` didn't pick this up.
I nearly missed the `not` before `options['sitemap_uses_http']` while reading.
This is not changed.
Not sure this is desired, as it will create a `DjangoTranslation` instance for each `translation` call while the previous code wasn't. As you can see above `DjangoTranslation.__init__` isn't cheap.
I've just tested, and ordering by count is fine, provided you switch the order of expected to: ``` {'rating': 4.0, 'count': 1}, {'rating': 4.0, 'count': 2}, ``` To remain consistent, let's order the first test by `count` also.
@hramezani > The _get_expr_fields function will find fields={'age', 'parent'} and when we call: cls._check_local_fields(fields, 'constraints') This won't return any error because age and parent are model fields. As @alextatarinov said you can't rely on `_check_local_fields` to determine whether or not a join would occur. You need to use a solution relying on `.remote_field is None` and `get_lookup`/`get_transform`. That should do ```python @classmethod def _get_expr_references(cls, expr): references = set() if isinstance(expr, Q): for child in expr.children: if isinstance(child, tuple): lookup, value = child references.add(tuple(lookup.split(LOOKUP_SEP))) references.update(cls._get_expr_fields(value)) else: references.update(cls._get_expr_fields(child[1])) elif isinstance(expr, F): references.add(tuple(field.name.split(LOOKUP_SEP))) elif hasattr(expr, 'get_source_expressions'): for src_expr in expr.get_source_expression(): if isinstance(src_expr, str): references.add(tuple(src_expr.split(LOOKUP_SEP))) else: references.update(cls._get_expr_fields(src_expr)) return references references = self._get_expr_references(constraint.condition).union(constraint.check) for field_name, *lookups in references: if not lookups: # If it has no lookups it cannot result in a JOIN. continue try: field = cls._meta.get_field(field_name) except FieldError: # handle missing field if not field.remote_field: # Only related fields can result in joins. continue # JOIN must happen at the first lookup. first_lookup = lookups[0] if field.get_transform(first_lookup) is None and field.get_lookup(first_lookup) is None # This would result in a JOIN attempt, emit a warning ``` This should thing such as `parent=2` (which doesn't involve JOINs because the local `parent_id` field would be used) but disallow things like `Q(parent__name='foo')` or `Q(local=Lower('parent__name'))`.
`# With form data. ...`
I think ideally this file would be `base.py` and `__init__.py` would be modeled after https://github.com/django/django/blob/353d436e7cb33cb832a3e8c74b051e3d2ba76018/django/core/files/__init__.py
HeadersCheckMixin seems unneeded
Errr... 😃 it’s part of the old ticket in my view. (That may not be canonical.) A new ticket might help in case we need multiple reviews, but having come across this today, I kind of thought it would be good to get in for 2.2 if that’s realistic on you end. Tl;dr: don’t really mind. My initial thought on the code structure would be to go for the minimal change here. Add the helper (even private) to encapsulate this logic, and call it quits. We can always allow a restructuring later. However, if you have ideas for something better I wouldn’t object. 🙂
I've briefly audited the `WSGIRequest` constructor, technically a `UnicodeDecodeError` is still possible from `get_script_name()`. Replacing `environ['PATH_INFO']` with `environ['SCRIPT_NAME']` should hit the same codepath. Regarding removing the exception catching, that's for another ticket, but we need to check whether the RFCs expect us to repercent `SCRIPT_NAME` as well. If we did that, the exception catching could go.
You don't use `edit_only` here :thinking:
Oh, actually it looks like `test_runner.tests.AutoIncrementResetTest.test_autoincrement_reset2` is also failing on MySQL.
I've proposed `self.fail(f'Unexpected logs found: {cm.output!r}')` to use the same message as in Python. With the current version `AssertNoLogsTest` tests will fail on Python 3.10+. We can adjust a message or skip new tests on Python 3.10+.
`min` and `max` attrs should only be added if `self.localized is False`
A docstring might be helpful. In particular, I had to study the tests to figure out what value "to" is expected to take.
Collapse to `elif`
Can't believe we missed that one 🤦
I think we should use `relpath()` but only if it is below the working directory, e.g. ```diff diff --git a/django/core/management/templates.py b/django/core/management/templates.py index c7252a5ad2..db417443b2 100644 --- a/django/core/management/templates.py +++ b/django/core/management/templates.py @@ -65,6 +65,7 @@ class TemplateCommand(BaseCommand): self.validate_name(name) # if some directory is given, make sure it's nicely expanded + app_python_path = name if target is None: top_dir = path.join(os.getcwd(), name) try: @@ -77,6 +78,11 @@ class TemplateCommand(BaseCommand): if app_or_project == 'app': self.validate_name(os.path.basename(target), 'directory') top_dir = os.path.abspath(path.expanduser(target)) + # Use a relative path if it's below the current working + # directory, or an app name otherwise. + rel_path = os.path.relpath(top_dir) + if not rel_path.startswith('..'): + app_python_path = rel_path.replace('\\', '/').replace('/', '.') if not os.path.exists(top_dir): raise CommandError("Destination directory '%s' does not " "exist, please create it first." % top_dir) @@ -101,6 +107,7 @@ class TemplateCommand(BaseCommand): context = Context({ **options, + **({'app_python_path': app_python_path} if app_or_project == 'app' else {}), base_name: name, base_directory: top_dir, camel_case_name: camel_case_value, ```
Need spaces around `-` sign.
Fields can use custom encoders so it's better to use `get_prep_value()`.
could you please rebase your branch and use the new [setUpTestData()](https://docs.djangoproject.com/en/dev/topics/testing/tools/#django.test.TestCase.setUpTestData) method.
I think a mixin is a bit complicated. The attribute sounds simpler - it could be a function instead of just a boolean, then it could return the transform if applicable, else `None` for non-sliceable fields (default implementation).
Period ```suggestion "Quit and manually define a default value in models.py.", ```
We could simplify this, e.g. ```python if not allow_joins and self.annotations[name].contains_column_references: alias = getattr(self.annotations[name], 'alias', None) if alias and isinstance(self.alias_map[alias], Join): raise FieldError('Joined field references are not permitted in this query') ``` but unfortunately your solution doesn't cover all cases.
Add trailing commas.
@lundberg The test runner already [raises `ResourceWarning` as an error](https://github.com/django/django/blob/49b470b9187b6be60e573fed08c8f4a87f133750/tests/runtests.py#L50) -- so that should be enough... — it's implicit but sufficient (since some of these don't get raised until shutdown). Happy to look at a warnings filter context manager version, if that's what you've got in mind, but I'm not sure it's needed. 🤔
I don't mind it as-is then.
Please use `self.assertRaisesMessage` to verify this is the expected `ValueError` .
I felt like a refactor of index name generation was more appropriate place for an alteration of the signature of the affected method but I can take care of it in #6643 it it's deemed more appropriate.
The parentheses aren't required. https://stackoverflow.com/questions/16706956/is-there-a-difference-between-raise-exception-and-raise-exception-without
Maybe I'm missing something, but why do these need to be wrapped with `str()` anyway? You could do `{alias!s}` instead of `{str(alias)}`, but if it isn't required, just use `{alias}`. In that case you can use f-strings.
only -> the
The path needs updating (I'd use a relative one)
@CruxBox my point is that you are already returning in the case of an exception *and* in the `else` clause so the code is equivalent to ```python try: date_value = datetime.date(int(y), int(m), int(d)) except ValueError: # Return pseudo-ISO dates with zeros for any unselected values, # e.g. '2017-0-23'. return '%s-%s-%s' % (y or 0, m or 0, d or 0) date_value = datetime_safe.new_date(date_value) return date_value.strftime(input_format) ``` Again, this is minor but we usually avoid using `try/else` in the rest of the code base unless it's necessary.
@shaib, this is your reported ticket -- what's your take on how it should work? Seems to me maybe the check in the executor is more appropriate after all.
Yes `RelaltedManager` is good.
`stderr = ...` (and move above assertRaisesMessage)
distinct -> a different
Is `SetupDefaultLoggingMixin` needed? Tests seem to be passing without it.
I would move it to a separate test method because it's full result, not empty.
> I'll do this and another quick sweep/scan for any similarly distanced/return early ones. I think that's the last one.
`# psycopg2 raises ValueError if a field contains NUL characters (0x00).`
We shouldn't import `ArrayField` here, please use `get_internal_type()` instead, e.g. ```python new_internal_type = new_field.get_internal_type() if new_internal_type == 'ArrayField' and new_internal_type == old_field.get_internal_type(): ... ```
I suggest having just 1 `os.chmod` call: ``` os.chmod(full_path, self.permissions_mode if self.permissions_mode is not None else settings.FILE_UPLOAD_PERMISSIONS) ```
You might use parenthesis to be explicit about the groupings and improve readability in these longer expressions.
It looks like you need to pass `level` `DEBUG` here and below.
`Error` makes more sense to me.
I haven't tried it out, but I'm pretty certian this only happens when you use `__first__`: https://github.com/Uran198/django/blob/ticket_25850/django/db/migrations/loader.py#L148 which is silently ignored when adding dependencies given the dependent app is an app w/o migrations.
I'm not sure where exactly in runtests.py (if you have trouble with it, I'll look it at, hopefully it's feasible) but no, not there. The logic should run regardless of what test runner is used. The idea is that `runtests.py` is used for running Django's tests suite. That's all we care about. The test runner that's used doesn't matter. Jenkins, for example, uses `TEST_RUNNER = 'xmlrunner.extra.djangotestrunner.XMLTestRunner'`. We still need the logic to run in that case.
We could always wrap collations in parentheses :thinking: ```diff diff --git a/django/db/models/functions/comparison.py b/django/db/models/functions/comparison.py index 8a1c34430b..8b4d499c89 100644 --- a/django/db/models/functions/comparison.py +++ b/django/db/models/functions/comparison.py @@ -79,7 +79,7 @@ class Coalesce(Func): class Collate(Func): function = 'COLLATE' - template = '%(expressions)s %(function)s %(collation)s' + template = '(%(expressions)s %(function)s %(collation)s)' # Inspired from https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS collation_re = _lazy_re_compile(r'^[\w\-]+$') ```
I think you can drop `title` entirely.
This test doesn't have any assertions :thinking:
This isn't needed, I think.
This can be simplified to `return []`.
", or" Please use periods.
I'd be OK with calling the function `_datetime_ambiguous_or_imaginary`. It's verbose, but anything shorter will be confusing, given what Paul said.
Import specific classes rather than `from django import http`
This should be `self.assertEqual('migrations\n (no migrations)\n', out.getvalue().lower())` as in the above test (no SystemExit).
Oh, I get it. either fields or field-names. The code needs to be more explicit (and defensive) about it.
Ahh sorry, I misunderstood. Thanks :+1:
And move _"only"_ to the start - the sentence flows better.
I would remove this temporary variable and move `split()` directly into loop ```python for part in field.split(LOOKUP_SEP): ```
You shouldn't use the string representation of the query but someting along the lines of what `django.db.models.fields.related.related_lookups.RelatedIn` does.
Remove unnecessary hanging indent, simplify: `context['can_view_related'] = True`
Yes we can remove it, it's redundant with `test_restrict_path_cascade_indirect()` and `test_restrict_path_cascade_direct()`, i.e. we have tests for a path "restricted" deletion.
I guess this could say "doesn't support all the lookups" in case gis_lookups is a list.
I'd put the trailing `}` in a new line.
I guess, as we're relying on there being whitespace, we should make this explicit: ```suggestion 'INSERT INTO test_runsql_pony (pink, weight) VALUES (1, 1);\n', ```
Use: ``` self.assertSequenceEqual( Article.objects.order_by(F("author").desc(nulls_last=True)), [self.a4, ...] ) ```
Please use single quotes and a period.
All changes to MySQL introspection (except this line) can be treated as a simplification of the current implementation, so I moved it them a separate PR #14000.
I would be in favor of including the full exception text for the two cases with `if PY2`, etc. It's more cryptic than it needs to be. And when switching to Django 2, the `PY2` block can simply be deleted rather than having to remember to fill in the fuller message.
Getting rid of the unnecessary constant for the `None` case, `ON_CONFLICTS_NONE`, will simplify the diff and make review easier: ```suggestion if connection.features.can_return_rows_from_bulk_insert and not on_conflict: ```
Yes, that's right -- `auth_app.User._meta.swapped` should always be True; we can omit the change to the condition.
I'd consider changing this to `if value is not None` - I don't know whether other mappables can be handled lower down the stack? It's an edge case though and may be irrelevant as higher levels would have already rejected it.
Changes in hooks are included in #14781.
I'd use complete variable names and maybe _ for `rcv` since it's unused.
Not related to your changes I know, but I think these docstrings could go since they duplicate the test method names.
This inserts the `RenamePermissions` operations _after_ the `RenameModel` operations. That's correct for forwards migrations. However, if you're rolling back a model rename you'd need to rename the permissions afterwards as well, hence add it _before_ the `RenameModel` operation into the migration.
We are mostly targeting 1.10, and if some parts need backporting to 1.9, just suggest it on the PR.
chop afterwards, add period
You've removed the `num_args=1` argument (which `lru_cache` doesn't support) here which is probably a bug. The fact that the test suite doesn't break because of this is intriguing and should be investigated further.
Or maybe it would be better to extract `follow` from `extra` like this: ```python def generic( self, method, path, data='', content_type='application/octet-stream', secure=False, follow=False, **extra, ): ... if follow: s['follow'] = follow s['headers'] += [(key.lower().encode(), value.encode()) for key, value in extra.items() if key] ``` or like this: ```python def generic( self, method, path, data='', content_type='application/octet-stream', secure=False, follow=False, **extra, ): ... s['headers'] += [(key.lower().encode(), value.encode()) for key, value in extra.items() if key] ... return self.request(follow=follow, **s) ```
Yes, sorry, typo `... a list of tuples containing two values.`
Django has already a helper to do the same thing (with addition of checking if settings.USE_TZ is True) at django/utils/timezone.py: django.utils.timezone.now.
Please chop blank line.
I think the last time this code changed, we did this because it was the way it was done before, but I also support not encoding already correct ascii. Chances are no one will complain that this changed.
Oh, didn't see that. Well this is fine for now. I think refactorings could be done later.
I wonder if we could enumerate valid options like we do for `select_related()`/`prefetch_related()`.
This can be singe-lined.
This can be a generator expression, no need to materialize to a list.
The docs talk about URL pattern names a lot, so I guess it's clear.
Is there a reason you are using`&minus;` instead of `-`? It won't work in non-HTML templates.
I think the `is_valid()` assertions can be removed. The `formset.errors` assertions will fail if the formset is valid.
I'd suggest to put this in a new `test_uuid.py` file.
I'd opt for longer lines for most of these `assertEqual`s (we prefer longer lines up to 119 chars when it helps readability).
Remove leading and trailing white space of `RestaurantInlineAdmin`.
Please chop trailing whitespaces.
```suggestion old_model_tuple = (app_label, old_name) ```
`source_map.css` is missing.
```suggestion hash(NoHash()) ```
I think we can do better here: ```suggestion "CheckConstraint '{}'".format(constraint.name) ``` This would make the message look like: ``` "CheckConstraint 'constraint_name' refers to the nonexistent field 'missing_field'." ``` The same applies for `UniqueConstraint`.
I'd add parenthesis to make the grouping clear: `(mysql and not connection.ops.returns_invalid_geometry_collection)`
Maybe with "with_model" rather than "using_model" would be a bit shorter? Otherwise, seems okay to me.
```suggestion SELECT table_name, table_rows ```
does this actually raise an error if validation fails? - I seem to recall that errors are just printed to stdout I know you are pushing into new testing areas here (thanks for going the extra distance BTW) but a failing test would be nice to at least demonstrate this testing approach
I think we can use a more specific subclass i.e. `ConnectionError`.
Drop the " or not".
```suggestion self.assertIs(formset.is_valid(), True) ```
With this change, I think it is no longer necessary to initialize `self.oracle_version`.
Use single quote consistently.
This is probably a wrong default implementation - it doesn't take into account that the relation can be to a different model. Also, we do support multicolumn relations internally, so something that uses all relation fields would be useful. I guess this duplicates work already done in descriptors. The **get** implementations need to build filters to get the related object(s) for an instance, so we need to check that we don't have duplicate implementations.
It's probably better to move the new kwargs to the end, as some people might depend on the ordering...
Some tests are really old and it's not always the best to follow their style. > Why? To avoid mistakes, e.g. in the most recent push you fixed the next line: ```python option = super().create_option(name, value, label, selected, index, subindex, attrs) ``` that wouldn't be necessary if we used `kwargs`. But OK, it's fine.
We should allow also `None`.
I see you incorporated some of my suggestion as to how to refactor this, but as it is now the `connection_params` variable isn't used.
too many newlines here
please use assertRaisesMessage to be sure the TypeError is the one we expect.
It would be worth checking if these field changes render other tests relying on the `Bio` model moot.
I would consider: `def get_backends(tuples=False)` to simplify a bit and avoid the need for an extra loop in the new `get_backends()`
I think `ValueError` would be appropriate here (the problem is with the values passed to the login view).
You current approach will silence any `SystemCheckError` raised by `run_checks` if `teardown_databases` and `teardown_test_environment` fail. What about ```python run_failed = False try: self.run_checks() result = self.run_suite(suite) except Exception: run_failed = True raise finally: try: self.teardown_databases(old_config) self.teardown_test_environment() except Exception: # Silence teardown issues if an exception was raised during runs to avoid # shadowing it. if not run_failed: raise return self.suite_result(suite, result) ```
What I tried didn't work out that well, so let's go with forced_pk.
I think it's impossible to reach this since the `python` shell doesn't raise `NoSuchShell`.
While you're making changes for readability, I would find it best to declare one key-value pair on each line, like you did in the other diff.
Ensure that the new arguments are keyword only: ```suggestion def handle_word( self, word, *, safe_input, trim_url_limit=None, nofollow=False, autoescape=False, ): ```
chop blank line for consistency with `GinIndex`
There is an open ticket to support database-level cascading deletion, see ticket-21961. We should mention it here: ```suggestion # Database-level options are not supported, see #21961. 'on_delete', ```
Maybe it's a separate issue (or no issue at all, since this message is similar to the existing one), but as a non-GIS user, this error doesn't make it obvious to me where the problem lies. It could be tougher in a more complex queryset also. What do you think? ``` ---------------------------------------------------------------------- Traceback (most recent call last): File "/home/tim/code/django/tests/gis_tests/rasterapp/test_rasterfield.py", line 339, in test_db_function_errors RasterModel.objects.annotate(distance_from_point=Distance("geom", rast)) File "/home/tim/code/django/django/contrib/gis/db/models/functions.py", line 239, in __init__ super(Distance, self).__init__(*expressions, **extra) File "/home/tim/code/django/django/contrib/gis/db/models/functions.py", line 94, in __init__ raise TypeError("Please provide a geometry object.") TypeError: Please provide a geometry object. ```
What I mean is that if you call this method twice on the same `SchemaEditor` instance and the `if` pass all conditions on the first time but not on the second the assignment to `self.sql_alter_column_type` will be used on the second method call's to `super()` when it shouldn't.
I think instantiating the browser to check if it works properly is also a part of the "validation" process. I don't see much gain in just checking that provided browsers are "importable" from selenium library. It will be better to keep that part of the error message and trying to instantiate the browsers here instead. Because there are other modules like `remote`, `support` in selenium which would get imported but do not have webdrivers - so these will give `WebDriverException` afterwards during the tests. Also if someone doesn't have the required drivers installed for a particular browser, it will again throw a similar Exception. So the `import_string` is just half of the validation.
Another option is one Andrew suggested to me in django/asgiref#288 (which I need to get back to) which is small and elegant enough that it might be useful to Django-proper, possibly here in `import_string` and more generally where imports happen inside functions/methods (to avoid circular refs) in hot loops, and it looks like: ``` def cached_import(module_name, item_name): modules = sys.modules if module_name not in modules: importlib.import_module(module_name) return getattr(sys.modules[module_name], item_name) ``` A benefit of it would be not having another _separate_ cache (LRU) with a finite hit-rate, and it still avoids going through the import machinery for hits.
Move the new arity checking code into `expressions.Func` also.
Maybe we can add also `, n2__sign=0`.
Remove since this file doesn't contain non-ASCII chars.
Changing DB parameters in tests is not something that we should do, IMO. We can rather use `round()`, e.g. ```python # Round result of distance because PostgreSQL 12+ uses greater precision. ... transform=lambda instance: (instance.field, round(instance.distance, 6)), ```
We should move using named groups in regular expressions to a separate commit, and add a new rule and an actual fix in the second one.
missing a 't'
I think we can add an internal hook `_remove_trailing_nulls()` to the `SplitArrayField` that can be used in `clean()` and `has_changed()`: ```python def _remove_trailing_nulls(self, values): errors = [] null_index = None if self.remove_trailing_nulls: for i, value in reversed(list(enumerate(values))): if value in self.base_field.empty_values: null_index = i else: break if null_index is not None: values = values[:null_index] return values, null_index def has_changed(self, initial, data): data, _ = self._remove_trailing_nulls(self.to_python(data)) return super().has_changed(initial, data) ``` Please add it in the 1st commit, the 2nd commit will contain a bugfix.
Please use single quotes.
These test cases miss the originally reported usage: raise `ValidationError({'code': ErrorList(['error message.'])})`
Unnecessary comma and whitespace.
IMO we don't need a list of all operations in this message, it's too detailed. If someone would like to check the list of operations they can always use `makemigrations --dry-run`. Adding a list of apps should be enough, e.g. ```diff diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py index 81696f11c1..32b1462319 100644 --- a/django/core/management/commands/migrate.py +++ b/django/core/management/commands/migrate.py @@ -227,8 +227,9 @@ class Command(BaseCommand): changes = autodetector.changes(graph=executor.loader.graph) if changes: self.stdout.write(self.style.NOTICE( - " Your models have changes that are not yet reflected " - "in a migration, and so won't be applied." + " Your models in apps [%s] have changes that are not " + "yet reflected in a migration, and so won't be " + "applied." % ', '.join(changes) )) self.stdout.write(self.style.NOTICE( " Run 'manage.py makemigrations' to make new " ```
I'm not sure if this is a good solution, because `p.mugshot.storage != loaded_mugshot.storage` and in the same time `loaded_p.mugshot.storage == p.mugshot.storage` :thinking:
chop "check that" and just state the expected behavior.
Why is VERSION capitalized? Maybe something like: Return a tuple of version numbers (e.g. (1, 2, 3)) from the version string (e.g. '1.2.3').
Personally I prefer the existing hanging style of indentation as it doesn't require breaking things up into so many short lines, however, neither the existing style nor what you've changed it to should throw a flake8 error -- does it for you? We've finished the flake8 cleanup so there shouldn't be any existing errors now.
I think it's better to filter out at the database level to avoid retrieving all table rows.
Use a style like this to avoid long lines: ``` self.assertEqual( "Processed 1 object(s).\nProcessed 2 object(s).\n" "Processed 3 object(s).\nProcessed 4 object(s).\n", command_output ) ```
This leads to somewhat odd behavior. I assume, this is to allow overriding fields from abstract parents. However, maybe a warning is better suited here, since there might be a reason, why 3rd party overrides an existing attribute. I think it's a good idea to warn people, but I wouldn't go as far as to actively prevent people from doing so.
I think, making it clear that it's a database name would help. ```suggestion 'Database "%s" does not support indexes on expressions.' ```
this parenthesis is redundant and white space after 'if' is required. like 'if not isinstance ... dir(current):'
`\n` is redundant because `self.stdout` is an instance of `OutputWrapper`.
```suggestion _, err = self.run_django_admin(args) self.assertNoOutput(err) ```
This docstring is unnecessary.
The other formats.py seem to use `'\xa0'`
There's no need to put the ticket number in the model name. If possible to reuse any existing models, that's ideal.
Just a few more `"` → `'` here.
You should also add an assertion for the imports provided in the second value of the tuple.
This branch is untested. Also, we don't see this with a message without hints: ```python if leaf_migration_nodes[0] in loader.applied_migrations: migration = leaf_migration_nodes[0] raise CommandError(f"Cannot update applied migration {migration}.") ```
add a trailing comma
It should be `Decimal(1)`, not `Decimal(10)`, not sure why tests pass.
It's looking much better! @charettes Do you have a better name in mind? I can't manage to come up with something better and simple.
Unless we deprecate `get_cache`, this is an unused import.
The main issue here is that overriding `DATABASE_ROUTERS` doesn't allow passing initialization arguments to the specified classes hence why I suggested overriding `routers` directly. Another solution could be to make `Router` depend on a class attribute instead and override it in the loop: ``` python class Router(object): target = None def db_for_read(self, model, **hints): return self.target db_for_write = db_for_read @override_settings(DATABASE_ROUTERS=['admin_views.test_multidb.Router']) def test_foo(self): for db in connections: Router.target = db ... ```
I'm about to commit this, but for future reference note that assertEquals is a deprecated alias and should be assertEqual
Chop unnecessary commas.
Presumably the intention is that `secrets` might one day use a different PRNG's on some OS's
Should `to_python()` also have the following to mirror the behaviour from `NullBooleanField.to_python()`? ```python if self.null and value in ('None',): return None ```
I think we should move this and `_validate_supports_expression_indexes()` to a system check `_check_indexes()` with `hint` that _"An index won't be created. Silence this warning if you don't care about it."_ (like we do for constraints).
```suggestion # typecast_timestamp() returns a date or a datetime without timezone. ```
I think this method could be moved to a mixin and shared between the two classes. Using the same 'id' seems fine the the hint text could be customized with a class attribute. For the warning, I'd say something like `"%s default should use a callable instead of an instance so that it's not shared between all field instances." % self.__class__.__name__`
is there a reason to use `sys.stdout.write` instead of just print? also error messages should probably go to `stderr`
class attribute `output_field = IntegerField()` * fairly sure that's acceptable Then drop the `__init__`
Please remove the `unicode` prefix; they are not allowed on Python 3.2 and we're already importing `unicode_literals` from `__future__`.
I think this change is inadvertent as now `actual_test_processes()` is unused.
Not sure we should be special case `replacement` direct string passing. We usually consider strings as field references in all the existing expressions. I wouldn't mind allowing `replacement` to be optional and defaulting to `Value('')` if it's missing though.
make this `'>Error: Seite nicht gefunden<'`
Chop blank line.
Given it's now all `__pycache__`, do we need this workaround? (i.e. could we just revert https://github.com/django/django/commit/51673c146e48ff6230eace39bac18fd555607bee)
```suggestion class SQLCheckCompiler(compiler.SQLCheckCompiler): ```
hmm, I think we should also be recursing on the `sub_match.route` here :thinking:
Co-locate this with Lag and the base class rather than defining alphabetically. Same as First/LastValue.
"Unknown" -> "unknown"
Use `assertIn` instead.
As suggested by Tobias, it should be: ``` class MyEmailBackend(EmailBackend): def __init__(*args, **kwargs): kwargs['timeout'] = 60 super(MyEmailBackend, self).__init__(*args, **kwargs) ```
I think you need to decorate the test method with `@override_settings` so that the original value value of `ROOT_URLCONF` is restored at the end of the test.
For an index I would use other field e.g. `name = models.CharField(...)` because `id` is a primary key, hence it already has an index on most of databases.
members -> attributes
Since EmptyResultSet isn't necessarily related to SQL I think moving it makes sense. `django.core.exceptions` is probably a good place to move it to. The only question is whether we need to deprecate the old location, or at least provide an import in the old location. @akaariai @loic @manfre @adamchainz do any of you have an opinion here? I imagine non-core backends are likely to import this type but I haven't checked specifically. In any case, if the change is made, it should be in a separate commit to catch regressions in the future without impacting 26517 if it needs to be reverted.
It's always better to assert with an excepted value, not only check if a test doesn't crash, so I switched to `django-admin help shell`.
blank line shouldn't be removed probably
I think it would be clearer if `_get_view_func` did the exception handling and returned `None` for this case.
Tripe `"""` for a docstring. Missing period at the end.
Maybe without `invalid`? `"URL route '%s' contains whitespace."` or `"URL route '%s' cannot contain whitespace."`
I think this could be simplified to save some lines now the `return`s are gone: ```python domain, port = bits if len(bits) == 2 else (bits[0], '') ```
This will raise an `AttributeError` on Python 3.3+ since `unittest.mock` is a submodule: ``` py $ python3.4 Python 3.4.1 (default, Jul 11 2014, 12:38:25) [GCC 4.6.3] on linux Type "help", "copyright", "credits" or "license" for more information. >>> import unittest >>> unittest.mock Traceback (most recent call last): File "<stdin>", line 1, in <module> AttributeError: 'module' object has no attribute 'mock' >>> import unittest.mock >>> ```
I would move it to the `DeprecatedMigrationOperationTests`.
I think `finally` isn't needed also.
variable seems unneeded
Please drop this property pattern and instead use plain function calls like in the above csrf failure view tests - we've been removing that pattern for checks tests
@codingjoe I'm not sure we're taking about the same thing. This is about avoiding duplicate check constraints being defined on a model.
Use `drop=True` rather than an arg for better readability. Use a different var for `sql`here, maybe `changes_sql`? It's a little confusing to have the `sql` name reused in the next line.
ditto, "alias cannot be empty"
maybe `AuthorListInvalidGetQueryset` would be clearer
No, the `form_class` kwarg to `formfield()` actually means a form field class. This code is correct. (The naming is that way because in the context of `formfield()` we know we're dealing with a field, but we have two kinds of fields, database and form fields, to worry about.)
Isn't that going to inhibit the previous lines you have added ? Setting sub_message['changed']['fields'] over again twice in a row. Thanks for sharing some of your insight.
I don't think this docstring is required.
The default implementation will be more complicated in the future when we will add db defaults. I think we can leave it is as a property.
A name like `uuid_pk` might avoid confusion with `field.rel` but no worries if you think the current name is fine.
likewise, the last argument to `save_model()` and `save_related()` should be `False` when adding.
My understanding of SubFieldBase is that all it does is call `to_python` whenever any value is assigned to the field. Personally, I wish it were on DateField and friends: being able to pass ISO8601 formatted strings and have them be date/time objects immediately makes for neater test cases.
I don't see a reason to make this a staticmethod. A user might want to use something from the class when overriding it.
https://code.djangoproject.com/ticket/27655 > Use single quotes for strings, or a double quote if the the string contains a single quote.
Alternative using reduce: ```python import operator from functools import reduce def all_valid(formsets): return reduce(operator.and_, (f.is_valid() for f in formsets), True) ```
Defining a `Signal()` instance for testing purpose would be better than relying on model signals IMHO as it would be more explicit. This would also have the nice side effect of not requiring database queries to be run, allowing you to subclass `SimpleTestCase` instead of `TestCase`.
three values: True, False, and ..
, -> .
You don't need to call `bool` since `assertFalse` does this (same goes for the next line).
Maybe: ``` View returning a FileResponse properly closes the file and http response when file_wrapper is used. ```
It could be moved to right after `from_fields` and `to_fields` (it can't go before them because they are actually required and have no default). But IMO there's not much value in this; `ForeignObject` is not public API, and almost nobody (except maybe Django developers, or someone working on some custom type of relational field) types its signature directly. But because it's not public API we're also free to rearrange its signature as we see fit, with no need for a deprecation path, so I'd be fine with moving `on_delete` earlier in the signature.
consider using a more descriptive name than "test_migrations" as I imagine there will be other migrations needed for other tests.
Three suggestions: 1. Strip `<>` chars and print "lambda". 2. Fallback to the original suggestion proposed in the ticket: Use `callable.short_description` if available. 3. Wrap `for field_name in cl.list_display:` with `enumerate()` and use the index in `_coerce_field_name`. (e.g. field-lambda-1_year) The third suggestion is probably overkill for that case.
`IntegrityError` will be raised by a database, because `ORDER BY` clause is omitted in this case. We don't need to do this manually.
I think you should add an explanation what this does or at least add a reference to the ticket to help future readers understand what this branch achieves.
Was already highlighted [here](https://github.com/django/django/pull/13065#discussion_r684521409) but was missed.
Please use single quotes.
Yes. ISTM that it is worth trying to do it via options first and then we can always look to use a different client class if it becomes absolutely necessary. Let's start out with something simple. The other benefit is that we (well, you!) are writing the client class and not linking to a third-party package. As such we can adjust it to fit our needs exactly. (When I wrote the `PyMemcacheCache` backend I even contributed changes to `pymemcache` to address some issues with compatibility as that was preferable to creating another custom client.)
I'm pretty sure you can make the abstract bases once in the test case class level: ``` class ...Tests(...): class SomeBase(models.Model): ... ``` Then reuse them appropriately in the individual test methods, which should only need to create the "bottom" classes? I grepped for `\btype\(` and found a few uses, but none are for "quick" building. I personally think the "tonnes of vertical scrolling" is a small concern compared to having to grok how `type()` works.
We've checked that `old_name_key` is in the `model_relations` there is no need to pass a default value to `pop()`: ```suggestion model_relations[new_name_key] = model_relations.pop(old_name_key) ```
This looks simpler to me: ``` return ( inline.has_delete_permission(request, obj) and '{}-{}-DELETE'.format(formset.prefix, index) in request.POST ) ```
Generally we don't repeat the name of the class/function in which the error occurred in the message, this information is already in the traceback. Also I'm not sure `FieldError` is much better than `ValueError` here I suggest "relation_name cannot be empty" as the message
I think this is an argument to switch to the test client for those tests so you do not manually handle the session
In the `test_nthvalue` Oracle returns empty string `''` instead of `None` for char fields.
You can join this and a couple of other lines. We have a max line length of 119 chars.
Please use the context manager version instead: `with self.assertRaisesMessage(CommandError, "No fixture named 'db_fixture_1' found."):`
I understand but `dict` keys are not like JavaScript objects properties, they don't have to be string as long as they are hashable. Here you can use `key is not None` and avoid the `str()` conversion. Give it a try locally.
How is the schema change related to data loss? I would recommend to have those checks in the next migration, the data migration.
Not sure why this line is required, we don't seem to be creating any `Number` in `setupTestData()` 🤷‍♂️
or just `"TRACE {} {}"`.
wrap docstrings at 79
Please use this style: ``` with self.assertRaises(Restaurant.DoesNotExist): place.restaurant ```
I'd prefer both to support \d -- but no hard feelings.
general note: prefer including trailing commas in lists like this so if more items are added later, we don't need to modify the line again (keeps diffs/git blame cleaner)
You don't need to raise an `IntegrityError`, database will do this for us if necessary.
site -> register_to
```suggestion img = Path(__file__).parent.joinpath("test.png").read_bytes() ```
yeah I think that the crux of the issue is that `Q` and what it resolves to are not expression here but that would be an invasive change to backport. Feels kind of strange to wrap a non-`Expression` in an abstraction called `ExpressionWrapper`.
Maybe :thinking: : ```python # RemovedInDjango50Warning. USE_TZ = True ````
`>` appears to be a typo
This should use `connection.ops.quote_name()` so a separate test for MySQL isn't required.
I would use `assertIn` instead of `self.assertContains` and `self.subTest`, e.g. ```python def test_error_pages(self): request = self.request_factory.get('/') for response, title in ( (bad_request(request, Exception()), b'Bad Request (400)'), (permission_denied(request, Exception()), b'403 Forbidden'), (page_not_found(request, Http404()), b'Not Found'), (server_error(request), b'Server Error (500)'), ): with self.subTest(title=title): self.assertIn(b'<!DOCTYPE html>', response.content) self.assertIn(b'<html lang="en">', response.content) self.assertIn(b'<head>', response.content) self.assertIn(b'<title>%s</title>' % title, response.content) self.assertIn(b'<body>', response.content) ```
nitpicking: use the same quotes as elsewhere
```suggestion assertEqual(len(threads_and_connections), 4) assertEqual(len(set(threads_and_connections)), 1) ```
> Unless someone has an alternate proposal that isn't too invasive, I'm inclined to go with the exception catching that I proposed. We might revisit the issue in 1.11 if needed. Sounds good to me
Yes, that's more helpful for me.
I think slightly nicer is: ``` msg = '...' with self.assertRaisesMessage(ImproperlyConfigured, msg): ```
```suggestion try: with connections['default'].cursor() as cursor: cursor.execute('PRAGMA journal_mode;') value = cursor.fetchone()[0] self.assertEqual(value, 'off') finally: connections['default'].close() ```
Use a single line docstring if it fits: ``` """GET on the add_view.""" ```
The usual pattern is ``` try: import IPython except ImportError: IPython = None ``` No need for an extra variable.
a name like "create_data" seems more semanttic.
I know that this is only meant to land in `1.11.x` wonder if using `u''` prefixes/`force_text()` would make what we're testing more clear.
Please remove the blank line.
chop blank line
As many as we can :smile:
I'd skip the blank line after the class docstring changes. Focus on changing the verbs only.
Please remove this unrelated change.
It might be better to create a separate test class so you can define the new objects right above it instead of having to reference the classes 300 lines above where the test is.
> Do we want to leave legacy_algorithm around for that? (Porbably no) I don't think so.
MySQL/PostgreSQL test failure suggests this query isn't equivalent (unless it really only cares about `.count()` as you had previously). Let me know what you want to do here.
Here's an idea I found [on stackoverflow](http://stackoverflow.com/questions/28346798/python-testing-simulate-importerror) so the skip isn't needed: `@mock.patch.dict('sys.modules', {'IPython': None})`
Could be a personal or project preference for all I know, but does this re-assignment need to occur, instead of just having `return _format_string(f'{number:f}', ...)`? Doubt it matters much, of course.
imo these test cases should reworked to use a `try/finally` pattern to ensure the receivers are always disconnected: ```python a_signal.connect(fails) try: # the test finally: a_signal.disconnect(fails) ``` Alternatively maybe they could construct the signal instances internally to the test methods.
OK, so this is the worry. We're adding `copy_for_child()` API here.
`other_actions` can be an empty list so there is no need to check it: ```suggestion post_actions.extend(other_actions) ```
@ellmetha some checks look at the suitability of the model class for the admin, rather than just attributes on `ModelAdmin`, it's rather presumptive to skip them...
why not? If the database backend cannot support it, it should be controlled by a feature flag not a vendor check.
no blank line please
Have you tried running the tests? `NameError: name 'connections' is not defined` here
We do not skip tests based on vendors unless we absolutely have to. You need to create a backend feature and switch on that. Then you need two tests - one that tests null when the feature is true, and one that tests null when the feature is false. See: `django.db.backends.base.features.BaseDatabaseFeatures`
adding trailing comma
This is unused, please remove it.
Using a semantic name like `Employee` looks better.
`self.assertFalse()` -> `self.assertIs(..., False)`
What I meant was keep this test in the original PR (it passes there, right?) and move the other one that uses `login()` to https://github.com/django/django/pull/6124.
Add period. Also would be helpful to mention what drawbacks a user might see due to this. Otherwise I think the warning will leave users wondering why it's a problem.
"if all childs refer same children", I'm not too sure what it means. Also maybe the `num_childs` var could be changed to `num_children`.
Oh yes. I don't know why that is, it's an odd restriction, I remember now I didn't keep it in #6980 because I didn't understand why it existed.
~~Worse is that this is potentially vulnerable to SQL injection attacks as `value` could be user-provided input...~~ Just seen that options are converted to `'true'` or `'false'` above (which works as all options are currently booleans).
This change is not required, please revert it.
don't camelCase variables in Python. Go with underscores, "abstract_user", or just "user".
To keep backwards compatibility, we need to add `enclosures=None` after `updateddate=None`.
Exceptions on teardown are surfaced if no exceptions happen during run_checks.
I added a short docstring but without `is provided by developers ...`, this is not a strong argument, a lot of things are provided by developers but we don't mark them as safe. I'd say that's how it is, the decision was made a lot time ago :shrug:
Are we really testing the Content-Type setting here? It strikes me this test is really about the Content-Disposition behaviour. We should focus it to that. (With a separate case for testing 'Content-Type' branched (such as guessing the content type from the filename.)
Hah. You just got ahead of me!
Same concern with `later` here.
You want to run this test only if the backend has `can_rollback_ddl` instead. The reason for this is that when the feature is false the operation and the record won't be performed in a transaction and your test will systematically pass. https://github.com/django/django/blob/58d1e9aa8ab505912389e7cd019a6f21785ad4bf/django/db/backends/base/schema.py#L86-L100 That should be `@skipUnlessDbFeature('can_rollback_ddl') instead.
this doesn't seem ideal. Generally we use something like this to skip a test: ``` @unittest.skipUnless( connection.vendor == 'postgresql', "This test applies only to PostgreSQL") ``` However, I am not sure if we want to run this on other backends besides SQLite. We also have the skipUnlessDBFeature and skipIfDBFeature which may be useful instead.
@aryan9600 I have doubts about that. If you look at the user report it mentions that the issue happened when using `Meta.indexes = [models.Index(fields=['article', 'date'])]` which is equivalent to `Meta.index_together = [('article, 'date')]`. I wouldn't be surprised if `unique_together` and unique `constraints` were affected as well since these are backed by b-tree indices.
With `os.path.join()` the `""` adds a trailing slash, but that won't happen with `pathlib`. ```suggestion _, err = self.run_django_admin(["startapp", "app", Path("apps") / "app1"]) ```
I strongly believe that using two booleans instead of these constants would be more readable. This should also reduce the number of changes in the existing API.
Why use exec? You can just write contents of the string in the function.
`%s(%r)` -> `%s (%r)`
You don't need to change the template here as long as get/set_source_expressions reads/writes x/y in the right order. ``` def get_source_expressions(self): return self.y, self.x def set_source_expressions(self, exprs): self.y, self.x = exprs ```
This is a field error, so IMO it's fine to mention only clashing model in the hint, e.g. ```diff diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py index a2e939fa3d..b4babe30ac 100644 --- a/django/db/models/fields/related.py +++ b/django/db/models/fields/related.py @@ -1433,15 +1433,16 @@ class ManyToManyField(RelatedField): if field.remote_field.through is model: return field.name opts = model._meta.auto_created._meta - clashing_obj = '%s.%s' % (opts.label, _get_field_name(model)) + clashing_model = opts.label + clashing_obj = '%s.%s' % (clashing_model, _get_field_name(model)) else: - clashing_obj = model._meta.label + clashing_model = model._meta.label + clashing_obj = clashing_model if settings.DATABASE_ROUTERS: error_class, error_id = checks.Warning, 'fields.W344' error_hint = ( - 'You have configured settings.DATABASE_ROUTERS. ' - "Verify that '%s' and '%s' are correctly " - 'routed to separate databases.' + 'You have configured settings.DATABASE_ROUTERS. Verify ' + 'that %r is correctly routed to a separate database.' ) else: error_class, error_id = checks.Error, 'fields.E340' @@ -1451,7 +1452,7 @@ class ManyToManyField(RelatedField): "The field's intermediary table '%s' clashes with the " "table name of '%s'." % (m2m_db_table, clashing_obj), obj=self, - hint=(error_hint % (m2m_db_table, clashing_obj)) if error_hint else None, + hint=(error_hint % clashing_model) if error_hint else None, id=error_id, ) ] ```
You can avoid the assignment. ```suggestion Author.objects.create(name='one') ```
:thinking: As far as I'm concerned it will not change a level of indentation: ```python if name in self.annotations: if not allow_joins: annotation = self.annotations[name] ```
Ahh, yes. I missed that both are instance lookups :facepalm:
Ditto about the class `__name__` change.
I added `continue` to skip processing invalid locales.
include trailing comma on this line so if more items are added later, we don't need to modify it again
Do we need to check the `piece` in this branch too? If so, check it before the `if` statement.
Which spec is that? Is there an RFC to cite? We might omit this until the validator uses HTML5 validation.
I will revert this changes. Test failure is related with invalid identifier, if we changed `named-group` to the `named_group` all works as expected and the current version of this warning is still valid.
This will also have to take into account `filter(m2m__field=val1, criteria=m2m__otherfield=val2)` != `filter(m2m__field=val1).filter(m2m__otherfield=val2)` as explained in [spanning multi-valued relationships](https://docs.djangoproject.com/en/1.11/topics/db/queries/#spanning-multi-valued-relationships)
``` if conn.vendor == 'postgresql': conn.introspection.data_types_reverse.update({ ... if conn.connection is not None: ``` (register_type_handlers() also checks `conn.vendor == 'postgresql'` so that avoids that same check for the non-postgres case)
IMO it's more readable with dict of args, e.g. ```suggestion args = {'locale': schema_editor.quote_name(self.locale)} # Before PostgreSQL 10, the provider parameter doesn't exist, # so only set it if it's not the default `libc`. if self.provider != 'libc': args['provider'] = schema_editor.quote_name(self.provider) # Before PostgreSQL 12, the deterministic parameter doesn't exist, # so only set it if it's False. if self.deterministic is False: args['deterministic'] = 'false' schema_editor.execute('CREATE COLLATION %(name)s (%(args)s)' % { 'name': schema_editor.quote_name(self.name), 'args': ', '.join(f'{option}={value}' for option, value in args.items()), }) ```
Please use `assertRaisesMessage`. You can convert existing instances in the test files you touch in the same commit.
Chop "Makes sure" prefix in favor of stating the expected behavior as described in https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/.
Yes there is a chance it may be needed by future expressions. The subquery expression that @schinckel is putting together may end up needing it too. Purity is also a reason though. The error isn't really sql specific so it shouldn't be pushed down into the sql implementation - much nicer to have it somewhere in the frontend. History tells me it used to live in `django.db.models.query` until it was moved into `django.db.models.sql.query` during the queryset refactor - but I think that was just because it was used only within the sql module at that point.
I don't remember anything in particular, I just refactored incrementally and ended up there.
``` return files.getlist(name) if self.multiple else files.get(name) ```
add trailing comma
I'd suggest to remove the :param: stuff in the strings you've touched as that's not really something we've adopted throughout the code base.
```suggestion '' if not self.opclasses else ", opclasses='%s'" % ', '.join(self.opclasses), ```
Small reword: "This is the algorithm from section 3.1 of RFC 3987, slightly simplified since the input is assumed to be a string rather than ???." (same wording could be used in docs)
Only do the regular expression check if `schemes == '__all__'`.
The class name seems a bit specific -- not sure any other tests would fit in this class (the existing organization is a bit poor).
Instead of this line, put `bucket` into parameters, like `def __init__(self, *args, bucket, **kwargs):`
@claudep, does this look okay for translators? I'm not sure if it allows apply localization formatting to the numbers.
```suggestion Path("locale").joinpath("_do_not_pick").mkdir() ```
This doesn't actually work if `name` and `ext` are both too long: ``` pycon >>> import os >>> orig_name = 'name'*200 + '.' + 'ext'*200 >>> name, ext = os.path.splitext(orig_name) >>> name = name[:255 - len(ext)] + ext[:255] >>> len(name) 709 ```
I'd drop that last line since it doesn't really escape according to the rules suggested there.
`middleware` might not be the best variable name since it's used for authentications backend as well. What about ```suggestion subclass = import_string(subclass_path) ```
```suggestion return f'SELECT {cache_key} FROM %s ORDER BY {cache_key} LIMIT 1 OFFSET %%s' ```
`return corresponding text for use in an OVER-clause window-frame.` Might also be worth noting that `start` is the preceding offset from the current row, where `end` is the following offset from the current row.
You can just include this in your actual call below, i.e. `runner.log('logging message', level)`.
```suggestion ', '.join(f'{field} = EXCLUDED.{field}' for field in map(self.quote_name, update_fields or ())), ```
These two lines are indented 4 spaces too much. Also chop the blank line above.
We might as well always convert `app_module.__path__` to a list and avoid catching the `TypeError`.
Unnecessary call to `.keys()`.
Yup, this extra line won't hurt, IMHO.
The test fails on non-sqlite, probably because of PKs not being reused.
Small nitpick, but can we please rename this variable? "expected" to me in this context means that the server would expect this value. I'd like a variable naming here that indicates it is coming from the client. The referer code below uses `referer` or `request_*`. I guess `origin` as well as `request_origin` would be fine (not sure how to call `expected_scheme` & `expected_netloc` though). Open to naming ideas :)
I checked this carefully and when connector is `XOR` we always have to push the whole branch to `HAVING` clause.
This is not related with `allows_group_by_pk`, it should contain two columns: ```python self.assertEqual(len(grouping), 2) ```
should use ModelAdmin.get_search_fields()
To keep the patch clean, please revert unrelated whitespace change.
I think we should raise an error if someone is trying to use `durable` in the `TestCase` class, instead of ignoring it, e.g. ```python if self.durable and not self.ensure_durability: raise .... ```
I was thinking we could only skip this test if the system timezone wasn't equal to `settings.TIMEZONE` but it looks like it would require a lot workaround to get things working correctly.
Can't figure out when the `AttributeError` is supposed to happen, I'm gonna try to remove its handling and see what breaks in the test suite.
alternative, create a "MigrationMock" factory ```py def MigrationMock(): m = Mock() m.check.return_value = [] return m # usage m = MigrationMock() assert len(m.check()) == 0 assert m.check.called ``` https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value
```suggestion self.assertIsNone(table_description[1].collation) ```
fields -> options comma after auto_now_add
I guess this point became moot when I moved to `Node.copy()` and merged `Node._new_instance()` into it.
In this context, I think "session_model" is more meaningful. I think it's not intuitive what "session_class" means. If we follow the pattern elsewhere, I guess "get_model_class" could be the way to go.
IMO, we can use `self.template_string` without an extra variable.
Isn't `is_active is False` redundant? We already check if it's truthy in the first condition so if we get here it must be falsey.
```bash ~/repo/django> ./tests/runtests.py backends/postgresql Testing against Django installed in '/home/felixx/repo/django/django' with up to 8 processes backends Found 1 test(s). System check identified no issues (0 silenced). E ====================================================================== ERROR: backends/postgresql (unittest.loader._FailedTest) ---------------------------------------------------------------------- ImportError: Failed to import test module: backends/postgresql Traceback (most recent call last): File "/usr/lib/python3.8/unittest/loader.py", line 154, in loadTestsFromName module = __import__(module_name) ModuleNotFoundError: No module named 'backends/postgresql' ---------------------------------------------------------------------- Ran 1 test in 0.000s FAILED (errors=1) ~/repo/django> ./tests/runtests.py tests/backends/postgresql Testing against Django installed in '/repo/django/django' with up to 8 processes tests Found 23 test(s). Creating test database for alias 'default'... Cloning test database for alias 'default'... Cloning test database for alias 'default'... Cloning test database for alias 'default'... Creating test database for alias 'other'... Cloning test database for alias 'other'... Cloning test database for alias 'other'... Cloning test database for alias 'other'... System check identified no issues (0 silenced). EEE.................... ====================================================================== ERROR: backends.postgresql.test_introspection (unittest.loader._FailedTest) ---------------------------------------------------------------------- Traceback (most recent call last): File "/usr/lib/python3.8/unittest/case.py", line 60, in testPartExecutor yield File "/usr/lib/python3.8/unittest/case.py", line 676, in run self._callTestMethod(testMethod) File "/usr/lib/python3.8/unittest/case.py", line 633, in _callTestMethod method() File "/usr/lib/python3.8/unittest/loader.py", line 34, in testFailure raise self._exception ImportError: Failed to import test module: backends.postgresql.test_introspection Traceback (most recent call last): File "/usr/lib/python3.8/unittest/loader.py", line 436, in _find_test_path module = self._get_module_from_name(name) File "/usr/lib/python3.8/unittest/loader.py", line 377, in _get_module_from_name __import__(name) File "/repo/django/tests/backends/postgresql/test_introspection.py", line 6, in <module> from ..models import Person File "/repo/django/tests/backends/models.py", line 8, in <module> class Square(models.Model): File "/repo/django/django/db/models/base.py", line 113, in __new__ raise RuntimeError( RuntimeError: Model class backends.models.Square doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS. ====================================================================== ERROR: backends.postgresql.test_operations (unittest.loader._FailedTest) ---------------------------------------------------------------------- Traceback (most recent call last): File "/usr/lib/python3.8/unittest/case.py", line 60, in testPartExecutor yield File "/usr/lib/python3.8/unittest/case.py", line 676, in run self._callTestMethod(testMethod) File "/usr/lib/python3.8/unittest/case.py", line 633, in _callTestMethod method() File "/usr/lib/python3.8/unittest/loader.py", line 34, in testFailure raise self._exception ImportError: Failed to import test module: backends.postgresql.test_operations Traceback (most recent call last): File "/usr/lib/python3.8/unittest/loader.py", line 436, in _find_test_path module = self._get_module_from_name(name) File "/usr/lib/python3.8/unittest/loader.py", line 377, in _get_module_from_name __import__(name) File "/repo/django/tests/backends/postgresql/test_operations.py", line 7, in <module> from ..models import Person, Tag File "/repo/django/tests/backends/models.py", line 8, in <module> class Square(models.Model): File "/repo/django/django/db/models/base.py", line 113, in __new__ raise RuntimeError( RuntimeError: Model class backends.models.Square doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS. ... ```
seems like this could be a separate test
I think we typically prefer list comprehensions in cases like this. I think the following is equivalent: `[os.path.abspath(basedir) for basdir in basedirs if os.path.isdir(basedir)]`
I think you could make a good use of `collections.Counter` here.
@rmtobin are you referring to the unpickling logic of `ModelBase`? Are `models.Model` subclasses even pickleable if they haven't been discovered/loaded yet? What I'm saying is that doing the following and removing the `copyreg.pickle` stuff should just work? ```python if attached_to: class_dict['__qualname__'] = '%s.%s' % (attached_to.__qualname__, name) ```
I think `continue` is unnecessary.
Please wrap at 79 chars.
Alphabetical order please: `autocomplete` before `autofocus`.
I haven't checked out the code but I don't think this test is appropriate; [`deferred_sql` is only executed at `editor.__exit__`](https://github.com/django/django/blob/57a3d96ff57abffa8e7fbe3fd972a5ee39bd0fec/django/db/backends/base/schema.py#L112-L117) which means `SET CONSTRAINTS` will not be executed before the `UPDATE schema_node`.
We can simplify this with `captured_stdout()`, e.g. ```diff diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py index 4b4fe4bda2..56494d58d1 100644 --- a/tests/auth_tests/test_migrations.py +++ b/tests/auth_tests/test_migrations.py @@ -6,6 +6,7 @@ from django.apps import apps from django.contrib.auth.models import Permission, User from django.contrib.contenttypes.models import ContentType from django.test import TestCase +from django.test.utils import captured_stdout from .models import Proxy, UserProxy @@ -178,12 +179,6 @@ class ProxyModelWithSameAppLabelTests(TestCase): codename='display_proxys', name='May display proxys information', ) - - stream = io.StringIO() - old_stdout = sys.stdout - sys.stdout = stream - - update_proxy_permissions.update_proxy_model_permissions(apps, None) - - sys.stdout = old_stdout - self.assertIn('A problem arose migrating proxy model permissions', stream.getvalue()) + with captured_stdout() as stdout: + update_proxy_permissions.update_proxy_model_permissions(apps, None) + self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue()) ```
This seems a little Herculean to maintain the existing check. (`E004`) If we are to push forwards with this, maybe we should remove that one? 🤔 (I appreciate it but, is re-adding the old add_to_class() method not a sign that it's done? 🤷‍♀️)
`connection.atomic_blocks` makes `connection.in_atomic_block` and `connection.savepoint_ids` somewhat redundant.
```suggestion if ( ```
`Book` model doesn't have the `first_book` attribute, moreover this test is not related with fix. I think we can chop it.
We have exactly the same (similar) code in `WSGIRequest.__init__()`. Maybe we can add an internal hook to the `HttpRequest`? (in a separate commit) e.g. ```python def _parse_content_type_params(self, meta): self.content_type, self.content_params = cgi.parse_header(meta.get('CONTENT_TYPE', '')) if 'charset' in self.content_params: try: codecs.lookup(self.content_params['charset']) except LookupError: pass else: self.encoding = self.content_params['charset'] ``` after that we could just call: ```python self._parse_content_type_params(self.META) ``` Let me know if it works for you, I can handle this.
We can reuse `can_return_columns_from_insert` here: ```python can_return_rows_from_bulk_insert = property(operator.attrgetter('can_return_columns_from_insert')) ```
Please remove this new line.
indexing a TextField
For simplicity, I think `db=db` I fine.
@codingjoe `setUpClassData` gives us a staff user: ```python cls.user = User.objects.create_user( username='user', password='secret', email='user@example.com', is_staff=True, ) ```
Can they be named LTrim, RTrim, LStrip, RStrip? I don't think we ever have lowercase words ("trim", "strip") in class names. Admittedly they are classes that are used more like functions, but the same is true for all the existing ones.
Add period and I usually put the space on the previous line.
This docstring can be single-lined.
Please revert the unrelated change to an existing test.
I think the test should be fine to run on Python 2 as well. We use `from __future__ import unicode_literals` to avoid needing the u prefix.
We update `var` in the https://github.com/django/django/blob/f03ba0ad52e6f1deb42f022090f226573b22f630/django/template/base.py#L800 so I'd revert to the `var[0]`.
```suggestion # Map fields which some backends may not be able to differentiate to the # field it's introspected as. ```
GZipMiddleware makes a strong ETag weak.
Alphabetized, here and in docs.
I think the current form is fine. I would leave it.
The first condition is superfluous. line is a str and therefore `'charset=CHARSET' in line` will be False if line is the empty string.
Question: Isn’t this going to break if `error_class` is provided in the constructor? I would have expected: ```suggestion '<div id="{}_errorlist"><ul class="{}">{}</ul></div>', self.field.id_for_label, ``` A few lines up – If I read this right this would lead to having a space in the id, which is not allowed. ```python self.error_class = 'errorlist {}'.format(error_class) ``` Additionally `_errorlist` seems to be hard-coded as the ID suffix in the `aria-describedby`.
This has two undesireable side effects: 1. It generates file names without a hash, defeating the purpose of `HashedFilesMixin`. This will result in incorrect caching while `HashedFilesMixin` precisely exists to provide cache invalidation when static files change. 2. It lets errors slip through silently when a file doesn't exist. This may be considered a feature or a bug, depending on the developer's expectations. (Some developers consider that a missing CSS file or image isn't an issue. I don't know if they would also advocate not raising an error when a Python module isn't found ;-) I consider that it should raise an exception.)
We usually follow this style when querysets take multiple lines ```python Book.objects.filter( name='Practical Django Projects', ).annotate( discount_price=F('price') * 2, ).values( 'discount_price', ).annotate(sum_discount=Sum('discount_price'))
IMO `%(deferrable)s` is missing :thinking:
a single line looks okay here
Objects from child models where the parent's m2m field uses `related_name='+'` should be retrieved correctly.
I think `data={}` can be omitted.
You don't need `.lower()` here. It's already lowercase from within `reload_model()`.
As above, wrap the format in quotes. "Your URL pattern '{}' has .."
Include a trailing comma in cases like this so that if more items are added later, this line doesn't have to be modified again.
To match the old code this should be: ``` if (zoneinfo_root.exists() and not zoneinfo_root.joinpath(*self.TIME_ZONE.split('/')).exists()): ``` You are missed the second `.exists()`.
