```suggestion - Run C(helm repo update) before the operation. Can be run as part of the package installation or as a separate step. ```
I think we don't need to patch `datetime.datetime.fromtimestamp()` and `datetime.datetime.utcfromtimestamp()` methods as they just return a datetime object from patched `time.time()`.
This class isn't really providing any value. Usual practice is to create the client in main and then call a describe_task_definitions method.
if the user hasn't provided status module.params.get('status') should be == "enabled" since it's defaulting to that in the arg spec. You should be able to just do `if state == 'present' and module.params["status"] == "enabled":`
As per other PRs, you don't need to repeat the option name.
There's no need to wrap the strings like this. Our project lint settings accept up to 160 characters wide. ```suggestion result['warnings'].append('Some configuration commands were unmanaged, review unmanaged list') if result.get('invalid'): result['warnings'].append('Some configuration commands were invalid, review invalid list') ```
Since the module makes no changes, it's safe to claim support for check mode: ```suggestion supports_check_mode=True, ) ```
Change description to match `enable` and `disable` dvSwitch.
This will remove check for datacenter from line 215 ```suggestion dc_obj = self.find_datacenter_by_name(datacenter_name=self.params['datacenter']) if not dc_obj: self.module.fail_json(msg="Failed to find the datacenter %s" % self.params['datacenter']) objects = get_all_objs(content, vimtype, folder=dc_obj.networkFolder) ```
Okay. the default recursionlimit in python is 100 levels. (But it might be set lower if someone has optimized their python build for low memory situations). We'll just have to wait and see if we get any bug reports and fix this then.
To make it reliable, please record the time when the module started and pass it here, so we always list only relevant events.
yes, it's ok to iterate and change, as long as users will get simpler structure :-)
Use the ec2 helper function `ansible_dict_to_boto3_tag_list`
I would switch the statements, test for dict, test for list, else raise error.
Again, the name for that task was a copy-and-paste from the integration tests. It would probably better to use, eg. ```yaml - name: Enable 'telnet-client' windows feature ```
We should probably also include a sample and/or doc note that shows that the route table is associated via `azure_rm_subnet` - was definitely the simpler choice to implement that way, but we need to tell people where that happens.
You can remove these imports except ec2_argument_spec
```suggestion SubnetIds=module.params.get('subnet_ids'), ``` and here as well
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
(Additional whitespaceânumber of spaces not multiple of 4.)
CamelCase for consistency? This one could go either way since it's a new arg, but would depend on if there's a bigger plan to move everything else in this module toward snake_case
even cleaner ```yaml - include_vars: "{{ item }}" when: item is file loop: - "{{ ansible_os_family | lower }}.yml" - "{{ ansible_distribution | lower }}.yml" - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml" - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version.replace('.', '-') | lower }}.yml" ```
This protests if I only specify TargetGroupArn and only uses TargetGroupName (to then get the ARN).
Can this use `b_output_path` from line 291? ```suggestion b_output_path, ```
but to_boolean doesn't convert values to booleans. It's really normalize_options(). It's just that the only implemented normalization at the moment is for boolean values.
This should be a @staticmethod and self removed.
Incorrect description; "If remote gateways can be used on this virtual network."
use ```from ansible.module_utils.vmware import get_parent_datacenter```
Strange default. I would simply remove it.
Ok, not sure why this one is still open.
Could you add a RETURN block? You can find an example [here](https://github.com/ansible/ansible/blob/42e63d429c63e078e406d95edebd8f86cd44cfbd/lib/ansible/modules/cloud/google/gce_mig.py#L180)
Use whatever fixture names make sense. Personally I'd probably name the fixture `XenAPI` since that's the import it is replacing. Then there's no need to assign `XenAPI = fake_xenapi`. Setting `autouse=True` only loads the fixture for the test automatically. If you want access to that fixture as a local, it still needs to be a function parameter. The benefit to autouse is that it guarantees the import will be mocked, even if the test doesn't require a reference to the fixture. However, there's nothing wrong with specifying an autouse fixture as a function parameter. Doing so simply makes the auto-instantiated fixture available as a local within the test function. To guarantee correct fixture order, declare that the `fake_xenapi` fixture is used by the fixture providing `ansible.module_utils.xenserver`. Modifying `sys.modules`, or making other changes to global state, outside of a test fixture or function will apply those change to all unit tests (everything under `test/units/`) when pytest collects the tests before they are executed. Since we run unit tests with the pytest `--boxed` option, each test is run in a separate Python process after the initial collection is performed. This means that any global state changes made in-process by a test function are discarded at the end of that test function, but all changes made during collection are shared. Imports handled during collection will result in changes to `sys.modules` that will be shared across all tests. This is fine for regular imports. However, the mocked import for `XenAPI` is specific to the tests in `test/units/module_utils/xenserver/`, so it should be restricted to those tests. If another test, such as one for a xenserver module were to also mock `XenAPI` they would conflict.
One last thing I thought of: it may be good to catch `AttributeError` and `ValueError` if an invalid value is passed for `namespace`. Otherwise we get a stacktrace. ```suggestion try: uuid_namespace = uuid.UUID(namespace) except (AttributeError, ValueError) as e: raise AnsibleFilterError("Invalid value '%s' for 'namespace': %s" % (to_native(namespace), to_native(e))) ```
they always were, most lookups don't take a dict as argument, older lookups, like this one, had created their own interfaces, most others use a 'single string' k=v space separated options (also something we are moving away from)
please use explicit imports `from ansible.module_utils.basic import AnsibleModule`
```suggestion special_num = [3, 6, 15, 28, 51] ```
This won't work if 'name' is an alias, rather than the parameter name.
When quoting an option choice/value, enclose it with `C()` instead of a single quote, e.g. `'present'` becomes `C(present)`.
Should also be "path"
```suggestion from ....config import ( ```
this is not in core and will result in exceptions if not present, use same pattern as we do with boto
I think this may be confusing to a reader now. They should be the same
This should not be moved. They're libraries from the current project so go below the imports for stdlib and third party libraries.
Please an alias allowing `password_expiration_days`
Connection plugins return bytes for stdout and stderr (the callers are responsible for transforming to text or not). So this needs to remain with to_bytes().
@marcin-sucharski check against current development, I've merged stringification at run_command so you might not need to do this anymore.
Just a thought, and this was a problem I created, `user` was meant to be used of the repository that needs to be accessed, not for auth. I think we should change `repo` to be the full path of the repository (`username/repo`) and then we can split it for use later on.
```suggestion elif docker_object == 'networks': ```
So maybe `list(dict)` is a better match for the current implementation, and then we can use `len(a) == len(b)` shortcut safely.
`{}` is not compatible across python versions that support format, use `{0}` or `%` instead
Should have a default set to `present`.
The results of vmdk_disk_path_split are not used anywhere here (they are used inside find_vmdk, but it calls the routine directly.
``timeout`` is passed, but never used ``module`` is passed, but never used Judging by the actual function, it's a bit confusing. The return data (dict) appears as if it was designed to be used as ``**kwargs`` for the ``fetch_url`` function, but you're accessing the dict directly. As such I would recommend either returning a tuple, and passing the data that way, or using the ``kwargs`` approach.
as in modules, we do not wan't to print/exit, capture the missing library in a variable and report it missing in a fail_json call.
It should not only give an example. But some yaml files, you can refer the servicebus moduleâs doc
In order to improve readability (meaning the change described below isn't required): * `delete_cert`, `import_pkcs12_path`, `import_cert_path` and `import_cert_url` never return (either `exit_json` or ` fail_json` are called) * it's quite disturbing that `changed` isn't set (and it doesn't need to be set) when `delete_cert` is called then i would rather call `module.exit_json(changed=changed)` here (then keep `module.exit_json(changed=False)` unchanged at the end the file.
please add the version added ~~~diff + version_added: "2.10" ~~~
This isn't really how we usually go update operations in Ansible. Is there way of checking if a change needs to occur and then making or rather than making a request and seeing if it was changed. The benefit of the former approach is that when running in check mode you can see if a change needs to happen while in this scenario you wouldn't know.
Mind putting this magic value into a constant with a descriptive name? I'd read much better if it was ```suggestion sys.exit(RC_CLI_INIT_FAILURE) ``` or something like that.
instead of: ``` for host in self.hosts: â¦ ``` I would have write: ``` for host in self.hosts: firewall_system = host.configManager.firewallSystem if firewall_system is None: continue results['rule_set_state'][host.name] = dict() for rule_option in self.rule_options: rule_name = rule_option.get('name', None) if rule_name is None: self.module.fail_json(msg="Please specify rule.name for rule set" " as it is required parameter.") if rule_name not in self.firewall_facts[host.name]: self.module.fail_json(msg="rule named '%s' wasn't found." % rule_name) rule_enabled = rule_option.get('enabled', None) if rule_enabled is None: self.module.fail_json(msg="Please specify rules.enabled for rule set" " %s as it is required parameter." % rule_name) current_rule_state = self.firewall_facts[host.name][rule_name]['enabled'] if current_rule_state != rule_enabled: try: if rule_enabled: firewall_system.EnableRuleset(id=rule_name) else: firewall_system.DisableRuleset(id=rule_name) fw_change_list.append(True) except vim.fault.NotFound as not_found: self.module.fail_json(msg="Failed to enable rule set %s as" " rule set id is unknown : %s" % (rule_name, to_native(not_found.msg))) except vim.fault.HostConfigFault as host_config_fault: self.module.fail_json(msg="Failed to enabled rule set %s as an internal" "error happened while reconfiguring" " rule set : %s" % (rule_name, to_native(host_config_fault.msg))) results['rule_set_state'][host.name][rule_name] = dict(current_state=rule_enabled, previous_state=current_rule_state, desired_state=rule_enabled, ) ``` @Akasurde what do you think ? It's more readable and it returns an helpful error if the rule name is set but not found.
The line length limit [enforced by CI](https://github.com/ansible/ansible/blob/869449e288cc02986984daec430086f6b6fe656f/test/runner/lib/sanity.py#L317) is 160 characters.
I think the general idea (at least how I see it) is that there are doc fragments (quasi-)standardizing the attribute names, and assuming attribute users (i.e. modules) don't supply required arguments such as `description`, ansible-test does some validation by making sure that you only use attribute names that come from docs fragments you include. If the turbo fragment lives next to the turbo code, and everyone using the turbo code uses that docs fragment, the name (and description) of the attribute(s) in there is basically standardized.
Remove this line. If it is required, there is no default (not "no default"). But I would add a default message.
not a blocker but it is usual to use `yes/no` instead of `True/False` in the docs for bool types.
Line is too long.
even better would be to show what specific operation we were attempting, but that does not seem clear w/o parsing the uri itself (for that, the caller should be processing the exception)
One way to do this is something like: ```yaml unit = size[-1] units = list('b', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y') try: multiplier = 1024**units.index(unit) except ValueError:: e = get_exception() module.fail_json(msg="No valid size unit specified. %s" % e) ```
It used to confuse me too, but I think I now got used to it after a (long) time ;)
Please put this on a single line. Lines can be 159 characters wide.
`default=None` is the default, it's not required.
there is no need to version params for new modules
Include a trailing comma at the end of this line.
this got named use_backend
Personally i'd like it better if this was `changed_state`, for instance, as that better indicates the purpose of this variable, looking at the code
When quoting an option choice/value, enclose it with `C()` instead of a single quote, e.g. `'present'` becomes `C(present)`.
Should add a point here saying not allowed with `I(identity)`. Should also say the value is the `C(distinguishedName) of the path to search from.`
Please also replace the `raw_cloud_env` this in the following context
shouldn't this be like the following? ~~~python if rule == _rule['rule'] or rule == _rule['id']: ~~~
```suggestion except (OSError, IOError): ``` Since you are not using `e`.
This change is not valid. It is only updating a single word within the license, and not updating the full license header. Additionally, in order to do this, you will need to get approval from the following additional authors to relicense the code: Qalthos ganeshrn
I'd like to see us not pass the results of `load_options_vars` into `VariableManager`. Instead we should just use `load_options_vars` directly in `VariableManager`, and handle whatever complications there may be with using `CLI.version_info` from `VariableManger`.
This regexp should be put into a constant, especially since it is reused multiple times. Also, maybe it makes sense to precompile it (and potentially others) with `re.compile()`.
create/remove are not really states, use 'present' and 'absent'
Could as well drop this now: ```suggestion if not context and arg == 'state': ``` because the intersection with an empty set is always an empty set which will result in no iterations of that for-loop
Thanks for the PR! The top level spec actually needs to removed from example as we have deprecated them.
Again, the else here is unneeded and unwanted.
Ditto about the deprecation notice
```suggestion - Canary settings for the deployment of the stage. ```
there is 'non AnsibleModule' version in lib/ansible/module_utils/common/process
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` required_together ```
This will not be idempotent, is that intended? We should try to support `present`, or if this is not possible warn users that there is no idempotency.
```suggestion result['command'].append(to_native(command)) ```
Here as well: ```python console=( otypes.Console(enabled=self.param('serial_console')) ) self.param('serial_console') is not None else None, ```
Don't specify this. It's implicit.
tempted to have no default and make it 'yes|no' boolean, use 'default' behaviour when `None`
you can use `state` to avoid the 'or' to the user
I'd argue that most content developers also don't need to be running devel, maybe something like this? ```suggestion 'you are actively modifying the Ansible engine, or trying out features under development. This is a rapidly changing source of code and can ' ```
As fair I as know, this is used only for block storages? Can you maybe add a note here? Someone can think that he obtain info about other storages as well..
It requires `botocore>=1.13.21`
I would omit the 3, it seems like in the internal API you can set as many recovery actions as you want. It's just the GUI that limts to 3.
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
Since this is the current option being described, I think I would leave the `I(..)` out here. ```suggestion - The kind of storage. ```
When hitting an error you must exit with module.fail_json
Should be specific about what's being forced in the arg name, something like: `force_removal_with_mapped_luns`. These tend to grow over time, and generic names like `force` are problematic for someone just reading the playbook to know what it does without consulting the docs.
this could probably be simplified with using a dict of dicts: ``` power_policies = { 'high-performance': { 'key': 1, 'short_name': 'static' }, 'balanced': { 'key': 2, 'short_name': 'dynamic' }, 'low-power': { 'key': 3, 'short_name': 'low' }, 'custom': { 'key': 4, 'short_name': 'custom' } } ``` Then it is just a matter of using `power_policies[policy]['key']` and `power_policies[policy]['short_name']` Not really worth a lot of worry over, just a suggestion
`Specify authentication algorithm.` No need to repeat what's in `choices:`
Using AnsibleAWSModule also means you can remove importing HAS_BOTO3 and the HAS_BOTO3 check, as the module checks it.
`version_added` is not needed, because the module itself will be added in `2.10`.
a try/except LookupError with a fail_json around this should be sufficient to handle any potential api response data changes gracefully.
The braces are not needed ```suggestion if not response: ``` However, I don't think `session.get` ever returns `None`. You should also check if it's not an error (HTTP 500) because otherwise `response.json()` later will fail.
Would be great to give a brief spiel about the 2, I know `windows` doesn't support explicit credentials so maybe say `password` is not required for that. I would also put this in a new list entry and start with a capital and end with a full stop.
When delegating, I'd think that we'd need to run the facts module for the delegated host rather than for the inventory_hostname host....
This should probably be in the same if statement as `if self.state == 'present'`, this way you know the disk exists and so the initial present check is not required and you never really want to run this additional operation if `state: absent`.
`read-onYly` should probably be `read-only`
Never waste a good opportunity for improving this too :-)
instead of a catchall here, you should give more relevant errors in _discovery and _add_device, which you already do in some cases, but then this catchall obscures
```suggestion description: Whether the domain is eligible for submission of "EV" certificates. Will never be C(true) if I(ov_eligible) is C(false) ```
Please add dot at the end.
```suggestion short_description: Login to the CloudGenix API endpoint ```
I've also double checked what happens in the scenario you mentioned, and below is the result I receive. So I actually this this method is fine, and there is no need to change it Apart from ensuring the params are not None before checking if they are an existing file. ``` BotoServerError: 400 Bad Request\n<ErrorResponse xmlns=\"https://iam.amazonaws.com/doc/2010-05-08/\"> <Error> <Type>Sender</Type> <Code>MalformedCertificate</Code> <Message>Unable to parse certificate. Please ensure the certificate is in PEM format.</Message> </Error> ```
PyVmomi helper class already calls `connect_to_api`
check is redundant as you already flagged as 'required'
For this failure, can you include the exception? Something like `module.fail_json(msg="Couldn't connect to AWS: %s" % e.message, exception=traceback.format_exc())`
Yes, this should use `AnsibleUndefined` in order to get the recursive Undefined behavior introduced in that class.
```suggestion - Note, when the interface changes namespace it loses ```
Or did you mean ```suggestion raise exc from None ```
```suggestion url = "/".join([base_url, index_set_id]) ```
```suggestion type: str choices: [ absent, present ] ```
I know. There's an alias for 'server'. Calling it `host` keeps it consistent with the modules and Python client. As a user, you can use `server` or `host`. The Python client calls it `host`, and uses `HOST` in the env variable.
Also, you should reorder this to first have `description`, then `type`, then `default`, then `choices`, then `version_added`. I've changed all options in all docker_* modules accordingly (in #52422), which unfortunately requires you to rebase (together with some other PRs which got merged today).
If we allow non-Mutable mappings here, then we need to put a try: except around the call to reduce in the if recurse: later as giving it two non-mutable mappings will throw an error. I dislike that non-mutable mappings would be accepted with recurse=False but cause an error with recurse=True so perhaps we should track down why we're getting non-mutable mappings or perhaps we should enhance merge_hash to be able to operate on non-mutable mappings.
I would insert one new line in front of this.
I have had a look at the description and the [failed tests in shippable](https://app.shippable.com/github/ansible/ansible/runs/120738/5/console), my understanding for checking that is that this is because the `ensure_libs` function was changed but the tests were not updated. What I am suggesting above is not to change the `ensure_libs` function but to simply use it. This will mean that we won't have two functions `ensure_libs` and `ensure_required_libs` that contain the same logic.
Somehow this (+ the following line) doesn't work and prevent the module from working.I haven't digged deeper yet,
This isn't really how we usually go update operations in Ansible. Is there way of checking if a change needs to occur and then making or rather than making a request and seeing if it was changed. The benefit of the former approach is that when running in check mode you can see if a change needs to happen while in this scenario you wouldn't know.
+1 for this.
This is probably also broken for the same reason as the one above.
parent name also needs to be 'safe'
``` auth_key=dict(type='str', no_log=True) ``` -> ``` auth_key=dict(type='str', no_log=True, fallback=(env_fallback, ['MERAKI_KEY']), ```
No worries- we assumed it was an oversight. ;)
```suggestion content = to_text(response.read(), errors='surrogate_or_strict') ```
This shouldn't be needed, just do `to_bytes(cmd, errors='surrogate_or_strict')` without the PY3 conditional. Doing `""` on Python results in a byte string so `to_bytes()` will just be a no-op for that version. Also one style we try to follow in Ansible it to prefix any byte strings to `b_`. That was we can easily infer the type of string being used based on the variable name. If you have an explicit native string (bytes on 2, unicode on 3) then we prefix with `n_`. Otherwise a general text string has no prefix.
The `to_bytes` should be on the `self._basedir` instead: ```suggestion b_opath = os.path.realpath(os.path.join(to_bytes(self._basedir), b'r_group_vars')) ```
Because this parameter was added for backward compatibility with **vmware_dns_config**. We could add it as an alias and keep it forever, but I am not in favor of keeping lots of aliases for the same purpose.
> Well, as I state in PR description, version in trunk practically disables ec2.py cache when using python 3. The idea was to replaces `hash()` call with any hashing function that gives stable results between script runs. Anything from hashlib module will do, `md5` does not have any advantage. One important note: `md5` will not be available on some systems (such as FIPS compliant systems). It's probably better to use `sha256` (as `sha1` could also be removed). > hashlib functions require byte string as input. Python 2 and 3 differ in what is stored in `__file__` variable: python 2 has simple string and in python 3 all strings are unicode. You could do ```.py from ansible.module_utils._text import to_bytes ``` and then ```.py cache_name += '-' + hashlib.sha256(to_bytes(__file__)).hexdigest()[:6] ``` This will work for both Python 2 and Python 3.
```suggestion destination_vcenter_password=dict(type='str', required=True, no_log=True), ```
Remove the 'a'.
If one of both is required, it is better to force this as part of the argspec.
`shlex.join` was added in Python 3.8, so an alternative is needed here.
Values we return are in bytes.
```suggestion return super(cls, new_cls).__new__(new_cls, *args, **kwargs) ```
This should reflect `2.8` as we're currently in the [Ansible 2.8 development cycle](https://docs.ansible.com/ansible/devel/roadmap/).
Right now read_timeout will always be set as there's a default value. You either need to remove this or remove the default value on the read_timeout doc entry.
Passwords should not be written to disk. Is there a reason you can't use `pexpect` to provide the password? I did a quick proof of concept using that method: ```python #!/usr/bin/env python import pexpect def main(): password = 'testing' child = pexpect.spawn('ssh-keygen', ['-q', '-b', '2048', '-t', 'rsa', '-C', 'demo', '-f', '/tmp/keyfile']) child.expect('Enter .*:') child.sendline(password) child.expect('Enter .*:') child.sendline(password) child.expect(pexpect.EOF) if __name__ == '__main__': main() ```
This can be set, but not in the netflow/ipfix, config. It can be set on the dvSwitch itself using its configSpec: https://code.vmware.com/apis/358#/doc/vim.DistributedVirtualSwitch.ConfigSpec.html#switchIpAddress
This could use more explanation.
we have existing byte/bit functions in module_utils
Small typo here probably: `Retreived -> Retrieved`
If you check for the folder path here [compile_folder_path_for_obj] (before breaking) you could return the result and ignore all the other strategies.
Since it's Py2, and controller, we should just ignore py2.
```suggestion version_added: "2.8" ```
```suggestion description: Returns a dictionary for every extension OID ```
CI failure due to missing newline at end of file: ``` 2017-02-06 02:26:40 ERROR: PEP 8: lib/ansible/modules/system/java_cert.py:282:11: W292 no newline at end of file (current) ```
This does not need to be wrapped.
No need to import boto3
Maybe rename this to substitute_crypto_req since it's replacing the one from requirements.txt with the one we autodetect rather than simply appending.
Ahh that makes sense I've re-read it now and can see what you mean. I would prefer it to be just `name` to keep it consistent with the other stuff but will defer to you for the final decision.
For integers please: use `type='int` remove the `isdigit` check from `check_params`
I'm assuming the output in `result['msg']` is fairly descriptive of the specific type of error so that the user could tell what went wrong and how to fix it.
I don't see this change in latest commit.
```python if threshold_mode == "absolute": delimiter = ' ' else: delimiter = '%' min_val = int(min_threshold.split(delimiter)[0]) max_val= int(max_threshold.split(delimiter)[0]) congestion_control = dict( control=mode.lower(), threshold_mode=threshold_mode, min_threshold=min_val, max_threshold=max_val) ```
Typo. "Allows you to setup rules to quickly and easily block sets of ip addresses."
Okay, if it's used by lots of modules it should go to the other PR.
too many apis
we might want different types of lock, exclusive, read_shared, etc
self.zone += '.'
useless try/except, several of these in the code
Missing doc string for 'labels'
we can probably change it to a list, still this would be the wrong executable in some cases as it does not allow per host config, its also redundant to fallback to /bin/sh as it always is set (default is /bin/sh already). In other cases it will still be a problem, specially when privilege escalation is involved, due to the quoting.
```suggestion - List of Role Definition permissions. ```
`elapsed_sec`/`'elapsed_seconds`? I personally dislike time values/args without units...
C/P error, should be `AWS ElastiCache is down`? Same on L450
```suggestion description: If promiscuous mode is enabled. ```
...right, we're already in netcommon. Carry on, then.
no real docs, but you can look at other modules that do it, i.e copy
that's a good idea. But we're concerned about changing the logic so late. One question. With type: bool, can we still have three values: True, False, and None? We're using None to know whether the user wants a change or does not care about the current state.
```suggestion if fail_on_autoremove: fail_on_autoremove = '--no-remove' else: fail_on_autoremove = '' ```
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
dont use yaml direclty, use `from_yaml` as it will handle prioritizing C libyaml and other things (like always being safe)
Please remove the `else: changed = False`. That doesn't make sense. Instead, de-indent the `changed = True` above. Once `are_dicts_different(expect, current_state)` is `True`, `changed` should be set to `True` no matter if check mode is active or not.
Right -- but is it the same format as os-release? If it's not the same format you'll need to add different parsing rules for that file below.
I think it's better to set them to null if they always existed before - unknown key would behave differently than a key that exists but is set to a null value and we don't want to break things for people if possible. Thanks very much for diving in to this.
It's worth catching BotoCoreError rather than NoCredentialsError (as that will catch ParameterValidation exceptions too).
How about I just want to list all LB in this subscription? It can accept None value
Even if you look at it in detail, these things are easy to overlook - when you wrote them yourself. This is why it's good to have someone else read docs as well ;)
code changes look good ... some look unneeded like the order of arguments above ... but not show stopper.
This will be falsy in case of `0` values which is probably not exactly what you want. Maybe you want this? ```suggestion if params['blkio_weight'] or params['blkio_weight'] == 0: ```
Those lemurs at shippable sure need to work harder! ;-)
You set `tr` here but don't do anything with it. The code will just continue along and probably fail at 366 `include_file = templar.template(include_file)` because `include_file` is None.
Yes, but we can address this in another release.
There in no module in VMware space, which is absent / present for enable / disable but we can add `state` with multiple choices like `[ absent, present, enabled, disabled ]` .
Note: you don't have to use set explicitly here. The set methods can work with an iterable (which tuple is)
If a parameter is not required, you don't have to add `required: false`. It's implicit unless you state `required: true`.
No, you still have to check `HAS_BOTO3` (imported [here](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/cloudfront_facts.py#L229) and checked [here](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/cloudfront_facts.py#L558) )
That issue is for relative import support in the `import` sanity test. If we're fixing the `module_utils` matching in `validate-modules` then it should take into account all of the necessary patterns.
I propose: `expect = disk['size'].rstrip('tgmkb')` It allow use to fail (later) if the user try to use something like '1gb500mb'.
This should be `type: bool` IIRC.
This information is used by Ansibullbot so list should be in format "name (@<github_handle>)"
The `basedir` path will need to be bytes to avoid unicode errors. Something like this: ```suggestion b_basedir = to_bytes(context.CLIARGS['basedir']) collections_search_paths.update([b_basedir]) default_collections_path = [b_basedir] + default_collections_path ``` I did not test this. I'm just guessing from looking at the test failure.
Don't do this. The old way is much more pythonic. And it's much harder to see *your* changes as a result
Ok, that makes sense. Thanks for the great explanation.
`You must set C(PUREFA_URL) and C(PUREFA_API) environment variables`
ah, for some reason i thought 'True' was default, ignore me. ....
would you mind minimalizing the example for state=absent to the things required: ~~~yaml - name: Remove a vpc offering local_action: module: cs_vpc_offering name: my_vpc_offering state: absent ~~~
```suggestion into namespace I(netns). ```
I believe the previous 3 lines can be deleted.
Total time, in UNITS, to run stress for.
I don't think this will work the way you expect with Python 2/3. I don't *think* we'll ever get `unicode` inputs, but if someone did a `!!python/unicode sometext` in their play it would show as unicode.
Just put this on one line (or two if needed for line lengths) ``` from a.b.c import x, y, z from a.b.c import u, v, w ```
Never raise an exception, fail the module instead
should be `type='path'`
I don't think the `lambda` is necessary here. You should be able to set [`return_value`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value) instead.
With all I saw I think that you need to extend your schema: 1) have a string `msg` key, because I saw you putting strings instead of dict there sometimes 2) some structure for extra info: either one dict with all data or a set of separate scalar keys (which is probably easier to manage) Think of it as a public API: whoever will run your module will register the result and this whole structure will be available to them to use/inspect. Try to think of the most useful way to reuse this data you return.
Can this be added in agrspec as choices as well? Probably by having this list as a global variable.
```suggestion - List of paths to include. ```
```suggestion self.module.fail_json(msg="The role ID isn't valid %s" % to_native(not_found)) ```
Do not change the variable name throughout the code. That is not necessary.
Don't quote strings when that's not necessary, and add spaces in Jinja variables for readability. ```suggestion msg: TCP port {{ item.port }} by pid {{ item.pid }} violates the whitelist ```
`validate_certs` and default should be `true`
> it's dangerous to set subscription_id only since azure credential is a set of subscription id, service principal credential. There is a difference between the credentials a user needs to have in order to work on some object and the the identification of the resource being created. As far as I understand the implications of this change, it allows one to explicitly specify under which `subscription_id` some resource should exist/must be created. eg. An availability set has an id like: `/subscriptions/<subscription_id>/resourceGroups/<resource_group>/providers/Microsoft.Compute/availabilitySets/<name>`. In this case there is a `subscription_id` but no service principal specification. I think it's fair to argue that one should also be able to explicitly specify the credentials that need to be used for that specific resource access/creation. Though a sensible fallback to the first matching credentials for that specific `subscription_id` would work in most cases. Edit: hit update too soon, mainly grammar fixes
`result['changed']` must be set to `False` before the loop, then result from previous iteration must not be lost, use something like `result['changed'] |= False`
Why uppercase? I think the standard is to use lowercase. It's bad practice to pass args through that use * and ** to unpack. Better to be explicit about what arguments are being passed in.
I am pretty sure this will fail to run, since concatenating strings and arrays is not something python supports. You will need to add a loop over the `self.systems_uris` and then incorporate all of the responses into final result.
This is probably more a bigger-picture usability thing with inventory plugins, but it seems like making the plugin do this validation is error-prone, and potentially opens the door to malicious or poorly-written plugins to consume stuff they shouldn't. A realistic setup might have multiple cloud inventory plugins enabled (eg, I'd argue that all the ones we ship in the box should be enabled), which means there's a lot of refusal going on. Regardless, it seems like for config-based plugins like this, that this should be handled by the engine, not the plugin itself. Topic for broader discussion, I'm sure.
To be consistent with other modules, this should be validate_certs, not validate_cert.
You can import HAS_BOTO3 from ansible.module_utils.ec2 below, instead.
```suggestion query = '%s=%s' % ('UUID', uuid) ``` Since single quotes are used everywhere else.
I think this validation can be dropped too. it's only `name` which is required=True. (plus we wouldn't even reach this function without finding a definition by name)
```suggestion - Allows a pre-defined MAC address to be assigned to the cloned VM. ```
This increases the chance of collision and should be changed back to 9999.
Instead of manually creating log files such as this, it's preferred to use the `module.debug(.........)` method so that the Ansible controller is in charge of deciding whether the logs should be displayed.
inventory plugin, not module ... also we can use 'short form' for licenses now
Same, `device-mac` or `device-mac-address`.
The current behavior is: * if the user did not specify `env` (i.e. `self.env is None`), don't compare. * if the user did specify `env`, compare user's `env` to the service's `env`. * if the service's `env` is empty, treat it as `[]`: this simply means that no env variables have been set for the service. So this does not ignore empty lists, but treats them correctly. (What it doesn't do is consider order - you're totally correct on that one.)
Add Python3 boilerplate ```python from __future__ import absolute_import, division, print_function __metaclass__ = type ```
This should also accept the deprecated args.
```suggestion - name: Replace after the expression till the end of the file (requires Ansible >= 2.4) ```
AFAIR the flag is `failed`, not `fail`
'auto' is not a valid value to return from this fact
You should handle the case that `time_str` is not actually a string.
SD is per DC, so cluster will work as well, but still you don't have `cluster` param specified by user, only SD.
compare_aws_tags returns the tags to add and the tags to remove. The tags to remove are in the format of a list of keys. You could call that once in main rather than handle it in each function (you'll need to pass True as the last argument to compare_aws_tags, so it returns the list to remove if state is absent).
Fair enough. It is not a hard requirement.
Are these the only valid options, in which case you should add `choices: ['SG_TYPE_STRING', 'SG_TYPE_KEYVAL'] and similar in `argument_specs`
I think this needs to move out one indentation level to match `Field`
So this should extend the argument_spec that you define in `module_utils/nso.py` (which in turn should match whats in the docs fragment)
update description, remove dump
basic is now a real import, since ansiballz were introduced
Shouldn't this be `When I(containers) is C(yes)`? (Same for the others.)
```suggestion if not HAS_OVH: self.fail_json(msg=missing_required_lib('python-ovh'), exception=OVH_IMPORT_ERROR) ```
Definitely want to only do this sleep if changed is true, since we don't have to wait for propagation if no changes were made.
I'm not sure the `if seconds` makes sense here since we'll never get to this point if `seconds` is defined.
what if empty result ? This should be tested also we can have a different TTL per record value, not only per record if i'm correct
[PEP 8](https://www.python.org/dev/peps/pep-0008/#blank-lines): There should be two blank lines before a class.
Use to_native() with the parameter errors='surrogate_or_strict' here. (the default error handler is surrogate_or_replace. That is appropriate for informational things as undecodable/encodable values will have a replacement character substituted. For dictionary keys or other data that you would rather throw an error than risk data corruption, surrogate_or_strict is appropriate.)
`self` is no need
note, this is not a blocker but you can use a generator expression here instead of a list comprehension. it could save on some system calls (calling os.path.exists) but I doubt that will be a noticable optimization so it's really just style.
in any case, deprecations should always be a list, unsure how a dict is making its way here
```suggestion assert isinstance(wrap_var(set(['foo'])), set) ```
Use `mocked_generic_connection_modify` fixture.
Slightly longer key names are ok - in this case, can you use `password` instead since "pwd" can be confused for "print working directory".
I wonder if there are more correct than wrong uses of `get` :) I mainly know its use in `route53`, where it shouldn't be a state.
you shouldn't need to create an intermediate in-memory list here. Also, `str.startswith()` supports checking multiple values: ```suggestion out = "\n".join( line for line in out.split('\n') if not line.startswith(('You are using', 'You should consider')) ) ```
use this instead ``` module.get_bin_path('yum', required=True) ```
that depends on the plugin, it should not be required by the common code .. though those plugins should not be calling this method either
Yeah, but does this code works well, when updating some attribute via that? As far as I read it correctly it doesn't.
add_group creates and returns a 'sanitized' group name, to avoid warnings you might want to use `self._sanitize_group_name(name)`
```suggestion - name: Ensure that /exports/nas key in auto.direct map is absent ipa_automountkey: ```
Shouldn't be needed
You don't have to inherit from object if you have the boilerplate ```__metaclass__ = type```
Instead of type checks like this, use the `isinstance` operator like: ``` if isinstance(new_value, str_to_type[modifiable_params[parameter][1]]):` ```
I don't see this change in latest commit.
And just because we show signs of OCD. The items in `description:` should end with a dot. This is not true for `short_description:`, there we do not allow a dot. Isn't life beautiful like that ? :-P
The things being set here are the manager network protocols, so I think a better name would be something like `SetManagerNetworkProtocols`. Though that is a bit long. But since the category is already `Manager`, that part of the name could be eliminated. That would leave `SetNetworkProtocols` (and `GetNetworkProtocols` in redfish_info).
If you turn this into ```suggestion if not os.path.exists(collection_output): _build_collection_tar( collection_path, collection_output, collection_manifest, file_manifest, ) return ``` you could reduce some nesting which improves readability.
Thanks, you can create a new PR using the code available in #47271, test it and let me know.
Could you please changes these to 'present' and 'absent'? then state will match to all other modules and will not cause any confusion with customer/user.
There is no need to add quotes here. Please remove them from all modules.
@felixfontein Maybe this could be moved to `AnsibleDockerClient.__init__()`? Let it accept minimum api / docker-py versions as parameters.
If it's not required, you can leave out `required: false`.
Why add this? Unless I'm missing something, `interface_table` isn't used at this point
If the lockfile has gone away while you were attempting to read it, wouldn't you want the ansible module to continue instead of failing? Related, if the lockfile disappears at any time while we're attempting to decide if it's valid, we likely want the module to continue. So we probably want to ```try-except``` around the body of this function and return False if the exception tells us that the lockfile no longer exists.
Note: this is usually expressed as: ``` python if not full_version: ```
dont do this, now we have 3 parsers, we shoudl move parsing/json to module_utils and use from there
The standardized parameter is **validate_certs**. I'd rather stick to the standards for this one. If you use the internal urls API, this would automatically be covered.
This doesn't have to be quoted.
Can be simplified if you do `type='int'`.
set the type to list then
Needs a metadata block ``` ANSIBLE_METADATA = { 'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community' } ```
Only the type is needed here, not the default value, so just `:type cmd_verbosity: int` is needed.
shade isn't gonna be here anymore - see recent changes to the module utils. we have an sdk module returned now. That said - 2.6 and beyond have a hard requirement on openstacksdk - so we can probably skip this version check.
Easier to read if written like this: ``` python VALID_ARGS = tuple(frozenset(BASE + FROM_ARGS + OTHER_ARGS)) ```
values in choices and default for bool should be `yes/no` according doc of ansible. it is a convention by Ansible. `required` should be true/false as it is a flag to show it is required.
```suggestion except (OSError, IOError): ``` Since you are not using `e`.
Yeah, the way kubectl did it was to allow the user to specify a condition in the status field of an object. I think (even if we don't add this now) we'll end up needing to allow some flexibility in the wait condition. We could also ignore kubectl wait and just allow the user to provide a JSON path and value, and we could just wait for the path to equal the value in the requested object. Regardless we should still have good defaults for the most common resources, so if we end up needing that flexibility we could probably just add another `wait_condition` object down the line.
`validate_certs: no` is less secure and so, we should avoid to use it in our example.
How about lower-case? ```suggestion choices: [ 'dns', 'email', 'manual', 'webserver'] ```
As mentioned before, the correct parameter is `state ` not `status`. Please correct this example.
I'd move this block into it's own method since fetch_file will likely need it as well.
Maybe it's better to return `value` and `value_pretty`? Or `value_bytes` and `value`. We should try to make it as easy as possible on the user. For example in Postgres you usually use byte values with a suffix, so it should be easy to use it like that in the module. For example if I want to compare values I shouldn't bother with units etc, just compare my value to the registered value.
I prefer `if not module.check_mode and change_string:`.
Please remove the `else: changed = False`. That doesn't make sense. Instead, de-indent the `changed = True` above. Once `are_dicts_different(expect, current_state)` is `True`, `changed` should be set to `True` no matter if check mode is active or not.
boto3_conn now handles region problems, no need to do it in the module
```suggestion - Status of the primary location of the storage account; either C(available) or C(unavailable). ```
It took me a while to figure how 'name' could be in DOCKER_RESERVED_IMAGE_NAMES. And then it hit me, `docker_container`, and probably `docker_image`, split the `image` parameter on ':', and assume that the first element is 'name', and the second element is a 'tag'. I think it would be preferable to have the code recognize when it receives an ID or partial ID value, and search accordingly. It would be nice if this could work with partial IDs, but this code will not support that.
Since this is a new module, this should be fixed from its beginning: ```suggestion supports_check_mode=True, ```
```suggestion - Must be in the same resource group as VPN gateway when specified by name. ```
```suggestion description: String that represents the octal permissions of the destination directory. ```
this should note the version on which these requirements were added
incorrect with `default` specified; remove
You can remove the brackets here.
@pascalheraud You can check https://docs.ansible.com/ansible/latest/dev_guide/developing_python_3.html#import-ansible-s-bundled-python-six-library `from ansible.module_utils import six` and then `six.moves.urllib.parse.quote_plus`
The description needs to have a trailing dot. (The short_description does not)
@pierremahot we'll need a test for this
Is there a reason why this can't be a bool option, most modules just have `validate_certs` as a boolean option for this behaviour and it would be nice to be similar.
```suggestion allow_downgrade: true ```
This note probably no longer applies, unless you'll be making a Windows version. Since this module will not work on Windows, it should be noted. (at least I think it won't? All the windows modules use powershell so Â¯\\_(ã)_/Â¯
There is a missing `os.path.join()` otherwise you get `TypeError: append() takes exactly one argument (2 given)`.
This can just be ``` if module.params.get('version') is not None: return str(module.params['version']) elif module.params['alias']: return str(module.params['alias']) ``` And that would be functionally equivalent.
This doesn't seem right to me - you may not need the `catch_extra_error_codes`
So we tend to not do the else if the previous if-block returns from the function. The else is unneeded.
Since you return above, unnest the `raise` here.
The routing file should be parsed once per invocation of validate-modules instead of once per module.
```suggestion - name: Test VMware Tools Connection Plugin for Linux ```
```suggestion action: remove ```
The next `if` should come first. The module should die if not all DBs exists no matter whether it's in check mode or not.
While you can create dict comprehensions in python 2.6, you don't need to here: > tags (dict or list) â Either a dictionary containing name/value pairs or a list containing just tag names. If you pass in a dictionary, the values must match the actual tag values or the tag will not be deleted. If you pass in a value of None for the tag value, all tags with that name will be deleted. ``` tag_remove_list = [x for x in tagdict if x not in tags] ``` The 2.6 equivalent, for reference, is ``` dictremove = dict((x, None) for x in tagdict if x not in tags) ```
You could even rename the fixture to something other than `fake_xenapi` if desired.
The use of 'no' is problematic in YAML since it must be quoted to be a string. If it is not quoted it turns into a boolean False, which is not an accepted value according to `choices`. So we may want to use a different value to disable this. ```yaml master_use_gtid: disabled ```
```suggestion - Network backend to use for this definition. Currently supports `networkd` (default) and `NetworkManager`. ```
It seems network integration test is failing because of PR #47345, hence reverting the PR
[PEP 8](https://www.python.org/dev/peps/pep-0008/#blank-lines): There should be two blank lines before a class.
I'd recommend adding a main() and a 'if __name__ == __main__: main()' here, but thats optional.
Can remove this one. If there is a credentials issue it should happen when the connection is created, I think.
can we just merge/update the dict instead of putting it in state, so the return results are on the root level.
Note -- Looks like you have 'min' as a valid subset but in this current version of the code it's not being used to control whether this is run. Either need to make use of it or remove 'min' as an option so that it's clear that this portion of fact gathering is always run.
connection = module.client('storagegateway')
It would be great to see an example rather than just None
`import_role` supports those keywords, but for inheritance, for include it applies to the task itself, the original phrasing was more accurate
Yes, present usually is the default state. In some cases there is no default state (which means the user is expected to provide it explicitly).
As per naming convention, the name is `get_lldp_global_facts`
Maybe even better: ```suggestion new_item['aliases'] = sorted(new_item['aliases'] or []) ``` To convert `None` to an empty list.
Make sense to me. Thanks for info.
Sounds a strange behavior to me to apply the change only on the first matched NICÂ when the definition does not indicate a single object. Either apply change on all matched NICs or fails sounds more logical to me.
is there a reason why you have a native str, I would have assumed it was a byte str beforehand for a reason. I know the tarfile is very particular about the type of string being used.
This line is responsible for the python 3.5 syntax error. Change it to the following to fix: ```python print(json.dumps(data)) ```
Not possible to glean the volume type from the result of get_volume and choose the right operation automatically? If not, these admonitions need to be in the docs, not in the code...
This block would be a bit more legible, if you checked use_hostnames, then assigned to a temp variable whichever label the user has requested, and then appended that. Something like (pseudopython): ``` this_host = host if not use_hostnames: this_host = ip if frontend: frontends.append(this_host) else: backends.append(this_host) ``` This is admittedly a style thing, but I think it would be more readable/shorten a few lines.
This is also not properly idempotent- you're not comparing to the existing port list, so always returning "changed: True" even if it's already in the right state.
iirc we decided to allow configure commands as part of cli_command to support config commands that result in a command prompt
```suggestion if self.state == "present": ```
add an alias to `domain` as `domainname`
What's the point of this change. I can't see any other usage of `delegate_args` below in this method.
String or list are allowed here so no change is required.
Shouldn't be required.
I think this should be 'exit' instead of 'abort'
Since you only check keys of the same object in the same fashion, you could collapse this using parameterize (for example, extend with other params): ```suggestion @pytest.mark.parametrize( ('fact_name', 'fact_value'), ( ('year', 2020), ('weekday', 'Saturday'), ), ) def test_date_time_facts(date_collector, fact_name, fact_value): assert date_collector['date_time'][fact_name] == fact_value ``` This will generate a separate test per each param while allowing you to keep the test function logic the same. https://docs.pytest.org/en/stable/example/parametrize.html
For EOS, following line is also required after this line: ``` commands.append( 'no switchport mode trunk') ```
It's not the most ideal code that I wrote, so if you feel you could improve things, especially function and variable naming â go for it :) For example, function names normally designate actions and start with verbs (like `get_logical_rows()` or `extract_logical_rows()`), as opposed to variables, which are typically names of some things / nouns. Keep in mind that I did a very quick sketch, so I might've missed some things, I rely on you here to check whether it fixes the issue and doesn't cause new problems.
@sivel Maybe we should have a check for this in Shippable CI, as I see more and more modules using requests. ``` [dag@moria ansible.git]$ grep -rlE '(import requests|from requests)' lib/ansible | wc -l 35 ```
```suggestion - This module can be used to add domains to or remove them from IBM Spectrum Accelerate storage systems. ```
+1 to adding that note :)
I see. However, if I don't specify `resource_pool` in my playbook I end up with a `null` value for `resource_pool` and the message: ` "msg": "A specified parameter was not correct: spec.location.pool"`.
You can raise from here.
Your module is named `gitlab_project_variable` don't use plural in your example
Requires a trailing dot.
Please remove choices for `type='bool'`, as `bool` accepts yes,1,true, etc.
I think things like this will traceback in check-mode because changed hasn't been set to a default value (Should default to True). Also, for this particular module, check_mode doesn't seem to be doing anything so you probably just want to say supports_check_mode=False when creating the AnsibleModule.
```suggestion return to_text(v.ip) ```
i would mention this plugin is Windows specific
`Public key to add to .ssh/authorized_keys.` Missing full stop May not be run as root
Default type is `str` so you don't have to set it explicitly. Just use `size=dict(),` instead. The same bellow.
I'm also making the rash assumption that the underlying API is itself idempotent (eg that it will succeed if you ask it to set a state that it's already in)- if not, this is a much bigger problem.
For `mode == 'persist'`, you have to both check the current value *and* the value in the `mysqld_auto` config.
`U(https://github.com/StackIQ/stacki)` will generate a link in the docs
use `choices`, ditch inline "possible values" text
Just style, there should be a blank line between stdlib imports and the next set of imports (in this case, imports from ansible)
actually .. uptime is a bad check then, since you get a race condition in the case of 'chained reboots' not something that will happen often, but you can get to the point in which the previous uptime < current uptime even though you rebooted. You should check the uptime vs the time since you started the reboot.
need a `version_added`
When required is false, it can be left out (since it is the default).
The `: ` is confusing the yaml parser, you can remove it or quote the whole line.
okay, but it still find it misleading from reader's point of view. i think, it's important to make it better maintainable. P.S. I've hid concat based implementation, once noticed that it's not only about lists (which was not obvious).
```suggestion - C(number_of_workers), number of workers for app service plan. ```
This one will fail, since selfsigned_notBefore and selfsigned_notAfter have changed their meaning from the initial draft and don't have default values any more.
Should have been module.fail_json
I think we don't need to patch `datetime.datetime.fromtimestamp()` and `datetime.datetime.utcfromtimestamp()` methods as they just return a datetime object from patched `time.time()`.
As per naming convention, the name is `get_lldp_global_facts`
This currently does not handle lists of items. We need to support it here.
```suggestion out = run_gluster(['volume', 'heal', name, 'info'], environ_update=dict(LANG='C', LC_ALL='C', LC_MESSAGES='C')) ```
You forget to make the change.
```suggestion if not all([hostname, username, password]): ```
use `get_best_parsable_locale` instead `from ansible.module_utils.common.locale import get_best_parsable_locale` though you might need to set it in `main()` after instantiating the `module`
Why uppercase? I think the standard is to use lowercase. It's bad practice to pass args through that use * and ** to unpack. Better to be explicit about what arguments are being passed in.
I would split these ('install' and 'install --offline -p -r etc') into two separate tests so any failures are more specific and granular.
You could probably do something like ```diff - self.dns4=' '.join(module.params['dns4']) + self.dns4=' '.join(module.params['dns4'] or []) ``` This works fine for me.
Meh, what you have is fine for now- they're basically singletons already, so that constructor arg is probably superfluous, but I don't think there are any active plans to kill it... Just IIUC whatever reason it existed for in the first place doesn't exist anymore. So this looks good to merge to me.
Additional task can be executed before action on entity is executed by passing `pre_action` parameter to method. Another task can be executed after action is executed, by passing `post_action` parameter to method. -> Task executed before an action on entity can optionally be specified in `pre_action` parameter. Task executed after an action on entity can optionally be specified in `post_action` parameter.
probably should just be an error as we won't be able to find the role and later on we'll fail with 'role not found'
`A list of virtual machine names starting with the given regex`
Since all of these appear to be constants, it seems to me that making them tuples instead of lists would be good to avoid accidentally modifying them.
You can actually skip all the expanduesr business by using `type='path'` instead, then Ansible will parse out a fully qualified path automatically.
Small merge error - need to delete these 2 lines: ``` elif command == "GetPsuInventory": result["psu"] = rf_utils.get_multi_psu_inventory() ```
This should also support whether a regions were limited via `RAX_REGIONS` or `~/.pyrax.cfg`
```suggestion with open('/var/run/secrets/kubernetes.io/serviceaccount/token') as file: ```
`then` -> `the`
Follow pattern as above. And revert to the correct spelling of `transmitted`.
```python for line_number, line in enumerate(lines, 1): ```
```suggestion label support, respectively to identifiy the container by label on later usages. ```
Falling back to `None` is not helpful here ```suggestion self.executable = self.module.get_bin_path(module.params['executable'], required=True) ```
```suggestion iap_port=dict(type='int', required=True), ```
Indentation level of `return` statement need to be increased.
```suggestion - This module can be used to add domains to or remove them from IBM Spectrum Accelerate storage systems. ```
As far as I can tell, the 'in_use' is never used.
You are taking me wrong here. I am just saying that adding additional library will add overhead to people who are using this module and people who will maintain it. I am not saying to port other GitHub modules to use `PyGithub`. One way could be using GitHub REST APIs directly rather than relying on any third party Python modules.
Use a `seealso:` sections for external information.
I would recommend to add `check_mode` for this module. You can check other modules in VMware space to see how it works for them.
That's def cheap enough :)
yeah, to_native is the way to do this correctly. Otherwise sooner or later we will end up with UnicodeErrors being thrown. Gotta start somewhere so might as well start with new code.
use ```from ansible.module_utils.vmware import get_parent_datacenter```
Can `state` default to `present`? I usually expect this, I'm not sure if the flaw is with me or not :)
```suggestion - Exactly one of I(name) or I(group_id) must be provided. ```
```suggestion security_groups=dict(type='list', elements='str'), ```
You seem to have gone through the process of making this class a context manager, but don't use it as a context manager.
I don't see any check_mode related code.
Same for other description.
catchall exceptions make for bad UI, we normally prefer a user friendly message, detailing what failed and hinting possible resolutions vs passing on API messages that are normally only useful to programmers
And if you are using `insert` together with `insert_relative_to` then `insert_position` will be calculated automatically
I've been thinking that it would be a good idea to prefix parameters with the subcomponent they belong to (with the exception of metadata fields). So anything under spec, could be spec_<field name>
I you want to catch all exceptions and do not need to do something with the exception, do it like this: ``` python except: self.user = u'Anonymous' ``` If you do need to do something with the exception, do it like this: ``` python except Exception as e: do_something(e) self.user = u'Anonymous' ``` BaseException should almost never be used in user code as it will catch things like sys.exit().
This can be a key-value map with key as the fact name and value as the pattern to be searched for
As noted in the PR summary, the condition you're attempting to check against is `KeyError`. What's the motivation to cast the net wider and catch all exceptions and pass when one is caught? I'd prefer this to narrow the scope of the exception catching just in case some other exception were to occur, it isn't hidden from the user unless there's a reason for this. Thanks!
```suggestion - Either I(template_link) or I(template) is required if I(state=present). ```
The whole block need to moved outside the `if state:` condition, otherwise autostart parameter won't be updated when `state` option isn't used. In case `autostart` couldn't be used without `autostart`, add a `required_if` parameter to `AnsibleModule`.
This `version_added` is global for the module, not the last change to the module and should remain 2.3
```suggestion required: false type: str ```
```suggestion version_added: '2.9' ```
You are taking me wrong here. I am just saying that adding additional library will add overhead to people who are using this module and people who will maintain it. I am not saying to port other GitHub modules to use `PyGithub`. One way could be using GitHub REST APIs directly rather than relying on any third party Python modules.
So I would get rid of these.
i removed this as even if you respect the play's no_log there is no current way to respect the module spec's no_log
I cannot add commits to this PR to fix this myself, so I'm updated this to request changes.
package is a special case, note this is a "wrapper" of the underlying package manager. Some may not have a default defined for state (present). requried=true is a safe fallback.
Can be removed, indeed, check other newer modules :)
Create vm pool and override the pool values.
I think it should look like this: ``` python from ansible.module_utils._text import to_native [...] def enable_ds(module, array): """Enable Directory Service""" try: array.enable_directory_service() changed = True except Exception as e: module.fail_json(msg='Enable Directory Service failed: Check configuration: %s' % to_native(e)) module.exit_json(changed=changed) ``` One thing I'm not sure about is how we tell if array.enable_directory_service() made a change or not. Our users generally define Ansible's idempotence as: * they describe the state they want in a playbook task * the module makes the state match what is in the playbook * the module returns changed=True if something had to be changed to achieve the desired state or changed=False if the state was already as desired. This code probably does the first two but it's not doing the last one. I'm not sure how to fix it because I don't know what array.enable_directory_service() does. If it returns a specifc exception if the directory_service was already enabled, then we catch that specific exception and set changed=True for that. If it returns a status code telling whether it had to make a change or not, then we can use that to set changed. If neither of those, we would have to query the current state of the toggle first. If the toggle is already enabled, then set changed=False and call module.exit_json(). If the toggle is not yet enabled, call array.enable_directory_service(), set changed=True, and then call module.exit_json(). (Also note, these notes on changes also apply to the other verbs you have in this module: disable_ds, delete_ds, and create_ds)
This could be either a repeat of the `count` input param, in which case it is redundant (like `dest`, below), or it is set to the same value as `packets_tx`, in which case it is completely redundant. In either case, I don't see any reason for this to be included in `RETURN` nor `results`.
This is not a correct English sentence. Maybe do: `The DNS can only be...`
use ```from ansible.module_utils.vmware import HAS_PYVMOMI```
I'd use "determine if the file is transferred" - "influence" sounds like the setting could be overridden by another paramreter.
```suggestion version_added: "2.10" ```
Please change this to a guard expression, just like the one above: ```python if group_data is None: return for key, data in group_data.items(): # it's one tab less now ^_^ ``` It helps to keep nesting low and style would be more consistent.
Please use `module= AnsibleModule(` I guess it is a convention
Only those two lines are required, and it works for me with it
CI is failing here, you need `version_added: "2.8"`
This wouldn't be possible with the patch if lets say _Visible name_ is set to `examplehost1` as it would return OK: ```yaml zabbix_host: server_url: "{{ zbx_server }}" login_user: "{{ zbx_user }}" login_password: "{{ zbx_pass }}" host_name: "examplehost" visible_name: "examplehost" ``` I see no point in checking _Host name_ at all. Zabbix API will feed `host['name']` with actual _Host name_ instead of _Visible name_ if there is none defined so lets try it like this instead (merge line 492 into 491): ```suggestion if visible_name and host['name'] != visible_name: ```
not a blocker but it is usual to use `yes/no` instead of `True/False` in the docs for bool types.
don't use print, display.error or raise an AnsibleError exception, Ansible already does not fail due to an Exception from a callback event.
Should match the variable registered in the preceding task. ```suggestion spot_price: "{{ spot_prices.ec2_spot_pricing_history.0.spot_price }}" ```
Please remove `required=False`.
It might also be no IGWs found here.
If module-level version_added is 2.5 this can be deleted
```suggestion if not six.PY2: ```
DO NOT AUTOINSTALL use the HAS_LOGDNA variable as a flag and return an error with the requirement when the plugin is invoked, plugins should NOT autoinstall libraries, also pip might not be installed on target systems and is also a possible error point. you can look at other lookups (like consul_kv) for how to deal with this issue
I mean: the current error isn't reported back (`e` is unused). I just pointed out that `display` is available and could be used to report the error.
You could move this a couple lines above and remove the two in the elifs below.
This fails the whole fact gathering if missing, i would just add an `if sysctl_path:` instead
```suggestion - Resource pool is required if vmotion is done between hosts which are part of different clusters or datacenters. ```
ah, nvmd, we overwrite the _task with original_task anyways, need to capture it before that happens or ensure the task_fields are not the original but 'templated results'
This is still something we shouldn't really want to explicitly support.
Ha, there seemed to be a bug in the previous code, we might want to do ``` for spec in items if spec.startswith('@'): ... ```
This applies to the other functions where a list is the default value as well.
Here please use C(custom_compatibility_version) instead of `custom_compatibility_version`.
I get it now, so adding diff as part of `prepared` key results is rendering diff in a readable format in output logs. The only concern I have here is this change might break backward compatibility for playbook that depend on `diff` key
Does having a 'rename' option for state make sense? It seems like you could just check if the organization exists and if it does and rename_to is provided, then rename it. Not requesting a change, just wondering.
@bcoca yes, it would - but it's not worth fixing that underlying issue, since we don't really need a link there at all
``` author: - Chad Norgan (@BeardyMcBeards) ```
```suggestion - Only used for images that contain the Windows Server operating system. ```
This should probably mention both slash and no-slash paths...
Since this is setting data, you also want to use an error handler like this: ``` python from ansible.module_utils._text import to_text [...] for resource in json.loads(to_text(response.read(), errors='surrogate_or_strict'))['resources']: ``` The default error handler is replace which is good for things displayed to the user but not good for preserving data.
Once we have a client, I don't think we need to handle this exception again.
Can we somehow implement behavior of specify storage_domain for all disks? If I understand the code correctly, it not currently.
s/write target file {0}/fetch file to {0}/
Please, at most one alias, even better none. Having a long list of aliases is really bad UX IMO.
Another variable with value using `special characters outside of AâZ, aâz, 0â9` and enclosed with quotes might be added there.
It may be better to define only one required authentication param like authentication_method with choice between shared and radius Then add a line in required_if for username and password in case of shared auth.
Typo in `aggressive`
I guess the only reason would be if we'd rename something in the future. But yeah, a list is probably better.
Just add return here, no need for break and creating resp variable. ```python version = module.params.get('version') templates = templates_service.list() for template in templates: if version.get('number') == template.version.version_number and module.params.get('name') == template.name: return template raise ValueError( "Template with name '%s' and version '%s' in cluster '%s' was not found'" % ( module.params['name'], module.params['version']['number'], module.params['cluster'], ) ) ```
I"m probably making it harder to merge my PR so this might be best left for later update, however we should we take the opportunity to improve fix it properly. Assigning local vars for cert and key since they now get read several times from modules.params Only checking if the file exists or trying to read the string if the values exist. Otherwise rstrip will fail on a None. ``` cert = module.params.get('cert') if cert: if os.path.isfile(cert): cert = open(cert, 'r').read().rstrip() else: cert = unicode(cert.rstrip()) ```
'Use "sudo pip install --upgrade avisdk" to install Avi SDK'
```suggestion - Specify attributes for this device. - The value is a dictionary of attributes with values. type: dict ```
Please use just a single space. If another option is added in the future this will not align ```suggestion required: true ```
How about using `LooseVersion` from `distutils.version`? It usually handles version numbers pretty well. (Grep for `LooseVersion` in the modules directory to see plenty of examples.)
I believe this isn't needed - this was in there for a previous version of the fix IIRC.
Making the new behavior the default is not backwards compatible. The new behavior should be opt-in rather than opt-out to avoid causing problems with existing playbooks during an upgrade.
Well, I suppose you *could* install Solaris in a VM, but I do see why youâd consider than the problem of someone who cares enough about Solaris to already have some Solaris. Thatâs cool. Frankly Iâm impressed you tried to take this on in the first place. So, then, letâs merge what we have. The tests all pass, now, and itâs a step in the right direction.
This should be enforced by the argument_spec, not sure how this would happen.
Do you need that step? `clients = client_list` should be enough
I would name the method `passwd_check`.
i was even thinking of making it top level in argspec and not in the type itself, but either way works, as long as each alias can have their own version/msg
Can we update the `description` text to be a little more explicit that it is the controlling host (the machine running Ansible) and not the target node that must have an established Conjur identity for the lookup plugin to work? Right now it's a bit confusing because the `requirements` is clear about that but the description just says `...the server's Conjur identity` without saying what 'the server' is in this context.
Just curious, why do you want the error message twice? Anyway msg would be printed.
Probably best to add an entry saying the location is derived from `C(resource_group)` if not specified
If it only passes them on anyway, it's probably better to catch them all. I just hope that they don't use fancy line-break support / escaping support. It would really be nice if there would be an easy machine-readable JSON export or something like that...
You may want to drop the `2` from the function name to match the YAML tag
```suggestion parsed_network['options'] = clean_dict_booleans_for_docker_api(network['options']) ``` While this also accepts `True` and `False` (and converts them to `"true"` and `"false"`), it makes sure that all keys and values are strings.
This doesn't remove any orphan, it only checks whether there are any.
Same as in the doc
I would like to use a more python way: list comprehension and a `to_disk` method to construct the list.
You should keep the `HAS_LDAP = True` here and remove the import for it. The same in all other files.
better way is 'have no hardcoded exceptions', one way to do that is make it 'property based' on the modules, but that would require reading them on controller side.
`_get_fs_size` method need to be modified in order to handle `pvdisplay` tools. It would be better to use a method instead of a string for the `fsinfo` value.
My suggestion would be: ~~~ - To change the password of an existing user, you must also specify C(force=yes). - Since 2.4, C(force=yes) is optional with RabbitMQ 3.6.5 and later. ~~~
Please add spaces around the equal sign.
there is a helper function `has_changed()` for that, which also handles --diff https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/cloudstack.py#L149
Parse the version without using `packaging`, since it is not part of the Python standard library. You could probably use this function: https://github.com/ansible/ansible/blob/13aef3c2e591631440830b6a023e90292a11392b/test/lib/ansible_test/_internal/util.py#L868-L870 However, that will need to be backported as well.
Same here. Looks like some strange linewrapping is going on.
why is 1 allowed? afaik this indicates an error in ssh-keygen
Python 2.6's `re.sub` doesn't accept `flags` -- but `re.compile` does.
please add `no_log=True` to avoid leaking the password in the logs.
OK, leaving it this way is fine then, since it's functionally no different that before.
Too long line.
Also defaulting to `True` will always override the value, even if it was not specified. This is probably not what we want here.
Tag a `1.0.0` release of the container and use that version here instead of `latest`.
You can replace this line through line 363 with simply: `client = module.client('es')`
Formatting nitpick. You can add this to the line above.
`deepcopy` is unused
Are both lolcube and bsod your github accounts? If not, please only use lolcube, as otherwise bsod will be informed for every issue and PR related to this module.
It seems like returning this string is the expected path through the function. So this should probably just be a return instead of raising an exception. Then the code that's calling it can decide to print it and reraise the exception that got us here if it chooses.
Could you please update `lib/ansible/utils/module_docs_fragments/docker.py` to mention these variables, see `lib/ansible/utils/module_docs_fragments/vmware.py` to an example
We generally put the choices in lower case, though I guess you want this to be consistent across all your modules
Yeah, I had the same problem. I tried changing the exception type raised in `templar.template()` and catching that here, but still couldn't get it quite right. Seems like putting it in `-v` is an improvement over what we have now until we can come up with something better.
Could we included the word `Droplet Sizes`? That will clear up any confusion on what sizes.
is_vapp_changed = False
That's not how `diff` should look like. It should be a `dict` with elements `before` and `after`. These will be converted (depending on the callback plugin, i.e. JSONify or YAMLify) and then diffed.
```suggestion except (OSError, IOError): ``` Since you are not using `e`.
The root cause: since requester_pays defaults to `False` it can never be `None`. Just stumbled over that as well.
If we allow non-Mutable mappings here, then we need to put a try: except around the call to reduce in the if recurse: later as giving it two non-mutable mappings will throw an error. I dislike that non-mutable mappings would be accepted with recurse=False but cause an error with recurse=True so perhaps we should track down why we're getting non-mutable mappings or perhaps we should enhance merge_hash to be able to operate on non-mutable mappings.
/me retires very old vm images We should be OK with anything added before v240 (and that is already ancient).
This should never happen as `subnet_ids` is empty list by default, according to the argument_spec.
```python freq = current_config.get('Log rotation frequency') # daily (Once per day at midnight) if freq is not None: ```
nevermind- I see we added the isa check to deepcopy those for specific cases
Please add example of these newly added keys in EXAMPLES section.
Again, the name for that task was a copy-and-paste from the integration tests. It would probably better to use, eg. ```yaml - name: Enable 'telnet-client' windows feature ```
@s-hertel FYI I've reworked the test suite in #62955 to make sure we test the current expected behaviour and test a few other things more thoroughly.
Please update your example with a valid task. `Command` is not a valid argument to the module anymore.
Only one space after periods.
`import_role` supports those keywords, but for inheritance, for include it applies to the task itself, the original phrasing was more accurate
I'm not sure about adding aliases when no user has become familiar with anything and can learn it the correct way from the beginning.
No need to import HAS_BOTO3 now.
```suggestion type: str choices: [ absent, present ] ```
Oh I see :)
@nerzhul this 'feature' predates the RFC that introduced SRV and was used as a 'cheap' load balancing trick
Thanks for confirming
It requires `botocore>=1.13.21`
Let native speakers correct me if I'm wrong, but I think `a` article should be moved to before `package` and before `version`.
```suggestion - name: Reset the nimclient ```
"state" is required or you should set a default.
yes, I don't think we need another field.
`PyOpenSSL>= 0.15` seems only required for `SelfSignedCertificate`, with other providers older PyOpenSSL versions should work fine: this information could be added here.
you probably need to add shell and become plugins also
I(....) adds the highlighting that this is an argument name.
The other option is to strip the arguments and keep it as a list
use `to_text()` instead of `str()` as its py2/3 portable
Well, if we want flexibility, we could have a dict value but I still expect it to we inside a dict, not inside a list. It's `{'ns.coll': {'fqcn': 'ns.coll', 'ver': '1.2.0'}}` vs `[{'fqcn': 'ns.coll', 'ver': '1.2.0'}]`: with a list, it's harder to access a specific collection as you'd have to do a full list scan to find in which element your target is while with a dict you can access it by key instantly. cc @shanemcd
Probably should be 'One and only one of name and nacl_id is required'
Not needed with AnsibleAWSModule
Would be good to have a better description.
This method doesn't seem to do much. I would merge it into the run() method. * read_settings and parse_cli_args don't seem related. They don't operate on the same instance attributes, for instance. * It's a bit funny to have a private method (_read_settings()) calling public methods (read_settings() and parse_cli_args()) that aren't usable by anything else. * If this is merged into run(), it will only add one more line there and will remove 5 lines overall.
this is a non atomic operation and can lead to file corruption, write to a temp file and use shared 'atomic_move' to put the file into place
No need to wrap.
```suggestion version_added: "2.8" ```
It's more about doing it step-by-step. It should be the first step, yes. Yet, it now feels like the entry point got spread out across multiple places. It's fine to keep it here for now. I don't want to be overly nitpicky. It's probably good enough for the first iteration.
@rafaeldriutti Yes please on the test case
Is this (and `providers:` below) part of `property_attributes:`? Dedent if you want them to be example of top-level `providers` and `services` args.
You can remove the brackets here.
i meant that maybe you don't need serialize_vm function at all, you could just use as_dict() which is available from vm object
Someone could have a proxy in front, and if it intercepted a non-200 status code could replace the body with HTML or otherwise.
I think this might explode if `obj_type` is not one of `functions`, `indexes` or `tables`, maybe it would be safer to do something like? ```suggestion obj_func = self.obj_func_mapping.get(obj_type.strip()) if obj_func is not None: obj_func() else: module.warn("Unknown filter option '{}'".filter(obj_type.strip()) ```
If it is not required, you don't have to add `'required: False`.
So the issue I was thinking might come up was that the API may "fix" lists of one and only return the list content (as S3 does). So running a playbook with a list of one item always displayed changed. I looked at the boto3 docs and since these options must be strings it's a non-issue. Testing this out though, I notice that if an invalid option is provided (such as specifying a list of two actions for a statement) or a typo results in a failure (good, as expected) but also deletes the existing policy (that seems weird). I don't know if that's easily fixable in a way other than validating the options before making API calls... ``` "error": { "code": "ValidationException", "message": "1 validation error detected: Value '['lambda:CreateFunction']' at 'action' failed to satisfy constraint: Member must satisfy regular expression pattern: (lambda:[*]|lambda:[a-zA-Z]+|[*])" }, ```
`vmware_host_config_facts` â `vmware_host_config_manager`
```suggestion description: If multicast is enabled. ```
I would rename this to vdevs and add "vdev" as alias.
sorry, but if i have a template debian 8 and debian 9 is released, maybe i prefer to create debian 8 from debian 9 and change guestid. It's not the good solution. I think it's better to check the guestId value
ah, my bad.
Might as well return all the tags: ``` customer_gateway['tags'] = boto3_tag_list_to_ansible_dict(customer_gateway.get('tags', [])) customer_gateway_name = customer_gateway['tags'].get('customer_gateway_name') if customer_gateway_name: customer_gateway['customer_gateway_name'] = customer_gateway_name ```
```suggestion description: Numerical ID of the group that owns the destination directory. ```
Original spelling of `transmitted` was correct: ```suggestion - Threshold for defining a lossy connection by packets not transmitted due to window size. - A client connection is considered lossy when percentage of times a packet could not be transmitted due to TCP zero window is above this threshold. ```
`wait_for=dict(type='list'),` (remove waitfor)
``` pbm_object_ref = pbm.ServerObjectRef(key=str(virtual_machine._moId), objectType="virtualMachine", serverUuid=self.vc_si.content.about.instanceUuid) ```
Please don't return different types of data from a function. It should always be consistent and discourage checking the return value. Unlike low-level C-code, Python provides you with a variety of handy ways to communicate failures to the calling code (like exceptions).
I think we don't need to patch `datetime.datetime.fromtimestamp()` and `datetime.datetime.utcfromtimestamp()` methods as they just return a datetime object from patched `time.time()`.
This file consists of texts from previously copyrighted file. You should respect the original copyright.
Same here: ``` + for _ in range(0, 2): + try: + task = self.host.ReconnectHost_Task(**reconnecthost_args) + success, result = wait_for_task(task) + return success, result + + except TaskError as task_error_exception: + + task_error = task_error_exception.args[0] + if self.esxi_ssl_thumbprint == '' and isinstance(task_error, vim.fault.SSLVerifyFault): + # User has not specified SSL Thumbprint for ESXi host, + # try to grab it using SSLVerifyFault exception + reconnecthost_args['cnxSpec'].sslThumbprint = task_error.thumbprint + else: + self.module.fail_json(msg="Failed to reconnect host %s to vCenter: %s" % (self.esxi_hostname, task_error.msg)) + self.module.fail_json(msg="Failed to reconnect host %s to vCenter: %s" % (self.esxi_hostname, task_error.msg)) + + else: try: task = self.host.ReconnectHost_Task(**reconnecthost_args) success, result = wait_for_task(task) return success, result - except TaskError as add_task_error: - # See add_host_to_vcenter - ssl_verify_fault = add_task_error.args[0] - reconnecthost_args['cnxSpec'].sslThumbprint = ssl_verify_fault.thumbprint - - task = self.host.ReconnectHost_Task(**reconnecthost_args) - success, result = wait_for_task(task) - return success, result + except TaskError as task_error_exception: + task_error = task_error_exception.args[0] + self.module.fail_json(msg="Failed to reconnect host %s to vCenter due to %s" % (self.esxi_hostname, task_error.msg)) ```
This method will retrieve only inventory of the last system that Redfish API returned in `_find_sytems_resource`.
The default values of `graph_width` and `graph_height` in the code used to be `None`, not 200 resp. 100. Is this change intended? I don't know how the settings work internally (didn't bother to check), but such a change could modify the behavior of the module (if `None` was "keep whatever the user currently had configured").
`commands` should always be a list.
I think we don't need to patch `datetime.datetime.fromtimestamp()` and `datetime.datetime.utcfromtimestamp()` methods as they just return a datetime object from patched `time.time()`.
`IGNORE[xxx]` is used as something iterable, and I don't think any of the calling code wants a list of letters :)
I think we should guard against an `IndexError`. Even if Linode guarantee us some value, given programming error and such, I'd like to guarantee users of this module error messages that lead them in the right direction.
`file_copy` â `copy`.
What is `purged_vars`, BTW? I now saw that this is not an option for this module.
```suggestion variables = {} ```
Here, `self.count_upgrade` is an int, and `outdated` (as above) a `dict` resp. `list`.
it would require to have the content into a var e.g like with the slurp module.
So by default Ansible modules use the system-configured proxy settings, unless you set **use_proxy** to **no**.
The return msg should be indentical in normal and check mode
```suggestion - Certificate content to load. One of I(cert_url) or I(cert_path) or I(cert_content) is required to load certificate. ```
Go ahead and use `b_dest` in the function signature also.
It would be awesome if buildah supported copying from a container.
```suggestion feed_client_cert: version_added: 2.10 ```
Add an example for this in EXAMPLE section.
if you are using loader, just use `get_file_contents`
C/P error, should be `AWS ElastiCache is down`? Same on L450
I don't like to frame such big block of code into an exception. Please put the exception only around the command which actually can throw an exception.
```suggestion if self.node_attrs['Spec'].get('Labels'): ``` This will prevent a crash when `'Labels' in self.node_attrs['Spec']`, but `self.node_attrs['Spec']['Labels']` is `None`.
This is wrong, already explained.
This was actually a bug to use new_destination, as it prevents idempotency. In this case, it's simpler to break existing playbooks, as they are already broken if they were using new_destination.
Move this line after 250. You won't need to deepcopy unless you are actually creating a request.
Please order the options alphabetically.
the shell itself would have done it before. but might have done it slightly differently.
Full stop, rather than comma at the end.
No action needed here - just wanted that note on the PR record.
It might also be useful to print login response code to supplement earlier login method debug. white testing this patch I felt login did not go through
This statement seems useless.
Please put this on a single line. Lines can be 159 characters wide.
I think removing the `:` will fix the CI failure. However, I find this line confusing too. Are the ranges shown here examples of what not to do? What to do? Could we remove them altogether? ```suggestion - Cannot overlap with other address ranges within the same virtual network. ```
Set the default timeout here: ```suggestion def lock_file(self, path, lock_timeout=15): ```
Manages bundles on Clear Linux systems
Write a method to generate final diff so it can be used anywhere in the code when required.
By the way, you don't need `else:`, since this will be evaluated anyway.
I have already cleaned that up in a follow-on that I was going to submit after this..
```python # warn when failing to skip due to lack of support for skipping only some versions display.warning('Including test "%s" which was marked to skip for --windows %s but not %s.' % (target, ', '.join(skip_valid), ', '.join(skip_missing))) ```
Bump this to `"2.5"` please.
should replace 'Udp' with C(udp), etc...
This is wrong, already explained.
This should be ``` 'supported_by': 'community' ```
Maybe add `register: result` to one of the examples and then a `debug` task to view the result (or parts of it). That makes it easier for not so experienced people to use the module.
All AWS calls should be wrapped in a `try`/`except` block
This should be `else`, looks like the logic got inverted accidentally.
Ansible already states that it does not support 3.4, python 3 support targets >=3.5
Are there any other IDs/names that a url_map would be known by? If so, we should call this "url_map_name" or something.
However your descriptions for the last 2 commits are reversed. Should be: ``` # * https://github.com/SethMichaelLarson/selectors2/commit/f0c2c6c66cfa7662bc52beaf4e2d65adfa25e189 # Fix use of OSError exception for py3 and use the wrapper of kqueue.control so retries of # interrupted syscalls work with kqueue # * https://github.com/SethMichaelLarson/selectors2/commit/6f6a26f42086d8aab273b30be492beecb373646b # Fix formatting of the kqueue.control patch for pylint ```
You shouldn't even need to try it again- the only case we want to recover from is if another worker already created it, so if we got this error, just ensure that it exists and continue on happily, otherwise re-raise the original exception. I guess there might still be a tiny remaining race condition in that case, since `os.makedirs` is unlikely to be atomic, but adding a retry makes it more possible for workers to trip on each other, and could ultimately repeat a different incarnation of the same race for each level of the path (though *far* less likely). If we really want to solve that potential problem, either the $controller_term_replacement_tbd needs to create the cache dir in a serialized pre-fork code path, or we'll need a dedicated lock for the creation of the tempdir. I'd probably vote for the former, since adding a new resource lock makes deadlock possible (and managing more locks is ultimately a lot more expensive than a tempdir creation).
Oh, I missed that the check is slightly different. but still such function could accept key + check type class and could be reused 3 times if you want to go for it :)
Please ignore, the param will be set to False when not specified
not sure if this is useful
I don't like the `: ` here
```suggestion required: false type: str ```
This should have a try/except around it as well, since `dateutil.tz` isn't in the standard library.
Yes, `YYYY-MM-DD` should be perfect. Thanks for the xkcd link ;-) @lolcube I'm still curious where `:` is used; I'm really not aware of anything where it is used (or I completely forgot :) ).
```suggestion - To identify an existing interface within a namespace, use the I(namespace) option. ```
If we do add something like this, three thoughts on the formatting the string: - Use clean_args since that will have had private parameters stripped out. - What's PERM? Should this be ARGS instead? - Use to_native(e) and to_native(traceback.format_exc()) instead of str(). (clean_args should be a native string so it shouldn't need to be coerced here).
This is the old ANSIBLE_METADATA stub. CI will fail.
Sorry, my bad. I didn't see the implementation of `_run`.
I think it is better to pass module as argument to build_xml() and handle lxml install check-in module_utils instead of having it in each module
The value should not be quoted.
Not sure how the lazy loading of variables, the example would be simpler to just have the one task instead of 2 in the examples. ``` - name: Get 2 messages off a queue debug: msg: "{{ lookup('rabbitmq', url='amqp://guest:guest@192.168.0.10:5672/%2F', channel='hello', count=2 ) }}" ```
Including values in the sample code would be great, I didn't see the version and in this case maybe just a sentence to tell people where you could find the value, like what you suggested.
We should disable pylint's check for this one line rather than doing this. doing this defeats part of the purpose of having a compatibility library.
redis is good example, https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/redis.py in any case it is ts simple: ``` ini: - section: consule_kv_lookup key: validate_certs ```
You're right: when `import_failure` is `True`, `FW_VERSION` could be not `None`. `import_failure` must be checked at the end, nothing needs to be changed here.
As fair I as know, this is used only for block storages? Can you maybe add a note here? Someone can think that he obtain info about other storages as well..
I think it's not necessary to mention the `.ini` here.
Look up "Rule of Three" and "Don't Repeat Yourself" to improve the code duplication situation here.
Use `to_native` for wrapping error message.
In Python, we avoid adding unnecessary brackets.
Do you have any references for the inline if being discouraged? If you don't like the inline if, then I'd go with the normal if block.
Handle NoCredentialsError as well
diff cache, I was talking about ConfigManager, see my PR/diff post for details
```suggestion aws_organization_units: ```
Actually, even more than +1 to changing this to packages because this is in the error messages which we return to the user, not just about variable naming. Everyone will understand what packages means in this context but sysadmins who just need to translate a script to setup the production environment their dev team gave them won't understand "distribution".
Remove as not needed (default)
How about the rest items of `spnprofile`
Might as well return all the tags: ``` customer_gateway['tags'] = boto3_tag_list_to_ansible_dict(customer_gateway.get('tags', [])) customer_gateway_name = customer_gateway['tags'].get('customer_gateway_name') if customer_gateway_name: customer_gateway['customer_gateway_name'] = customer_gateway_name ```
Catch botocore.exceptions.ClientError instead of Exception here too.
The docs say this should be `servers`, I'm ok with either but it should be consistent.
This no longer accepts `VMWARE_TEST_PLATFORM=''`. The var be unset or set to worldstream or govcsim. This is probably fine, just want to note the change.
Please don't repeat the previous sentence, better: `- This can be a list (since 2.2) and contain version specifiers (since 2.7).`
consider using `ansible.module_utils.urls` instead of `requests` for better compatability
We use `aep` as the default parameter in other modules and we never used `AEP`, `AEP_name` or `attached_entity_profile`. So please use the same parameter name as the **aci_aep** module !
I think `if props is not None` is more conventional :smile:
```suggestion - Accepts a list of dicts where each dictionary contains two keys, I(path) and I(key_data). ```
Yes, they were.
Oh, I missed that the check is slightly different. but still such function could accept key + check type class and could be reused 3 times if you want to go for it :)
I'm ok with this change, however the additional formatting changes should be reverted. The current formatting meets our code standards.
Use module.fail_json_aws(e), which will handle calling ansible.module_utils._text.to_native() on e for you.
``` + # VM already exists + if vm: + â¦ ``` â ``` + if vm: + # VM exists + â¦ ``` But that's a matter of taste.
@pascalheraud You can check https://docs.ansible.com/ansible/latest/dev_guide/developing_python_3.html#import-ansible-s-bundled-python-six-library `from ansible.module_utils import six` and then `six.moves.urllib.parse.quote_plus`
please create a list: e.g. ~~~ yaml author: - "Amel Ajdinovic (@aajdinov)" - "Ethan Devenport (@edevenport)" ~~~
Can we have a list of packages which can be locked/unlocked? just like yum module does.
I know this is what it done in `load_platform_subclass()` but that looks incorrect as well.
That's def cheap enough :)
`username` should still work, the only case where it wouldn't AFAIC is if the username is a valid sid string. If that is the case they would have to do `.\` and they probably deserve their punishment for doing something so silly.
Nowadays we do: ```yaml type: bool default: 'yes' ```
One way to do this is something like: ```yaml unit = size[-1] units = list('b', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y') try: multiplier = 1024**units.index(unit) except ValueError:: e = get_exception() module.fail_json(msg="No valid size unit specified. %s" % e) ```
I don't think we should be referencing a private attribute/variable here in any case. We have no guarantee that it will exist in any future release either.
Unfortunately, shlex.split() needs a bit of code to make it compatible with both python-2.6 and python3.x On python-2.6, it only works on byte strings. In python3.x it only works with text strings. So you have to test for python version and then convert appropriately. Code like the following is what I use: ``` python from ansible.compat import six from ansible.module_utils._text import to_bytes, to_text [...] nspawn_args = self._play_context.nspawn_args if six.PY2: nspawn_args = shlex.split(to_bytes(nspawn_args, errors='surrogate_or_strict')) else: nspawn_args = shlex.split(to_text(nspawn_args, errors='surrogate_or_strict'))
s/2.6/2.7/ We passed the freeze date for 2.6
``` distributions.extend(self.list_streaming_distributions(False))``` ```+=``` may be fast , `extend` bring clarity.
```suggestion commit: no ```
You can use this shim instead: ```python from ansible.module_utils.six import configparser ```
in [py3](https://docs.python.org/3/library/os.html#os.makedirs) we can use `os.makedirs(lookup_path, exists_ok=True)`. With that we can get rid of the try/except and check condition, condensing everything here into a single line.
Need to ensure that the group actually exists - currently when using this, the inventory plugin fails here because the previous code containing ``` if group_name not in self.inventory.groups: self.inventory.add_group(group_name) ``` has not been added here.
Also, you could go for a generator comprehension with extending the command: ```python cmd += ''.join(' "%s"' % dist for dist in distributions) ```
```suggestion self.module.fail_json(msg="Invalid start VLAN id %s." % vlan_id_start) ```
```suggestion 'G': 2 ** 30, ```
I prefer `if not module.check_mode and change_string:`.
`A regular expression or pattern`
I wonder if ansible itself has something for this in its `authorized_keys` module.
CI failure due to PEP 8 issue: ``` 2017-01-28 07:29:47 ERROR: PEP 8: lib/ansible/module_utils/azure_rm_common.py:177:135: W291 trailing whitespace (legacy) ```
I saw the same problem. However we constrained because "no_extra_spaces" is already in use (ini_file). If we go with a better name here, we should deprecate no_extra_spaces in in_file and replace it with the better name as well.
```suggestion self.module.fail_json(msg="The role ID isn't valid %s" % to_native(not_found)) ```
equal to dest, i always expect it to be equal to itself
Move this outside the loop.
> ['host_default_vnc_port_start','host_default_vnc_port_end'] `['host_default_vnc_port_start',<missing space here>'host_default_vnc_port_end']` should be: `...nc_port_start', 'host_de...`
The author part is a list now, so it should be: ```yaml author: - cytopia (@cytopia)
I think some other changes to the config have landed that should certainly eliminate the need for this, in particular the `TowerModule` class.
bcoca also mentioned that the facts end up being set on the host that's being processed in the task loop, not one that's being delegated_to. So we should only return the ansible_pkg_mgr fact if we are not delegating.
many modules have the default of `state=present`. consider this as a default if you feel it make sense.
@ossark Thanks for the PR, just one change then I can get this merged. Thanks :)
Add the `r'''` to https://github.com/ansible/ansible/pull/49652/files/6dc61c94e3abd3cf74998b78f4fa08956a95c269#diff-1c417562a0944ee1362da84b93d9695dR56 to avoid it. We do this for all our module examples so we don't have to worry about escaping these values.
default is missing to allow skipping this param
@jvanderhoof or @ryanprior, could you add below here? ``` ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'} ```
If you provide non-existing DVSwitch then `self.dvs` will be `None` and module will fail with error saying ``` "'NoneType' object has no attribute 'EnableNetworkResourceManagement'" ```
```suggestion result['last_modified'] = mtime = date_to_timestamp(info['last-modified']) ```
Same here. required=False and default=None are obsolete. Only specify them if they are set.
This could be less nested once you apply `choices`.
its fine to have a 'separate pre-existing file', I would just use it as a fallback if other methods are not populated and i would not create one if it were not already standard.
```suggestion - When the webhook does not exists in this GitLab project, it will be created. ```
Same for other description.
In Python, it's common to include docstrings as per PEP 257: ```suggestion def fake_now(monkeypatch): """Patch `datetime.datetime.now()` to return a deterministic value.""" ```
use the `missing_required_lib` function from `ansible.module_utils.basic`
I think it's `disk.disk.id`
This can also be an ARN, right? In which case the length can be up to 140 characters.
You don't need to be an AWS module to use the ec2 module utils. Just do the following ``` from ansible.module_utils.ec2 import camel_dict_to_snake_dict camel_dict_to_snake_dict(vm_info) ```
I think this would be more readable if you do: ```python org_id = self.get_org_id(org_name) net_id = self.get_net_id(org_name, net_name, data) path = '/organizations/{org_id}/networks/{net_id}'.format(org_id=org_id, net_id=net_id) ``` So using positional arguments where there's no discussion, moving different operations in separate steps, and bring the information together at the very end. The path-string could be coming from somewhere else (if this is something that is being reused, but probably not relevant here).
probably not related to this PR but if someone will be doing future refactoring, please replace this with `with` block using a context manager.
recurse = bool(module.params['directory']['recurse'])
values in choices and default for bool should be `yes/no` according doc of ansible. it is a convention by Ansible. `required` should be true/false as it is a flag to show it is required.
```suggestion C(absent) to delete dhcp-filter and C(update) to modify the dhcp-filter. ```
For python3 compatibility, you will need to wrap `map` with `list` as python3 doesn't return a list. It would probably just be best to use a list comprehension instead.
should probably use `if stdout is not None:`
yeah, even if just `- for a long time this was incorrectly labeled as a boolean`
This information is used by Ansibullbot so list should be in format "name (@<github_handle>)"
Chances of not finding datastore is also possible even when user passes the datastore name. Change the error message
I think this is a big usability problem that users will be upset about, as it's inconsistent with pretty much every other Ansible module (and not very usable in a declarative system), but it's your module. Very difficult to change that behavior later without a separate mode switch or breaking change.
this is a non atomic operation and can lead to file corruption, write to a temp file and use shared 'atomic_move' to put the file into place
Personally i'd like it better if this was `changed_state`, for instance, as that better indicates the purpose of this variable, looking at the code
Can you change the examples to use YAML rather than `k=v` shorthand? ```yaml - debug: var: lookup('cpm_status', 'temperature', validate_certs=true, use_https=true, cpm_url='rest.wti.com', cpm_username='rest', cpm_password='restfulpassword') ```
(In general, I don't think modules should have such options.)
This doesn't match docs and should still be singular certificate
This could cause problems if certain characters sneak into the repr() of the exception. (For instance, "{") Probably need to avoid writing to stdout and stderr.
```suggestion - python >= 2.7 ``` Pyvmomi requires 2.7
```suggestion result['last_modified'] = mtime = date_to_timestamp(info['last-modified']) ```
This check (and _is_binary) seem like they belong in executor/module_common.py. Make modify_module responsible for detecting that this is a binary module and returning it unchanged. We might need to create a new module type so that the rest of the code in action/__init__.py knows it's dealing with a binary module but that shouldn't be a problem. We already have "old" and "non_native_want_json" which do nearly the same things.
Looks like we have `distribution_release: Core` currently for CentOS. I think it would make sense to have that be `distribution_release: Stream`.
please keep line length pep 8 compliant
I also found `n_url` to be a bit confusing and collide with our string type prefixes for bytes, native, and unicode. It would be good to change `n_url` to something more descriptive, but probably in a separate PR.
add `return self.remove_nic()`
Nowadays, we list the imported functionality at the top of the module, and we explicitly list all the functionality we import. So in your case it would likely become: ```python from ansible.module_utils.basic import AnsibleModule from ansible.module_utils.urls import fetch_url ```
Since this is a new module, this should be fixed from its beginning: ```suggestion supports_check_mode=True, ```
```suggestion - List of paths to exclude. ```
seems gateway and netmask are only required in case of state=present, are they? In this case i would suggest to: ~~~diff argument_spec.update(dict( network=dict(type='str', required=True), zone=dict(type='str'), start_ip=dict(type='str', required=True), end_ip=dict(type='str'), - gateway=dict(type='str', required=True), - netmask=dict(type='str', required=True), + gateway=dict(type='str'), + netmask=dict(type='str'), start_ipv6=dict(type='str'), end_ipv6=dict(type='str'), gateway_ipv6=dict(type='str'), vlan=dict(type='str'), state=dict(choices=['present', 'absent'], default='present'), domain=dict(type='str'), account=dict(type='str'), project=dict(type='str'), for_virtual_network=dict(type='bool', default=False), for_systemvms=dict(type='bool', default=False), )) module = AnsibleModule( argument_spec=argument_spec, required_together=cs_required_together(), mutually_exclusive=( ['account', 'project'], ), + required_if=(("state", "present", ("gateway", "netmask")),), supports_check_mode=True, ) ~~~
This code is pretty incomprehensible, I'd try and avoid map and lambda and use a list/dictionary comprenhension (or a for loop if it's still unreadable)
Ok, so I may have given you the wrong advice before. I was under the impression that these modules were talking to a backend, but (at least) this module seems to run on the remote target (over SSH ?). So delegate_to: localhost` will not work correctly.
Wouldn't the choice be [ 'yes', 'no' ] as you'd expect from a boolean ? As per previous remark, this would become: ```yaml type: bool ```
How about ``` self.params.get('cdrom', None): ```
unnecessary import - boto is not used in the script
I wonder if there are more correct than wrong uses of `get` :) I mainly know its use in `route53`, where it shouldn't be a state.
```suggestion - When a value is masked, it must be in Base64 and have a length of at least 8 characters. ```
`then` -> `the`
Look what I've found: ```python $ ipython Python 3.7.0 (default, Jun 28 2018, 11:18:11) Type 'copyright', 'credits' or 'license' for more information IPython 6.4.0 -- An enhanced Interactive Python. Type '?' for help. In [1]: import pkg_resources In [10]: ipdst = pkg_resources.get_distribution('ipython') In [11]: ipdst Out[11]: ipython 6.4.0 (/home/wk/.pyenv/versions/3.7.0/envs/ansible-py3.7.0-pyenv-venv/lib/python3.7/site-packages) In [15]: ipdst.as_requirement() Out[15]: Requirement.parse('ipython==6.4.0') ``` This probably can completely eliminate need for doing `pip freeze` and parsing it! @HD650 please investigate this.
` or result > 255`
Seems like filter can return partial matches: `foo` would match for an existing `foo-bar` service, and would fail with thinking it needs to be updated (which also seems to be deprecated. Maybe it's worth verifying with this condition and adding a workaround: ```python if len(raw_data) == 0 or not 'Name' in raw_data[0]['Spec'] or raw_data[0]['Spec']['Name'] != name: ```
I would add this to a new paragraph, so it will be easier to read (and harder to miss). ```suggestion - If not specified the default value will come from client_cert. Which will ```
we try to use 'state' instead of action, as ti keeps with the declarative voice of Ansible vs an imperative approach from programming languages.
Please clarify the description
@tintoy, yes that's about what I'm talking about. I'd probably put all that logic into a single function, though. So you'd call get_credentials(module) and it would first look in the module parameters, then the environment, and finally in the dot files (returning the first set that it found).
Please use `has` in the beginning. Also, I feel like this should be a `@property`.
Also, why do you need to call `db_exists` again at all? You already have `existence_list` and `existence_list`, that should be enough for the rest of the module.
Summary option is available only in the latest versions. Let us not rely on that, please use heal info and check the count.
the order is incorrect, it probably 'works' if you don't have duplicate vars in inventories as the set_variable is overriding any cached vars you would have yet you do the reverse override here.
I don't mind. But I still don't understand why you think it's O(1).
not a blocker, but requried=false is the default and can be omitted.
```suggestion SubnetIds=module.params.get('subnet_ids'), ``` Here this var needs to stay as you had it originally - ansible prefers snake cased but boto typically needs camelcase. `instance_parameters` will be passed into the boto connection so needs to match what the API expects, both here and later when you access the returned parameters. https://docs.aws.amazon.com/dms/latest/APIReference/API_CreateReplicationSubnetGroup.html#API_CreateReplicationSubnetGroup_RequestSyntax
should we allow 'run once' tasks? since they affect hosts globally it is kind of counter to 'notify for specific hosts'
The name of that parameter is bad, it's simply âDNS search domainsâ. Perhaps `search-domains`, or `resolvconf-domains` (but then rename `nameserver-addresses` to `resolvconf-addresses`)
I wouldn't exactly call a dictionary `list`.
I've been thinking the same thing. Ideally it would be great if the validator raised exceptions, instead of passing back formatted errors, but I get the reasons why it is like it is currently.
This should use the existing `AzureRMAuth ` rather than requiring these keyvault vars only. Then auth using alternative ansible support methods works too. https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/azure_rm_common.py#L971 This is how the other azure plugins work already (e.g. inventory plugin https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/inventory/azure_rm.py#L274 )
You could add the minimum required version (`>= 1.0`) here too.
Another (and possibly cleaner) way to do this is to use `pytest-mock`: ```python class SpiedOnTarget: @staticmethod def do_a_thing(): return None def test_empty_retry_iterator(mocker): decorate_with_no_retries = retry_with_delays_and_condition(backoff_iterator=[]) spyable = mocker.spy(SpiedOnTarget, do_a_thing) invoke_retriable = decorate_with_no_retries(SpiedOnTarget.do_a_thing) invoke_retriable() assert spyable.call_count == 0 ```
`id` isn't used, it is sufficient to iterate on keys.
This one will fail, since selfsigned_notBefore and selfsigned_notAfter have changed their meaning from the initial draft and don't have default values any more.
All the boto3 client methods in this module should handle BotoCoreError. There are a number of places that need this added.
I would expect a module to issue warnings only for something which the user needs to be warned about. If the user wants something to be absent and it already is absent, that's not something I would expect a warning about. You also don't issue a warning if the user has `state == 'present'` and the sequence is already there.
Shouldn't have `required: true` for things that have a default.
Are these still necessary? It looks to me (as I said, I'm not familiar with network modules) that this was a now deprecated way to specify the parameters, which you copied from another network module. Since this is a new module, you can probably leave them away.
It would be better to check the error code. You can use `if e.response['Error']['Code'] == "NoSuchLifecycleConfiguration":` Caveat: Only ClientError has an e.response, so you will need to break up the exception handling: ``` except ClientError as e: # check e.response['Error']['Code'] # else call module.fail_json_aws except BotoCoreError as e: # call module.fail_json_aws ```
```suggestion module.deprecate("Alias \'{aliase}\' is deprecated".format(aliase=aliase), "2.10") ```
Please, we are trying to get people do the right thing, read http://docs.ansible.com/ansible/devel/user_guide/windows_usage.html#path-formatting-for-windows All our examples should keep things simple, so make this: ```yaml - name: Copy test file win_copy: src: test01.test.ps1 dest: C:\Pester\test01.test.ps1 ```
This should be indented by 2 spaces. The same bellow.
Remove this since it doesn't do anything and `Mock` isn't defined.
also you might want to make this into an option, see ssh connection plugin's `reconnection_retries`
In case we ever add more field to this like author name or something of the sort. Keeping it as a dict entry in a list gives us more flexibility in the future.
please use explicit imports `from ansible.module_utils.basic import AnsibleModule`
Ah yes sorry, ~~prefix~~ suffix
It doesn't look like you're using `to_native` anymore. I wouldn't normally nitpick for leftover imports, but we'd like to discourage use of to_native without a pretty good reason, and removing the import would make adding it back just a little bit more work.
```suggestion if not os.path.exists(to_bytes(ldir, errors='surrogate_or_strict')): ```
You said line 91 & 92 that only reducing the disk size is not allowed. Maybe you should remove line 70.
Oh, I see. `run_commands()` runs list of commands and returns list of results.
maybe should be converted to lower case just to keep the same as main module
This supports more than just URLs, I would add more points talking about what it actually supports.
This expression do look a bit suspcious, can you explain a bit more what you try to achieve ? (cause that's if "A and B or A and B" and I am a bit unsure on the order to which I need to evaluate things)
For the author information we normally only keep name and GitHub handle.
Period at end.
Method name is deceiving, since the body of the method will only set a single attribute.
```suggestion - "zabbix-api >= 0.5.3" ```
Missed one.. Should just be as below unless you want to also pass module into the function. ``` if os.path.isfile(cert_chain): cert_chain = open(cert_chain, 'r').read() ```
This seems like it would break passwords with leading/trailing whitespace.
We use `aep` as the default parameter in other modules and we never used `AEP`, `AEP_name` or `attached_entity_profile`. So please use the same parameter name as the **aci_aep** module !
This is handled by `argument_spec`
Fair enough, should have actually gone to that link and read it properly
`self._options_context` stores the context of parent options in case of nested suboptions. As the `elif` block does not have a recursive call to `_handle_options` context handling is not required here. However, context information can be added as part of error message in case this argument is part of nested sub-options (similar to other error messages in sub-option handling).
please remove version added here
Here just check if VM has just single network, if yes, and it has also single VNIC, then set it. If it has multiple networks and user didn't set network fail. If it has single network and multiple VNICs and no vnic specified, fail.
yes, this is equivalent to the 3 ifs that follow, there is no need for this duplication
You should mention instead of this that the required API version is 1.24. ```suggestion - "Docker API >= 1.24" ```
Remove the quotes from around `%r` as that may cause a something like `''foo''` to appear in the output.
Why the loop here? `if match` should be sufficient
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Missing space after comma.
supported_by should be `community`
required: false and default: None are implicit, you can remove both
I'd use "determine if the file is transferred" - "influence" sounds like the setting could be overridden by another paramreter.
Net new tests should be `pytest` style tests.
I think some other changes to the config have landed that should certainly eliminate the need for this, in particular the `TowerModule` class.
I've tried your branch on my local grafana with the `json.loads` fix. If I import an existing dashboard (previously in general folder) it will be moved to the specified folder. but the module is not idempotent anymore. If I re-run the playbook the task will return a `changed` status even if the dashboard json file has no changes.
I should have probably used the word 'check' rather than 'test'.
Maybe C(.pem)? I'm not sure you need to specify that .pem is a file type since it's just the extension. @gundalow might know.
Also, it would be better of the description is split up over multiple items. A long blob doesn't make it easier to read. Usually the first item is the "meaning", and subsequent items detail what happens in different cases, explain options, specify the format or add one or more notes.
Please verify, before push. `required_of` -> `required_if`
use an else here and you can have only 1 return at the end (even that is not needed)
The same like above.
actually, after looking at code 'currently', include_vars always ovewrites as it does not use combine_vars at any point .. this might be a 'bug' in VarsManager on `set_host_facts` and `set_nonpersistent_facts` methods .. unsure if we need to fix considering upcoming deprecation.
No in docs
s/user/caller/ (although user creation really is the only safe method if the file is in a world-writable directory).
That's not what the code says (where default is `zip`)
in all cases, I would default `group_contents.get('hosts', [])`
The additional fragments in here need to get backported to make the compatibility shims in stable-2.9, stable-2.10 and stable-2.11 working properly.
This should be sufficient.
Just thinking that it would be better to keep the example with `http://` only because that's how it usually runs when you manage the Jenkins server directly. So the `validate_certs` is not required here. Moving the `url` param here is good, although not required if Jenkins runs on the default port (8080) as that's the default value of the parameter.
Quoted mode starting with a leading zero is the best example to give. It allows the user to make one of two mistakes and the module will still do the right thing. Only if the user makes both of those mistakes would it come out wrong. If you feel the docs for the mode parameter should focus on quoted with leading zero, you could certainly make that PR.
Rename this to `validate_certs`
@goneri [`vmware_guest_custom_attributes`](https://github.com/ansible/ansible/blob/14ab205ea26b99e4a33a092dedd2f5d6ad1ae7c9/lib/ansible/modules/cloud/vmware/vmware_guest_custom_attributes.py#L142) and [`vmware_guest_custom_attribute_defs`](https://github.com/ansible/ansible/blob/14ab205ea26b99e4a33a092dedd2f5d6ad1ae7c9/lib/ansible/modules/cloud/vmware/vmware_guest_custom_attribute_defs.py#L94) has the same code, so it would be great to fix those as well. I am OK with any implementation.
Wouldn't this end up returning `changed=200` to callers? Usually we keep this a boolean.
Only slightly frustrated ;-) Thanks !
It might be better to do this check at the beginning of the module, so that in case `list_role_tags` is not available but `module.params['tags'] is not None`, the module fails right away and doesn't start applying *some* changes.
Maybe ```suggestion return bool(self.info) ```
```suggestion - Will not be set for an existing user unless I(update_password) is set to C(always), which is the default. ``` (or ``I(update_password=always)``)
We need to fix the `None` handling before merging this
```suggestion - Used only for Linux web apps. ```
I should have probably used the word 'check' rather than 'test'.
Looks like another weird conditional slipped through, this should be `if location not in ('us-east-1', None):`
This and other instance attributes should be defined inside `__init__`. Recommendation: - Define as `None` in `__init__` and set in another method. - Set in `__init__` directly or by using the return value of another method. This makes it easier to locate all the instance attributes since they're all listed one place.
```suggestion allow_downgrade: true ```
I don't think the new description is any more clear. The module does manage files, not just attributes. (So the original file module description is suboptimal IMO)
Must be in Sentence case, and IP needs bee upper case. Also it should mention that the default is to be both ipv4 and ipv6.
```suggestion - Access List Name. ```
If this can be added to the PR, then I'm happy to get it merged.
You shouldn't need `get_connection()` for that, you can just make a new connection to the socket_path and let the gc pick it up it at the end of the scope like `exec_command()` does... there isn't any particular reason to care about which NetconfConnection instance gets the message as far as I can tell.
Chances of not finding datastore is also possible even when user passes the datastore name. Change the error message
I don't like to fail at this point. There are way better options to handle this, we could implement a new force param to let a user "remove and add" an new image store by the users intention and if not force, just show a warning message to the users that we can not change the image store, but would recreate on force. We already have such a logic for in the cs_instance module for changing the offering on a running instance.
@gurch101 here is suggested change to the create method based on the feedback from other individuals. We do need to include the ip addresses at the top level of the response so they can be easily passed into additional tasks or facts. Let me know what you think of this method change.. ```python def create(self): json_data = self.get_droplet() droplet_data = None if json_data: droplet_data = self.get_addresses(json_data) self.module.exit_json(changed=False, data=droplet_data) response = self.rest.post('droplets', data=self.module.params) json_data = response.json if response.status_code == 422 and json_data['message'] == 'Region is not available': self.module.fail_json(chnaged=False, msg=json_data['message']) if self.wait: json_data = self.ensure_power_on(json_data['droplet']['id']) droplet_data = self.get_addresses(json_data) self.module.exit_json(changed=True, data=droplet_data) ``` The address method is used to pull out the different ip addresses DO sends back in the response. ```python def get_addresses(self, data): """ Expose IP addresses as their own property allowing users extend to additional tasks """ _data = data for k, v in data.items(): setattr(self, k, v) networks = _data['droplet']['networks'] for network in networks.get('v4', []): if network['type'] == 'public': _data['ip_address'] = network['ip_address'] else: _data['private_ipv4_address'] = network['ip_address'] for network in networks.get('v6', []): if network['type'] == 'public': _data['ipv6_address'] = network['ip_address'] else: _data['private_ipv6_address'] = network['ip_address'] return _data ```
Tend to favour YAML data structures rather than JSON style ``` sample: - name: my_bucket creation_date: "2017-07-06T15:05:12+00:00" ```
In case we ever add more field to this like author name or something of the sort. Keeping it as a dict entry in a list gives us more flexibility in the future.
`ip_range=dict(default='0.0.0.0/0', type=lambda x: to_text(ip_network(to_text(x)))),` could be used in `argument_spec` instead of this method: * inner `to_text` required because `ip_network` requires unicode in input * outer `to_text` required because `module_utils` [doesn't handle parameter which aren't basic type](https://github.com/ansible/ansible/blob/83ec4184701f77d4de68d0c52946fd80a13fbe0a/lib/ansible/module_utils/basic.py#L504) (except `datetime`) (`to_text` comes from `from ansible.module_utils._text import to_text`)
```suggestion - name: Replace before the expression till the begin of the file (requires Ansible >= 2.4) ```
`{}` is not compatible across python versions that support format, use `{0}` or `%` instead
fail if `scope=user`. (root and scope=user are incompatible)
Message cleanup needed. Notice `installed installed`.
As I understand it, this module isn't about gathering facts.
They're not being added in _get_loop_items, it seems like they're added in the internal execution so this may be the easiest way to clean them up.
```suggestion backing['port_index'] = port_index serial_port_info.append(backing) ```
``` python except KeyError as key_name: ```
~I do not think so `check mode` is required for facts module.~
Looking at this again, I would prefer even this: ```python if meraki.status != 200: meraki.fail_json(msg='Unable to get configuration templates') return response ``` So that the default flow returns the response, except if the status is not 200. I think that's more clear, exceptions go into if-blocks, default flow is to succeed.
botocore.exceptions.ProfileNotFound may also be raised
recurse = bool(module.params['directory']['recurse'])
There is a deprecation marker, you could add here see Dag's PR
```suggestion - Can contain multiple entries if more than one node provided in I(name), or I(name) is not provided. ``` It could be that only one node exists of the ones specified :) And if `name` is not specified, all nodes will be returned.
By the way, you don't need `else:`, since this will be evaluated anyway.
the option was added in 2.3, its the new choices that were added in 2.4, make a note in the description, dont change the version_added for the option.
What is this option needed for? After all, these are secrets you're dealing with, and if the user wants to print them she can use the `debug` module.
same as above. ```python cmd = [self.nmcli_bin, 'con', 'mod'] ```
``` The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_ypla3C/ansible_module_ec2_asg.py", line 1353, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_ypla3C/ansible_module_ec2_asg.py", line 1342, in main create_changed, asg_properties = create_autoscaling_group(connection, module) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_ypla3C/ansible_module_ec2_asg.py", line 967, in create_autoscaling_group update_asg(connection, **ag) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_ypla3C/ansible_modlib.zip/ansible/module_utils/cloud.py", line 153, in retry_func botocore.exceptions.ParamValidationError: Parameter validation failed: Invalid type for parameter DesiredCapacity, value: None, type: <type 'NoneType'>, valid types: <type 'int'>, <type 'long'> ``` Even though this is prettier, I think we might need to do what you initially did by checking if not None: `desired_capacity = desired_capacity if desired_capacity is not None else as_group['DesiredCapacity']` etc.
While I think this is correct I'm not sure if it uses no proxy or the default proxy configured in the IE settings. I don't have easy access to an environment with a proxy configured so I can't test this assumption.
hmm, had not realized that, probably fine to just remove then, but docs should be kept in sync, specially if we want to backport
Can we just call this argument `lambda_alias` without the alias (just thinking about future proofing for other notification targets)
When failing, please include the traceback with the `exception` keyword arg to fail_json. `exception=traceback.format_exc()` so people know where the failure came from.
There is a much easier way to do this, by using the index in the list. Something like: ```python unit = size[-1] units = list('b', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y') try: multiplier = 1024**units.index(unit) except ValueError:: e = get_exception() module.fail_json(msg="No valid size unit specified. %s" % e) ```
```suggestion - Can be a string, the name or resource ID of the network interface. ```
Import custom packages in try/except and handled with fail_json() in main() e.g.:: try: import foo HAS_LIB=True except: HAS_LIB=False
version added is 2.4
This should use the proper LDAP attribute name for DN ```suggestion - This value is either the C(distinguishedName) or C(objectGUID) or the AD object to lookup. ```
Ansible 2.8 isn't supporting Python < 2.6 anymore, so this line is no longer needed.
Is there an example or doc someplace where that actually happens? If glob.glob() is really needed, perhaps a better approach would be to avoid running this function so much, rather than attempt to replace glob.glob()
I am not sure we should advice people to install this from pip.
I think it's likely the proxy code won't work as I haven't been able to test it well under Meraki
```suggestion - name: Ensure that /exports/nas key in auto.direct map is absent ipa_automountkey: ```
ack. merging this in since this isn't a blocker.
default is missing to allow skipping this param
not for this PR, but we might want a 'configurable ignore facility' ala gitignore in the future
Do you have any references for the inline if being discouraged? If you don't like the inline if, then I'd go with the normal if block.
Another general exception handling that can be removed.
Okay, if it's used by lots of modules it should go to the other PR.
New connection plugins should be using the recently added `self._play_context.executable` for executable. Take a look at the lxd plugin for an example.
`self.module.warning` could be used
and 'logdna lib'
Maybe even better: ```suggestion new_item['aliases'] = sorted(new_item['aliases'] or []) ``` To convert `None` to an empty list.
I would write this all on a single line as: ```python diff = parse_diff(out) if module._diff else {} ```
You could move this a couple lines above and remove the two in the elifs below.
`final_interface = dict((k,str(v)) for k,v in final_interface.iteritems())` seems to be required here since the values from new_interface may contain non-strings while the values returned by the API are always strings. With this added line, the module becomes idempotent with passive proxies.
Not a massive change but I'd suggest doing the split like this ```suggestion schema, tblname = self.name.split('.', 2) ```
@resmo Aren't both same ? ```py def x(): return (1, 2, 3) def y(): return 1, 2, 3 x() == y() #True
```suggestion result = self._run_command([self._blkid_bin, '--uuid', uuid]) ``` According to `man blkid` on my system, it is `--uuid` and not `--uid`.
```suggestion - The port range for port-object. ```
```suggestion zip_data = zip(sorted(new_list), sorted(old_list)) ```
I would insert an empty line in front of every example to separate it a bit.
```suggestion src: "{{ lookup('first_found', params) }}" ```
```suggestion - "blkid (when I(label) or I(uuid) options are used)" ```
Missing full stop. All `descriptions:` must be full sentences. This applies to a few other `descriptions:` in these modules.
Add another example with `ipadefaultemaildomain`
it can stay in this file, but i would make into a function that we can then also use in persistent, at least until we remove that. That way we avoid 'bugfixing only one path' in the future.
```suggestion description: Numerical ID of the group that owns the destination directory. ```
Should be 2.4 (as we don't backport new modules to older releases).
This does not need to be wrapped.
> wirte write
Does having a 'rename' option for state make sense? It seems like you could just check if the organization exists and if it does and rename_to is provided, then rename it. Not requesting a change, just wondering.
Maybe even better: ```suggestion new_item['aliases'] = sorted(new_item['aliases'] or []) ``` To convert `None` to an empty list.
My bad. Didn't see if in later stages.
Does the data model / json of the scaleways api ever change? A chained set of accessors like that tends to be a little fragile if the server response change. Could potentially use some defense against that. Afaict, KeyErrors or IndexErrors here would not be caught elsewhere and would cause a fatal error instead of a semi-graceful json_fail.
```suggestion - This is a only when I(type=private). ```
Would this ever return false under normal circumstances? Seems like we'd lose items if it did...
No longer need deepcopy
```suggestion raise AnsibleError("The password script %s returned an error (rc=%s): %s" % (pwd_file, p.returncode, stderr)) ```
No quotes for None, makes it unclear if it's python `None`/yaml `null` or a string.
The other option is to strip the arguments and keep it as a list
```suggestion ``` I don't think this is correct, it would include all the default files-parameters, al lot which are not supported by this module. It is better to only add those that are relevant to this module.
CI failure due to missing module metadata: ``` 2017-02-08 11:07:30 ============================================================================ 2017-02-08 11:07:30 lib/ansible/modules/cloud/misc/qemu_img.py 2017-02-08 11:07:30 ============================================================================ 2017-02-08 11:07:30 ERROR: No ANSIBLE_METADATA provided ```
Wrong doc string
You will need to include the OAUTH_TOKEN environment variable also.
This call is not passing `is_module`, which is required to know whether this is for a module or another plugin type.
this is not a safe across py2 and py3, use the provided `string_types` instead ... but better yet, jsut define the option as type: list and this will be automatically handled for you. Single element, comma separated string and 'actual list' will all be normalized so you always get 'a list'.
Remove the quotes from around `%r` as that may cause a something like `''foo''` to appear in the output.
Is the default false, if so needs adding here and in the docs
```suggestion short_description: Manage volumes on Vexata VX100 storage arrays ```
Please remove this and add a note in the `description:` saying the default port will be based on the connection type, e.g. 80 or 443 for http or https respectively.
Probably more like "Whether the specified network vlan should exist or not"
I think defaulting to `false` is the safest option, and would be consistent with the purge_tags defaults in other modules.
You should use `module.add_cleanup_file()` (somewhere above) instead of manually trying to clean up.
`continue` isn't necessary
I _think_ we're on the same page now. I initially thought about it as a simple wrapper just as `exec_command` is, but in the end it would have the same signature as `send_request`, so keeping the name would remove a lot of changes from the modules. Then again, we don't have any external consumers of the netconf plugin to my knowledge, so we're not tied to names as much as with network_cli, and renaming the function to make ithe intent clearer might be beneficial.
I'd move this to the `write_fstab` function so it does not need to be repeated.
nope, looks like you missed this one.
Not required as we can use connect_to_api method.
this should use atomic_writes (but given how containers normally mount the file, it should note that for them users might need a toggle to allow 'unsafe=true'
Great, thanks for putting this check in here.
How about using `LooseVersion` from `distutils.version`? It usually handles version numbers pretty well. (Grep for `LooseVersion` in the modules directory to see plenty of examples.)
I get it now, so adding diff as part of `prepared` key results is rendering diff in a readable format in output logs. The only concern I have here is this change might break backward compatibility for playbook that depend on `diff` key
Please use add `type: bool`
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
it means the same thing, it's just the flow.
Add alias of `username` (shown in argspec).
I feel like this changes too much, for what could be achieved with less: ```diff diff --git a/lib/ansible/plugins/callback/json.py b/lib/ansible/plugins/callback/json.py index 3961a78aab..fd344a0cf0 100644 --- a/lib/ansible/plugins/callback/json.py +++ b/lib/ansible/plugins/callback/json.py @@ -101,14 +101,16 @@ class CallbackModule(CallbackBase): summary[h] = s custom_stats = {} + global_custom_stats = {} if self.get_option('show_custom_stats') and stats.custom: custom_stats.update(dict((self._convert_host_to_name(k), v) for k, v in stats.custom.items())) - custom_stats.pop('_run', None) + global_custom_stats.update(custom_stats.pop('_run', {})) output = { 'plays': self.results, 'stats': summary, 'custom_stats': custom_stats, + 'global_custom_stats': global_custom_stats, } self._display.display(json.dumps(output, indent=4, sort_keys=True)) ```
ok, as pointed on irc, that's verified by check, so that's ok.
at this point you are just making a copy of the copy action plugin, this is something we want to avoid, a role that uses both copy and docker_service is more appropriate in this case.
```suggestion - Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance. ```
use Mapping and Sequence classes instead as you might get an AnsibleSequence or similar object that does not inherit directly from 'list`
If one of both is required, it is better to force this as part of the argspec.
Yes, please rename. Also, ensure that it returns the tags from the vault too (and update the docs to reflect that)
The description needs to have a trailing dot. (The short_description does not)
Unless it's a specific value, leave the default out and put it in the description like you have done.
If `Migrations()` doesn't have unwanted side-effects (like changing something), you should add `if module.check_mode:` after this. You could for example do it as follows: ```.py if module.check_mode: has_migrations, skip_reason = True, None else: has_migrations, skip_reason = migrations.has_migs(module.params['local_only']) ``` Then continue as before with `if not has_migrations: ...`. (I'm assuming that `True, None` is the more common return value which is to be expected.)
The `module` parameter is unused. ```suggestion def get_pid(name): ```
Oh.. I missed the part about "more than two lines", so please post example output, so we could take a closer look at the issue together :)
you can remove line 124 and 125, the check is done by `get_id_by_name` function, if host is not found.
s/does not do anything/has no effect/
`changed=True` would be better.
Long method names like this put the style checkers in a bind. Here's what I'd recommend: ``` python instance_profile_result = iam.create_instance_profile(name, path=path) \ .create_instance_profile_response.create_instance_profile_result.instance_profile ``` I hate to break on the dot but in cases like these, I think it's the best of several bad options.
Use whatever fixture names make sense. Personally I'd probably name the fixture `XenAPI` since that's the import it is replacing. Then there's no need to assign `XenAPI = fake_xenapi`. Setting `autouse=True` only loads the fixture for the test automatically. If you want access to that fixture as a local, it still needs to be a function parameter. The benefit to autouse is that it guarantees the import will be mocked, even if the test doesn't require a reference to the fixture. However, there's nothing wrong with specifying an autouse fixture as a function parameter. Doing so simply makes the auto-instantiated fixture available as a local within the test function. To guarantee correct fixture order, declare that the `fake_xenapi` fixture is used by the fixture providing `ansible.module_utils.xenserver`. Modifying `sys.modules`, or making other changes to global state, outside of a test fixture or function will apply those change to all unit tests (everything under `test/units/`) when pytest collects the tests before they are executed. Since we run unit tests with the pytest `--boxed` option, each test is run in a separate Python process after the initial collection is performed. This means that any global state changes made in-process by a test function are discarded at the end of that test function, but all changes made during collection are shared. Imports handled during collection will result in changes to `sys.modules` that will be shared across all tests. This is fine for regular imports. However, the mocked import for `XenAPI` is specific to the tests in `test/units/module_utils/xenserver/`, so it should be restricted to those tests. If another test, such as one for a xenserver module were to also mock `XenAPI` they would conflict.
I'll fix the "all files" bit. The old sentence had more `from`s than I thought were necessary - "from a YAML/JSON files . . from within a file or from a directory". The new sentence is cleaner. But if it's not as clear, let's find a different way to say it.
Ah. lambda is prettier though :). maybe we can run pep8 with ignore lambda error.
In Python, we avoid adding unnecessary brackets.
You'll also note I updated the else statement to correctly reflect the vars used later. eg. cert_chain not chain.
```suggestion by setting the ``REGISTRY_AUTH_FILE`` environment variable. ``export REGISTRY_AUTH_FILE=path`` ```
I would add here as well some code to set the `result['failed']` according to what the module should do. ``` if action in ['started', 'restarted', 'reloaded']: result['failed'] = result['status']['current_state'] != 'running' elif action == 'stopped': result['failed'] = result['status']['current_state'] != 'stopped' ```
We don't support Server 2008 with this module so this line isn't needed.
Would be better if you write it as( it will auto fail if host is not found): ```python hosts_service = connection.system_service().hosts_service() host_id = get_id_by_name(hosts_service, host) disks_service.disk_service(disk.id).refresh_lun(otypes.Host(id=host_id)) ``` Don't forget to add `from ansible.module_utils.ovirt import get_id_by_name`
Would be great to give a brief spiel about the 2, I know `windows` doesn't support explicit credentials so maybe say `password` is not required for that. I would also put this in a new list entry and start with a capital and end with a full stop.
it's not explicitly necessary but I decided to create a dictionary that I could index with a meaningful key to keep track of the commands that we are building for `http, http_port, https, https_port and sandbox` settings. This way I can just overwrite the dictionary entry as more information is discovered and then build the final list called `send_commands`.
this still has the #73643 issue, we might want to store the 'raw' notification instead and reprocess handler matching so we always get the 'latest' version of that handler
This is performing a job match against the artifact name. In order to filter artifacts based on jobs you need to use the timeline results and match the artifact `source` against the timeline `id` for a given job.
[`to_text`](https://github.com/ansible/ansible/blob/9c1033422b53b7308f2ec7229222c8e7740f4566/lib/ansible/module_utils/_text.py#L169) is wrapper function.
You should be able to catch `TypeError` here rather than `Exception`. Though I suppose a custom callable as a type checker could raise something other than `TypeError`.
lets' decide myAsg or myApplicationSecurityGroup
Now you need to update `self.public_key` another time.
The goal is to keep compatibility, and default to "no" would be safe in this case, (except it make sense to change the behaviour). Could you explain why it would be good to change the default to "yes"? If yes is the default, I would suggest to make an entry in the porting guide https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/porting_guides/porting_guide_2.10.rst.
I prefer `if not module.check_mode and change_string:`.
+1 to that I think.
Oh, I see. `run_commands()` runs list of commands and returns list of results.
This should say "- Whether the image is allowed to grow"
Rename DO to DigitalOcean to avoid acronyms
@siwyd @alikins Such timing -- I was about to submit a PR against module_utils/facts/virtual/linux.py to check {{product_name}} to detect a DO droplet when I came across this PR. $ cat /sys/devices/virtual/dmi/id/product_name Droplet
```suggestion result['stderr'] += to_native(stderr_data) ```
I'm not sure about these defaults - a delay of 3 and backoff of 2 for 10 tries would mean that, to fail, this retry decorator would wait for 3069 seconds (`3 + 3*2 + 3*2*2 ....`, or `sum([3 * 2**i for i in range(10)])`) or about 50 minutes. That seems like a really long time, especially since most modules make several calls. A better default might be 4 tries, for a total default wait time of 45 seconds and having a max of, say, a minute between tries. That way, if someone wanted 10 tries it would only take about 7.5 minutes to fail.
You'll need to handle pagination if there are a lot of APIs. Should probably handle rate limiting here too https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#api-throttling-rate-limiting-and-pagination
```suggestion description: If True, system firmware will use UEFI boot explicitly. ```
`If an empty list C([]) is specified`
Line is too long.
Ok, so I may have given you the wrong advice before. I was under the impression that these modules were talking to a backend, but (at least) this module seems to run on the remote target (over SSH ?). So delegate_to: localhost` will not work correctly.
We should convert filenames to bytes before passing to open. Like this: ``` python with open(to_bytes(in_path, errors='surrogate_or_strict'), 'rb') as in_file: ```
```suggestion - The plugin returns following groups of swarm nodes: I(all) - all hosts; I(workers) - all worker nodes; ```
There is no need to add quotes here. Please remove them from all modules.
Same here: use `AnsibleModule.digest_from_file()`.
The `u` prefix should not be needed.
align is always lowercase.
```suggestion - 'If C(state) is set to C(powered-on) or C(poweredon) and virtual machine exists with powerstate other than powered on, ```
Then it is not secure. CTR mode requires an unpredictable and unique value as part of the counter. Previous code was correct in taking the full IV from PBKDF2 output.
is there a reason why you have a native str, I would have assumed it was a byte str beforehand for a reason. I know the tarfile is very particular about the type of string being used.
These should not be using the exception key like this. exception is only for the traceback. So this line should really look like this: ``` python import traceback from ansible.module_utils._text import to_native [...] self.module.fail_json(msg='Error getting user %s: %s' % (self.name, to_native(e)), exception=traceback.format_exc(e)) ```
Use `wait`, it's standard for similar modules. Requires a configurable `wait_timeout`. I'm not sure whether it's worse to have a default `wait` with a timeout in excess of 20 minutes so that it typically succeeds, or just no wait so that people at least knowingly set a long wait time. I'd think default to waiting off, but default to 30 minutes wait_timeout if people do set `wait`
``` >>> asntime1 = "2017010100000+1000" >>> asntime2 = "2017010100000Z" >>> asntime1 >= asntime2 False ``` Also minutes and seconds are optional in ASN.1, as well as an additional 3 digit millisecond precision... The real proper way would be to parse the ASN.1 format to a datetime, but that would require another library (cryptography can do it, or pyasn1) which is a quite high requirement for just making sure that some edge cases or weird certificates work. I think it could be ok to just keep it like this for now and if it really causes issues, either include a few edge cases that are found in the wild or maybe by then some of the slow moving stable distros have dropped out and the module can be rewritten anyways. :-) PS: pyOpenSSL depends on cryptography and if pyOpenSSL is installed, cryptography will also be installed already.
Missing space between `vrf,` and `the`.
```suggestion except (OSError, IOError): ``` Since you are not using `e`.
should be consistent with sample name and resource_group
> Are you suggesting to just duplicate the code from build_summary() within each for loop? Nope. It just seems like this nested function could be a method or a standalone function. > I don't see how having the nested function within _create_role_list() makes testing harder, In order to unit test `build_summary()` you would need an instance of `RoleMixin`, then call `_create_role_list()`, and then write the test in such as way as to only run `build_summary()`. It just makes it harder to get to _just_ `build_summary()` for testing, which makes it harder to throw tons of varying inputs at `build_summary()`.
It would be neat if `randomize_list` also accepted a similar `seed` arg for repeatable (pseudo-random) ordering.
```suggestion description: If True, system firmware will use UEFI boot explicitly. ```
Same duplication of functionality as with `post_request` function.
If they really don't want the condition to apply to handlers, they should make it into a block in tasks/main.yml instead of trying to apply to the whole role, possibly setting up vars to deal with it: ```yaml - block .... when: '{{conditions|default([])}}' ```
Yes sorry, there is a misunderstanding; the region `choices` have to be removed (but not the `required` in my opinion). Same for the other products. Moreover, I think that we can keep the constants for region/zone (cf. my example of `module_utils/scaleway.py` above) and adopt it in the whole project.
Try this: ```python attrs[name] = list(map(to_bytes, value)) ```
Windows 8.1 / Windows 2012 (NT 6.2), no need to set the PS version as that will inevitably confuse people on older OS' who have upgraded to PS 4 or higher.
`state` argument is probably missing for this module.
lacking parameter validation, user should be notified if the minimal requirements for lookup to work are not met
```suggestion - A list of key value pairs. ``` Descriptions should be complete sentences.
Not needed. The module is new in version 2.4.
@marcin-sucharski check against current development, I've merged stringification at run_command so you might not need to do this anymore.
Sure, a separate PR sounds good.
You're importing ClientError itself as well as botocore, but still using `except (botocore.exceptions.ClientError, ...` instead of `except (ClientError, ...`. Could remove this import. Or add , BotoCoreError to this too and save some line length in places below.
One super duper nitpick: can you swap the order on this conditional so the current/new lineup with the above? That way I think it's easier to tell this is an inversion of current/new in the previous statement.
`policy` should be added to `argument_spec` to be usable.
ipt_load_stderr doesnt appear to be defined anywhere.
```suggestion config_mapping['restart_retries'] = restart_policy_config_value.get('MaximumRetryCount') ``` and remove the line above. (Or even rename `restart_policy_config_value` to `restart_policy`.)
Maybe? ```suggestion self.facts[host].update(value.get('ansible_facts', {})) ```
This will fail if `self.accounts_uri` is not initialized.
```suggestion if self.state == "present": ```
No need to quote, we prefer it as a list. ```yaml author: - Daniel SÃ¡nches FÃ¡bregas (@Daniel-Sanchez-Fabregas) ```
I would remove the previous and the current line. If you write `persist_only`, you want to make sure that the variable is set in he `mysqld_auto` config. If it is not set there (but it is set in the running instance), you still want to execute the query.
```suggestion - Either I(parameters) or I(parameters_links) is required if I(state=present). ```
I'll fix the "all files" bit. The old sentence had more `from`s than I thought were necessary - "from a YAML/JSON files . . from within a file or from a directory". The new sentence is cleaner. But if it's not as clear, let's find a different way to say it.
Missing full stop.
Your PR #52278 needs more `shipit` commands to be merged
```suggestion - When the webhook does not exists in this GitLab project, it will be created. ```
enabled/disabled for this as we are talking about a service (email)
I think a brief sentence is worthy. Nothing is worse than trying something only to figure out the target API on the server isn't compatible. We should try to remember to ask this question of all new modules and substantial changes.
This is dangerous. Three could be several reasons why opening the container fails. These do not mean that the key does not yet exist.
same here, we really dont want to test the particular setting, just that both the default (dynamic template) and the nii entry are correctly parsed.
I've been thinking the same thing. Ideally it would be great if the validator raised exceptions, instead of passing back formatted errors, but I get the reasons why it is like it is currently.
This one still needs to be swapped.
To be consistent with other modules, can you please change this to: ``` validate_certs: description: - If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates. required: false default: 'yes' ``` And update code & argspec as needed
This should be: ```python if state == 'present': ```
Ah. lambda is prettier though :). maybe we can run pep8 with ignore lambda error.
Reading the code, this appears to expect a hostname and not a URI.
Please remove this line.
```suggestion variables = {} ```
The module should not wait for `force` here. All `openssl_*` modules also don't do that, including `openssl_privatekey`.
Please remove the "required: false", you only have to add `required: true` if it is required.
```suggestion pn_admin_session_timeout: ```
Can this be added in agrspec as choices as well? Probably by having this list as a global variable.
```suggestion account_id=dict(type='str', fallback=(env_fallback, ['SPOTINST_ACCOUNT_ID', 'ACCOUNT']), ```
Please remove empty `aliases:` lines
I'd check for `pwsh` and give a more user-friendly error message if it's not available. When I run this without `pwsh` available I get an error like: ``` ERROR: lib/ansible/modules/windows/win_ping.ps1:0:0: E321 Exception attempting to import module for argument_spec introspection, 'env: pwsh: No such file or directory ' ```
no, it's probably not fixable anyway
Create address service object on PanOS devices This may need updating on existing modules
Not needed with AnsibleAWSModule
should probably have an upper bound of < 10 just for sanity
heads up, `r` is undefined.
That is a limitation but there is a workaround (see #22630)
Okay, so alancoding says that this could throw an error that it can't figure out which organization you meant if there is more than one organization. Perhaps what we need here is: ``` python if organization is not None: try: organization = organization_res.get([....] ```
Not required ? Don't say so. This is implied.
Move the check_mode test into the `do_notify_teams` function, and see if you can do something relevant instead e.g. test the connectivity so you do as much as possible in check-mode.
a more generic interface might make this easier, something that loops over the param if not all and just calls matching classes, leave `get_all_facts` as the normal trigger for `all` value.
I suggest to add an example of this
The else: is not really necessary here since there is a return just above. But it does not change the behavior.
this will affect it if a user is explicitly passing the default as an option (iirc we had issue, will try to find)
... and then the call to instantiate AnsibleModule can look like this: ``` python self.module = AnsibleModule(argument_spec=merged_arg_spec, required_if=merged_required_if, **kwargs) ```
```suggestion verbosity = [] if display.verbosity: verbosity = ['-%s' % ('v' * display.verbosity)] ```
default: none is also the default.
Set the default timeout here: ```suggestion def lock_file(self, path, lock_timeout=15): ```
Sorry, my bad. I didn't see the implementation of `_run`.
@thomwiggers `line.partition(':')[2]` yes, I have no problem with that.
```suggestion parts = to_native(date.strip()).split(':', 1) ```
The condition is a bit long, I would write it this way instead: ```python if perm.principal != self.principal['domain'].upper() + '\\' + self.principal['name']: continue if perm.group != self.principal['isGroup']: continue ``` This way, you avoid an extra level of indent.
`state` argument is probably missing for this module.
The syntax for copyright line is: ```python # Copyright: (c) 2017, VEXXHOST, Inc. ``` And I'd add a blank line before.
When quoting an option choice/value, enclose it with `C()` instead of a single quote, e.g. `'present'` becomes `C(present)`.
I don't think installation should be covered by this modules, there are plenty of package management modules that are better suited for this, at worst a role that downloads and installs it
We typically do `present` and `absent` to control the state of a resource.
please check developer docs for how to deal with required libs, this should not give an exception at this point (load) , it should happen at `parse()`
```suggestion "Error: " + to_text(err)) ```
many modules have the default of `state=present`. consider this as a default if you feel it make sense.
Same here. Looks like some strange linewrapping is going on.
I think this would be 2.7.
there is no need to version params for new modules
Can you make this something like: `module.fail_json(msg="Failed to create launch configuration", exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))`? It will be helpful for future debugging.
```suggestion # Run masked_action when enabled param is not provided or service is supposed to be enabled/started. if not module.check_mode and module.params['enabled'] in [None, True]): ```
Aren't we losing some good "text" here? Shouldn't probably do more than just `to_native(e)`
Manages bundles on Clear Linux systems
This seems like it will make for a hard API to use because it will fail when the lock_file is owned by another user (so playbooks run by different users or async with tasks that become different users will raise Permission denied errors). It seems like problems opening the lock_file should be part of the timeout.
```suggestion - The status of the secondary location of the storage account; either C(available) or C(unavailable). ```
Why was replace('\n', '') removed? If that was required before I don't see anything that would replace it now.
but sample is the key, it could have any value, and there I do expect such things to occur, but not on the keys themselves.
Need to bump this to `2.6`
You don't really seem to be using `params` as a useful dict at all in this method. Setting `group_name = module.params.get('name')` and then using `group_name` rather than `params['GroupName']` would make more sense
Not strictly necessary as the default for parameter is that they're not required.
AFAIK the Ansible functions should work, could you please provide a sample input value and expected output value given that input.
Anytime I reach for map or filter, I like to use a list comprehension of generator exception instead as it is faster and considered more pythonic. ``` python return [p.name for p in q] ```
and please add space after `)`
Wouldn't this be handled by the branch above? ``` if hostname.count(':') > 1: ```
As mentioned on IRC, please remove this (from here and other examples) and update https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/oneview.py#L210 to be `password=dict(type='str', no_log=True),`
The `upper()` and `replace()` calls here seem unneeded given that the input is very strictly formatted already. But that's not a showstopper either.
please add ``` from __future__ import absolute_import, division, print_function __metaclass__ = type ```
No need to quote this string.
```suggestion message_text = self.get_deprecation_message(msg, version=version, removed=removed, date=date, collection_name=collection_name, warn_change=warn_change) ```
When changing portgroup or NSX-T portgroup to dvportgroup under this condition error occurs. The cause is that the `port` key does not exist when the portgroup or NSX-T portgroup is assigned to the vNIC. The following conditions are necessary. ```suggestion if network_object and hasattr(network_object, 'portKeys') and hasattr(nic_spec.device.backing, 'port'): ``` tested on vCenter/ESXi 6.7
Missing full stop. all `description:` fields must be full sentences.
The place where the `main()` function is called explicitly does `sys.exit(main(sys.argv[:]))`. So `return 0` should really be here. (And yes, returning nothing is equivalent to `return None`, and `sys.exit(None)` is equivalent to `sys.exit(0)`, but it's still nicer to have an explicit `return 0` IMO.)
This should not be opened with "+" (as that allows writing the file). I can't remember off the top of my head whether python2/python3 setuptools expects text strings or byte strings for longdesc. My guess is text strings. Since there isn't any non-ascii characted in README.rst I think we can ignore that for now and just use native strings but we might need to figure it out in the future.
I would also detect if the value is a bool and set it accordingly to `on`/`off`.
Updated to use percent formatting
version should be at least 4 from the point of deprecation so 2.7
I think it might be better to only minimally change the code by changing line [529](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/s3.py#L529) to `if '.' in bucket and not rgw and not is_fakes3(s3_url):` instead of manually fixing aws_connect_kwargs.
Please remove `required=False`.
`collection_from_task, _, module_name = self._task.action.rpartition(".")` will always work regardless of whether a collection is present or not. So: `"ansible.builtins.eos_config"` returns `("ansible.builtins", ".", "eos_config")` `"eos.eos_vlans"` returns `("eos", ".", "eos_vlans")` but also `"eos_l3_interfaces"` returns `("", "", "eos_vlans")` which avoids the weirdness with `split`
should use `get_versioned_doclink` function as 'latest' might not apply to the 'current version'
This should be indented only by 2 spaces.
Another general exception handling that can be removed.
Options that are not required don't need a `required: False`. It is implicit. You can leave that out.
So this class can be initialized with both format we send and format we receive? Neat! :heart: Worth mentioning in docstring IMHO.
@chouseknecht thanks a bunch, it makes sense to me. FWIW, I'm happy to help with the maintenance of the openshift client too. I'd like to help keeping the ansible module and the openshift client aligned with upstream kubernetes.
ansible.module_utils.ec2 sets HAS_BOTO3 to the correct value.
Also, this was added for a specific reason which made the module fail for some users, so removing it will also make the module non-functional for those users. Another reason why this is a NO-GO.
there's resource group missing in that sample
```suggestion - C(name), name of app service plan. ```
it would require to have the content into a var e.g like with the slurp module.
This function is already defined.
lets' decide myAsg or myApplicationSecurityGroup
Follow pattern as above. And revert to the correct spelling of `transmitted`.
Since the only value needed here is the password, this can be simplified: ```suggestion PASSWORDS = dict( password='test-vault-password', default='rainbows-are-pretty', ) ```
```suggestion 'Unable to connect to socket %s. See the socket path issue category in ' ```
if the user hasn't provided status module.params.get('status') should be == "enabled" since it's defaulting to that in the arg spec. You should be able to just do `if state == 'present' and module.params["status"] == "enabled":`
You are correct, I didn't look at all the code and assumed assumed there was a break on match, its last, not first, found wins ... which makes me want to rewrite this section. Not only can we have multiple package managers (add fact with list), but the traversal can be reversed + break to make it perform better. Another 'optimization' would be to create diff lists for OS families.
tempted to move to base class and make static
Missing '.' at end
Please add a `version_added` to this as well.
```suggestion specify the user via UID, you must set C(ANSIBLE_REMOTE_TMP) to a path that exits ```
but to_boolean doesn't convert values to booleans. It's really normalize_options(). It's just that the only implemented normalization at the moment is for boolean values.
``` python except KeyError as key_name: ```
Suggestion: ``The name of the node to be renamed. If I(name) already exists, no action will be performed.`
no, it's probably not fixable anyway
`str` is superfluous here, it should be removed.
```suggestion - Controls if the machine is allocated/deallocated, only useful with I(state=present). ```
We generally don't mask the usernames, just passwords.
Should become parameter `password` (with a backward-compatible alias). (See #20160 and #25398)
```suggestion - Support for protected values requires GitLab >= 9.3. ```
well, actually, I guess I would leave it None in the parameter list and change the setting of version which happens below to take the vault_id special case into account like this: ``` python if vault_id and vault_id != u'default': if not version: version = '1.2' else: raise AnsibleError("The vault format version must be at least 1.2 if vault_id is specified") elif not version: version = '1.1' ``` @alikins wrote the vault_id stuff, though, so he would be the one to ask if there's a reason he coded this the other way. (Note that this also appears to be a tangent to the main purpose of the PR, so perhaps it should be spearated into its own PR).
@mattclay what do you think of this? I think it's okay but I didn't trace through and see how stdout_text and stderr_text are used later to make sure.
If you are cloning from a template, there is no guest_id parameter. So we should also check the current vm's guestId setting.
Basically @gundalow's point is that you don't need to repeat the work that Ansible is already doing enforcing required parameters
Set the default timeout here: ```suggestion def lock_file(self, path, lock_timeout=15): ```
Handle NoCredentialsError as well
```suggestion self.module.fail_json(msg='Unable to add required signing key for%s ', rc=rc, stderr=stderr, error=to_native(e)) ```
Here too, I believe you don't need the `cdrom_exist` variable.
Wrong doc string
This is a personal preference, but I'd rather not have a class name in all caps.
Not sure this would work if flexvol_name is not specified.
oh I see, it makes sense then.
Line is too long.
Move it down the stack.
Yes. We'll probably need to consider redesigning defaults separately. Out of scope now.
Sure, but this assumes that there is nowhere else that this kind of thing comes up. I've heard of people doing their own private connection plugin that inherits from `ssh` and modifies some behaviors. With as many options that are specified by the config fragment in the `ssh` connection plugin's docs, this same situation could easily crop up.
This one looks good but should be part of the TypeError block instead of in a finally block. The reason to me is that if the TypeError block runs successfully, then the code has successfully fallen back to code which handled the error. If the TypeError block throws its own exception (or the initial pexpect.run() failed for a different reason than TypeError) then we haven't handled the exception and the traceback could be helpful.
No quotes needed here;
DO NOT AUTOINSTALL use the HAS_LOGDNA variable as a flag and return an error with the requirement when the plugin is invoked, plugins should NOT autoinstall libraries, also pip might not be installed on target systems and is also a possible error point. you can look at other lookups (like consul_kv) for how to deal with this issue
I have submitted a couple of modules with the new approach that takes care of check-mode. I am waiting to hear back from @schunduri that this approach is acceptable before continuing to enhance other modules being developed.
I don't think the logic is right here. * For failed==False, I think that the module side handles the play_context's no_log? (IIRC, we pass that into the module as _ansible_no_log?). * It feels like we should only be calling this for failed==True. failed=False should be handled entirely module-side. So I'd do the failed=True|False check in the calling code and only call this if we've failed. * The check to add invocation needs to always depend on play_context.no_log being False. If there's any case where no_log is True and we still add the invocation we'll be violating the security guarantees of no_log.
I don't like to frame such big block of code into an exception. Please put the exception only around the command which actually can throw an exception.
I'm totally fine with your explanation and it was just a starting point by my side. And you are right, that the usage in your module in this case is simpler, so no change needed.
You don't really seem to be using `params` as a useful dict at all in this method. Setting `group_name = module.params.get('name')` and then using `group_name` rather than `params['GroupName']` would make more sense
```suggestion is_auto_revert=dict(required=False, type='bool', default=None), ```
Use module.warn() instead.
catch all exception should be avoided
We tend to sort the various imports, so swap those two lines.
I'm not sure about these defaults - a delay of 3 and backoff of 2 for 10 tries would mean that, to fail, this retry decorator would wait for 3069 seconds (`3 + 3*2 + 3*2*2 ....`, or `sum([3 * 2**i for i in range(10)])`) or about 50 minutes. That seems like a really long time, especially since most modules make several calls. A better default might be 4 tries, for a total default wait time of 45 seconds and having a max of, say, a minute between tries. That way, if someone wanted 10 tries it would only take about 7.5 minutes to fail.
No trailing dots ! :-)
Well you don't need the `if`, you can just run `.replace()` and it'll do the right thing regardless of whether there's a slash in the string.
register it in a playbook and use it later. The module has already parsed the file into a object (self.lines and its records). That avoids the need to refetch and do string parsing to inspect the results.
disable logging to given remote host
All occurrences of 'Gitlab' should be 'GitLab"
Imported but unsed
This argument is marked as being removed in the same version it is introduced. This makes no sense.
not 2.4 compatible, checks are probably skipping everything in 'cloud' but considering the target platform, we might want to keep 2.4 compatibility in this case.
Rather than a try/except you could do: `old_port = self.data.get("endpoint", {}).get("port")`
Since we are now aggregating inventory info from multiple systems, the output should show which system the inventory info belongs to. Suggest changing L280 above to: ``` entries.append(({'systems_uri': systems_uri}, inventory['entries'])) ```
As far as other platforms modules are concerned there is a link to the platform user guide in the notes section since it supported more than one connection type, For example, refer https://docs.ansible.com/ansible/latest/modules/ios_config_module.html If it is missed for some module it is doc related bug.
This should just be `name` since `pubnub_blocks: block=foobar` is a bit redundant.
i.e freebsd has had 'service' (iirc since 8.0) but it actually uses a rc init system, not sysV.
If possible, do not use global variables. Pass the module to the function as a parameter if needed.
Please don't use `\`, there are better ways
```suggestion - When I(state) is C(absent) and I(thumbprint) is not specified, the ```
Make this two items. We prefer the first line of the description explain what the option is for. So rather: ```yaml name: description: - The name of the flatpak repository to manage - When I(state) is set to C(present), I(name) is added as a remote for installing flatpaks. - When used with I(state=absent) the remote with that name will be removed. ``` PS There's a type in `thet`.
This needs to be CacheSubnetGroupNames. And the associated module parameter type should be set to 'list'.
@tintoy, yes that's about what I'm talking about. I'd probably put all that logic into a single function, though. So you'd call get_credentials(module) and it would first look in the module parameters, then the environment, and finally in the dot files (returning the first set that it found).
Rather than nesting this code here, I'd recommend performing the test in 'main' as a sanity test, prior to starting any of the real logic. See ecs_api_handles_launch_type for an example of how this has been handled for other boto3 requirements. (currently lines 308-313 and 373-374).
```suggestion - The certificate in PEM format. ```
+1 for this.
```suggestion - Possible values are C(INVALID), C(NEW), C(ESTABLISHED), C(RELATED), C(UNTRACKED), C(SNAT), C(DNAT). ```
All `descriptions:` should be full sentences, e.g. start with a capital letter, and end with a full stop.
I would omit the 3, it seems like in the internal API you can set as many recovery actions as you want. It's just the GUI that limts to 3.
Add alias of `username` (shown in argspec).
Returning only parsed data here severely limits the usefulness of this function, since any requests will be considered OK as long as the response can be parsed as JSON. This means that server returning status 404 or 403 will still be considered success, but the rest of the code has no means of checking that since status is removed from the return value of this function. It would be probably better and more consistent to return complete response here and write another wrapper function that can then check the return status, parse JSON if neeed, etc.
```suggestion description: library creation success and library_id ```
Looks to be likely boto3 1.9.45, botocore 1.12.45.
Needs a check to see if it is empty, and if so, fail the module
There can't be spaces in cluster name.
Most modules using public cloud providers offer a `validate_certs`/`validate` option[1][2]. I think the same apply here. [1] https://docs.ansible.com/ansible/latest/modules/ec2_snapshot_facts_module.html#ec2-snapshot-facts-module [2] https://docs.ansible.com/ansible/latest/modules/os_volume_snapshot_module.html#os-volume-snapshot-module
This should have exception handling around it. Once you update to AnsibleAWSModule you can do: ``` except (BotoCoreError, ClientError) as e: module.fail_json_aws(e, msg="Unable to list clusters") ``` and it will use e.response and add the traceback for you.
I think for consistency we should add `.gcp_compute.ya?ml` as an accepted suffix, since that's the actual plugin name.
```suggestion version_added: '1.9' ```
I don't think we should be referencing a private attribute/variable here in any case. We have no guarantee that it will exist in any future release either.
should be 'additive' to result when other operations are also executed, unless you force to make it an exclusive argument to all others
I just realized we are missing this in all plugins (i just updated foreman #42355 ): ``` plugin: description: the name of this plugin, it should always be set to 'tower' for this plugin to recognize it as it's own. required: True choices: ['tower'] ```
```suggestion - Must include VM name, appended to 'folder' as would be passed to M(vmware_guest). - Needs to include C(vm) between the Datacenter and the rest of the VM path. - Datacenter default value for ESXi server is C(ha-datacenter). - C(vm) is not visible in vSphere Web Client but necessary for VMware API to work. ```
You can remove the `required: false` lines, it's implicit
`removed_in_version` for `force` should be `2.6`. We follow deprecated version + 4 for removed_in_version.
I feel like 300 seconds is a long time to wait. Most droplets are created within 120 second range.
All of these uses of `str` should be switched to `to_bytes(var, errors='surrogate_or_strict')`. `to_bytes` comes from `ansible.module_utils._text`.
it seems this and other parameters are missing from docs
add CALLBACK_NEEDS_WHITELIST = True this is recent addition, it keeps plugins shipped with ansible from being executed automatically unless whitelisted through config.
This seems to leave open the possibility of collision... Probably unlikely, but possible (`EOF` is common with embedded heredoc). Though i guess the user could prevent by providing anchors to the `EOF` if they wanted to match text (`^\s+EOF` or something).
```suggestion raise AnsibleError('Invalid setting identifier, "%s" is not a string, it is a %s' % (term, type(term))) ```
Much better, thanks
needs to be added in the purge attributes
The default values of `graph_width` and `graph_height` in the code used to be `None`, not 200 resp. 100. Is this change intended? I don't know how the settings work internally (didn't bother to check), but such a change could modify the behavior of the module (if `None` was "keep whatever the user currently had configured").
```suggestion module.fail_json(msg=to_native(e), errno=e[0], reason=to_native(e), **result) ```
I think this might explode if `obj_type` is not one of `functions`, `indexes` or `tables`, maybe it would be safer to do something like? ```suggestion obj_func = self.obj_func_mapping.get(obj_type.strip()) if obj_func is not None: obj_func() else: module.warn("Unknown filter option '{}'".filter(obj_type.strip()) ```
Perhaps, `Will ensure the datacenter resource exists and its properties are compliant with HPE OneView` Or something along those lines. As it is right now I'm not sure if it is clear that this resource can actually be created if it does not exist.
``` deprecated: version: 2.5 alternative: Use M(nxos_l2_interface) instead. ``` I'm working on fixing this for the existing modules
Should probably use `compare_aws_tags` for future reference but not a blocker here as it is only recently available
doc string doesn't match actual return data
please keep line length pep 8 compliant
```suggestion - Runs C(apt-get install python-apt) for Python 2, and C(apt-get install python3-apt) for Python 3. - Only works with the system Python 2 or Python 3. If you are using a Python on the remote that is not the system Python, set I(install_python_apt=false) and ensure that the Python apt library for your Python version is installed some other way. ```
1) Is this the same as EOS & IOS's privilege mode? 2) Would a password ever be needed 3) In Ansible 2.5 we are moving to using the standard Ansible 'become` system to enter enable mode, though that requires `connection: network_cli`, which I don't believe you are currently using.
s/write target file {0}/fetch file to {0}/
He meant - return dictionary may / can contain previous state of properties and current state of properties so user can distinguish between action.
updatedâuptodate (or up_to_date)
image image -> stack
Oh my bad, apologize, according the doc, it should be True by default
(Similarly, mark any string that you are going to call decode on with as a b"string".)
Running this in check mode will always result in a change even when an update is not needed. You need to do check the existing object to see if it needs updating before you exit here.
Mind putting this magic value into a constant with a descriptive name? I'd read much better if it was ```suggestion sys.exit(RC_CLI_INIT_FAILURE) ``` or something like that.
```suggestion version_added: "2.10" ```
Change `should` to `would`.
Please don't return different types of data from a function. It should always be consistent and discourage checking the return value. Unlike low-level C-code, Python provides you with a variety of handy ways to communicate failures to the calling code (like exceptions).
This should be `2.9` as we don't backport features.
This seems like it should be a context manager rather than a pseudo-decorator
``` auth_key=dict(type='str', no_log=True) ``` -> ``` auth_key=dict(type='str', no_log=True, fallback=(env_fallback, ['MERAKI_KEY']), ```
It would be useful to tell the user which `key` is invalid.
@jmighion would be great if you can update ios_config as well. Thanks!
Is there another option than this? If I give the parameters: ``` elb_target_group_facts: names: - validtargetgroup - notatargetgroup ``` and validtargetgroup exists and notatargetgroup doesn't, I'll get back no facts. Not sure if that's desired behavior or easily fixed if not.
Period at end.
I think the ` if self.param('kernel_params_persist') ` should be also here for cmdline
The value should not be quoted.
```suggestion - List of denied data actions. ```
If we do add something like this, three thoughts on the formatting the string: - Use clean_args since that will have had private parameters stripped out. - What's PERM? Should this be ARGS instead? - Use to_native(e) and to_native(traceback.format_exc()) instead of str(). (clean_args should be a native string so it shouldn't need to be coerced here).
Isn't it missing a whitespace ? Are you sure environ is defined here ? I don't see it. Perhaps this would work too, if you do want OVIRT_URL= to override kwargs['url']: kwargs['url'] = environ.get('OVIRT_URL', kwargs['url']) Example: $ A= python -c 'import os; print os.environ.get("A", "X")' (we get an empty string) If you do not want OVIRT_URL= to override kwargs['url'], then you can use or: kwargs['url'] = os.environ.get('OVIRT_URL') or kwargs['url'] Example: $ A= python -c 'import os; print os.environ.get("A") or "X"' X (we get the value that's at the right of or) Hope this helps
Doc describes `intenal`, no `state`
This will fail if `self.accounts_uri` is not initialized.
@mmazur, cool, do you have a pull request for devel as well? I can merge both today.
Why include the `.` in the character groups? `[\w.]` is the same as `[.]`- and allows lots of things we don't want...
this only happens if a relative path is given and it is not only in 'files' but that would be the first subdir checked.
```suggestion - 'If C(state) is set to C(powered-on) or C(poweredon) and virtual machine exists with powerstate other than powered on, ```
Set self.is_group by default to False
This one is correct.
I would be consistent and pick one of them. Although, returning after in place modification doesn't add a value, it only makes sense if you will do a deepcopy of the dict and never modify the passed one.
Fixing such stuff is in general a good idea, but it's better to do it in a PR which can be backported ;-)
maybe? ```suggestion mod = sys.modules.get(fullname) or self.load_module(fullname) ```
no need to do this check, the plugin never gets called if disabled
Or maybe ```suggestion self.default_inventory_hostname = '_'.join(( vm_model['name'], hashlib.sha1(to_bytes(vm_model['id'])).hexdigest()[0:4], )) ```
```suggestion 'ACCEPT', '--cstate', 'NEW', ```
The module does not seem to support check-mode.
Missing full stop. all `description:` fields must be full sentences.
I find a list of dict easier to handle rather than dict of dict.
Since we're optimizing to solve this bug, would be good to move regex compilation up to be a one-time thing. Maybe a class attribute or global for each compiled regex. ``` python class LinuxHardware(Hardware): BIND_MOUNT_RE = re.compile(r".*\]") [...] if re.match(self.BIND_MOUNT_RE, fields[1]): ```
Indentation doesn't seem quite right here.
```suggestion pvdiplay_cmd_device_options = [pvdisplay_cmd, device] + pvdisplay_ops ```
Make this: ```python result = set_vm_power_state(pyv.content, vm, module.params['state'], module.params['force']) ``` Remove the stuff below.
```suggestion - A description of the template. - Include enough detail that the user will understand what is being deployed... ```
Missed one.. Should just be as below unless you want to also pass module into the function. ``` if os.path.isfile(cert_chain): cert_chain = open(cert_chain, 'r').read() ```
Add Python3 boilerplate ```python from __future__ import absolute_import, division, print_function __metaclass__ = type ```
```suggestion - Desired SR-IOV state on interface. ```
Somehow this (+ the following line) doesn't work and prevent the module from working.I haven't digged deeper yet,
even better would be to show what specific operation we were attempting, but that does not seem clear w/o parsing the uri itself (for that, the caller should be processing the exception)
/me retires very old vm images We should be OK with anything added before v240 (and that is already ancient).
i would just keep a templar object and change 'get_handler_templar' to get variables and set it, avoids creating N templar objects and the 'dummy' becomes the main templar object.
`datastore.name` requires access to the datastore itself, and thus might throw a permission error. This value should be wrapped in a try/except.
These probably belong in the same section ```suggestion ```
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` mutually_exclusive required_together required_one_of require_if ```
why do you need to use StopIteration etc? I think for item in response will handle the iteration including paged result.
```suggestion cpu_facts['processor_cores'] = int(data[1]) ```
Also, this will mean you need to `import traceback`
Please check this.
Please rewrite as ``` if __name__ == '__main__': main() ```
No need to quote this value.
Okay, let's do this.
I think there might still be a concern of a race condition, between the check, and the creation. I know @abadger had some concerns as well.
Probably need to ensure this is a list or a set. ```yaml - name: flush my_handler meta: name: flush_handlers filter: my_handler ```
So you added an extra maintainer. Very good :+1:
This should use `ansible.utils.path.unfrackpath`.
It's usually better to use raw-strings for regexps: ```suggestion assert re.match(r'ansible [0-9.a-z]+ .*$', version_lines[0]), 'Incorrect ansible version line in "ansible --version" output' ``` (I'm pretty sure Python 3.6+ will emit warnings if you don't)
If you use `env_fallback` then you don't require this check.
another case where it functions properly as-is, but an explicit `else: return None` is probably apropos just in case.
shouldn't this be group instead of group_id? ~~~diff - result = dict(changed=False, msg='', diff={}, group_id='') + result = dict(changed=False, msg='', diff={}, group='') ~~~
Nowadays we list all the functionality we use from a specific library explicitly. So: ```python from ansible.module_utils.basic import AnsibleModule ```
Lets see if this is better: ``` This option allows ansible to fallback to unsafe methods, when all safe methods fail```
this is too aggressive as it removes all ACLs, not just the ones we added take into account that directories can have 'default acl' to be added to all new files in a directory, this would wipe those along with the one we added to copy the file into place
So, is there a plan later to use include_private ? (as the current patch don't use it)
I think this formulation is a bit better. In particularly because docker might add other values for this option in the future :)
I would add here as well some code to set the `result['failed']` according to what the module should do. ``` if action in ['started', 'restarted', 'reloaded']: result['failed'] = result['status']['current_state'] != 'running' elif action == 'stopped': result['failed'] = result['status']['current_state'] != 'stopped' ```
```suggestion flag = fcntl.fcntl(fd, fcntl.F_GETFL) ```
Please ignore, the param will be set to False when not specified
IMHO there should be a possibility to use a different location for the credentials. This will be important for the integration tests and could be read from the environment variables and/or from the configuration in the playbook.
Since this might be nested-vars, or the user may supply a relative path. To make sure you handle this var well, also use `expanduser` and `expandvars`.
you need to skip value from parent if include_tasks/include_role, but still inherit
It is highly recommended to use `assert` statements in the pytest env because it integrates with its reporting better and more natively. ```suggestion assert len(ret) == 3 ```
This will remove check for datacenter from line 215 ```suggestion dc_obj = self.find_datacenter_by_name(datacenter_name=self.params['datacenter']) if not dc_obj: self.module.fail_json(msg="Failed to find the datacenter %s" % self.params['datacenter']) objects = get_all_objs(content, vimtype, folder=dc_obj.networkFolder) ```
This is a private function (starts with an underscore) so I'd hope we could move this without having to leave a stub for backwards compatibility. If you want to remove the stub in a separate commit/PR just in case, though, I can live with that.
add `module.run_command_environ_update = dict(LANG='C', LC_ALL='C', LC_MESSAGES='C', LC_CTYPE='C')` to ensure all commands have an expected LANG
#31024 pending instead of putting the env vars in description use ``` env: - name: EC2_ACCESS_KEY ``` and config will automatically read them from top to bottom from least to highest precedence, you might also want to add 'ini' entries so this can be configured in ansible.cfg ``` ini: - section: inventory_ec2 key: access_key ``` then you just need to check `self._options['aws_access_key_id']` and all will have been 'resolved for you' I still need to do 2 things, a) create facility to allow 'keys from inventory source file' to override the above AND a callback/fallback to external config ... for when plugins already have a std config outside ansible i.e boto profiles
```suggestion module.deprecate("Alias \'{aliase}\' is deprecated".format(aliase=aliase), "2.10") ```
```suggestion @pytest.mark.parametrize( 'mocked_version', ( '', ' (devel 8a202cae3e) last updated 2021/01/11 10:24:38 (GMT +200)', ), ids=('plain', 'scm'), ) def test_ansible_version(capsys, monkeypatch, mocked_version): monkeypatch.setattr( 'ansible.cli.arguments.option_helpers._git_repo_info', lambda repo_path: mocked_version, ) ```
okay, but it still find it misleading from reader's point of view. i think, it's important to make it better maintainable. P.S. I've hid concat based implementation, once noticed that it's not only about lists (which was not obvious).
Why only autoexpand and autoreplace are added as an option? I can see a value of having all or nothing and just use sets.
You are not tracking timeout per child with this code. The time you're recording here is when you ask the library to queue the work.... It's not when the work starts. Therefore, you might as well save a single general timeout at the top of the method.
I've started work here to create a separate nlb module and move common code https://github.com/wimnat/ansible/tree/feature/elb_network_lb
```suggestion if not six.PY2: ```
Add note here saying - "'SRV' is added in version 2.7"
```suggestion - Control DHCP autoconfiguration for IPv4. Disabled by default. ```
Most of these options are handled from the connection plugin, and are not necessary here. In particular, you should not need to define `host`, `username`, `password`, `use_ssl`, or `timeout`. and you don't appear to be using the actual plugin option framework for any of them anyway (none of them have `env`, `ini`, or `vars` keys, so they can't be set directly).
the community has decided that modules should be named "_facts" when providing host facts, otherwise the sufix should be _info. That is why this module should be renamed `cs_resourcelimit_info`
You can raise from here.
Yeah - I get the idea of "take a config and use it" but I think that's a touchy enough project that I'd rather have users transfer stuff either through facts or manually, since I can see a lot of weird edge cases being a problem with a "duplicate" command.
This can be removed, just add required =True in `acs_common_argument_spec`
Please only import what you need, and not `*`
this should not be happening here, play_context should have all pertinent connection info
Okay, so alancoding says that this could throw an error that it can't figure out which organization you meant if there is more than one organization. Perhaps what we need here is: ``` python if organization is not None: try: organization = organization_res.get([....] ```
Drop the extra "Mac" here.
trivial but you can just do: ``` python path = expanduser("~/.azure/credentials") ``` so that you only allocate a string once instead of three times. (+= creates a new string)
Or did you mean ```suggestion raise exc from None ```
right now, this would need to be version_added: '2.6'
When changes need to be made to docs that are in need of reformatting and/or cleanup, I've found it very helpful to perform all the cleanup first. You can then open a PR for the cleanup and base your second PR on the first (if not waiting for the first to be merged). Alternatively, if using a single PR, at least make the docs cleanup in a separate commit. Doing either of those greatly simplifies the review process.
In case we ever add more field to this like author name or something of the sort. Keeping it as a dict entry in a list gives us more flexibility in the future.
I don't see these files
Do we want errors with this? ```suggestion compiled = compile(parsed_tree, to_native(expr, errors='surrogate_or_strict'), 'eval') ```
```suggestion default: no ```
would you mind minimalizing the example for state=absent to the things required: ~~~yaml - name: Remove a vpc offering local_action: module: cs_vpc_offering name: my_vpc_offering state: absent ~~~
I would add here as well some code to set the `result['failed']` according to what the module should do. ``` if action in ['started', 'restarted', 'reloaded']: result['failed'] = result['status']['current_state'] != 'running' elif action == 'stopped': result['failed'] = result['status']['current_state'] != 'stopped' ```
```suggestion - List of supported values maintained at U(https://docs.microsoft.com/en-us/rest/api/appservice/webapps/createorupdate#scmtype). ```
but this all in a try/except/pass to avoid leaving other temp dirs if one fails all way through
This `else` branch is unecessary cruft, remove it.
Missing `self.uuid_type = self.params['uuid_type']` in `__init__`
@webknjaz I don't believe anyone has said it's dangerous. It's discouraged.... the Python idiom is "consenting adults" meaning, use the single underscore convention to tell people not to use something rather than trying to outright stop them. The double underscore isn't really an attempt for private methods and variables (the automatic rename is just another convention to be followed if you really need access, for instance), it's meant to prevent conflicts between methods in things like helper methods for mixin classes (ie: you have a mixin that's generic and could be used with other classes that you don't control. Using double underscore there makes it so the other class doesn't accidentally overwrite the mixin's private methods.) I would say that our style probably should be to use single underscores to denote private methods and attributes but I would not go so far as to say that double leading underscores are "dangerous".
Handle NoCredentialsError as well
```python cmd += ''.join(' "%s"' % d for d in distributions) ```
```suggestion raise AnsibleError("The password script %s returned an error (rc=%s): %s" % (pwd_file, p.returncode, stderr)) ```
already have this in basic.py, no need to create your own, it also includes sanitation and no_log
I am not clear as to why `before` `hostname` and `vmnic` are required, whatever the input parameters can be obtained from `module.params`
You should always have `type='str'` (or whatever type you have) in all of argument spec.
No longer needed
Period at end.
Don't use `C(...)` here, as this will be shown unformatted to the end-user.
I'm also making the rash assumption that the underlying API is itself idempotent (eg that it will succeed if you ask it to set a state that it's already in)- if not, this is a much bigger problem.
Remove this line.
Ok, I am confused, about it being a 3rd level dict (and why that even matters) and it being complicated (why ?). Even if it is under hardware it could be a separate spec, I don't see why that would matter. To me putting everything as a top-level parameter is problematic, that's why we introduced the hardware parameter in the first place. The problem here is that if people add it the way they prefer, things will become very inconsistent (and I guess this is why we are having that discussion now, again).
host and verify_ssl are common settings in module auth, see other cloud/api modules for same. we normally have auth at module level and optionally at config file/env as options.
I'd use `elif` here.
I believe ClientError only gets thrown when the connection is used (unlike boto2 which can throw the ClientError equivalent), so you can remove that one.
I've tried your branch on my local grafana with the `json.loads` fix. If I import an existing dashboard (previously in general folder) it will be moved to the specified folder. but the module is not idempotent anymore. If I re-run the playbook the task will return a `changed` status even if the dashboard json file has no changes.
Make that `elif:`
That should already be the case except where 'python stringification' takes place, ... which affects fields like Default but not most others. Removing the python stringification would make it match.
add ``` version_added: 2.8 ```
I don't see why `chmod` should be necessary considering `module.set_fs_attributes_if_different` is used.
Putting this under a conditional makes it undefined under the opposite condition.
there is 'non AnsibleModule' version in lib/ansible/module_utils/common/process
the default had to allow for '3rd party callback' subclassing and not using the new config framework
there is a missing condition for check mode
```suggestion - The plugin also sets standard host variable I(ansible_ssh_common_args) to C(-o StrictHostKeyChecking=no). ``` C(...) is also commonly used for general "code"/"teletype" markings
If you're going to do partition, I'd rather use the fact that it'll always return a 3-tuple instead of using `-1` to index the third element. i.e.: ```python line.partition(':')[2] ```
this forcibly creates/removes the files w/o checking if they exist or not, doing so would allow you to offer a 'changed' s state. Also it is encouraged that modules are safe to re-run w/o affecting systems when not needed.
You should set the default value for this like ``` create_mode: description: - ... choices: - ... - ... default: default ```
Typically speaking, using `lower_case_with_underscores` is preferrable to `headlessCamelCase`. This applies throughout the code base
since checksum seems designed to allow for diff hashing algorithms, should this not be configurable depending on which one is used and not just always sha256
Instead of `str`, we need to allow for unicode: ``` from ansible.module_utils.six import string_types if isinstance(x, string_types): ``` From the `CODING_GUIDELINES.md` doc
```suggestion short_description: Gather information about Zabbix user ```
If found this part weird with using `self` for temporary variables
Yeah, he also said to use `loads`, not `load`. I remember debugging its internals and it was processing the stream in chunks internally and turned some of them into unicode while keeping the others in bytes and then crashed trying to combine those...
Yeah, I'd drop the try: except altogether.
For `mode == 'persist'`, you have to both check the current value *and* the value in the `mysqld_auto` config.
*Right now.* But that isn't something that should be depended upon in general and especially if you are creating a subclass of a builtin type. I did recall the non-hacky way to fix this, though. Change the constructor to be dict-compatible and then create an alternate constructor using classmethod to do what you want. Then use the classmethod in your code. Looks like this: ``` python class VarsWithSources(MutableMapping): def __init__(self, data): self.sources = "<Source unset>" super(self, VarsWithSources).__init__(data) @classmethod def new_vars_with_source(cls, data, sources): new_vars_with_source = cls(data) new_vars_with_source.sources = sources return new_vars_with_source ```
Please use add `type: bool`
Looks good to me! This is working as expected. A couple minor things I noticed: * Using STS credentials doesn't work with dynamic inventory (it doesn't work on devel either). * I'm also wondering about this bit. I'm reading the removed lines 459-462 as 'if this group_by_thing doesn't have the option provided it defaults to true' - if the file doesn't exist then it seems like the behavior is changing a little. (such as, group_by_aws_account is false by default in the ini but if it isn't provided it defaults to true here; now it defaults to false always). I think that's okay though.
Spurious `else:` Breaking the tests.
If state: absent and the ip is not there, this raises botocore exception `InvalidAddress.NotFound`.
I see... it's putting them near split_xpath_last which is where they're used. Maybe move both the variables and the split_xpath_last function up to below the imports.
Can we have a list of packages which can be locked/unlocked? just like yum module does.
`return not owner or owner == publication_info['owner']` could be used.
host, username, password, timeout and vdom is already in fortios.py in module_utils
```python # warn when failing to skip due to lack of support for skipping only some versions display.warning('Including test "%s" which was marked to skip for --windows %s but not %s.' % (target, ', '.join(skip_valid), ', '.join(skip_missing))) ```
Why don't we return the return_code back to the user ? I think we should also return the command output back to the user, especially if the command failed.
The braces are not needed ```suggestion if not response: ``` However, I don't think `session.get` ever returns `None`. You should also check if it's not an error (HTTP 500) because otherwise `response.json()` later will fail.
This needs to go outside of CM. If `ipsubnet` will raise exception it will interrupt code block within `with`.
As far as I understand functionality of the API, when you sent: ``` PUT /api/clusters/123 <cluster id='123'> <external_network_providers/> </cluster> ``` You will detach the external network providers from the cluster, even if you didn't intent to. I think `_get_external_network_providers_entity` method should return None, in case `self.param('external_network_providers')` is None.
This is still outstanding
I don't think Lightsail allows custom AMIs, at least from what I've seen in the docs and prodding at the console a bit. There is a question of if we should have a default to use the region default key when state=present instead of requiring a user specification, generally the way lightsail does keys is different from the way ec2 does keys though and I'm still familiarizing myself with the differences.
These 2 `if` statements could probably be combined. To `pop` when if it doesn't start with `_` or not equal to `msg`.
That may have to be `*string_types` and `list(string_types)`. Maybe create `string_types_list = list(string_types)` so you avoid recasting to a list multiple times.
Shouldn't have `required: true` for things that have a default.
Please do this for all parameters. ```suggestion - The iptables chain in which to insert the direct_rule, used with the C(direct_rule) option. type: str ```
instead of changing the example, i would add an additional one, both ways are valid and there are reasons to use a var instead of putting the list directly. Also 'a list' is used on purpose to make clear the 'type' of the option is `list`
This is wrong. Now if you don't supply login credentials at all, it will error out. So goodbye localhost exception to create the first user. The "elif" branch must not be deleted.
just a minor typo and nothing important, multiple occurrences of 'compaire'
Drop the extra "Mac" here.
This will fail if ```updated_list``` has items which are not present in ```original_list```. You probably want something like this instead: ``` python merged_items[item_key] = items_map.get(item_key, {}) merged_items[item_key].update(item) ```
name of the `route`, not virtual network
This is a personal preference, but I'd rather not have a class name in all caps.
Also, it seems that you don't strip spaces, so if there will be leading spaces it would not match, for example.
no need for is_x, online: yes|no is already clear
Should not be quoted. It might confuse people to think this is needed. It is not.
It would be nice to somehow clarify it's a deep merge. It's not obvious "Any not given will be left at current value" extends down, one could read this as you may omit 2nd level keys but have to provide whole subtrees from 3rd level and below.
Thanks, if you push those changes I can re-review
The method does nothing, should not this method be removed ? * [X] Done
I'd maybe even move that outer `if self.image` into this function and this line below. They don't belong to this abstraction layer.
When quoting an option choice/value, enclose it with `C()` instead of a single quote, e.g. `'present'` becomes `C(present)`.
The quotes here are unneeded and unwanted actually.
this should be in the run method, otherwise ansible itself will fail to run
```suggestion elif date_string.match(self.when): ```
I'm not sure what the point is to assigning a class with only static methods to an instance variable. (For that matter, it is not clear to me why this is a class at all, but that seems less confusing)
`if network['type'] != 'static' and ( 'ip' in network or 'netmask' in network):`
You can remove this import.
```suggestion raise AnsibleError("The password script %s returned an error (rc=%s): %s" % (pwd_file, p.returncode, stderr)) ```
Remove default from `description:`
requests should be removed completely in favor of utilizing `ansible.module_utils.urls`
Suggestion: Manage cloud subnetworks on the Hetzner Cloud.
What is this supposed to achieve? Modules are cached on import, they'll be picked up from that cache regardless of the pointers being listed in `sys.modules`.
```suggestion result = dict( ``` More in line with a lot of modules.
Missing closing `)`
I think it might be good to have a `purge_roles` option to be able to only enable role_to_remove if desired. I think it's a little confusing that both state: absent and state: present can be used to remove roles. I like the logic in this section (particularly if there was a purge_roles option that works like purge_tags does for other AWS Ansible modules) better than for state absent.
no need to specify required=False or type=str as these are defaults
`required: false` lines can be removed
This will fix the CI issue
While we're at it: please add a trailing comma, that makes it easier to add another option (if we ever need to) :)
there is 'non AnsibleModule' version in lib/ansible/module_utils/common/process
That's also fine for me. Then let's hope they don't reorder them ;-)
`Ansible uses the boto configuration file (typically C(~/.boto) or C(~/.aws)) if no`
Changed to `final_snapshot_id`
Only those two lines are required, and it works for me with it
normally they don't need it as they got added at same time as the plugin did, but newer options require it.
This should be using `module.fail_json()` instead.
Please add `note: Version 4.4.3 or high required.`
Looks like a split line.
we should search both
We should convert filenames to bytes before passing to open. Like this: ``` python with open(to_bytes(in_path, errors='surrogate_or_strict'), 'rb') as in_file: ```
And as gundalow said on irc, explain a bit more the difference with recipient
Please use verbs in method names. Like ```suggestion def _perform_action(self, action): ```
Why change the requirement? Also, you should add an explanation in the description that this was changed for version 2.3 and that in previous versions it was not requried.
Would it be better to just always run hostnames through the munger? Seems like we could get back other bad values besides just `:` (though I don't remember if it will munge things in other ways like `-` to `_` that might cause problems).
```suggestion version_added: '2.10' ```
I think this would be more elegant with `any()` semantics + as efficient because of generator: ```python if not any((s in return_tuple[1]) for s in NOT_SSH_ERRORS): raise AnsibleConnectionFailure("Failed to connect to the host via ssh: %s" % to_native(return_tuple[2])) ```
I don't think we need a default for this since I can't image it being generally applicable.
May be worthwhile to make lines 513-528 a method on the class, so strategy sub classes could override it easier. May also make it easier to write tests for.
```suggestion description: library creation success and library_id ```
bcoca also mentioned that the facts end up being set on the host that's being processed in the task loop, not one that's being delegated_to. So we should only return the ansible_pkg_mgr fact if we are not delegating.
redis is good example, https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/redis.py in any case it is ts simple: ``` ini: - section: consule_kv_lookup key: validate_certs ```
Fix spelling of `duplicate`.
Neither of those are special characters in python so they don't have to be escaped for python strings. Inside of a character class regex characters like ```.``` don't have to be escaped because they don't have special meaning there. ```-``` doesn't have to be escaped in a character class as long as it is the first character in the character class.
These lines should also be removed
we could U() the link
We should probably also include a sample and/or doc note that shows that the route table is associated via `azure_rm_subnet` - was definitely the simpler choice to implement that way, but we need to tell people where that happens.
Still need to add something like ```You can manually specify use_backend to tell the module whether to use the yum (yum-3) or dnf (yum-4) backend.```
It would be easier if RPM and DEB were to give the same structured reply, or having an agnostic module would not be very useful (in cases like "if upstream version is greater than x.y"). Comparing versions is a complex operation and there is no filter around `dpkg --compare-versions`. Also having the full version (epoch+upstream+release, following the standard distro notation) along with the upstream version would be useful I think.
```suggestion - false, Run Puppet agent with C(--no-noop) switch set. ```
```suggestion </html> ```
`tag` is not required so check for `None`
Nevermind me, I follow. Your control flow is better :+1:
You should really have at least one example with `state=absent`.
Indentation doesn't look right here.
This should be regular text. ```suggestion - Creates or destroys a data migration services subnet group. ```
Always use raises with `match=` or you'll catch false positives. Especially because almost any exception is a subclass of `Exception`. ```suggestion with pytest.raises(Exception, match='Error'): ```
Should be specific about what's being forced in the arg name, something like: `force_removal_with_mapped_luns`. These tend to grow over time, and generic names like `force` are problematic for someone just reading the playbook to know what it does without consulting the docs.
It looks like there may be an issue with the tests. I've restarted the failed test.
Yes because this module use this specific API
Keep a blank line between examples for readability.
If you turn this into ```suggestion if not os.path.exists(collection_output): _build_collection_tar( collection_path, collection_output, collection_manifest, file_manifest, ) return ``` you could reduce some nesting which improves readability.
@AlanCoding since most of those deal with 'after' and this is meant to deal with 'before' the signature is not expected to be consistent.
These are both defined as lists, so I assume people may want to manage those as a list? In that case we ought to have **mso_schema_site_vrf_region** and **mso_schema_site_vrf_region_cidr** modules. Unless we expect that the complete definition always replaces what already existed. In that case the user should be able to add a list of lists.
s/user/caller/ (although user creation really is the only safe method if the file is in a world-writable directory).
Since this is a fact module, I think it can be said that it supports check_mode as it won't change anything but just retrieve informations.
I'd also default to True for validate_certs as that is a safer default.
Ah never mind, I forgot that the `if response` handles when the recursive URL lookup might have ended.
Not needed as you have `required=True`
This needs to be rewritten to support Python 2.6.
I would just make this a plain function that calls fetch_url and then lowercases the keys instead of making it a decorator. I'm a little hesitant about overriding the name (I'd use a different name than fetch_url) but I can see you do that so you don't have to change the name everywhere. Since I'm not the module author, I won't block it over that but I think it's better style to use a new name.
```suggestion if cert_valid_from <= self.convertToDatetime(module, self.valid_at) <= cert_valid_to: ```
```suggestion msg='vRouter with interface %s does not exist' % ip ```
Now you need to update `self.public_key` another time.
Something like this instead: ``` python def _get_vm_prop(vm, attributes): result = vm for attribute in attributes: try: result = getattr(result, attribute) except AttributeError: return None return result _get_vm_props(vm, ('guest', 'toolsRunningStatus')) ```
Thanks for confirming
<nod> I've gone back and forth with people. Since dynamic inventory runs out of process, some people don't want to have to depend on six. I've been merging either way.
Please add spaces around the equal sign.
This `.close()` isn't needed, the context manager closes the file automatically.
Minor UI thing, but might be nice if "default", "maximized" and "minimized" were accepted instead of the numeric enum values. Should probably also have "choices" defined (and -ValidateSet up above).
default is not the correct place for this as other custom callbacks can ignore it then. items should be scrubbed before they even get to callbacks, or if not possible, _get_censored_item should be called automatically from the base class (which still leaves v1 callbacks able to ignore it).
Let's remove the `if` and set default `None`.
Never raise an exception, fail the module instead
As per naming convention, the name is `get_lldp_global_facts`
Try using `.format()` or `%s` formatting instead: ```suggestion self._display.debug("recursive_group_vars - Matched file : %s" % to_text(found)) ```
You may want to specify 'type: str/list/bool/dict' for some of these.
Can remove this one. If there is a credentials issue it should happen when the connection is created, I think.
This one *might* not be redundant, if it's possible to make changes that will cause the CDN endpoint hostname to change...
Are there plans on adding more objects that can manage the disks? if it is only a VM then it may be better to have this be `vm_name` but happy to be convinced otherwise.
You can do `return pg.paginate(Bucket=bucket).build_full_result()` Not a blocker though
How about: ```suggestion if not os.path.exists(file_path): continue ```
No quotes for None, makes it unclear if it's python `None`/yaml `null` or a string.
Just noticed you're rewriting security_groups that has been set on line 248. This eliminates the ability to specify a mix of security group ids and security group names. You can delete this line.
Easier to read if written like this: ``` python VALID_ARGS = tuple(frozenset(BASE + FROM_ARGS + OTHER_ARGS)) ```
I have added similar note in porting guide for `vmware_local_role_facts` here = https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/porting_guides/porting_guide_2.8.rst#id12
Am not talking about `check_mode`, but about `change=True` / `changed=False`.
So removed `required=False` and add `type='str' instead. Do this for the others as well.
Additional error information would be help for debugging.
```suggestion result = dict( ``` More in line with a lot of modules.
The same like above.
This will not render correctly. If you use multiple dashes for the same sentence, they will end up being different paragraphs in the description. You don't need those subsequent dashes.
The official name is "Docker SDK for Python" ([docs](https://docker-py.readthedocs.io/en/stable/)).
and maybe a blurb indicating that error comes from withing the debug action itself, 'While "debug" task was trying to display the value of "%s" the result of templating was expected to be text type, but instead was a "%s" type.' % (type(results), self._task.args['var'],)
```suggestion groupby = {k: self.to_safe(to_text(v)) for k, v in params.items()} ```
same here for arg bools vs strings- this needn't exist
My concern about this really needing to be two modules, one for settings_facts and one for settings, has not been addressed.
```suggestion pass # Handled by AnsibleAWSModule ```
This is correct.
`, no_log=True` here please
Use a `seealso:` sections for external information.
I am not clear as to why `before` `hostname` and `vmnic` are required, whatever the input parameters can be obtained from `module.params`
```suggestion description: If multicast is enabled. ```
[PEP 8](https://www.python.org/dev/peps/pep-0008/#indentation): Indentation should be 4 spaces instead of 8.
Message cleanup needed. Notice `installed installed`.
Same change needs to be made to many other uses of filter.
I don't think you need the `list` here - `for` can iterate over a `set`
While I think this is correct I'm not sure if it uses no proxy or the default proxy configured in the IE settings. I don't have easy access to an environment with a proxy configured so I can't test this assumption.
Also, why do you compute `data.split(delimiter)` again instead of using `data_arr`? ```suggestion metric.split("=", maxsplit=1) for metric in data_arr) ```
Ah, right, hadn't realised that. I'm not sure any modules using AnsibleAWSModule would have got as far as module.fail_json_aws if HAS_BOTO3 is not True though. Worth checking just in case I suppose!
```suggestion - Do NOT add a colon (:) to your custom entries. Ansible adds a colon at the end of each prompt;```
CI failure due to: ``` 2017-01-31 18:50:23 ERROR: PEP 8: lib/ansible/module_utils/netapp.py:150:31: W292 no newline at end of file (current) ```
remove this line as it is not needed
I wonder if the output can be simplified to avoid repeating `unset` and `export`.
I would split these ('install' and 'install --offline -p -r etc') into two separate tests so any failures are more specific and granular.
Grammar-wise, might as well remove the excalamation point here. All caps is already shouting and "DEFINED!: error" is improper punctuation.
I wouldn't call `module.params` as `packages` since it will hold also other parameters, not only the packages
We support python-2.6 and python2.7 (and python3.5 and above) in controller code (which this is). For modules we support python-2.4 and above unless there's a dependency that requires a newer version of python.
```suggestion default: no ```
This should probably guarded with `if __name__ == '__main__':`
Hmm, you may be right, but I would be adding it to result, rather than the msg-string.
This is 1:1 the same code as in https://github.com/ansible/ansible/blob/8a671f54ddc5ec114ef807dc71f49d61261d2107/lib/ansible/module_utils/crypto.py#L150-L160
Remove the `try` block, it is unused.
It's totally fine that it works in check mode, but doesn't work in normal execution. I know that lot of modules work like that. What is important is that it tells you correctly will it change and what will change.
On CentOS, `/etc/sysconf/selinux` is a symlink to `/etc/selinux/config`: ``` [root@lab-centos7 ~]# ll /etc/sysconfig/selinux lrwxrwxrwx. 1 root root 17 Aug 29 06:21 /etc/sysconfig/selinux -> ../selinux/config ``` > On centos there is no such thing as `/etc/selinux/%s/policy`. This is the path where the policy files for the selected policy, as configured by `SELINUXTYPE` in `/etc/selinux/config`: ``` [root@lab-centos7 ~]# ll /etc/selinux/targeted/ total 16 drwx------. 3 root root 263 Aug 29 06:30 active -rw-r--r--. 1 root root 2623 Aug 16 17:40 booleans.subs_dist drwxr-xr-x. 4 root root 4096 Aug 29 06:28 contexts drwxr-xr-x. 2 root root 6 Aug 16 17:40 logins drwxr-xr-x. 3 root root 20 Aug 29 06:21 modules drwxr-xr-x. 2 root root 23 Aug 29 06:30 policy -rw-------. 1 root root 0 Aug 16 17:10 semanage.read.LOCK -rw-------. 1 root root 0 Aug 16 17:10 semanage.trans.LOCK -rw-r--r--. 1 root root 607 Aug 16 17:40 setrans.conf -rw-r--r--. 1 root root 106 Aug 29 06:30 seusers ``` What the existing code is doing is preventing you from setting a policy in `/etc/selinux/config` that does not have a corresponding set of policy files, which would be an invalid configuration. If we change that behavior to just checking for the existence of the config file, it would allow someone to configure a policy that does not exist. I don't think that is a good idea.
use basic.py's `missing_required_lib` function as it gives details on host and python to avoid user confusion
instead of manually assembling all the options, use set_options/get_option and all this will be resolved 'per option' in normal precedence order
```suggestion version_added: '2.8' ```
This example is supposed to show the difference in single vs double quoting requirements in YAML, but it's incorrect. This like should be singel quoted but the `regexp` should be double quoted.
according code, it is not required.
@kaneda-fr its a direct network. is there anything in particular you'd like me to pull for you in the config. i will warn you, i'm very new to VCD and pyvcloud so this is me trying to get to where i'm not just using the gui all the time. I did not set this up, it was already configured. are you in the irc channel? if so i am xaeth
Shouldn't this use the value of ansible_python_interpreter? There is a mechanism (winrm.py uses it) to pass in some host variables to connection plugins, so this should probably implement that.
This should be a string: ```yaml version_added: '2.4' ```
Please check if this is still valid for `icx` parameter since current release is 2.9
```suggestion - The port range for port-object. ```
Should this be `response` since that is what is returned? I don't see `result` used within this function.
How about: ```suggestion - The cipher to encrypt the private key. (Valid values can be found by running `openssl list -cipher-algorithms` or `openssl list-cipher-algorithms`, depending on your OpenSSL version.) ```
i would have single 'msg' and then a 'type' option, this follows the pattern of other modules.
compare_aws_tags returns the tags to add and the tags to remove. The tags to remove are in the format of a list of keys. You could call that once in main rather than handle it in each function (you'll need to pass True as the last argument to compare_aws_tags, so it returns the list to remove if state is absent).
This would be clearer as: ``` elif len(connection) == 1: return {'connection': connection[0]} return {'connection': {}} ``` because all the cases in this if/elif/else are returns.
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Remove extra space: `inv.update({env: []})`
<nod> please open that pr sooner, rather than later (aka, as soon as you are reasonably certain this is the env var name you want.). It is user facing so it would be good to expose the minimal number of people possible to the old name
if the user hasn't provided status module.params.get('status') should be == "enabled" since it's defaulting to that in the arg spec. You should be able to just do `if state == 'present' and module.params["status"] == "enabled":`
Now that there are two lines, "it" is a bit unclear. I'd change this to "Setting C(default) to C(yes) causes an error if the path is a file."
note: the 'startswith' _ is still needed for deprecations (but that is handled elsewhere), so we only skipped when it was a symlink (rename deprecating old name, not module itself) so this should 'work'tm as it is now
Why have both `schema` and `newschema`? I would assume that if I specify another value for `schema`, that the schema will be changed.
I really don't want to be calling the API this often. Can we make this 6 by default (as that's what it was before the change)
Just making a note that we should probably restrict this to the exceptions that will likely occur and call fail_json instead of raising an Exception again.
You can just use initialize `ide_device = None` and drop `ide_exist` variable.
our mistake :-) it's verfy_ssl: true ... because we have 'ssl-with-validation-custom-ca' in the next line ... I asked @ilackarms to fix this in his playbook too ...
We'll also want an `exclude_package_data` entry to exclude all of `test/lib/ansible_test/tests/`.
Please also use proper doc formatting like: "C(template) and C(storage_domain) parameters are provided"
That is a great reason :) Keep up the great work with BAS!
```suggestion username: '{{ vcenter_username }}' ```
You could just do this as: ``` python values = [search_response] ```
Simplier: ```python password.os.path.exists = lambda x: x == to_bytes('/path/to/somewhere') ```
How about splitting up the PR into multiple ones? At least one for the cases where semantics have to change (probably best one PR per module, because it will need discussion for every one of them, and having one module per PR increases the chance that some of them will be merged, even if some others are not or take forever), and one for the "obvious" changes.
I would add here as well some code to set the `result['failed']` according to what the module should do. ``` if action in ['started', 'restarted', 'reloaded']: result['failed'] = result['status']['current_state'] != 'running' elif action == 'stopped': result['failed'] = result['status']['current_state'] != 'stopped' ```
I'd do: ```python from functools import partial ... def is_satisfied_by(current_version, constraint_predicate): op, ver = constraint_predicate return op_dict[op](current_version, LooseVersion(ver)) satisfies_target_version = partial(is_satisfied_by, current_version=LooseVersion(version_to_test)) return all( satisfies_target_version(spec) for spec in self._requirement.specs ) # or return all(map(satisfies_target_version, self._requirement.specs)) ```
Preserve the original behavior for the default port. Add `self.port = None` under the `elif self.provider == 'vmware':` conditional in `__init__` above to provide the correct default. ```suggestion port=int(con.get('port', self.port)), ```
This line is responsible for the python 3.5 syntax error. Change it to the following to fix: ```python print(json.dumps(data)) ```
```suggestion - Management groups connected to the workspace. ```
create/remove are not really states, use 'present' and 'absent'
Since attr_field is a list, attr_fields would be a better name (and for the 'field' list above as well)
pep8 will probably complain about missing a space before the ```in```.
its fine to have a 'separate pre-existing file', I would just use it as a fallback if other methods are not populated and i would not create one if it were not already standard.
Would it be better to just always run hostnames through the munger? Seems like we could get back other bad values besides just `:` (though I don't remember if it will munge things in other ways like `-` to `_` that might cause problems).
https://github.com/ansible/ansible/blob/cd988f645aaf774c55a98a90e3ef42cc5b1a1563/lib/ansible/module_utils/urls.py#L1147 gives all options.
I've started work here to create a separate nlb module and move common code https://github.com/wimnat/ansible/tree/feature/elb_network_lb
`class_name_to_type()` has fallthrough return None if it doesn't find (unless I'm reading it wrong)
here you need just a 'steps' not whole module as well.
Same as above: ```suggestion if params['direction'] not in ['in', 'out']: ```
No longer using a temporary file. This issue is resolved
Both `required: true` and `default: null` are not needed anymore. You can leave them if you like, but I thought I'd mention it.
Lists also have .extend() which might be what you need here
No need if there isn't a default variable
result is always changed when rerunning playbook with your first example (create of zabbix user). This breaks module idempotency. I believe this can be solved by comparing all `update_user()` arguments with information returned from `user.check_user_exist(alias)`
Personally I prefer `is_ansible` or `is_ansible_install` as it makes it more obvious the `is_install` is referring to Ansible's install location and not the collection path. I'm not married to it but I definitely had to look at the code to make sure that is correct.
Delete this line, this import is also not used.
please use here self.param('version').get('base_template')
With this we can't customize from scratch vm. I think we only need: if len(self.params['customization']) > 0:
this is an unsafe way to write the file, other processes might get incorrect/incomplete data and if it fails it leaves a corrupt file. write to a temp file and use `atomic_move` instead
```suggestion re.compile(br"% Prefix length must be less than"), ``` We can almost certainly get away with being slightly less precise with this error.
```suggestion - The public key. ```
not sure if its just me but i still find it confusing, wouldn't it be cleaner as?: ```python flag_val = p[flag] if flag_val: args.extend((arg, to_native(flag_val))) elif flag_val is not None: args.append(arg) ```
I'm not really a fan of this approach, and generally speaking, we have tried to stay away from it. I am more in favor of just doing: ``` try: sock = socket.create_connection(address) except AttributeError: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(address) ```
I wonder if we should put each `_evaluate_*_when_result` call into separate `try..except` block for the (I guess rare) case when both `changed_when` and `failed_when` fail. Then we could include the failure reasons for both in the task result at once.
If the last argument takes precedence then that's even more of a reason to not explicitly support this. On failures the module will try and read the log and return that for debugging purposes but if the file doesn't exist we could be coming across other issues.
You can delete this note and instead use `required: true` under `rpc:`
```suggestion - When you masked a value, the value must be base64 compliant and has at least a length of 8 characters. ```
rename to `cluster`
This method doesn't seem to do much. I would merge it into the run() method. * read_settings and parse_cli_args don't seem related. They don't operate on the same instance attributes, for instance. * It's a bit funny to have a private method (_read_settings()) calling public methods (read_settings() and parse_cli_args()) that aren't usable by anything else. * If this is merged into run(), it will only add one more line there and will remove 5 lines overall.
You should probably note that these patterns are expected to be regex (vs. globs). The examples show this, but it doesn't hurt to be explicit. It also wouldn't hurt to mention that the patterns are not implicitly anchored.
Hmm. The problem with this is that it isn't possible to turn off log file validation, making this fail the idempotency test (you can't assert that log file validation is disabled). I'm not sure if the 'bool' param allows for the param to be [omitted](http://docs.ansible.com/ansible/latest/playbooks_filters.html#omitting-parameters) or if it defaults to false; if you can't test that, I'll try to get to it in the next few days/weeks.
This API does not look good to me, it's unpythonic. Using return values to indicate errors is used in some ancient and low-level languages like C or Go which don't have nice built-in mechanisms for communicating errors to the caller. In Python we raise exceptions for that and try/except at proper locations up the call stack.
You should probably use `transform_commands` from `ansible.module_utils.network.common.utils` instead.
Please remove `module.fail_json` and use `ModuleFailException`.
```suggestion try: ```
Help text needed now that this is not an internal implementation detail: ```suggestion help='base branch used for change detection') ```
No need for this to be a private method. rename to get_inventory().
This can just be ``` if module.params.get('version') is not None: return str(module.params['version']) elif module.params['alias']: return str(module.params['alias']) ``` And that would be functionally equivalent.
catchall exception handling isn't very useful as it hides whatever might have gone wrong from sight. I'd probably just call core(module) here. If there is a specific class of errors that you are expecting, then catching those and returning a more informative error message could be appropriate. I often see the following pattern used which isn't so bad: ``` python import traceback from ansible.module_utils._text import to_native try: core(module) except SomeException as e: module.fail_json(msg="Helpful error message: %s" % to_native(e), exception=traceback.format_exc()) ```
examples. - Remove space before full stop
So you can remove the following lines (and from docs) ``` # this argument is deprecated in favor of setting match: none # it will be removed in a future version force=dict(default=False, type='bool'), ```
```suggestion - This parameter is required, if C(state) is set to C(poweredoff), C(poweredon), C(powered-off), C(powered-on), C(present), C(restarted), C(suspended) ```
This should be 2.4 now
I think you can get rid of the rstrip('\n') here for the same reason as you got rid of it in _find_bind_mounts() (or alternatively, if rstrip is necessary here, then it's probably still needed in _find_bind_mounts() as well).
It looks to me like you're assuming that the commen this always there (is it like that? I don't know) and has no spaces in it.
Here and below: ~~private key~~ --> key pair
I think it would be fine to specify that group_id can just be used with absent. The ability to change security group attributes with the ID could be another feature request/pr. If you're itching to implement that have at it, but do whatever makes sense to you.
@abadger I checked the source of that `warning()` function and it seems like it concatenates input with native strings which concerns me.
The results of vmdk_disk_path_split are not used anywhere here (they are used inside find_vmdk, but it calls the routine directly.
Ah, right, got it :+1:
It is valid for a ComputerSystem to have a `Storage` resource or a `SimpleStorage` resource or both. And each of these can describe Drives in the system. So we should keep the original `SimpleStorage` logic along with your newly added `Storage` logic. If there are both `SimpleStorage` and `Stroage` resoures present, the returned `result` should include the drive info from both. Something like this: ``` if 'SimpleStorage' not in data and 'Storage' not in data: return {'ret': False, 'msg': "SimpleStorage or Storage resource not found"} if 'SimpleStorage' in data: # do the original SimpleStorage logic if 'Storage' in data: # do the new Storage logic ```
```suggestion rc, vg_extent_size, err = module.run_command(pvdiplay_cmd_device_options + ["-o", "vg_extent_size"]) ```
Not required, we already have method called `connect_to_api`. Also, I would recommend to use `from ansible.module_utils.vmware import PyVmomi` which base class for all VMware_* modules.
Don't add this, if the parameter is not required.
a list action or state is something we have accepted in the past, but not anymore for new modules. please create a separate facts module for this functionality.
You are not tracking timeout per child with this code. The time you're recording here is when you ask the library to queue the work.... It's not when the work starts. Therefore, you might as well save a single general timeout at the top of the method.
Can you please add a check if db exists before taking backup ? I see there is a method called `db_exists` which can reused here.
nit: I think this should be wrapped. 121 line length is longer than it should be. While Ansible has a lot of code which doesn't adhere to pep8 we should strive to be better, so lets try and keep the line length to 80 or 120.
I would change "updated" to "present". Some other network modules. e.g. ios_config, have an boolean option backup (e.g. backup: true) to make a backup before copied locally before changing.
My bad. Didn't see if in later stages.
please also do same fix on the update. Without it i got: ``` "msg": "error : Unable to update the dashboard eNWYzQUmz : Dashboard not found" ```
This logic tried to enforce a minimum version requirement, which the new code does not. Since it doesn't sound like you have added compatibility with older versions (or have any reason to), why not do something like: ``` min_version = '2.4' if loose_srv_version < LooseVersion(min_version): module.fail_json(msg='MongoDB {0] found, the minimum version supported by this module is {1}'.format(srv_version, min_version)) ```
not needed when `required=True` is specified
Wondering what the advantage is to do it this way, or just have: ```python if ...: return True return False ```
Oops, the following sentence is now redundant and can be removed: > A previous version may be specified C(name-0.9) to downgrade a package.
I don't think the `or []` is needed here. If there are no server groups defined, the API already returns an empty list.
No need to set this, or check it.
e is added to the exception in fail_json_aws so doing it again here will result in a redundant error message. Same for the other exception handling. You could use `.format(module.params['domain'])` instead to let the user know which domain failed.
I kind of don't like returning from a function from a condition. What about to define `code` variable which you assign in the condition and then return at the end of the function? ``` ... output = flatpak_command(command) code = 0 if 'error' in output and 'already installed' not in output: code = 1 return code, output ``` The same anywhere bellow.
I don't believe we should be hard coding permissions here. We should use the system default value from `/etc/login.defs` or add this as a module parameter the defaults to the system value.
This should be 2.4 now
If the `state` is `absent`, these parameters can be omit, you can use require if to make these required if the state is `present`
This was kept here for backward compatbility - https://github.com/ansible/ansible/pull/59974/files#r313368633
nit: ```suggestion cached_server = final_cache['galaxy.server.com:'] cached_collection = cached_server['/api/v2/collections/namespace/collection/versions/'] cached_versions = [r['version'] for r in cached_collection['results']] ```
Creating paths by concatenating them together is a no-go with Redfish. Paths should always come from the Redfish responses itself (`redfish/v1` being exception here).
Note: It's preferable to use Mapping rather than dict. That way a Mapping object that does not inherit from dict would be recognized.
why force either/or? you should be able to read some things from the config file, others from env vars, user might not wan't all eggs in one basket
```suggestion description: - A seed to initialize the random number generator. - Identical seeds will yield identical passwords. - Use this parameter for random but idempotent password generation. ```
Maybe change the name from dsc to. Something else, it seems a bit out of place here
The sample should likely be an actual hash output (i.e. with the right format/size)
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` required_together ```
I think it's nicer to have trailing commas: ```suggestion ], indirect=['mapping'], ```
That's an ugly one. Interesting that no-one ever complained about it...
How are the `user_details` used by the caller here? It looks like it's embedded in a string.
i would still not make this an option, but try to capture the copystat error on hp/ux and issue the warning as we do for enosys case
```suggestion - Due to the B(very) sensitive nature of these credentials, it is B(highly) recommended that you only pass in the minimal credentials ```
```suggestion msg = "Couldn't associate Elastic IP address with instance '{0}'".format(device_id) ```
This API does not look good to me, it's unpythonic. Using return values to indicate errors is used in some ancient and low-level languages like C or Go which don't have nice built-in mechanisms for communicating errors to the caller. In Python we raise exceptions for that and try/except at proper locations up the call stack.
Same as above: unnecessary fixture test.
not just tags, i would make this a generic function for templatable and appendable FieldAttirbutes (tags, environment, module_defaults and conditionals)
I'm not sure if making this and lock_file conditional upon check_mode is the right thing to do. A module might need to lock a file in order to read it and decide if changes should be made.
Is there a case to be made for `task_definition` being optional, and if not present, returning task definitions for all tasks. Furthermore, I think I'd consider extending this module to become ecs_task_facts, and return the task data along with the task definition and then describing one or more tasks as options.
This place in code **does not affect** cloning/initing, while operating on **existing repo**, which makes it pointless. Also, it would be architecturally wrong to do it from some random phase of module execution. We would still have to bypass it to clone/init anyway.
Nowadays, we import BUFSIZE from ansible.plugins.connection.
Can this use `b_output_path` from line 291? ```suggestion b_output_path, ```
Just to be sure add a `if not host_data: ...`
That `__metaclass__ = type` line in the top of this module turns all classes into new-style automagically. So you don't need to inherit from `object` explicitly anymore. ```suggestion class PodmanManager: ```
Use 2019 instead and use the latest license template https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/network/cli/cli_config.py#L1-L5
this is error-prone as it will cause exception if someone decides to have duplicate keys there. better way is to do like this: ```python kwargs = dict(...) # leave it as is if any(spec in kwargs for spec in extra_specs): # do input validation raise ValueError('Duplicate key in extra_specs') kwargs = dict(kwargs, **extra_specs) # actually upgrade it ```
should be consistent with sample name and resource_group
Please order the parameters alphabetically.
This will fix the CI issue
doesnt --> does not
Not having any default would cause failures for folks who have been relying on default=instance with state=present, we'd need a deprecation cycle to do this. Logically I think we only need a default if state=present though, so we could put this in the if block at ln843.
Again, this only works on the primary credential cache. If the ticket is in another, this might not work.
You can do that as part of the param_spec like this: ```python module = AnsibleModule( argument_spec = dict( dest = dict(type='str', required=True), options = dict(type='str', default='preallocation=metadata'), format = dict(type='str', default='qcow2'), size = dict(type='str'), grow= dict(type="bool", default=True), shrink = dict(type="bool", default=False), state = dict(type='str', choices=['absent', 'present'], default='present'), ), supports_check_mode = True, required_if=[ ( "state", "present", [ "size" ] ), ], ) ```
```suggestion def fetch_chart_info(command, chart_ref): ```
These `os.getenv` calls should likely be updated to use `self.get_option` and potentially `self.set_options`. See the `slack` callback for examples.
Is it worthwhile taking a copy of the text utils we already have in Ansible. They have a `nonstring` option to define things like what to do when a None object is being encoded.
The default here is to use 'yes'. That's how all modules work, by default they take the system configuration.
`module_utils.postgres.HAS_PSYCOPG2` could be used here.
please also do same fix on the update. Without it i got: ``` "msg": "error : Unable to update the dashboard eNWYzQUmz : Dashboard not found" ```
No need for quotes here.
Please add spaces around the equal sign.
Then it is not secure. CTR mode requires an unpredictable and unique value as part of the counter. Previous code was correct in taking the full IV from PBKDF2 output.
```suggestion - Accepts a list of dicts where each dictionary contains two keys, I(path) and I(key_data). ```
Can we update the `description` text to be a little more explicit that it is the controlling host (the machine running Ansible) and not the target node that must have an established Conjur identity for the lookup plugin to work? Right now it's a bit confusing because the `requirements` is clear about that but the description just says `...the server's Conjur identity` without saying what 'the server' is in this context.
You can delete this line.
Use ```python cmd = "%s box list" % self.module.get_bin_path('vagrant', required=True) ```
```suggestion subnetids=dict(type='list', required=True, elements='str'), ``` Except if you want the list elements to be of another type.
Looks like another weird conditional slipped through, this should be `if location not in ('us-east-1', None):`
This could be optimized to state the used domain_type.
We don't need it. It could be simplified using: ```python keys = out.splitlines()[0].lower().split() ```
You're correct. I misread that this `if` statement is indented. Looks good!
This should not run in check mode and should we actually be doing this. Deleting a database because a change needs to occur seems to be pretty extreme and would have thought you would want a flag to set whether to do so like the container instances module.
TODO add Exception handling for login error
It's not safe to modify sys.path outside of unit test functions, as these changes will affect other unrelated tests.
@abadger I checked the source of that `warning()` function and it seems like it concatenates input with native strings which concerns me.
Typo: exists -> exist (should be singular). I'm not really sure this is an improvement as you lose the explanation of what 'args' can be used for.
Now you have to change it to 2.8.
Better to call it path.
```suggestion self.container = PodmanContainer(self.module, self.name) ```
Yep... Reading the Unsafe code, AnsibleUnsafeText and AnsibleUnsafeBytes are just light wrappers around the equivalent python types. Since the equivalent python types are fragile when mixing types, this is fragile as well. I think we need to consider it invalid to pass Text type to AnsibleUnsafeBytes and invalid to pass Bytes type to AnsibleUnsafeText. By extension, it's also invalid to pass Native strings to either AnsibleUnsafeText or AnsibleUnsafeBytes because that will be wrong on one of python2 or python3.
This line can also raise a `ValueError`.
Nevermind, carry on :-)
@gurch101 here is suggested change to the create method based on the feedback from other individuals. We do need to include the ip addresses at the top level of the response so they can be easily passed into additional tasks or facts. Let me know what you think of this method change.. ```python def create(self): json_data = self.get_droplet() droplet_data = None if json_data: droplet_data = self.get_addresses(json_data) self.module.exit_json(changed=False, data=droplet_data) response = self.rest.post('droplets', data=self.module.params) json_data = response.json if response.status_code == 422 and json_data['message'] == 'Region is not available': self.module.fail_json(chnaged=False, msg=json_data['message']) if self.wait: json_data = self.ensure_power_on(json_data['droplet']['id']) droplet_data = self.get_addresses(json_data) self.module.exit_json(changed=True, data=droplet_data) ``` The address method is used to pull out the different ip addresses DO sends back in the response. ```python def get_addresses(self, data): """ Expose IP addresses as their own property allowing users extend to additional tasks """ _data = data for k, v in data.items(): setattr(self, k, v) networks = _data['droplet']['networks'] for network in networks.get('v4', []): if network['type'] == 'public': _data['ip_address'] = network['ip_address'] else: _data['private_ipv4_address'] = network['ip_address'] for network in networks.get('v6', []): if network['type'] == 'public': _data['ipv6_address'] = network['ip_address'] else: _data['private_ipv6_address'] = network['ip_address'] return _data ```
urllib, traceback, sys dont seem to be used.
You can remove the `required: false` lines, it's implicit
Create a ticket for console for a running VM:
change to data
This looks like debugging code that should have been removed? It causes the module to fail to detect installed OpenCSW packages. All tests succeed iff these two lines are removed.
We generally don't mask the usernames, just passwords.
Ack. Looks like a good change.
This is a bit of a bad way of checking wether it is IPv6 or IPv4: `::` only occurs if one of the hexadectets is `0000`. You can easily end up with `2001:db8:1:2:3:4:5:6`, which does not contain `::`. quick fix: check for `:` in `ipaddress`. Clean fix: use the `ipaddress` python module (python 3.3+ native https://docs.python.org/3/library/ipaddress.html; or https://pypi.org/project/ipaddress/ for 2.6, 2.7 and 3.2, which is a backport (so same functionality). This is the interesting part: > ipaddress.ip_address(address) > Return an IPv4Address or IPv6Address object depending on the IP address passed as argument. Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default. A **ValueError** is raised if address does not represent a valid IPv4 or IPv6 address. ```python >>>ipaddress.ip_address('192.168.0.1') IPv4Address('192.168.0.1') >>> ipaddress.ip_address('2001:db8::') IPv6Address('2001:db8::') ```
Please do it like this: ```yaml author: - Ripon Banik (@riponbanik) ```
s/user/caller/ (although user creation really is the only safe method if the file is in a world-writable directory).
No need to quote.
Feels a little long, maybe something like ```suggestion short_description: Retrieves CyberArk vaulted credential using PAS Web Services SDK through the Central Credential Provider ``` or ```suggestion short_description: Retrieves CyberArk vaulted credential using PAS Web Services SDK ```
Please remove `required=False`.
Azure Container Service(ACS)
These asserts may be optimized out, so you shouldn't be using assertions in code that needs to run in prod. Instead, this has to stay as the if statements we had.
Can you move this function above main() as per ansible guildelines: " Ansible follows C-style code flow where the caller functions/methods are towards the bottom of the file and the callee implementations are above them. "
`'get'` is in base_rpc already? ```suggestion ```
But if you are creating the database based on the name, how would you know the ID as it hasn't been created yet.
I think I'd handle purge_listeners at the consumer end of this method. Just seems easier than passing it in and handling it here. But not a blocker
remove un-used variable.
`removed_in_version` for `force` should be `2.6`. We follow deprecated version + 4 for removed_in_version.
Use match arg instead: ```suggestion with pytest.raises(TypeError, match='Cannot json serialize'): ```
We've switched from pipes.quote() to six.moves.shlex._quote for python3 compatibility: ``` python from ansible.compat.six.moves import shlex_quote out_path = shlex_quote(self._prefix_login_path(out_path)) ```
nothing should use config_data, its only meant for 'extras not covered by get_option', but that is a preexisting problem here
```suggestion for app in sorted(set(apps)): ``` This way, you won't have trouble if apps show up more than once in the list (in which case `is_installed` and `is_outdated` can return wrong information), and the order is still deterministic also for older Python versions.
``` distributions.extend(self.list_streaming_distributions(False))``` ```+=``` may be fast , `extend` bring clarity.
```suggestion if not six.PY2: ```
On further thought, this actually might break something with the new stuff, since you're relying on pyyaml blindly `call`ing whatever is passed in, but the prototype logic that supports object instances only does that call if `isinstance(loader, Reader)` is true. We could probably tweak that somehow, like `callable()` instead, which might be a little more resilient/Pythonic anyway... So this is definitely fine for released code, and it's something I'll keep in mind for the new stuff.
Ditto about the deprecation notice
The `RepoIDs` is not the module option and therefore it should not be decorated in `C()`.
use basic.py's `missing_required_lib` function as it gives details on host and python to avoid user confusion
Not required, we already have method called `connect_to_api`. Also, I would recommend to use `from ansible.module_utils.vmware import PyVmomi` which base class for all VMware_* modules.
there could be a function to convert entire list, as this code is repeated below
Fails because self_host is not defined for accelerate transport.
Here only detect adding change
I'm not really familiar with swarm, but should this also be changed? ```suggestion - "Service memory limit in format C(<number>[<unit>]). Number is a positive integer. ```
Use `errors='replace'` so that we don't traceback in case of invalid utf-8. Since this is a logging function, it's okay to display a mangled string.
I would think what useful information you could possibly return to the user to work with from the registered variable.
you force the adapter creation if we don't set ip/netmask, this is wrong. In my usecase we don't use this VMWare device
No quotes needed here;
This will drop most ClientErrors on the floor and block the retries It would be better to use the helper from ansible.module_utils.aws.core ``` except is_boto3_error_code('LoadBalancerNotFound'): return [] ```
This method can be simplified to: ``` return [{"ParameterName": str(k), "ParameterValue": str(v)} for (k,v) in params.items] ```
Yup, please split this into docs fragment
You could just return this dict, same below.
Nowadays, we do: ```yaml type: bool default: 'no' ```
That would ignore the explicit wish of the user to have serial number `0`.
Make pep8 happy ```suggestion priv, append_privs, module) ```
Typo - `use` -> `used`. (your friendly neighbour nitpicker :)
This could be done in the logging Formatter (and/or a logging.Filter). And then the modules could just pass objects to self.debug_logger.debug(), and the handler/formatter decides how to pretty print.
`default=True` (as it's a bool, not a string)
Nowadays we do: ```yaml type: bool default: 'yes' ```
I think we should just let this exception propagate. We aren't adding any value by catching it here (and might be removing value if the traceback were useful). This isn't code in ansible itself so we don't have to create a nicer error message either.
`Name of the cluster from which all child datastores need to be managed` I find this a bit weird, btw... clusters do not really have datastores directly as children, only datacenters have datastores directly: You can not create a datastore specific to a cluster, you create datastores on the datacenter, and connect hosts to them. I assume the `cluster.datastores` just lists all datastores that are connected to hosts in that cluster. Personally, it would make more sense to use datacenter as a grouping parameter instead of cluster (but that might also be a bit excessive, as that would put all datastores in maintenance mode in a DC, basically preventing any VM to run at all...)
Have you checked whether any of the value options where you removed the change overrides something defined in the image? If that's the case, this can't be a Bugfix PR (similar to changing the default of `user`).
```suggestion - Enable or disable promiscuous mode for interface. ```
no, it's probably not fixable anyway
Yeah, it's only AWS-specific because we only use it in AWS. I'm not sure what to name the new file it would be moved to (`dict_transformations.py`?) but moving it out then re-exposing in the AWS utils for backwards compatibility seems like a good idea.
I'm a little iffy about the ungrouped or all group here. I would skip ungrouped.
I think most if not all of this can be removed and replaced with argspec code https://github.com/gundalow/ansible/blob/docs-argspec/docs/docsite/rst/dev_guide/developing_modules_general.rst#main-and-ansiblemodule-argument-spec
That's quite a strange (and un-pythonic) way to indicate failure. But if the library does that, there's not much you can do :)
SubnetIds expects a list `[result['subnets'][0]]`
Looking at the boto3 docs, it looks like cluster ID is required for the describe_cluster call you are making. list_clusters would be a call you could use if no cluster_id is provided. required: false is also the default, so if this remains to be true you can remove this line.
```suggestion - When you masked a value, the value must be base64 compliant and has at least a length of 8 characters. ```
This looks needlessly generic. why not just do: ``` python if op == 'get_password': get_password([...]) elif op == 'create_host': create_host([..]) ``` If you think you're going to have a lot of operations, you can have a lookup table: ``` OPERATIONS = {'get_password': get_password, 'create_host': create_host} method = OPERATIONS[op]([...]) ``` but for just a few operations I'm not sure I would do that... it obscures what the code is doing in any given situation to code it like that.
The line length limit [enforced by CI](https://github.com/ansible/ansible/blob/869449e288cc02986984daec430086f6b6fe656f/test/runner/lib/sanity.py#L317) is 160 characters.
please add the `version_added: '2.10'` here as well
This method is unused and must be removed.
I don't think I'd say this, it's more like a really smart patch that can automatically compute deletions. It's still going to be sending a PATCH and not a PUT so I'd just worry someone gets the wrong idea.
task_uuid seems unused
register it in a playbook and use it later. The module has already parsed the file into a object (self.lines and its records). That avoids the need to refetch and do string parsing to inspect the results.
No need for a class.
required=False is default so no need to add.
There is a missing `os.path.join()` otherwise you get `TypeError: append() takes exactly one argument (2 given)`.
In python, this is probably better represented as a global dictionary in a separate module (as outlined above). Something like file serviceprovider.py: SPKEYS = { 'ID': 'id', 'NAME': 'name', [..] } ```
Can you make this something like: `module.fail_json(msg="Failed to create launch configuration", exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))`? It will be helpful for future debugging.
I think defaulting to `false` is the safest option, and would be consistent with the purge_tags defaults in other modules.
I thought we decided on titlecase, no? ```suggestion t = cls._RST_NOTE.sub(r"Note:", t) # .. note:: to note: ```
Note: Our convention is to use a prefix (b_locak_path) rather than a suffix.
not needed when `required=True` is specified
Use a raw string to avoid issues with backslashes: ```suggestion EXAMPLES = r''' ```
This is handled by `argument_spec`
```suggestion required: true type: str ```
Removing the to_safe parameter here will affect the output whether or not the route53_hostnames option is enabled, breaking any playbook that uses the existing hostnames. I understand that route53 names can't be filtered through to_safe since it strips DNS-valid characters, so if you add a conditional then this would be ok.
Please add dot at the end.
You could remove this check since `for o in open_ports` should work as well.
Well this would be for 2.4 so maybe that is the better path
I guess forcing the user to be more explicit should be OK, too. Defaults can always be problematic, remember the default user `root` ;-)
Read operation: ditto
`then` -> `the`
We should probably rename this. Revisiting this code... this is a pretty special-case function as well. I wonder if it should be a private function inside of parameters.py (basic.py can make it public as part of its API but the idea would be that we don't expect any new code to use it.)
Same question about returning module_path here.
```suggestion type: str required: True ```
add CALLBACK_NEEDS_WHITELIST = True this is recent addition, it keeps plugins shipped with ansible from being executed automatically unless whitelisted through config.
We use term `mapping` here.
Please remove `module.fail_json` and use `ModuleFailException`.
the mutually exclusive group should already do this
So we will remove it, and add it back? Okay :)
use the `missing_required_lib` function from `ansible.module_utils.basic`
The `upper()` and `replace()` calls here seem unneeded given that the input is very strictly formatted already. But that's not a showstopper either.
there's away to have this checked in the declaration of the module: https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/network/nuage/nuage_vspk.py#L1019-L1020 (same for esxi_hostnames)
This should be removed an replaced with: ```yaml default: high performance ```
also you might want to make this into an option, see ssh connection plugin's `reconnection_retries`
Maybe add a doc string as well. ```suggestion def recursive_diff(dict1, dict2): """Recursively diff two dictionaries Raises ``TypeError`` for incorrect argument type. :arg dict1: Dictionary to compare against. :arg dict2: Dictionary to compare with ``dict1``. :return: Tuple of dictionaries of differences or ``None`` if there are no differences. """ ```
Again, use C(balanced) and C(high performance) here.
```suggestion The C(address_list) is a comma-separated list of one or more address/netmask pairs in CIDR format." ```
We tend to have full descriptions, so that the meaning is more clear to the end-user. The first line is a description of the parameter. Subsequent lines clarify the value, its use or dependencies. All descriptions (except the short_description) should have a trailing dot, so please add those everywhere. ```suggestion - The ID of the Hetzner server to manage. ```
This could use more explanation.
not exactly what i was asking, but good enough
Maybe use ```suggestion type: path ``` instead? Then Ansible will replace things like `~` IIRC.
```suggestion - Either I(parameters) or I(parameters_links) is required if I(state=present). ```
AnsibleModule already has a `.debug ` property which can be enabled via configuration on the controller
I wouldn't dive into that just yet. That would be very hard to do elegantly. I'm not even sure if it really philosophically makes sense.
@ckotte you're right about wholesale exceptions in general. However, there's one case when it's okay: on the top level layer of the app (in this case the module). The thing is that if the process will just crash it won't return a failed json struct to the Ansible controller, which won't be able to handle this better then. So I'd put such handler around (some part of?) main func.
Each entry for a description must be a sentence so should start with a capital letter.
this will repro the "what if one of the collections is missing?" case ```suggestion 'testgroup': ['testns.testcoll', 'testns.othercoll', 'testns.boguscoll'] ```
```suggestion - Threshold for defining a lossy connection by packets that time out and get retransmitted. - A connection between client and Avi is considered lossy when more than this percentage of packets are retransmitted due to timeout. ```
i cannot imagine people look at deprecated files first for examples ...., but they do see changes to them and then try to use those to justify subsequent changes.
would you mind change this to the following? ~~~ 'roleid': 'role_id', ~~~
identical here for pod,
Well, then they will never really know and think they always have to quote. I don't think it's better to teach them to always quote, and certainly not using double quotes. Besides, you're not being consistent, you're not quoting the task name value and delegate_to.
```suggestion specify the user via UID, you must set C(ANSIBLE_REMOTE_TMP) to a path that exits ```
Please remove this line. As this is a new module the top-level version_added is the only one needed.
not a blocker but I am missing some docs here, there are a few returns which gets returned under various conditions.
Actually, on the whole, this belongs in netcommon, so now it will be: https://github.com/ansible-collections/ansible.netcommon/pull/308/files#diff-e84f32f4c9057b4900c0593346d486cf66db31cb92dcf9016d75d0bba03ce88d
the community has decided that modules should be named "_facts" when providing host facts, otherwise the sufix should be _info. That is why this module should be renamed `cs_resourcelimit_info`
Hello and thank you for your PR! Sorry for the lag time on this but this would need to be updated to `2.6` if you can get it done today, otherwise it will be `2.7` because today is dev freeze for `2.6`.
It would be nice if you could add PEP257 compliant docstrings to public interfaces (classes, functions, methods, module)
Parameters that are not required don't need `required: false`.
I think this behavior should be shown in the examples since it is tricky to explain.
```suggestion - A description of the template. - Include enough detail that the user will understand what is being deployed... ```
I would do: ```python # Ensure we have a starting slash and no trailing slash self.params['folder'] = os.path.join('/', self.params['folder']).rstrip('/') ```
The description should be a full sentence. So this probably ought to read: > The alias for the current object. This relates to the `nameAlias` field in ACI.
After thinking about this more, it's probably more reliable and easier to maintain if we just default to always using our version of `ismount()` rather that trying to evaluate the Python version. Ideally we could probe somehow and fallback to this version rather than doing a version comparison, but it's really hard to probe for a bugfix. ```suggestion ```
You could replace this entire block with: ``` from distutils.version import StrictVersion return StrictVersion(host_version) >= StrictVersion('.'.join(map(str,version))) ```
A lot of the entries here should be in the description of each relevant option. This is for a high level overview of what the module does. The `notes` entry can also be used for info about the module if it doesn't fit in a option.
```suggestion self.container = PodmanContainer(self.module, self.name) ```
If source is None, the conditional `not source` will be true. So I don't think the second part of this conditional will ever hit.
```suggestion for key, value in client.module.params.items(): ```
since checksum seems designed to allow for diff hashing algorithms, should this not be configurable depending on which one is used and not just always sha256
```suggestion required: true type: str ```
Is there a reason to do deepcopies here (and at the top of a few other methods)? deepcopies are slow and it doesn't look like the data is being modified (for which you might want to have a pristine copy and a modified copy) so you can probably discard the deepcopy to improve your speed.
no, if the variable is set but empty, you should empty out the options
Not catching non-200 responses.
This is handled by the Azure module utils so isn't needed in the module arg spec
minor, convention is to use `yes` or `no`, and not `True` or `False`, for values in case type: bool
Is this (and `providers:` below) part of `property_attributes:`? Dedent if you want them to be example of top-level `providers` and `services` args.
Looks good to me! This is working as expected. A couple minor things I noticed: * Using STS credentials doesn't work with dynamic inventory (it doesn't work on devel either). * I'm also wondering about this bit. I'm reading the removed lines 459-462 as 'if this group_by_thing doesn't have the option provided it defaults to true' - if the file doesn't exist then it seems like the behavior is changing a little. (such as, group_by_aws_account is false by default in the ini but if it isn't provided it defaults to true here; now it defaults to false always). I think that's okay though.
Please keep your code style consistent: first you assign vars for some time, then you pass lots of function args directly. There's a better way.
Same as https://github.com/ansible/ansible/pull/21849#discussion_r103172035, `timeout` isn't `username`.
s/write target file {0}/fetch file to {0}/
IMHO `ansible.module_utils.six` should be used: `from ansible.module_utils.six import with_metaclass`
@gundalow I'm not sure what that does - I updated it (from 2.6) as part of the 2.7 release, thinking perhaps the `VERSION` setting in the Sphinx config should match the `latest` setting on the docsite. We could experiment . . .
Could be shortened to `return rc == 0` if you're not doing any further processing other than returning.
heh, indeed interesting, just checked it myself
An example of removing role would be nice.
Typo - `use` -> `used`. (your friendly neighbour nitpicker :)
New modules shouldn't have aliases, plus the alias seems to be wrong as this is the name of the storage account instance.
This needs to pass `return_docs=True` for return docs.
I think it's better to set them to null if they always existed before - unknown key would behave differently than a key that exists but is set to a null value and we don't want to break things for people if possible. Thanks very much for diving in to this.
Create address service object on PanOS devices This may need updating on existing modules
I get that long format task ARNS might be a prerequisite for tags but might be better say e.g. > "Cannot set task tags: long format task arns are required to set tags"
I think it'd be better readable if you do `C(valid_from)` and `C(valid_to)`
I think we need to emit a deprecation warning so that it'd be discoverable by users and also the module docstring should be the first AST node in the module: ```suggestion """ .. warn:: Use ansible.module_utils.common.text.converters instead. """ import warnings # Backwards compat for people still calling it from this package from ansible.module_utils.common.text.converters import to_bytes, to_native, to_text warnings.warn( 'Importing to_bytes, to_native, to_text from _text ' 'has been deprecated. Please import them from ' 'ansible.module_utils.common.text.converters instead.', DeprecationWarning, stacklevel=2, ) ```
Odd -- on python3, to_str should just be an alias for to_unicode so there shouldn't be any difference. On python2, they'd be different but it should work because of automatic coercion of byte strings to unicode strings in python2.
Add traceback here as well (for line numbers).
The alternative would be to always report `changed=False` in check mode, but that could result in an unexpected change during normal execution when you were expecting no change. I would rather Ansible report a change in check mode, but do nothing in normal mode to be on the safe side.
But won't be moved if the storage domain is changed, no? The note should be added only if the parameter is NOT idempotent. The default is meant to be idempotent.
s/Disk quota ID/Virtual Machine quota ID
Better to use ```get_id_by_name``` it get proper error message if storage is not found
@tintoy, yes that's about what I'm talking about. I'd probably put all that logic into a single function, though. So you'd call get_credentials(module) and it would first look in the module parameters, then the environment, and finally in the dot files (returning the first set that it found).
You can replace line 1284-1293 by: ```python vms_service = self._connection.system_service().vms_service() vm_id = get_id_by_name(vms_service, self.param('srcvm')) vm_service = vms_service.vm_service(vm_id) ```
This check can be also moved to `module_utils`.
It might be also interesting to see if it would fail though.
@abadger - is this the kind of thing you're talking about? * [change to module_utils](https://github.com/ansible/ansible/pull/17604/commits/bb8817ac1f7818c895abd51f6aff66d670766250) * [change to module](https://github.com/ansible/ansible/pull/19325/commits/f82888a62a89a42180babb44173d6eb3aab2978e)
I see you fixed this one. :+1:
Doesn't seem to have been done
This should get imported from ansible.module_utils.six
```suggestion - Size of the domain. ```
Use `to_native` for wrapping error message.
check_mode is True but I don't see any check done around this. Please correct me if I am wrong here.
I don't see why this should be changed, it seems like the v6 support shouldn't change this default.
it doesn't really matter as modules are treated as 'independent scripts' and not meant to be shared or reused code
Might be worth updating https://github.com/ansible/ansible/blob/devel/CHANGELOG.md in this PR as well to made that clear
again, this is not required, since the key IS REQUIRED you never get to this point
naming this as `connect_ssh_port` will imply use of ssh port on the server.
Since all of these appear to be constants, it seems to me that making them tuples instead of lists would be good to avoid accidentally modifying them.
env var or ini entry, just like you do for host
`short_description: Manage VLANs on VyOS devices`
avoid making double "get"
```suggestion - Accepts a list of dicts where each dictionary contains two keys, I(path) and I(key_data). ```
I fixed them in https://github.com/ansible/ansible/pull/22415 which I can fix up once this is merged in.
type='str' is the default so I think you can remove those.
`rsa1` is indeed the old, deprecated (but still supported on some platforms...) format for RSA keys.
Please put all imports together at the top, and include only the stuff you are using, i.e. ```python from ansible.module_utils.basic import AnsibleModule ```
```suggestion # type: (str, bytes, Optional[str], bool, GalaxyToken, int) -> bytes ``` This fix was already applied in devel: https://github.com/ansible/ansible/pull/77147
If VMM domain, add support for "vmmDomainProperties": { "microSegVlan": { "vlanType": {}, "vlan": 0 }, "portEncapVlan": { "vlanType": {}, "vlan": 0 }, "vlanEncapMode": {}, "allowMicroSegmentation": 0, "switchType": {}, "switchingMode": {}, "epgLagPol": { "enhancedLagPol": { "name": "string", "dn": "string" } }
```suggestion - name: show configuration information ```
The method name with "sane" suggests quite a broad meaning. It's better to be more specific about what that method does. Also, does it need to be a method? I'd have a pure function instead.
Please don't use lists for tracking differences, but `DifferenceTracker`. That produces a much better output.
Default not set in argspec.
this got named use_backend
Nit: `(object)` is unnecessary
Sorry, I think we had a misunderstanding when we talked earlier. I don't think we should be raising unless we add more exceptions so that we can tell why an exception occurred (right now, we'd have to catch the AnsibleError and then parse the message to tell why we failed.) raise_on_error is bad API. The API should either raise whenever there is an error or let the caller discriminate. Passing in a flag to tell the function to raise isn't meaningful. If we start raising an error, then we have to audit the code and decide what the failure case means in the present code. If the code doesn't depend on it (or works in some scenarios) then we probably have to replicate that behaviour instead of changing to always failing.
You should probably put this check into a separate function and run it before `with` block https://github.com/ansible/ansible/pull/46675/files#diff-62a00abb6ff3cd2c35f54b8b82436130R205 so that it'll halt execution even before trying to construct that connection object.
Passwords should not be written to disk. Is there a reason you can't use `pexpect` to provide the password? I did a quick proof of concept using that method: ```python #!/usr/bin/env python import pexpect def main(): password = 'testing' child = pexpect.spawn('ssh-keygen', ['-q', '-b', '2048', '-t', 'rsa', '-C', 'demo', '-f', '/tmp/keyfile']) child.expect('Enter .*:') child.sendline(password) child.expect('Enter .*:') child.sendline(password) child.expect(pexpect.EOF) if __name__ == '__main__': main() ```
```suggestion - Windows containers must use I(network_mode=default), which will utilize docker NAT networking. - Setting I(network_mode=default) for a Linux container will use bridge mode. ```
@beudbeud I think Felix was asking if this was correct: `As of Ansible 2.8, if you use KV v2 now you get only the last secret from a path.`
To apply the side effect, use this: ```suggestion mocker.patch('ansible.module_utils.network.meraki.meraki.fetch_url', side_effect=mocked_fetch_url) ``` You'll also need to update `mocked_fetch_url` to accept args, like: ```python def mocked_fetch_url(*args, **kwargs): ```
link used to be different, not sure when it got made the same
I had a PR for the same - #32020. I will go ahead and close it. :)
SyntaxError ``` lib/ansible/vars/__init__.py:41: in <module> from ansible.template import Templar E File "/home/adrian/src/ansible/lib/ansible/template/__init__.py", line 517 E for k in data.: E ^ E SyntaxError: invalid syntax ```
It doesn't matter whether it's a method or a function. A private function is related to the module scope, a private method is related to the class. Still, both are private, it's just a different level of namespacing. If a module name starts with an underscore it'd be also private.
I'm working on a PR to update CI for these tests right now. :)
Doesn't look this this is needed anymore, quick check shows that it was only used in `dict_merge`
ansible.module_utils.ec2 sets HAS_BOTO3 to the correct value.
Will fail if `self.systems_uri` is not set yet.
I've also double checked what happens in the scenario you mentioned, and below is the result I receive. So I actually this this method is fine, and there is no need to change it Apart from ensuring the params are not None before checking if they are an existing file. ``` BotoServerError: 400 Bad Request\n<ErrorResponse xmlns=\"https://iam.amazonaws.com/doc/2010-05-08/\"> <Error> <Type>Sender</Type> <Code>MalformedCertificate</Code> <Message>Unable to parse certificate. Please ensure the certificate is in PEM format.</Message> </Error> ```
I don't know the `purestorage.FlashArray` API behind the `array` type, but was curious if there a potential error condition or unhandled exception that could occur here in the event the attempt to `set_hgroup` fails? (same question for various `set_hgroup`, `connect_hgroup`, and `set_hgroup` calls in this patch).
Right, in this case the connection vars are actually `client_id` and `client_secret`, for those we picked standard names, like in `typetalk` or `azure` modules. Using those connection variables, you can modify repositories belonging to any `username` you have access to, be it a team or a user.
What's the plan for this, since it's connection local only
Should probably check if region exists before this line.
Windows 8.1 / Windows 2012 (NT 6.2), no need to set the PS version as that will inevitably confuse people on older OS' who have upgraded to PS 4 or higher.
```suggestion - List of specific nat gateway IDs to get details for. ```
I think we should just let this exception propagate. We aren't adding any value by catching it here (and might be removing value if the traceback were useful). This isn't code in ansible itself so we don't have to create a nicer error message either.
```suggestion return False, 'Command "%s" found no files in archive. Empty archive files are not supported.' % self.cmd_path ```
How about ```suggestion error = error_tuple[0] ``` That makes it look less like a typo :)
[textwrap.dedent](https://docs.python.org/2.7/library/textwrap.html?#textwrap.dedent) could be used here.
Missing full stop. One all the modules are updates you could raise a single PR to update any reference to another module with the `M(aos_login)` which will insert a link to the online docs for that module. e.g.
Since we have used `EDITOR` historically, we should not change the default and need to start with `EDITOR` as the default. This precedence may not make sense, though, and we may need to add a config option to control this. ```suggestion env_editor = os.environ.get('EDITOR', os.environ.get('VISUAL', 'vi')) ```
```suggestion import traceback ```
Here is my reproducer, consistently fails: ``` --- - hosts: localhost connection: local vars: elb_app_lb_name: "{{ elb_app_lb_name }}" tg_name: "{{ tg_name }}" tasks: - name: create an application lb elb_application_lb: state: present name: "{{ elb_app_lb_name }}" subnets: - subnet-17bbda4c - subnet-5c7ecc60 security_groups: sg-29d13055 listeners: - Protocol: HTTP Port: 80 DefaultActions: - 'Type': 'forward' 'TargetGroupName': '{{ tg_name }}' - name: update subnets elb_application_lb: state: present name: "{{ elb_app_lb_name }}" subnets: - subnet-cbdf56ae - subnet-17bbda4c - subnet-5c7ecc60 security_groups: sg-29d13055 ``` Traceback: ``` TASK [update subnets] ************************************************************************************************** task path: /Users/shertel/Workspace/ansible/my_playbooks/elb_application_lb/iterate_over_NoneType.yml:22 Using module file /Users/shertel/Workspace/ansible/lib/ansible/modules/cloud/amazon/elb_application_lb.py <127.0.0.1> ESTABLISH LOCAL CONNECTION FOR USER: shertel <127.0.0.1> EXEC /bin/sh -c 'echo ~ && sleep 0' <127.0.0.1> EXEC /bin/sh -c '( umask 77 && mkdir -p "` echo /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193 `" && echo ansible-tmp-1499709521.38-260285283136193="` echo /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193 `" ) && sleep 0' <127.0.0.1> PUT /var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/tmpiiu8JI TO /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/elb_application_lb.py <127.0.0.1> EXEC /bin/sh -c 'chmod u+x /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/ /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/elb_application_lb.py && sleep 0' <127.0.0.1> EXEC /bin/sh -c '/Users/shertel/Workspace/ansible/venv/python2.7/bin/python /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/elb_application_lb.py; rm -rf "/Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/" > /dev/null 2>&1 && sleep 0' The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 1005, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 1000, in main create_or_update_elb(connection, connection_ec2, module) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 895, in create_or_update_elb listener_changed = create_or_update_elb_listeners(connection, module, elb) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 704, in create_or_update_elb_listeners listeners = ensure_listeners_default_action_has_arn(connection, module, module.params.get("listeners")) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 487, in ensure_listeners_default_action_has_arn for listener in listeners: TypeError: 'NoneType' object is not iterable fatal: [localhost]: FAILED! => { "changed": false, "failed": true, "module_stderr": "Traceback (most recent call last):\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 1005, in <module>\n main()\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 1000, in main\n create_or_update_elb(connection, connection_ec2, module)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 895, in create_or_update_elb\n listener_changed = create_or_update_elb_listeners(connection, module, elb)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 704, in create_or_update_elb_listeners\n listeners = ensure_listeners_default_action_has_arn(connection, module, module.params.get(\"listeners\"))\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 487, in ensure_listeners_default_action_has_arn\n for listener in listeners:\nTypeError: 'NoneType' object is not iterable\n", "module_stdout": "", "msg": "MODULE FAILURE", "rc": 0 } PLAY RECAP ************************************************************************************************************* localhost : ok=1 changed=1 unreachable=0 failed=1 ```
The reason is we don't really want to specifically call out relative paths as what they are relative to is determined by the setup of the remote system rather than anything under ansible's control.
Use `missing_required_lib` from `ansible.module_utils.basic`
@mmazur I think that Ondra's suggestion is correct. We need to be consistent how we present vm state to the user. At some point users will be confused if they not understand ephemeral vs stateful vm. For ephemeral vms stopping means delete and it is fine.
again, please sort according to severity
To be consistent with other modules, can you please change this to: ``` validate_certs: description: - If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates. required: false default: 'yes' ``` And update code & argspec as needed
Why not use deprecated_aliases, ```suggestion notification_message=dict(required=False, default=None, deprecated_aliases=[dict(name='message', version='2.14')]) ```
Change description to match `enable` and `disable` dvSwitch.
if required is true , default value can be removed.
This is correct.
Write a method to generate final diff so it can be used anywhere in the code when required.
This seems to be a leftover, there is no state "updated" anywhere else in the code.
Lines 58-60 have inconsistent indent.
```suggestion file_name, file_exts = os.path.splitext(str(url.rsplit('/', 1)[1])) # Preserving double filename extensions like .tar.gz _, double_ext = os.path.splitext(file_name) if double_ext: file_exts = double_ext + file_exts: ```
we cannot set remote_addr w/o post_validating first
one more question, this would also be "true" for enlargement of the disk, would this work as expected? if yes, `allow_root_disk_shrink` would be a misleading name because it would not only resize to smaller, but also resize to bigger volume --> `allow_root_disk_resize`
if you change `check_trunk_vlan_config` to return in the same order as the others, the variables here need to be reversed (and any `result[1]` in the code, needs to change to `result[0]`)
Change this parameter for a more explicite one : `project` This one should handle project `path` or `id`
vms -> VMs
We can remove import of `text_type` as well.
```suggestion feed_ca_cert=dict(aliases=['importer_ssl_ca_cert','ca_cert']), ```
example should be removed.
It's a minor issue. Wonder if it can go in the docs fragment
Wait, never mind. I think vpc ID is required for VGW's.
```suggestion import requests try: # requests is required for exception handling of the ConnectionError import requests HAS_REQUESTS = True except ImportError: REQUESTS_IMP_ERR = traceback.format_exc() HAS_REQUESTS = False ... if not HAS_REQUESTS: module.fail_json(msg=missing_required_lib('requests'), exception=REQUESTS_IMP_ERR) ```
No quoting needed, no indentation needed, don't fool others :-) ```suggestion - http://www.ansible.com/* ```
```suggestion - "With this option user can identify the LUKS container by UUID. ```
not worried about the else vs indent, its more of a style issue
@aioue Thanks for the patch for this. What do you think about doing away with the valid tags check altogether? Some other opinions on this would probably be good too. I haven't noticed this attempted verification in other modules and I'm not sure what purpose it has. Tags should be able to be integers as well.
Missing full stop.
You can make the list a frozenset at the toplevel of the file to speed this up slightly..
This is handled by `argument_spec`
It looks like this is just a serial upload, how is this faster than the current S3 module? I definitely see the benefit of the glob & sync strategies, but it seems like this would be just as fast.
@bcoca corrected me that _execute_module() takes care of delegation so this is fine. After discussion, though, we did decide that we should set the ansible_pkg_mgr fact when we return from this action plugin so that we don't end up having to discover it every time the actin plugin is run on the same host.
Feel free to ignore me here but `get_*_coverage_files()` is common between python and powershell, you could just have the 1 function and have ``` def _get_coverage_files(language): coverage_dir = ResultType.COVERAGE.path coverage_files = [os.path.join(coverage_dir, f) for f in os.listdir(coverage_dir) if '=coverage.' in f and ('=%s' % language) in f] return coverage_files def get_python_coverage_files(): return _get_coverage_files('python') def get_powershell_coverage_files(): return _get_coverage_files('powershell') ```
```suggestion - name: Install python package using a proxy # Pip doesn't use the standard environment variables, please use the CAPITALIZED ones below ```
Please don't use `\`, there are better ways
`if key is not None and hash_host:` could be used too (because `hast_host` could be one of `None`, `True`, `False`)
should be 'additive' to result when other operations are also executed, unless you force to make it an exclusive argument to all others
I'm curious as to whether this needs to be in upper case or if it works in lower case as well.
That's not what the code says (where default is `zip`)
this might not be py2/py3 compatible, we might want to force bytes
I'm not sure the `if seconds` makes sense here since we'll never get to this point if `seconds` is defined.
`join` takes one argument, so pass a tuple: ```suggestion failure_response['failures'].append(" ".join((module, to_native(e)))) ``` Same below.
We should only be catching boto exceptions, not *every* exception here, since there may be issues we aren't able to handle here.
real sample value
```suggestion - content library id for which details needs to be fetched. ```
Values we return are in bytes.
All client calls should have exception handling. https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#using-fail_json_aws
What's the difference between Seeing state `present` and state `update` looks a little strange here. ```yaml - name: Change role type for existing user purefa_user: name: ansible role: storage_admin state: present # <---- fb_url: 10.10.10.2 api_token: e31060a7-21fc-e277-6240-25983c6c4592 ``` ```yaml - name: Change role type for existing user purefa_user: name: ansible role: storage_admin state: update # <---- fb_url: 10.10.10.2 api_token: e31060a7-21fc-e277-6240-25983c6c4592 ```
Oh! That's actually quite scary. Could people unexpectedly clobber their own variables through ansible_facts? I'm actually much more worried about ansible_facts than I was before - I really don't think it's clear that if you use a module, variables will be set whether you like it or not. I prefer explicit use of `register`.
With cliconf the `get_config()` implementation and other similar api implementation is moved to platform-specific cliconf plugins [here](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/cliconf).
Use `==` to compare booleans. The `is` test should *only* be used when you really want to compare identities of objects! Finally, there's no need to compare a boolean to `True` or `False` explicitly; simply write `elif self._has_migs(local):`.
It looks like scaleway modules allow a series of fallback environment variables as well as a module option. If you wanted to do the same thing for this plugin you could do ``` options: ... oauth_token: env: # in order of precedence - name: SCW_TOKEN - name: SCW_API_KEY - name: SCW_OAUTH_TOKEN ``` Then you can use self.get_option('oauth_token').
```suggestion - true, Run Puppet agent with C(--noop) switch set. ```
Nitpick - the term `The value` is used twice here with different meanings each time. I suggest changing `...if IE changes the values...` to something like `...if the IE configuration changes...` to resolve the ambiguity.
Why are all of these `@property`s? They don't return anything, so I don't see what the use of that is.
host, username, password, timeout and vdom is already in fortios.py in module_utils
Just to clarify, a manual test is all we are looking for.
Suggestion: ``The name of the node to be renamed. If I(name) already exists, no action will be performed.`
Don't quote strings when that's not necessary, and add spaces in Jinja variables for readability. ```suggestion msg: TCP port {{ item.port }} by pid {{ item.pid }} violates the whitelist ```
`check_rc` is false by default, no need to pass.
If you use a catchall exception handler like this then you should also provide the traceback like this: ``` python import traceback from ansible.module_utils._text import to_native [...] module.fail_json(msg='Unanticipated error running atomic: %s' % to_native(e), exception=traceback.format_exc()) ```
If this needs to be done in two months we may want to keep this emitting a warnings until then, so that the bugfix versions of Ansible would warn users at least for some time...
This also needs bounds checking and (maybe) retries if the ASG isn't yet available.
I believe @Console32 had this as separate commands for Windows and non-Windows but it should be separate. Use the actual cmdlet name and full parameters for `Invoke-WebRequest` on PowerShell to avoid confusion.
result is always changed when rerunning playbook with your first example (create of zabbix user). This breaks module idempotency. I believe this can be solved by comparing all `update_user()` arguments with information returned from `user.check_user_exist(alias)`
I completely missed that, apologies
Should match the variable registered in the preceding task. ```suggestion spot_price: "{{ spot_prices.ec2_spot_pricing_history.0.spot_price }}" ```
This one *might* not be redundant, if it's possible to make changes that will cause the CDN endpoint hostname to change...
Also import to_bytes (So we can use it below)
I think I'd handle purge_listeners at the consumer end of this method. Just seems easier than passing it in and handling it here. But not a blocker
`ip_range=dict(default='0.0.0.0/0', type=lambda x: to_text(ip_network(to_text(x)))),` could be used in `argument_spec` instead of this method: * inner `to_text` required because `ip_network` requires unicode in input * outer `to_text` required because `module_utils` [doesn't handle parameter which aren't basic type](https://github.com/ansible/ansible/blob/83ec4184701f77d4de68d0c52946fd80a13fbe0a/lib/ansible/module_utils/basic.py#L504) (except `datetime`) (`to_text` comes from `from ansible.module_utils._text import to_text`)
Use literals rather than constructors: ```suggestion argument_spec={ 'executable': {'type': 'str', 'default': 'podman'}, 'name': {'type': 'list', 'elements': 'str'}, }, ```
Make pep8 happy ```suggestion priv, append_privs, module) ```
we want want -> we want
I completely missed that, apologies
Sorry, I think we had a misunderstanding when we talked earlier. I don't think we should be raising unless we add more exceptions so that we can tell why an exception occurred (right now, we'd have to catch the AnsibleError and then parse the message to tell why we failed.) raise_on_error is bad API. The API should either raise whenever there is an error or let the caller discriminate. Passing in a flag to tell the function to raise isn't meaningful. If we start raising an error, then we have to audit the code and decide what the failure case means in the present code. If the code doesn't depend on it (or works in some scenarios) then we probably have to replicate that behaviour instead of changing to always failing.
If we do go with this approach, I feel like `VMDB_PATH` should be user-configurable
For the new added facts, we suggests no `raw`
All `description` should be full sentences, capital letters & full stops.
```suggestion required: true type: str ```
This will fail if `self.accounts_uri` is not initialized.
This is useless, state can only be "absent" or "present".
...The remote host **MUST** support...
Are you sure this is OK ? Have a look at: https://github.com/ansible/ansible/pull/33315
```suggestion - Note that to use dedicated tenancy you MUST specify a I(vpc_subnet_id) as well. ```
please use here self.param('version').get('base_template')
We can't do this, as this is break bacward compatibility.
note, this is not a blocker but you can use a generator expression here instead of a list comprehension. it could save on some system calls (calling os.path.exists) but I doubt that will be a noticable optimization so it's really just style.
For conciseness of the examples, maybe should we keep only 1 example with multiple option enabled / shown. I'd keep only your example
`state`: a `choice` parameter should be used ([example](https://github.com/ansible/ansible/blob/6cdf91fd35fefec35dca4594db231cc6af5a8620/lib/ansible/modules/system/capabilities.py#L167))
Do not use print statement. All module output is supposed to be returned as JSON.
```suggestion def _post_request(self): ```
I think for consistency we should add `.gcp_compute.ya?ml` as an accepted suffix, since that's the actual plugin name.
That is largely the goal of that function. The file must still be named in a way that ends with `vmware.yaml` or `vmware.yml`. All of the plugins implement this mechanism and check for a namespaced filename. The `auto` plugin checks that they end with `yaml` or `yml`, the individual plugins implement more specific checks. I didn't write the behavior, so I cannot speak really more to it. @s-hertel might be able to provide more insight.
This applies to a few places.
I don't believe this parameter should exist. I believe we should rely on the ability for libraries to use environment variables for `http_proxy` and `https_proxy`. Both `ansible.module_utils.urls` and `requests` can both utilize these environment vars. Setting these values via the `environment` keyword on a task is accepted. The module should not have a deviating method for applying proxies.
It's just an example. I just want it to be less scary.
s/does not do anything/has no effect/
You can remove this since it's handled in module_utils/aws/core.py: https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/aws/core.py#L98-L100
recommend renaming to `config` with alias to `running_config` for consistency
I think this should be false (not a string)
Would be good to also see usage other than ceph.
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
vmware_host_config_facts â vmware_host_ntp
aws_ip_ranges -> aws_service_ip_ranges
This should be a list, not a dictionary. The dictionary key is just an incrementing index value, which is what a list is for. Having it as a dictionary just makes it harder to use (having to deal with an index generator, and dictionaries don't guarantee order).
Not required, we already have method called `connect_to_api`. Also, I would recommend to use `from ansible.module_utils.vmware import PyVmomi` which base class for all VMware_* modules.
Make this: ```yaml type: bool default: 'no' ```
`import_role` supports those keywords, but for inheritance, for include it applies to the task itself, the original phrasing was more accurate
Add this to different PR.
result is attempted to be used below, leading to the traceback: ``` The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_DIc0Gu/ansible_module_rds.py", line 1411, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_DIc0Gu/ansible_module_rds.py", line 1404, in main invocations[module.params.get('command')](module, conn) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_DIc0Gu/ansible_module_rds.py", line 1124, in modify_db_instance resource = await_resource(conn, result, 'available', module) UnboundLocalError: local variable 'result' referenced before assignment fatal: [localhost]: FAILED! => { "changed": false, "failed": true, "module_stderr": "Traceback (most recent call last):\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_DIc0Gu/ansible_module_rds.py\", line 1411, in <module>\n main()\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_DIc0Gu/ansible_module_rds.py\", line 1404, in main\n invocations[module.params.get('command')](module, conn)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_DIc0Gu/ansible_module_rds.py\", line 1124, in modify_db_instance\n resource = await_resource(conn, result, 'available', module)\nUnboundLocalError: local variable 'result' referenced before assignment\n", "module_stdout": "", "msg": "MODULE FAILURE", "rc": 0 } PLAY RECAP ******************************************************************************* localhost : ok=0 changed=0 unreachable=0 failed=1 ```
Is it possible to add a check for `grafna_user` and `grafana_password` options here ? with a warning message "You must provide a grafana_api_key or a grafana_user + grafana_password option". The rest Looks good to me
Would be good to also see usage other than ceph.
This should be enforced by the argument_spec, not sure how this would happen.
probably? ```suggestion - Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives. ```
`is` tests identity in python so if statement always produces a change. We need to use `!=` here to compare equality instead of identity.
I am not sure if you have anything presentable in the result with `check mode` here. Here is a brief example on how `check mode` is perceived: If check_mode is set, and say a module is configuring IP address on an interface, the module would show the output of actual task performed minus the final `commit` operation that brings the task in force.
Mea culpa. I told them to take the defaults out for brevity. I'll keep your preference in mind in the future.
Can `_state_*` be changed to the class methods as it invokes methods from within the class? I don't see a reason to have these methods as `staticmethod`
Could dedent here if `else:` removed.
Because this is in a module_utils file that could be run on python2.4 we need to use the helper functions from six for this: ``` python from ansible.module_utils.six import b [...] os.write(tmp-fd, b('\n')) ```
Typically I keep module options with `C` and only use `I` when referring to just the option name.
We already have a warnings mechanism in `module_utils.common.warnings` that is consumed on the module side, but we need to implement consuming of these warnings controller side. As such, it's not a completed feature yet.
I have a concern on pagination here, `list_objects` is going to default to 100 or 500 items, which is fine most of the time (it was like this prior) but would make a nice enhancement.
I mean: ``` try: [use connection] finally: connection.close() ```
Example fields doesn't match the real fields name (server,user, pass)
unnecessary import - defaultdict is not used
Actually, we had some discussions about group names the previous days on IRC. Apparently dashes have been not allowed in group names from Ansible 2.4 on; this hasn't been enforced so far, but now (with Ansible 2.8) it will be. It's still possible to disallow it, but every group with a dash (or other invalid chars) in them will trigger a big fat warning. So please get rid of the dashes here so users of this inventory plugin won't automatically get a list of warnings, even if they don't have invalid chars in their labels.
@AlanCoding since most of those deal with 'after' and this is meant to deal with 'before' the signature is not expected to be consistent.
please add `no_log=True` to avoid leaking the password in the logs.
version_added and default value can be dropped as this is new module.
```suggestion pvdiplay_cmd_device_options = [pvdisplay_cmd, device] + pvdisplay_ops ```
I'd use the minimum indentation here, like you do elsewhere. So it is consistently indented.
``` lversion = get_version(module, lstdout) ``` same with rversion line 211
`else` is unnecessary here, you could drop it to decent the block. Not sure why this pylint rule is disabled :man_shrugging:
```python if 'name' in self.params and self.params['name']: ```
Somehow this (+ the following line) doesn't work and prevent the module from working.I haven't digged deeper yet,
I am not in favor of having fromPort and toPort in there. As we use snake_case in Ansible.
I don't see why this should be changed, it seems like the v6 support shouldn't change this default.
@pierremahot please reuse my snippet to have better correct parser.
Please do this for all parameters. ```suggestion - The iptables chain in which to insert the direct_rule, used with the C(direct_rule) option. type: str ```
@webknjaz we have no gaurantees that the artifacts are being built from a git checkout.
No need to quote, we prefer it as a list. ```yaml author: - Daniel SÃ¡nches FÃ¡bregas (@Daniel-Sanchez-Fabregas) ```
Also describe if it deletes the files or not
```suggestion import atexit import traceback ``` Please import `atexit` module
Could you please refactor following if block to something which uses dictionary like - ```python options = { 'ipv4.address': self.ip4, 'ipv4.gateway': self.gw4, 'ipv4.dns': self.dns4, 'ipv6.address': self.ip6, 'ipv6.gateway': self.gw6, 'ipv6.dns': self.dns6, 'autoconnect': self.bool_to_string(self.autoconnect), 'ipv4.dns-search': self.dns4_search, 'ipv6.dns-search': self.dns6_search, } for key, value in options.items(): if value is not None: cmd.extend([key, value]) ```
Awesome. This is much better now.
Hm, given those 15(?) other tests that failed on Python 3 in calls to syslog.syslog(), could we monkey-patch the rest of the tests so this is the only test that actually writes to the real syslog/journal? (EDIT: when I say "the rest of the tests", I mean in test_basic.py.)
CI failure due to missing newline at end of file: ``` 2017-02-06 02:26:40 ERROR: PEP 8: lib/ansible/modules/system/java_cert.py:282:11: W292 no newline at end of file (current) ```
+1 to `psexec_command` just for clarity...
You don't really seem to be using `params` as a useful dict at all in this method. Setting `group_name = module.params.get('name')` and then using `group_name` rather than `params['GroupName']` would make more sense
'Use "sudo pip install --upgrade avisdk" to install Avi SDK'
Can we update the `description` text to be a little more explicit that it is the controlling host (the machine running Ansible) and not the target node that must have an established Conjur identity for the lookup plugin to work? Right now it's a bit confusing because the `requirements` is clear about that but the description just says `...the server's Conjur identity` without saying what 'the server' is in this context.
New unit test files should use `pytest` style tests instead of `unittest`.
For automation, `yes` or `accept-new` are probably more secure choices than `no`. In the end, it's up to the user to decide what kind of security requirements they have and which default setting they want.
also, they are the ones that CREATE the ansible_env the use
When hitting an error you must exit with module.fail_json
This should be `else`, looks like the logic got inverted accidentally.
Here also `required=False` is not needed for parameters that are not required. Guideline dictates to leave it out.
I prefer a second (and perhaps even third) `from ansible.module_utils.ec2 import` line to a line continuation (brackets also work, but are subjectively less elegant). Not a blocker though
This is probably just me but I had a hard time parsing that. I would change `notify_scope != 'per_loop_item'` into `notify_scope == 'task'` and put it all on the one or two lines maybe. Not a blocker, of course.
If it is not required, you don't have to add `'required: False`.
Discussed in slack. We can use to_text(e).index('str') and to_text(e).index('tuple') to find where in the error message's string, the types occur. And then use that to decide which is the string and should be sorted after the other one. (The message changed between pyhton-3.5 and python-3.6 for those who are looking at this at home)
```suggestion version_added: '2.8' ``` This is a required fix as it states the first version this module ships with.
```suggestion - vmtx templates feature is introduced in vSphere 67U1 and APIs for clone template from content library in 67U2. ```
can be ignored
Also, for check more to work properly, you have to put ``` fetch = create(session, collection(session), [200]) fetch = response_to_hash(module, fetch.get('vpc')) ``` below into an `if:`.
Put the object creation out of this function in the `main` to be more readable. Then only pass the gitlab object to your function.
Probably cleaner to use a different variable than before to make sure you're not using the incorrect response.
```suggestion - name: Install python package using a proxy # Pip doesn't use the standard environment variables, please use the CAPITALIZED ones below ```
You should add the type for each option: https://github.com/ansible/ansible/pull/47271#discussion_r226381898.
Please add the following line directly below `required: false` `version_added: "2.3"`
You should raise `AnsibleOptionsError` instead of `ValueError`. Additionally, drop the `ansible-playbook: error: --` and maybe reword to be "Limit requires a non-zero length string"
not a blocker but I am missing some docs here, there are a few returns which gets returned under various conditions.
Booleans should be checked using is instead of ==. ```suggestion if ci is True: ```
Too few format values ``` Unable to get hooks from repository : %s" % to_native(err) ```
`_get_fs_size` method need to be modified in order to handle `pvdisplay` tools. It would be better to use a method instead of a string for the `fsinfo` value.
May want to use the configparser in 'ansible.compat.six.moves.configparser' here. Otherwise there are py2/py3 compat issues.
```suggestion - If set to C(present) and library exists, then library is updated. ```
```suggestion module.fail_json(msg="The following packages are absent in the currently booted rpm-ostree commit: %s" % ' '.join(pkgs)) ```
```suggestion content = to_text(response.read(), errors='surrogate_or_strict') ```
New modules shouldn't have aliases, plus the alias seems to be wrong as this is the name of the storage account instance.
This is still needed.
Should also have trailing dot :-/
Actually... Even better: use a defaultdict instead of this. This is how defaultdicts work: ``` python from collections import defaultdict foo = defaultdict(list) foo[k].append(v) ```
maybe? ```suggestion mod = sys.modules.get(fullname) or self.load_module(fullname) ```
```suggestion - You can not change the I(group) for a pre-existing group ```
Not needed with AnsibleAWSModule
Just noting that this RETURN is incomplete
``` The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_ypla3C/ansible_module_ec2_asg.py", line 1353, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_ypla3C/ansible_module_ec2_asg.py", line 1342, in main create_changed, asg_properties = create_autoscaling_group(connection, module) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_ypla3C/ansible_module_ec2_asg.py", line 967, in create_autoscaling_group update_asg(connection, **ag) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_ypla3C/ansible_modlib.zip/ansible/module_utils/cloud.py", line 153, in retry_func botocore.exceptions.ParamValidationError: Parameter validation failed: Invalid type for parameter DesiredCapacity, value: None, type: <type 'NoneType'>, valid types: <type 'int'>, <type 'long'> ``` Even though this is prettier, I think we might need to do what you initially did by checking if not None: `desired_capacity = desired_capacity if desired_capacity is not None else as_group['DesiredCapacity']` etc.
Start by not using `\` and use proper indent
This branch can never be hit since the argument_spec defines which states are valid and checks the provided module arguments against it.
So by default Ansible modules use the system-configured proxy settings, unless you set **use_proxy** to **no**.
*That said, I always preferred yes/no myself from a linguistic perspective. If we prefer a more human readable format, using true/false is less helpful (especially for non-native speakers or with negative key names). Using yes/no feels a lot more natural. But YAML 1.2 reduced boolean values to a minimum.*
This could be less nested once you apply `choices`.
`check_rc` is false by default, no need to pass.
Little :bug: : In **check** mode, the `keycloak_realm` always returns `result['changed']: True` You need to add something like `result['changed'] = (before_realm != updated_realm)` here...
@nerzhul this 'feature' predates the RFC that introduced SRV and was used as a 'cheap' load balancing trick
```suggestion supports_check_mode=True, ```
My guess as to why the tests are failing to parse the docstring are due to this line. Since it contains quotes, you'll need to wrap the whole line in single quotes.
```suggestion available. The default is C(False). version_added: '2.10' type: bool ```
It's a standard practice to use separate args for different params. Also, autogenerated param ids aren't very readable when they are complex so in such cases it's better to assign them meaningful names (they are displayed in the pytest report): ```suggestion @pytest.mark.parametrize( ('returned_items_count', 'patched_dc_stdout'), ( (3, (DOCKER_OUTPUT_MULTIPLE, '')), (2, (PODMAN_OUTPUT, '')), (0, ('', '')), ), ids=('docker JSONL', 'podman JSON sequence', 'empty output'), ) def test_docker_images(docker_images, mocker, returned_items_count, patched_dc_stdout): mocker.patch( 'ansible_test._internal.docker_util.docker_command', return_value=patched_dc_stdout) ret = docker_images('', 'quay.io/ansible/centos7-test-container') assert len(ret) == returned_items_count ```
You are right, it's not consistent as-is. @Akasurde What is the direction we are taking this ? Also, we should also define a sub-spec for the hardware-parameter at some point.
Right, I see. But a warning is annoying if you run this on purpose like this. (Although one can surpress warnings on a per-task basis). I will leave this up to you to decide.
What are the properties? * As other modules, we flatten the properties in the ansible module's parameter. * And for the second level of dict type, we can use `options` to specific another spec to define the key-value pairs in the dict. Like ``` py props_spec={ name=dict(type='str') } self.module_arg_spec = { props=dict(type='dict', options=props_spec) } ```
Ok we can use sysprep with from scratch VM. But if we run customization in all cases why this condition ? I think it should be : if we set customizations params : if len(self.params['customize']) > 0:
Can this use `b_output_path` from line 291? ```suggestion b_output_path, ```
I am not sure if this will work because - if `find_obj` is not able find this object that means it does not exists. If it finds then you will not hit this condition. Let me know if I am wrong.
This needs to be changed, make it `Not applicable to endpoints of I(type) C(external_endpoints).`
It's a bit more complicated. `test: ['NONE']` is equivalent to not having a healthcheck, which is something `comparsions` doesn't understand. We decided to use the `test: ['NONE']` syntax to disable healthchecks because the alternatives are kind of strange. Accepting `healthcheck: None` doesn't work (since that means "I don't care if the container has a healthcheck"), and `healthcheck: { }` (which we had before) is also kind of strange (and still needs the extra complexity with `disable_healthcheck` since the default comparison for dicts, `allow_more_present`, won't detect disabling in this case). Having the explicit `test: ['NONE']` seems like the best way (and the most compatbile one with `comparisons`).
Remove unsafe from the function signature since it's handled by the decorator.
There should be a newline at the end of the file
I think the signature of exec_command has changed in v2. If you take a look at local.py or the ConnectionBase class you'll see: ``` python def exec_command(self, cmd, tmp_path, in_data=None, sudoable=True): ```
Indentation doesn't seem quite right here.
Can you add: ``` type: bool default: no ```
We can remove import of `text_type` as well.
Use best practice to handler this error : ```python GITLAB_IMP_ERR = None try: import gitlab HAS_GITLAB_PACKAGE = True except Exception: GITLAB_IMP_ERR = traceback.format_exc() HAS_GITLAB_PACKAGE = False ```
Why do you add `return` here (and below)? `self.client.fail()` terminates the program.
I missed this earlier, this module uses several classes to create a 'per system' object to handle the actions, you only updated the class for Alpine (which is derived from busybox, which is derived from user). We need to ensure that all variants get the update.
Please format this like this: ```python state=dict( choices=['enabled', 'disabled', 'list', 'list_enabled', 'list_disabled'], default='enabled'), ```
If you update the argspec as I suggested you can change this to something like: `Exactly one of I(inputFile) and I(fileName) is required.`
if it is an error, use `fail_json`, otherwise it is a warning, which `module.warn()` can take care of
If you have a `default` option then this is not true. I would just remove this line as `required: no` is the default.
```suggestion check_failed(args, 'results indicate tests did not pass (result: %s)\n' ```
This isn't really the case, the module seems to be installing the feature so I would mention that. Also mention that if a reboot is required then it will fail.
this is a non atomic operation and can lead to file corruption, write to a temp file and use shared 'atomic_move' to put the file into place
Don't do this. The old way is much more pythonic. And it's much harder to see *your* changes as a result
oy, thanks Github
`is` tests identity in python so if statement always produces a change. We need to use `!=` here to compare equality instead of identity.
```suggestion vmware_host_snmp: ```
```suggestion - The certificate in PEM format. ```
No longer need deepcopy
Not really - if people wanted to use tagging they'd need 1.4.4+ but otherwise any version of boto3 would pretty much work. (This is the same as your existing change) It's probably worth adding a warning if people try and use tagging with a version of boto3 that does not support tagging too (using `hasattr(client, 'create_tags')` or similar)
just use ansible_dict_to_boto3_filter_list here
This logic seems ignore the use case of removing all tags.
this is an unsafe way to write the file, other processes might get incorrect/incomplete data and if it fails it leaves a corrupt file. write to a temp file and use `atomic_move` instead
``` 'LaunchTemplateSpecification': launch_object["LaunchTemplate"] ```
please call this `executable` for consistency used in other modules. e.g. https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/packaging/language/pip.py#L117 or also https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/packaging/language/npm.py#L53. Optionally add an `php_path` as an alias.
I think `C()` should help with formatting and readability ```suggestion Time will always be interpreted as UTC. Valid formats are: C([+-]timespec | YYYY:MM:DD | YYYY:MM:DD:HH:MM:SS | YYYY:MM:DD HH:MM:SS | forever) ```
add a `mutually_exclusive` section
Thanks. It's already fixed in `devel` ;-)
```suggestion self._display.debug("recursive_group_vars - Traversing dir : %s with groups : %s" % (path, to_text(groups))) ```
```suggestion cpu_facts['processor_threads_per_core'] = int(data[1]) ```
```suggestion default: {'type': 'org.graylog2.indexer.retention.strategies.DeletionRetentionStrategyConfig', 'max_number_of_indices': 14} type: dict ```
Same - please use `len`
```python current_config['received'] = (current_config.get('received') == 'yes') ```
You could convert things to int right here: ```suggestion requests_version = tuple(map(int, requests.__version__.split('.'))) ```
If it's not required, you don't have to state `required: false` That's implicit.
Good that you default to TLS true!
How about ```suggestion error = error_tuple[0] ``` That makes it look less like a typo :)
it is a user interface, if users don't read docs it can't be our fault. anyways. not a blocker (that is why I used "would")
Maybe you should put the `BEWARE` part into a new paragraph (i.e. a new list item in `description`).
Also, this will mean you need to `import traceback`
A message string would good to say that image is not preset or something similar.
I don't understand this change.
Would be good to also see usage other than ceph.
`inspect_service()` returns a `NotFound` exception if it cannot find the service ([CI error](https://app.shippable.com/github/ansible/ansible/runs/108392/51/tests)). Check out module_utils/docker/common.py, it catches that in a few cases I think.
Parameters that are not required don't need `required: false`.
@siwyd @alikins Such timing -- I was about to submit a PR against module_utils/facts/virtual/linux.py to check {{product_name}} to detect a DO droplet when I came across this PR. $ cat /sys/devices/virtual/dmi/id/product_name Droplet
Note that this is also being removed in https://github.com/ansible/ansible/pull/68560
I think we are fine with having the property and can do w/o the 'special dict key' which would show in the user's dict definition
This should be a string: ```yaml version_added: '2.4' ```
```suggestion - Only required if no server I(id) is given or a server does not exists. ```
> Well, as I state in PR description, version in trunk practically disables ec2.py cache when using python 3. The idea was to replaces `hash()` call with any hashing function that gives stable results between script runs. Anything from hashlib module will do, `md5` does not have any advantage. One important note: `md5` will not be available on some systems (such as FIPS compliant systems). It's probably better to use `sha256` (as `sha1` could also be removed). > hashlib functions require byte string as input. Python 2 and 3 differ in what is stored in `__file__` variable: python 2 has simple string and in python 3 all strings are unicode. You could do ```.py from ansible.module_utils._text import to_bytes ``` and then ```.py cache_name += '-' + hashlib.sha256(to_bytes(__file__)).hexdigest()[:6] ``` This will work for both Python 2 and Python 3.
```suggestion # try to get collection world name first ```
Should probably check if region exists before this line.
don't raise errors on import, expose them on `parse` see developer docs for examples
```suggestion self._module.fail_json(msg=("An error occurred trying to get the ADOM Info. Error: " + to_text(resp_obj))) ```
Please don't call argument an attribute ;)
Not sure what exceptions could happen, but it may be easier for the end-user to debug if the exception is being reported to. ```python except: e = get_exception() module.fail_json(msg='Error connecting device. %s' % e) ```
Instead of this function, there is Ansible built-in function - `get_bin_path` which does lot of other things and tested.
Add a break after setting pkg_mgr_name (and the same for dnf)
host_storage.type == otypes.StorageType.FCP
I would call super here like this: ``` python super(Connection, self).exec_command(cmd, tmp_path, in_data=in_data, sudoable=sudoable) ``` It doesn't do anything useful for the docker connection but once again, it's nice to do it so that anyone looking at the docker connection plugin for a basis to create their own connection plugin will do the right thing (the base class's exec_command() fetch_file(), and put_file() use the @ensure_connect decorator to make sure that our connection is open before attempting these actions. For plugins that actually need to establish a connection, this is a necessary step).
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
Do you need that step? `clients = client_list` should be enough
password and nopassword should be mutual exclusive
My only feedback is that this is a _bit_ repetitive (would probably be better as a loop over a list of these keys) though I don't think I'd let it hold up a merge.
keys in lowercase
Needs changing to you
```suggestion - Can be a dict which contains I(name) and I(resource_group) of the virtual network. ```
no need to do this here, we already take care of it below, just update 'docs' variable and 353/635 will display
@thomwiggers you also seem to like the "suggested change" feature :D
same for other lines below.
Not really - if people wanted to use tagging they'd need 1.4.4+ but otherwise any version of boto3 would pretty much work. (This is the same as your existing change) It's probably worth adding a warning if people try and use tagging with a version of boto3 that does not support tagging too (using `hasattr(client, 'create_tags')` or similar)
We probably don't want to make the *short* description that long. Maybe we can now change this to: ```yaml short_description: Provide Windows product and license information ```
Mutually exclusive with I(domain_search).
https://docs.python.org/3/library/exceptions.html#TimeoutError says that `TimeoutError` is an `OSError` subclass that's been added in Python 3.3
```suggestion # checksum filename ```
You are taking me wrong here. I am just saying that adding additional library will add overhead to people who are using this module and people who will maintain it. I am not saying to port other GitHub modules to use `PyGithub`. One way could be using GitHub REST APIs directly rather than relying on any third party Python modules.
No need to wrap import json in a try block as we already assume python 2.6+ for boto
this should not be a new option, the initial approach to change to 'search' was correct, this might be 'stableinterface' but the current behaviour is a bug.
I would put all these variables inside the `main()` function as there is no reason to have them global because you don't share them across multiple functions.
```suggestion version_added: "2.8" ```
There's a lot of churn on changing double to single quotes, I could understand wanting to be consistent but it seems outside the scope of this change.
Since this is controller code, this should probably be using ```to_text()``` here. The ```self.get_option``` also seems redundant since you just pulled that value into inventory_id above? So maybe: ```suggestion inventory_id = to_text(inventory_id, nonstring='simplerepr') ```
catching a low hanging fruit ~~~python if not module.check_mode: array.set(banner="") changed = True ~~~
You will need to include the OAUTH_TOKEN environment variable also.
This is usually not needed
This isn't incorrect in this code, but it might be worthwhile to use a different name (`license_id` etc) for the local `license` variable name just because `license` is also a python builtin so some static checkers won't warn if a local `license` isn't defined. (And using the builtin `license` by accident can cause some very obtuse errors and sometimes seem to "work")
Oh, Cool. Thanks for information. Then we can use LooseVersion.
Should be a parameter of the task itself and not the module
ah, now I see why, but still, would prefer `command` to be required.
stray single quote
```suggestion version_added: 2.10 ```
You can refer ios_command module doc ``` - name: run commands that require answering a prompt ios_command: commands: - command: 'clear counters GigabitEthernet0/1' prompt: 'Clear "show interface" counters on this interface \[confirm\]' answer: 'y' - command: 'clear counters GigabitEthernet0/2' prompt: '[confirm]' answer: "\r" ```
Please remove this. /tmp might not be writable or available.
You may be able to modify sys.path, perform an import, and then restore sys.path. That will probably prevent it from causing issues for other unit tests, but I haven't verified that.
This does not need to be wrapped.
Returning `minimal` will result in sanity tests being executed as appropriate on the files. By classifying them we're telling `ansible-test` it doesn't need to fall back to testing everything due to lack of classification. Tests shouldn't be using a `requirements.txt` in the root of the repository, and extra work is required to access files outside the current test target for integration tests, so it shouldn't happen accidentally.
Actually result could be a property of the main object in this case.
Get rid of this.
not a required change, but it seems a 'difference' comparison between lists would give you any passed params that are not valid choices in 1 shot and a single error message.
already have this in basic.py, no need to create your own, it also includes sanitation and no_log
but you dont have full args till you read the file. I becomes specially fun when the from itself is a template
this would be equivalent of `if '-' in md5_remote:` since `etag_multipart` is never used other than this conditional.
For the author information we normally only keep name and GitHub handle.
This probably should use some internal ref, instead of absolute linking. I'm just not an expert on what that would look like. Maybe: ``` :ref:`FACTS_MODULES` ```
Indent isn't really necessary here: ```suggestion if already_loaded_vendored_modules: print( 'doh, some vendored stuff was already loaded: {0}'. format(already_loaded_vendored_modules), file=sys.stderr, ) ```
Since we're optimizing to solve this bug, would be good to move regex compilation up to be a one-time thing. Maybe a class attribute or global for each compiled regex. ``` python class LinuxHardware(Hardware): BIND_MOUNT_RE = re.compile(r".*\]") [...] if re.match(self.BIND_MOUNT_RE, fields[1]): ```
minor typo - `expresisions` should be `expressions`
```suggestion - Size of the domain. ```
I know, was just wondering if it's intended that it works that way.
I think this approach might read simpler: ```suggestion new_galaxy_yml = dict.from_keys(optional_strings) new_galaxy_yml.update(dict.from_keys(optional_lists), []) new_galaxy_yml.update(dict.from_keys(optional_dicts), {}) new_galaxy_yml.update(galaxy_yml) ```
This will not do the right thing. Probably what you want is something along the lines of `if ('ipv4addr' in each) and ('ipv4addr' in proposed_object) and each['ipv4addr'] == proposed_object['ipv4addr']:`
Ah, it's nice that the syntax checker caught this bug. This should be `network_interface['tags'] = boto3_tag_list_to_ansible_dict(tag_set_copy)`
We prefer also examples where we remove objects, query a single object or query all objects. Look at some of the other modules. We have at minimum 4 examples.
instead of 'comma separated list' just make 'list' , type=list will accept both types of list and always guarantee a list object to the module
I think this will fail in case of standalone ESXi server.
In order to improve readability (meaning the change described below isn't required): * `delete_cert`, `import_pkcs12_path`, `import_cert_path` and `import_cert_url` never return (either `exit_json` or ` fail_json` are called) * it's quite disturbing that `changed` isn't set (and it doesn't need to be set) when `delete_cert` is called then i would rather call `module.exit_json(changed=changed)` here (then keep `module.exit_json(changed=False)` unchanged at the end the file.
a list action or state is something we have accepted in the past, but not anymore for new modules. please create a separate facts module for this functionality.
Is this (and `providers:` below) part of `property_attributes:`? Dedent if you want them to be example of top-level `providers` and `services` args.
`across` has broken into two separate lines.
Make this sentence to the first paragraph in the description, also declare in short_description
This doesn't remove any orphan, it only checks whether there are any.
Please change this to 1.1
This could be less nested once you apply `choices`.
This has to be done only once, since the binary is always the same (`docker-machine`).
```suggestion description: JSON parsed response from the server ```
You might want to use `type=ip_network` (then add from `ansible.module_utils.compat.ipaddress import ip_network`) for `ip_range`, in order to validate the value before using it. (value of `type` parameter can be a callback).
Use to_native() with the parameter errors='surrogate_or_strict' here. (the default error handler is surrogate_or_replace. That is appropriate for informational things as undecodable/encodable values will have a replacement character substituted. For dictionary keys or other data that you would rather throw an error than risk data corruption, surrogate_or_strict is appropriate.)
Parameters that are not required, don't need a `required: False`. This is implied.
```suggestion search_base: "OU=Users,DC=contoso,DC=com" ```
You can replace this line through line 363 with simply: `client = module.client('es')`
The `join` here seems a little unnecessary, and the performance is worse than a printf like string format or using `.format` Although it is just 1 line, and not repeated, so that's just a little bit of a nitpick.
The `basedir` path will need to be bytes to avoid unicode errors. Something like this: ```suggestion b_basedir = to_bytes(context.CLIARGS['basedir']) collections_search_paths.update([b_basedir]) default_collections_path = [b_basedir] + default_collections_path ``` I did not test this. I'm just guessing from looking at the test failure.
@zikalino thanks for submitting this module, I've been testing it and this should also be of type `bool` otherwise the changed check failed when comparing values
```suggestion - name: Install version 6.1.9.30 of OpenGL.OpenGL_X.rte.soft from lpp_source lppsource_aix6109-06 ```
unsure why we need mapping, need to look at original bug, the self.deprecate(d) should be able to handle dicts already
Ooh, this is a nasty bug - if this wasn't in this PR,I wouldn't have spotted this. If this code happens elsewhere, it'll break when 2.4 goes out (because a now valid key is overwritten by the content of a now missing key)
Use `to_text(line)` instead.
so this looks like a problem `shutil.move(b_src, b_tmp_dest_name)`
SyntaxError ``` lib/ansible/vars/__init__.py:41: in <module> from ansible.template import Templar E File "/home/adrian/src/ansible/lib/ansible/template/__init__.py", line 517 E for k in data.: E ^ E SyntaxError: invalid syntax ```
For the author information we normally only keep name and GitHub handle.
This will fix the testcase.
Please remove this line
In Python, it's common to include docstrings as per PEP 257: ```suggestion def fake_now(monkeypatch): """Patch `datetime.datetime.now()` to return a deterministic value.""" ```
My point is the self.credentials may not has a key named 'tenant' if not login
cool - I removed the line about how it used to be hardcoded and changed the note about whitelisting
Please add `type="str"`
Lets keep logic striate: you want set password if user already exist: ```if state == 'present': if user: if check_user_password(module, user_name, user_password): module.exit_json(changed=False) else: set_user_password(module, client, user_name, user_password) else: create_user(module, client, user_name, user_password, admin) ``` it's ok but lets look on logic above, you already have ```influxdb = InfluxDb(module) client = influxdb.connect_to_influxdb() ``` and when you call ```check_user_password``` you create another connection to db inside of this function. ```def check_user_password(module, user_name, user_password): influxdb = InfluxDb(module) client = influxdb.connect_to_influxdb() ``` Obviously you can pass to this function client object that was init in main() Next ```try: client.switch_user(user_name, user_password) client.get_list_users() except InfluxDBClientError as e: if e.code == 401: return False ``` why do you use```client.get_list_users()```? it returns a list of users : actually a list-object. I guess you can keep only ```client.switch_user(user_name, user_password)``` Another is about ```InfluxDBClientError``` its already part of InfluxDBClient that we import from influxdb in ```module_utils/influxdb.py``` and if you go deeper in ```influxdb-python/influxdb/client.py``` Any way let me try to work with your code and figure out how we can make this code more clean
```suggestion default: no ```
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Missing space after comma.
use ```from ansible.module_utils.vmware import get_parent_datacenter```
Format replacement strings with nothing inside of them, {}, are only available in python-2.7 or better. So you'll need to make sure that all your formats have numbers inside of them. For example, this line would then be: `record_ids = client.get('/domain/zone/{0}/record'.format(domain))`
I don't like to frame such big block of code into an exception. Please put the exception only around the command which actually can throw an exception.
I ran the integration tests on this PR and they confirm that the code above works for both flatpak 1.2.0 **and** before. I mean, I like the fact that @JayKayy's solution is super simple. Even if it is possible that flatpak breaks it's output in future again, we don't know if they actually will. So maybe one could regard a solution like mine from #51482 as premature optimisation...
Everything from `for vm in vms:` to line 957 can be moved outside of the loop. Also, instead of computing user_desired_path (which is a bit complex and error-prone IMHO) what do you think of: ``` if not actual_vm_folder_path.startswith("%s%s" % (dcpath, user_defined_dc): continue if user_folder in actual_vm_folder_path: vm_obj = vm break ```
The module has required options, but you don't provide any in this example.
I _think_ we're on the same page now. I initially thought about it as a simple wrapper just as `exec_command` is, but in the end it would have the same signature as `send_request`, so keeping the name would remove a lot of changes from the modules. Then again, we don't have any external consumers of the netconf plugin to my knowledge, so we're not tied to names as much as with network_cli, and renaming the function to make ithe intent clearer might be beneficial.
Hmm, that's pretty inconsistent. So now we got three different choices... :) I guess it's fine to leave it with 1.25.
Same here. ```suggestion self.cron_file = os.path.join('/etc/cron.d', cron_file) self.b_cron_file = os.path.join(b'/etc/cron.d', to_bytes(cron_file, errors='surrogate_or_strict')) ```
docs, hint, hint. ~~~diff - "SSHKEYID": "5abf426403479", ~~~
For `mode == 'persist'`, you have to both check the current value *and* the value in the `mysqld_auto` config.
I think this should be false (not a string)
Combine line 85 with this line: ```suggestion - May not be used with C(backrefs) or C(insertbefore). ```
Since you only check keys of the same object in the same fashion, you could collapse this using parameterize (for example, extend with other params): ```suggestion @pytest.mark.parametrize( ('fact_name', 'fact_value'), ( ('year', 2020), ('weekday', 'Saturday'), ), ) def test_date_time_facts(date_collector, fact_name, fact_value): assert date_collector['date_time'][fact_name] == fact_value ``` This will generate a separate test per each param while allowing you to keep the test function logic the same. https://docs.pytest.org/en/stable/example/parametrize.html
Perfect. Looks good!
`speed` should be `int`
Having said that, I don't believe these two lines are required at all - we should only use multi_zone if it's explicitly set, and let the boto rds2 API handle the default (which it does - if you pass it multi_az=None (it's default), you'll get a non multi AZ RDS instance)
Tiny typo here 'Waitis' -> 'Waits'
Do note that this only looks at the primary credential cache. This means that if you use a collection credential cache such as DIR, KEYRING or KCM (default in most distributions these days), you might not see a ticket that exists in a non-primary credential cache. Maybe consider using `klist -A`, or try a `kswitch -p <principal>`? The latter is easier to parse, but might break stuff if people are still using the old krb5 APIs (rather than GSSAPI) and were using the primary credential that you just made secondary.
Please put all imports together at the top, and include only the stuff you are using, i.e. ```python from ansible.module_utils.basic import AnsibleModule ```
You've named this check_params in other modules. Not a major issue.
Have you tried ```suggestion monkeypatch.setattr(datetime.datetime, 'now', lambda: TIMESTAMP) ```
This will fail if user provides `int` values. ``` >>> a = 1 >>> a.isdigit() Traceback (most recent call last): File "<stdin>", line 1, in <module> AttributeError: 'int' object has no attribute 'isdigit' ``` you might want to add additional check like ```python timezone = self.params['customization'].get(timezone') if isinstance(timezone, int): ident.guiUnattended.timeZone = timezone elif isinstance(timezone, string_types) and timezone.isdigit(): ident.guiUnattended.timeZone = int(timezone) else: self.module.fail_json(msg="customization.timezone attribute should be an integer value.") ```
I think it would be best to refactor `use_old_user_mgmt` to handle all versions manipulation (ie returning a clear string stating which kind of user management we should use, for example `PASSWORD_ONLY` or `LEGACY`, `PASSWORD_OR_AUTH_STRING`, `MYSQL_8_PLUS` ...)
This needs to be a raw string (`r'''`) to fix the failing doc sanity check- otherwise it tries to interpret `C:\Users` as a Unicode hex literal. Ah, the joys of nesting escapes across multiple languages... :)
Either 'license' has to exist (and be a non-empty list) or non-None 'license_file' is required. https://github.com/ansible/galaxy/blob/devel/galaxy/importer/models.py#L236-L247
vms -> VMs
Indentation here doesn't look right
Why not sort these as well? Would require adjusting `test_laps_password.py` as well, though.
from ansible.module_utils.vmware import get_parent_datacenter
I am pretty sure the rest of the code will blow up, since it assumes that `systems_uri` is a string and not an array.
```suggestion - Windows web apps support multiple frameworks at the same time. ```
```suggestion version_added: '2.10' ```
Yeah, since it isn't being used there either I would probably do that.
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` mutually_exclusive required_together required_one_of require_if ```
ah, then ansible_ssh_port is definitely wrong. I was hoping to get a `ansible_<plugin>_port` to be passed to each plugin w/o having to update play_context into 2.4 cc @nitzmahone
Creating paths by concatenating them together is a no-go with Redfish. Paths should always come from the Redfish responses itself (`redfish/v1` being exception here).
The following two items are inherited from skydive_capture. They should not be here
I'd like to see some sanity checking in here to ensure the resulting `self.cloudforms_suffix` value contains a `.` character at `self.cloudforms_suffix[0]` and raise an `AnsibleError` exception if it does not. Otherwise I think this looks good.
ok, as pointed on irc, that's verified by check, so that's ok.
Strange default. I would simply remove it.
`payload_from_wished_lb` could be called once.
Same here, move it down the stack.
```suggestion - The VM to use as the source (template). ```
Maybe better? Not certain, but I was running into the same error of `ERROR! a bytes-like object is required, not 'str' ` before making this edit ``` process = Popen(["sops", "--decrypt", filename], stdout=PIPE, stderr=PIPE, encoding='utf8') ```
Same for minor_api_version and rest.
`Undefined variable 'AnsibleModule'`
```suggestion disk_result[property] = device[property] ```
a module should never end in exception, it should use fail_json instead (you can pass traceback info if needed in 'exception' key)
I'm not sure why you use exact index slices. Are they always this size? I'd say that it's much safer to do `.split()` and that work with chunks: ```python vlan_id, name, state, interfaces = [v.replace(',', '').strip() for v in current_line.split()] ``` please also note that in python we use so-called `snake_case` for variables, as opposed to `camelCase` (like in java or js)
You don't need to state default=None as this is the default value.
Imported but unsed
This should not be moved. They're libraries from the current project so go below the imports for stdlib and third party libraries.
This whole block should be changed into: ```python module = AnsibleModule( argument_spec=dict( name=dict(type='str', required=True), remote=dict(type='str'), state=dict(type='str', default="present", choices=['absent', 'present']) ), supports_check_mode=True, required_if = ( ('state', 'present', ('repo')), ), ) ``` Assuming that **name** is always required, and **repo** is required when **state == 'present'**
> would it make sense to publish this module as is (with dependency on unicon library and support for local connection type) as a short term solution and plan how to replace it with network_cli connection as a long-term plan and do it as a part of the next release? Yes, that should work IMO. FYI Ansible follows 4 version deprecation cycle that is if the code (options) available in a stable release is deprecated it can be removed after four releases, typical Ansible release cycle is around 4 to 6 months.
Use existing methods from `module_utils/vmware.py`
`# In case of wait=false and state=running, waits for VM to be created`
```suggestion - Add, delete and modify an IPA Password Policies using IPA API. - Omitted values are not changed during module execution. ```
Please put this on a single line. Lines can be 159 characters wide.
type is a keyword and shouldn't be used
Yes, 'msg' key and value should always present on *_exit() calls
oh got it, I had it backwards. The goal here is to create a credential from data on the managed node.
Thanks, that's the point I want to get. Your code is consistent among 2.x and 3.x, because `for line in f` returns `line` consistent with `r''`.
Is this for Python 3 compatibility? I don't see what might raise a TypeError. It doesn't look like any of the list-type parameters take dict or mixed type elements.
CloudFormation Applies to multiple places
Spelling. Should be "partition"
Do you need expiration to be an int type as well or is it okay if it is a string repesentation (like: "10" )
That may have to be `*string_types` and `list(string_types)`. Maybe create `string_types_list = list(string_types)` so you avoid recasting to a list multiple times.
profile_name is mispelled (and there is a missing quote after profile_name as the tests suggest). No need for two spaces after the full stop.
Please import only what you need, rather than `*`.
This should not be removed.
Probably cleaner to use a different variable than before to make sure you're not using the incorrect response.
Also probably put that in the examples, for if users want that behavior but maybe don't know about `failed_when`.
```suggestion - "blkid (when I(label) or I(uuid) options are used)" ```
I think that relies on too much internal implementation details, and could be problematic down the line, if some change was made to not silently pop `None` from commands being executed. Should probably do: ``` cmd = [self.module.get_bin_path(command_name, True)] if self.force: cmd.append('-f') cmd.append(self.name) ```
You want to swap these conditionals, so that check mode can actually report anything. `load_config()` should be the only thing gated by `if not module.check_mode`, that way the result is correct
This would be handled by the `AnsibleAWSModule` ```python try: import botocore except ImportError: pass # handled by AnsibleAWSModule ```
The Base64 decoding can be hoisted out of the loop
Awesome, thanks for making such a comprehensive post ð
Are these put/post/delete/patch/update methods used anywhere? I don't see uses of them.
Note -- Looks like you have 'min' as a valid subset but in this current version of the code it's not being used to control whether this is run. Either need to make use of it or remove 'min' as an option so that it's clear that this portion of fact gathering is always run.
I made a change to the content description now, @sivel please review
Use fail_json_aws for AWS exceptions as the messages contain a lot more info
I think this would be more readable if you do: ```python org_id = self.get_org_id(org_name) net_id = self.get_net_id(org_name, net_name, data) path = '/organizations/{org_id}/networks/{net_id}'.format(org_id=org_id, net_id=net_id) ``` So using positional arguments where there's no discussion, moving different operations in separate steps, and bring the information together at the very end. The path-string could be coming from somewhere else (if this is something that is being reused, but probably not relevant here).
In fact, this has been supported since docker-py 1.10.0. There's no need to require docker-py 2.6.0. (https://github.com/docker/docker-py/commit/a75553b3)
This does not need to be wrapped.
My main concern with this is that `futures` is not available in base RHEL, Satellite, or Ansible Engine subscription channels for Red Hat Customers. The only channels I see it currently available in is OpenStack for EL6 and both OpenStack and Gluster for EL7, both which are add-on SKUs and not available to customers who haven't bought those other products.. From a community upstream standpoint, this is perfectly fine. However, if the intent is for this to be used with the product version of Satellite (which I assume it is given the use of the product name in the PR) then that's problematic.
could be just `if module.params['dns_domain'] is not None:`
```suggestion feed_client_cert: version_added: 2.10 ```
Create address service object on PanOS devices This may need updating on existing modules
No update supported? As far as I know, the `azure-cli` supports update
@pascalheraud Removing 3sec sleep does not change what I wrote above. The module exit with changed=true before the ip has moved to its new location (I just tested right now). The move is planned, but not done. As is, your code does not check for a task completed at all, because the task is not created yet when the waitForNoTask function is called. The way waitForNoTask function is written, it returns true if the task does not exists (it checks tasks with a status=todo). It should indeed wait for the task created and then check the task status. PS: I am testing with ips inside public cloud projects, maybe that is why the move task creation takes longer than with other services.
Typo. "Allows you to setup rules to quickly and easily block sets of ip addresses."
default is no need here
Add code to check for this and do `fail_json` if needed just after `argument_spec`
Removing a parameter that people are using will break existing playbooks that depend on it. This is a definite NO-GO.
This behaviour is really not Ansible like, it seems to indicate if a create or "update" will report a change which is ok but the trouble is that we aren't checking if an update is actually required. So a check mode run will always report a change if the database exists. We should be putting a check above this to verify that if the database exists, then we check the details like `charset`, `collation` to see if they match our parameters. If they do then no update is required, if they don't then we would report a change. This module makes things a bit difficult as I'm not sure you can change the collation and charset after it has been created so we would need to error out or display a warning saying we couldn't update it.
```suggestion changed = False if not module.params.get('size', False): module.fail_json(msg='Size is required to update volume') ```
I would probably go for an immediate default: ```python command = "ps aux" if terms: command = "%s | grep %s" % (command, ' '.join(terms)) ```
String or list are allowed here so no change is required.
should be list(attr.items())[0] to work with python3 too. ``` An exception occurred during task execution. The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_xs5l34yw/ansible_module_ecs_attribute.py", line 310, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_xs5l34yw/ansible_module_ecs_attribute.py", line 280, in main attrs = EcsAttributes(module, attributes) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_xs5l34yw/ansible_module_ecs_attribute.py", line 131, in __init__ self.attributes = attributes if self._validate_attrs(attributes) else self._parse_attrs(attributes) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_xs5l34yw/ansible_module_ecs_attribute.py", line 151, in _parse_attrs name, value = attr.items()[0] TypeError: 'dict_items' object does not support indexing fatal: [localhost]: FAILED! => { "changed": false, "failed": true, "module_stderr": "Traceback (most recent call last):\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_xs5l34yw/ansible_module_ecs_attribute.py\", line 310, in <module>\n main()\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_xs5l34yw/ansible_module_ecs_attribute.py\", line 280, in main\n attrs = EcsAttributes(module, attributes)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_xs5l34yw/ansible_module_ecs_attribute.py\", line 131, in __init__\n self.attributes = attributes if self._validate_attrs(attributes) else self._parse_attrs(attributes)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_xs5l34yw/ansible_module_ecs_attribute.py\", line 151, in _parse_attrs\n name, value = attr.items()[0]\nTypeError: 'dict_items' object does not support indexing\n", "module_stdout": "", "msg": "MODULE FAILURE", "rc": 0 } PLAY RECAP ********************************************************************* localhost : ok=0 changed=0 unreachable=0 failed=1 ```
please check developer docs for how to deal with required libs, this should not give an exception at this point (load) , it should happen at `parse()`
Imports for `ModuleStub`, `add_argument`, and `Command` should be able to be removed without consequence. `NetworkModule` and `NetworkError` are being imported by your modules, but they should probably be removed from here and the imports changed to network anyway, to clarify where the code is coming from.
You might want to specify a different error handler here. The default handler is surrogate_or_replace. When non-utf8 byte sequences are encountered, it either uses surrogateescape if available or replace. This can munge output on python2. Since we're sending this to json.loads (rather than displaying it to the user) it might be better to use surrogate_or_strict as the error handler here.
Please modify this to `elif delta.get('peer-link') and not existing.get('peer-link'):`
get_exception is deprecated in favor of native exception handling - ``` except Exception as e: module.fail_json(msg=to_native(e)) ```
if requied is true, default does not make sense
you want to put basedir first to match normal precedence
I guess it's best to remove the version number here (and in all the other copies of the config). Not sure whether that should happen in this PR though :)
Doesn't seem to be used anyway...
I would name the method `passwd_set`.
222, 223 and 224 can be changed into `elif self.state == 'present' and not snapshot_exists:`
Should have been module.fail_json
Use `auth_token` to match the parameter name.
host, username, password, timeout and vdom is already in fortios.py in module_utils
Same typo as above
There are no assertions in the integration test to ensure this message is correct.
This should fix the last error that you are getting: ```suggestion type: list elements: str ```
Another test that I would move into version specific classes with pytest skipifs
Should be a string.
Yes, this should use `AnsibleUndefined` in order to get the recursive Undefined behavior introduced in that class.
You don't fetch anything here but reconstruct broken input. You return a sequence of data, just lazily. So name the function like it would return a list. I think you could go for `_recover_package_names` here.
Missing full stop
Here's something wrong. If you want to continue a line, you shouldn't start it with a dash.
nothing should use config_data, its only meant for 'extras not covered by get_option', but that is a preexisting problem here
Allow filters ``` security_groups = cleanProtocol(cloud.list_security_groups(module.params['filters'])) ```
Please remove this and add a note in the `description:` saying the default port will be based on the connection type, e.g. 80 or 443 for http or https respectively.
Add Python3 boilerplate ```python from __future__ import absolute_import, division, print_function __metaclass__ = type ```
```suggestion - List of assignable scopes of this definition. ```
s/write target file {0}/fetch file to {0}/
Mention the unit (seconds), same for the same for `wait_sleep_time`.
this produces an exception when binary cannot be found, you should capture and return parser error
These tests now run on python 2.7 (though fail on python3 still). I think if we're moving toward using placebo rather than just mocking, it may make more sense to do that here, especially since integration tests won't be run with CI (and running them manually may not happen terribly frequently). Shippable will notice if the placebo recordings lose compatibility with changes made in a PR.
Move import statements after Line 81 or after RETURN
It's rarely appropriate to catch all Exceptions.
This is not quite the correct fix. We probably need to use something `os.access()` to check if the file exists and if we can access it: ```python if os.access(b_path, os.F_OK): # checks that the file exists, following symlinks if not os.access(b_path, os.R_OK): # check that we can read the file # probably warn, for now, then change to an error later
I think this logic should be handled by service instead of ansible client side
doc typo, s/funcition/function
values in choices and default for bool should be `yes/no` according doc of ansible. it is a convention by Ansible. `required` should be true/false as it is a flag to show it is required.
`PyOpenSSL>= 0.15` seems only required for `SelfSignedCertificate`, with other providers older PyOpenSSL versions should work fine: this information could be added here.
So let's just raise an appropriate exception...
Missing full stop.
I think most if not all of this can be removed and replaced with argspec code https://github.com/gundalow/ansible/blob/docs-argspec/docs/docsite/rst/dev_guide/developing_modules_general.rst#main-and-ansiblemodule-argument-spec
Do you support IPv6, if not then this should say IPv4 address.
A message string would good to say that image is not preset or something similar.
This and other instance attributes should be defined inside `__init__`. Recommendation: - Define as `None` in `__init__` and set in another method. - Set in `__init__` directly or by using the return value of another method. This makes it easier to locate all the instance attributes since they're all listed one place.
You might need to do, if `supports_check_mode=True` ``` if not module.check_mode: response = client.delete_bucket(Bucket=space_name) ``` Same for Create and Update.
Catch botocore.exceptions.ClientError instead of Exception here too.
You should store the result in a variable (e.g. `self._cryptsetup_bin`).
Please can you rephrase this sentence? Something lile ```suggestion - Module doesn't reboot the host after changes, but puts it in output "rebootRequired" state. ```
I would add here as well some code to set the `result['failed']` according to what the module should do. ``` if action in ['started', 'restarted', 'reloaded']: result['failed'] = result['status']['current_state'] != 'running' elif action == 'stopped': result['failed'] = result['status']['current_state'] != 'stopped' ```
Don't use `C(...)` here, as this will be shown unformatted to the end-user.
True. I kind of like to store the return value into a var and return at the end of the function/method than from the middle of the code.
Here's something wrong. If you want to continue a line, you shouldn't start it with a dash.
```suggestion - python >= 2.7 ``` Pyvmomi requires 2.7
``` result = dict() ```
generate it as frozenset at class level, to avoid hardcoded and redefining per invocation
This line should still be there (though probably one line down), while...
Please remove this line. As this is a new module the top-level version_added is the only one needed.
Would be nice to warn the user their configuration is being ignored because the specified value wasn't recognized.
plugins should not error on import, capture the fact that it is missing the library and exit on 'parse' also see ` from ansible.basic import missing_required_lib` which gives users specific information.
```suggestion pn_admin_session_timeout: ```
You still don't need this branch ```suggestion ```
```suggestion system = to_text(platform.system(), errors='surrogate_or_strict') if system == u"OpenBSD": ```
Removing these lines will re-break: https://github.com/ansible/ansible/issues/24169
Anyway, it's probably best to wait until #61603 is merged and then change this.
This is more efficient: ```suggestion key = next(iter(old[0]) ```
Sound, sound sensible
This is not [duck typing](https://docs.python.org/2/glossary.html#term-duck-typing), and is actually considered an anti pattern in Python. In python the general rule is [EAFP](https://docs.python.org/2/glossary.html#term-eafp) Catching the `AttributeError` is the preferred means of achieving this behavior.
Can you please include `uuid` as parameter for finding VM ? you can use `find_by_vm_id` API for finding VM using uuid just like other VMware modules do.
That will come soonish, I hope. Whenever all more pressing things are done and I find time to work on my version_added PR again ;)
i would add `: %s` and to_text(e)` to the end of msg
use self._task instead (play_context is not updated per loop item)
```suggestion version_added: `2.10` ```
As a note, I just remembered that we had to preserve `NativeJinjaText` somewhere else too for the same reason. Trying to `join` a result from a lookup in https://github.com/ansible/ansible/blob/bf7d4ce260dc4ffc6074b2a392b9ff4d3794308b/lib/ansible/template/__init__.py#L1057 led to losing the type so we had to explicitly convert the result of `join` to `NativeJinjaText` (and further make it unsafe to `NativeJinjaUnsafeText`).
According to https://setuptools.readthedocs.io/en/latest/setuptools.html#using-a-src-layout, the old version should be enough... Does it cause problems for you? ```suggestion package_dir={'': 'lib', ```
Fair engough. Then, if I haven't overlooked anything, there is no need to pass `privatekey` to `_check_signature()` as you can call `csr.verify(self.privatekey)` directly.
It would be awesome if buildah supported copying from a container.
I think it would be more helpful to the user to show them both errors by default rather than hiding one in `-v`. Ideally we could have templating errors take precedence over loop errors and only display the templating error first, but that may not make sense in all situations. If we don't want to display both as was done originally, then I'm fine with the current use of `-v` rather than using debug since debug is information overload for users.
You should mention instead of this that the required API version is 1.24. ```suggestion - "Docker API >= 1.24" ```
```suggestion version_added: '2.8' ``` This is a required fix as it states the first version this module ships with.
@CFSworks didn't got this, why are we creating a group with the Droplet ID, IP or name? I think you made this to keep the old behaviour but I'm afraid ansible will discard hostvars, which are using **_dest_** since they don't match **_do_id_** :/ I didn't tests this and maybe I'm confused.
How about - ```suggestion for key in ['title', 'description', 'index_prefix', 'creation_date', 'writable', 'default', 'index_analyzer', 'shards', 'replicas', ] if module.params[key] is not None: payload[key] = module.params[key] ```
In general argument_specs should be returned to the caller rather than subclassing AnsibleModule just to add it. AnsibleModule's behaviour could change in the future and subclassing makes it more likely that things would break than if you are simply passing an arg_spec to the module which it then uses to instantiate an AnsibleModule.
Include a `host=kwargs[Jail.modified_jailname_key]` kwarg when calling `display.vvv`. This will maintain consistency with other calls to `display.vvv` made by the `Jail` connection plugin.
Well, and put the `sys` import first.
Yeah, but does this code works well, when updating some attribute via that? As far as I read it correctly it doesn't.
You should probably mention in the module's description that it currently doesn't support upgrading plugins.
Use `to_native` rather than `str()`: ```suggestion cmd.append(to_native(calendar.timegm(self.expires))) ```
This can be a key-value map with key as the fact name and value as the pattern to be searched for
```suggestion m = re.fullmatch(r"(?:https:\/\/dev\.azure\.com\/ansible\/ansible\/_build\/results\?buildId=)?(\d+)", arg) ```
bikeshed: its normally cheaper to catch the exception vs testing for attribute every time
Probably want to change this to your standard DO argument spec. This will handle testing the `oauth_token` and finding the token in the users environment. ``` argument_spec = DigitalOceanHelper.digital_ocean_argument_spec() module = AnsibleModule(argument_spec=argument_spec) ```
as discussed previously, no such thing "alert policies". every mention of "policy/ies" should be renamed...
I am not sure if this will work because - if `find_obj` is not able find this object that means it does not exists. If it finds then you will not hit this condition. Let me know if I am wrong.
please use explicit import statements
even hardcoding /tmp is not a good option, some systems create a per user /tmp mount .. aside from other more restricted permissions and file system types that might not work well with locks. if i had an easy answer to this, i would have already done it, but it is much harder than you would think at first approach.
```suggestion message_text = self.get_deprecation_message(msg, version=version, removed=removed, date=date, collection_name=collection_name, warn_change=warn_change) ```
enabled/disabled for this as we are talking about a service (email)
you shouldn't need to create an intermediate in-memory list here. Also, `str.startswith()` supports checking multiple values: ```suggestion out = "\n".join( line for line in out.split('\n') if not line.startswith(('You are using', 'You should consider')) ) ```
The place where the `main()` function is called explicitly does `sys.exit(main(sys.argv[:]))`. So `return 0` should really be here. (And yes, returning nothing is equivalent to `return None`, and `sys.exit(None)` is equivalent to `sys.exit(0)`, but it's still nicer to have an explicit `return 0` IMO.)
```suggestion if fail_on_autoremove: fail_on_autoremove = '--no-remove' else: fail_on_autoremove = '' ```
I would turn `notify_scope` parameter into an instance variable, `self._notify_scope`. That way you don't have to pass it around.
The scenario is that, instead of list ordering (or if they want to check existence of something), they want to use a string-y key like `{{ my_lbs.load_balancers_by_name.myAlbName.someproperty }}` when they're listing several load balancers.
Make this: ```yaml type: bool default: 'no' ```
Nice! Thanks for remembering this :) Oh, I think you just copied this from below!
```suggestion data ```
Please add: `version_added: "2.4"`
HAS_PYVMOMI is unused.
should probably be validating whichever components aren't part of the vlan's "primary key" (seems like parent interface/node/interface_name, but not sure off the top of my head) and either allow them to be modified or at least warn/error if they're not in the requested state
its built into display.warnings and display.deprecated
Don't add `required: false`. It is implicit.
I mean, you need to test that it properly fails if you raise the correct exception but with the wrong message. The last time I checked in shippable (but could have been as much as a year ago) pytest's match parameter didn't work. If I raised ```TypeError('Incorrect message')``` pytest.raises would have thought it was fine.
changed is displayed as False by default so you don't even need to specify it at all. Can delete this line.
Are these put/post/delete/patch/update methods used anywhere? I don't see uses of them.
If it's not required, you can leave out `required: false`.
It might be better to do this check at the beginning of the module, so that in case `list_role_tags` is not available but `module.params['tags'] is not None`, the module fails right away and doesn't start applying *some* changes.
> I don't get this sentence. we can say that the storage domain is attached to a DC although it > is not up. What is not UP. The search for the DC is being done using the following search: dc = search_by_attributes(dcs_service, storage=storage_domain.name, status='up') status='up' - We filter the data centers with 'up' status, so you might get an empty DC although oVirt will contain a DC with attached storage domain but not in 'up' status Since you mention that you will use the DC afterwards I suggest to fetch DC without the status filter: dc = search_by_attributes(dcs_service, storage=storage_domain.name) and check if the dc is with 'up' status or not, if it isn't 'up' then we can raise an exception
just in case there's ever something not starting `/managed/`, safer to use `[0:2]` here. Also, consider extracting this list-of-lists to dict-of-sorted-lists transform to a separate method. After transforming desired & current, `have_same_values_nested_array` would become simple ==, merging would be simpler, and transform back is simple `.values()`.
We try to avoid the requests library as it has many issues across older versions and even major incompatibilities across it's own versions, look at using the ansible open_url/fetch_url functions instead.
Should be "Can't detect any" rather than "none" I think.
Why do you return something when you are not doing nothing with it in the `main()` function? What about to use `module.exit_json()` only in the `main()` function? The same in other functions.
Just style, but a blank lines between the boilerplate and the imports is good ``` python __metaclass__ = type import os ```
I would omit the 3, it seems like in the internal API you can set as many recovery actions as you want. It's just the GUI that limts to 3.
[PEP 8](https://www.python.org/dev/peps/pep-0008/#indentation): Indentation should be 4 spaces instead of 8.
`Can be configured form the CLI via the C(--user) or C(-u) options.`
also potentially end this block with `raise`
Ansible 2.7 dropped support for Py2.6
Since you're updating the docs, can you update the Examples to use multi-line YAML? ```yaml - debug: var: mypassword vars: mypassword: "{{ lookup('passwordstore', 'example/test create=true')}}" ```
Lines don't need to be wrapped so short since we allow up to 160 characters.
Description should be a full sentance, e.g. starts with a capital and ends with a full stop.
> Well, as I state in PR description, version in trunk practically disables ec2.py cache when using python 3. The idea was to replaces `hash()` call with any hashing function that gives stable results between script runs. Anything from hashlib module will do, `md5` does not have any advantage. One important note: `md5` will not be available on some systems (such as FIPS compliant systems). It's probably better to use `sha256` (as `sha1` could also be removed). > hashlib functions require byte string as input. Python 2 and 3 differ in what is stored in `__file__` variable: python 2 has simple string and in python 3 all strings are unicode. You could do ```.py from ansible.module_utils._text import to_bytes ``` and then ```.py cache_name += '-' + hashlib.sha256(to_bytes(__file__)).hexdigest()[:6] ``` This will work for both Python 2 and Python 3.
ah, nvmd, we overwrite the _task with original_task anyways, need to capture it before that happens or ensure the task_fields are not the original but 'templated results'
My concern about this really needing to be two modules, one for settings_facts and one for settings, has not been addressed.
But that can be addressed in a separate PR :)
Yes, good catch. We can delete one of the two functions, they are now identical.
`display` won't work in module code, hence this line should be removed
```suggestion version_added: "2.10" ```
Your code breaks the loop, so it doesn't continue. This assumes that `Datacenters` is always the root folder in all cases, and nothing else above it exists. If that's a certainty, your code is good. Otherwise the question becomes how we should handle something above the `Datacenters` folder
verify length of snapshot_op dict instead of __not_None__ else you will trigger snapshot_op on non absent condition
something like ``` python custom_filters = templar._get_filters() custom_filters.update(e.filters) e.filters = custom_filters ```
don't remove the quotes, otherwise yaml parses it as a number, we want string
```suggestion choices: [ full list, top sites ] ```
`speed` should be `int`
please keep line length pep 8 compliant
Small introduced typo: ```suggestion # Search for 'key' entry and extract URI from it ```
You might want to move that in `module_utils` because all lxca modules will reuse it (Then `HAS_PYLXCA` could be moved too).
```suggestion - "Datacenter to search for given cluster. If not set, we use first cluster we encounter with C(cluster_name)." ```
Please use `has` in the beginning. Also, I feel like this should be a `@property`.
they don't need to, but can be as long as they are acurate
s/./ to avoid infinite hangs waiting for input./
```suggestion # the variable if it hasn't been set by the user already. ```
eewww .... ... if there is no other way .. fine, but do add in more explicit terms when you say it saves the 'current config' that it MAY also include other changes that are not related to this task.
``` >>> asntime1 = "2017010100000+1000" >>> asntime2 = "2017010100000Z" >>> asntime1 >= asntime2 False ``` Also minutes and seconds are optional in ASN.1, as well as an additional 3 digit millisecond precision... The real proper way would be to parse the ASN.1 format to a datetime, but that would require another library (cryptography can do it, or pyasn1) which is a quite high requirement for just making sure that some edge cases or weird certificates work. I think it could be ok to just keep it like this for now and if it really causes issues, either include a few edge cases that are found in the wild or maybe by then some of the slow moving stable distros have dropped out and the module can be rewritten anyways. :-) PS: pyOpenSSL depends on cryptography and if pyOpenSSL is installed, cryptography will also be installed already.
Note: Our convention is to use a prefix (b_locak_path) rather than a suffix.
This is more than a docs change.
> Descriptions should always start with a capital letter and end with a full stop. Consistency always helps.
I think a brief sentence is worthy. Nothing is worse than trying something only to figure out the target API on the server isn't compatible. We should try to remember to ask this question of all new modules and substantial changes.
Default not set in argspec.
This should be `b_output_path` to indicate it is a series of bytes. Even if the caller is sending in bytes, this function should convert it to bytes just like `b_collection_path` at the beginning. That allows our `b_` naming convention to hold, making this code look incorrect (trying to join `bytes` and `str`).
`mutually_exclusive` could be used here ([example](https://github.com/ansible/ansible/blob/94eab56d51c8810bbf1ca39015f58f9112e83b07/lib/ansible/modules/system/systemd.py#L323)).
Only one space after periods.
I have concerns that that will be extraordinarily slow with large results.
It's just a helper function. So everyone reinventing it would not have to do this again.
@thomwiggers `line.partition(':')[2]` yes, I have no problem with that.
`filter(lambda x: x, map(self.validate_query_parameters, self.query_filters))` could be used here (in order to avoid calling twice `validate_query_parameters`).
This can also be an ARN, right? In which case the length can be up to 140 characters.
plugins should not error on import, capture the fact that it is missing the library and exit on 'parse' also see ` from ansible.basic import missing_required_lib` which gives users specific information.
Will this command work on all supported platforms? I tried this patch on mac and it failed. Example I used: ``` - git: repo: 'https://github.com/ganeshrn/ansible.git' dest: /var/tmp/ansible archive: yes ``` ``` TASK [git] ************************************************************************************************************************************************ fatal: [localhost]: FAILED! => {"changed": false, "failed": true, "msg": "Failed to perform archive operation"} ```
```suggestion pvdiplay_cmd_device_options = [pvdisplay_cmd, device] + pvdisplay_ops ```
```suggestion # Run masked_action when enabled param is not provided or service is supposed to be enabled/started. if not module.check_mode and module.params['enabled'] in [None, True]): ```
The `to_bytes` should be on the `self._basedir` instead: ```suggestion b_opath = os.path.realpath(os.path.join(to_bytes(self._basedir), b'r_group_vars')) ```
```suggestion # try to get collection world name first ```
`No reason given` is fine
This should be an error by default, created #17902 to allow this to be configurable so this change should be removed from here.
The `stderr` should be used in the `exception=stderr` keyword. The same applies to all places where you use `stderr` in this module.
Actually someone can sent for example '123213321321321', which isn't valid name nor ID, so it will fail with HTTP 404.
I would not as .format breaks in older versions and we are trying to still keep this kind of module working on older machines
This is handled by `argument_spec`
Should not be quoted. It might confuse people to think this is needed. It is not.
I'm not really a fan of this approach, and generally speaking, we have tried to stay away from it. I am more in favor of just doing: ``` try: sock = socket.create_connection(address) except AttributeError: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(address) ```
Same here - this return should probably be `{items: [{id: ....}, ....]}`
Ansible prefers native yaml syntax over the `a=b` notation, so I would keep the old version here.
```suggestion EXAMPLES = r''' ```
This function can be removed altogether. Change calls to `_create_connection()` to call `socket.create_connection()` directly.
```suggestion # just get value from attribute itself as normal ```
I confirmed the ZAPI accepts both False and false, or True and true, so this is OK as is. It's only when making comparisons with returned values (get), that we need to be case sensitive.
```suggestion default: False type: bool ```
List of Names & GitHub IDs please ``` author: - Nicolas Thomas (@thomnico) - Miguel Angel Munoz (@mamunozgonzalez) ```
```suggestion - State the action to perform. Use C(update) to modify the igmp-snooping. ```
For `mode == 'persist'`, you have to both check the current value *and* the value in the `mysqld_auto` config.
CI failure due to syntax error (missing `:`).
i don't think we want roles in roles
if self.state == "absent" should be explicitly checked before unregistering the VM, just to be safe.
URLs should be in U() to be formatted properly, so `U(https://www.googleapis.com/auth/compute)`. Same for any of the following links.
This looks needlessly generic. why not just do: ``` python if op == 'get_password': get_password([...]) elif op == 'create_host': create_host([..]) ``` If you think you're going to have a lot of operations, you can have a lookup table: ``` OPERATIONS = {'get_password': get_password, 'create_host': create_host} method = OPERATIONS[op]([...]) ``` but for just a few operations I'm not sure I would do that... it obscures what the code is doing in any given situation to code it like that.
Also, it would be better of the description is split up over multiple items. A long blob doesn't make it easier to read. Usually the first item is the "meaning", and subsequent items detail what happens in different cases, explain options, specify the format or add one or more notes.
```suggestion <html> ```
```suggestion type: path required: yes ```
As far as I can tell, the 'in_use' is never used.
The value should be quoted.
and another bad fail_json_aws call
(In order to optionally not make frequent, redundant, probably unnecessary requests to the COPR API)
This will concatenate all chunks into a single-line string. Try multiline: ```suggestion self.module.fail_json(msg=textwrap.dedent(""" Failed to add vSwitch '%s', this can be due to either of following: 1. vSwitch Name exceeds the maximum allowed length, 2. Number of ports specified falls out of valid range, 3. Network policy is invalid, 4. Beacon configuration is invalid : %s """) % (self.switch, to_native(invalid_argument.msg))) ```
I'm pretty sure this can use `is_sequence()`.
call this just cluster, identical to the param we pass. Fixes inconsistency with other modules.
Same note as above about 'rb'
TBH I prefer `cert_validation` as it uses namespace prefixes (and related options sort together). Maybe we ought to fix the **httpapi** connection plugin instead ? ;-)
`default=True` (as it's a bool, not a string)
```suggestion - If set to C(present) and library exists, then library is updated. ```
I am not sure if you have anything presentable in the result with `check mode` here. Here is a brief example on how `check mode` is perceived: If check_mode is set, and say a module is configuring IP address on an interface, the module would show the output of actual task performed minus the final `commit` operation that brings the task in force.
Yes, `YYYY-MM-DD` should be perfect. Thanks for the xkcd link ;-) @lolcube I'm still curious where `:` is used; I'm really not aware of anything where it is used (or I completely forgot :) ).
Wrong Github handle :-)
state should be string with choices enabled/disabled
Validate_certs can accept 'yes' or 'no', this will break all playbook which uses `validate_certs=no/yes`
@webknjaz I don't believe anyone has said it's dangerous. It's discouraged.... the Python idiom is "consenting adults" meaning, use the single underscore convention to tell people not to use something rather than trying to outright stop them. The double underscore isn't really an attempt for private methods and variables (the automatic rename is just another convention to be followed if you really need access, for instance), it's meant to prevent conflicts between methods in things like helper methods for mixin classes (ie: you have a mixin that's generic and could be used with other classes that you don't control. Using double underscore there makes it so the other class doesn't accidentally overwrite the mixin's private methods.) I would say that our style probably should be to use single underscores to denote private methods and attributes but I would not go so far as to say that double leading underscores are "dangerous".
To match style in other AWS modules, can you please use `policy` to take a "json" typed argument and a mutually exclusive `policy_file` argument to take a file path? That way users can specify a JSON string, a regular YAML dictionary, or a file from another source so they have the maximum flexibility.
I suggest you use [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move)
Oh, I missed that the check is slightly different. but still such function could accept key + check type class and could be reused 3 times if you want to go for it :)
No need to wrap.
I think we need more info here what are possible choices.
May be worthwhile to make lines 513-528 a method on the class, so strategy sub classes could override it easier. May also make it easier to write tests for.
CI failure due to python 2.4 syntax error: ``` 2017-02-03 01:32:20 Compiling ./lib/ansible/module_utils/cloudera.py ... 2017-02-03 01:32:20 File "./lib/ansible/module_utils/cloudera.py", line 149 2017-02-03 01:32:20 dictionary = { value:key for key,value in dictionary.items() } 2017-02-03 01:32:20 ^ 2017-02-03 01:32:20 SyntaxError: invalid syntax ```
If it is not required, you don't have to state it as it's the default.
Maybe mention it's the default action again
move this into main so you only need to define on load instead on every call
So we have a default way of doing proxies. Normally it picks up the system settings, unless **use_proxy** is set to 'no'. The format of this parameter is best kept in line with other modules for simplicity.
```suggestion mode: '0644' ```
Resource path should not be manipulated by hand, since we should only use paths that Redfish API returns (with one exception that has been actually removed from the latest version of the Redfish standard).
With the latest change this import is no longer needed: ```suggestion from ansible.module_utils.six import text_type ```
+1 for this.
if the user hasn't provided status module.params.get('status') should be == "enabled" since it's defaulting to that in the arg spec. You should be able to just do `if state == 'present' and module.params["status"] == "enabled":`
Little :bug: : In **check** mode, the `keycloak_realm` always returns `result['changed']: True` You need to add something like `result['changed'] = (before_realm != updated_realm)` here...
I suggest you use [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move)
Please put this on a single line. Lines can be 159 characters wide.
Please separate this into separate lines for maximum readability. Something like: ``` if inst.image is not None: image = inst.image.split('/')[-1] else: image = None ```
Example is using the wrong module name, should be "vcenter_license"
```suggestion assert wrap_var(dict(foo=None))['foo'] is None ```
escape with `r'''` and you don't need to escape `\` in the string itself.
This information is redundant, I would remove it
Also, this will mean you need to `import traceback`
add a check if vm_id_type is vm_name and not folder then present error "Folder is required parameter when vm_id_type is inventory_path"
Again, path concatenation is bad. And in this case it is not needed at all, since we have a path stored in `device["@odata.id"]`.
Because the longdesc and requirements are read from files, we should still move all of those outside of the toplevel as well. So line 134 on can move into main() (or helper functions of main() if you prefer that).
This is wrong. It is too easy. Check-mode in this case does not bring anything to the table. The user might have made mistakes and it has not been tested as it would be for a real run.
Since we're intending to backport this fix, it'll have to remain a `try/except OSError:` with a double-check in the exception handler. Once it's landed in devel and our CI is able to handle py3-only controller tests (which is still WIP), we can update to use py3-only bits.
Should be metadata_version
If you update the argspec as I suggested you can change this to something like: `Exactly one of I(inputFile) and I(fileName) is required.`
If one of both is required, it is better to force this as part of the argspec.
State what you're trying to do when failing ``` module.fail_json(msg="Couldn't set assign-ipv6-on-creation: " + e.message, ...) ```
There is a slight issue with your proposed fix (`.passwd()` isn't a synchronous interface), I will fix that in a jiffy.
We try and wrap the smallest amount of code possible in a try/except. Our preference would be to only wrap the `_run` and `exec_command` lines in try/except. Once this is done, we'll need to review again, but overall this approach looks correct.
`for key, value in (doc.get('options', {}) or {}).items():`
Just noting that this RETURN is incomplete
I wonder if it'd be hard to title-case the matched admonition. They are case insensitive. One can do any of ```rst .. Note:: .. notE:: .. NOTE:: .. NOTe:: ```
It would be nice to sort the options alphabetically.
Could you please add a trailing comma here? ```suggestion "job_wait": {"required": False, "type": bool, "default": True}, ```
```suggestion default: yes ```
You should be able to use `self.vmware_test_platform` here.
What's the point of `'elements': 'str'` in this parameter? This is only used for sub options. This appears to be regular list parameter.
1) Can you please raise a bug (or PR if you know the fix) for the `basic.py` issue 2) suboptions don't (currently) inherit `no_log`, or `type` So you will need to set that explicitly on the sub options as needed
It looks like this should be added possibly or something similar? ```python if 'channel group' in config: return True elif 'channel-group' in config: return True ```
And the same here
Please remove all `version_added:` under `options:` : Only needed if this option was extended after initial Ansible release, i.e. this is greater than the top level version_added field.
> Well, as I state in PR description, version in trunk practically disables ec2.py cache when using python 3. The idea was to replaces `hash()` call with any hashing function that gives stable results between script runs. Anything from hashlib module will do, `md5` does not have any advantage. One important note: `md5` will not be available on some systems (such as FIPS compliant systems). It's probably better to use `sha256` (as `sha1` could also be removed). > hashlib functions require byte string as input. Python 2 and 3 differ in what is stored in `__file__` variable: python 2 has simple string and in python 3 all strings are unicode. You could do ```.py from ansible.module_utils._text import to_bytes ``` and then ```.py cache_name += '-' + hashlib.sha256(to_bytes(__file__)).hexdigest()[:6] ``` This will work for both Python 2 and Python 3.
While this works, I think the list version is better because it is easier to extend.
Use `get_vm` API
Can you line up `src`, `dest` and `overwrite` please.
```suggestion - The host IP address for object-group network. ```
this forcibly creates/removes the files w/o checking if they exist or not, doing so would allow you to offer a 'changed' s state. Also it is encouraged that modules are safe to re-run w/o affecting systems when not needed.
ð on get_config for clarity.
I would format this like this: ``` ANSIBLE_METADATA = { 'metadata_version': '1.0', 'status': ['preview'], 'supported_by': 'community' } ```
This can be removed. If a parameter is required, there is no default.
There's still a few of these that are using double-underscore to mark private. We generally do that with single underscore instead. ``` python - def __present(self, resource): + def _present(self, resource): ```
Same as for other modules, use `Group has been updated`
```suggestion - C(number_of_workers), number of workers for app service plan. ```
You could `mock.patch` it to do so :)
I can get this to work with 2.3 if I do `if getattr(self, '_play_prereqs', None):` instead.
No need to set this, or check it.
Summary option is available only in the latest versions. Let us not rely on that, please use heal info and check the count.
Hello and thank you for your PR! Sorry for the lag time on this but this would need to be updated to `2.6` if you can get it done today, otherwise it will be `2.7` because today is dev freeze for `2.6`.
I think you need to first merge to devel, and then you can backport to stable-2.7. I think the core team says they don't backport features, so... the backport might not work either.
Would be good to also see usage other than ceph.
I see you fixed this one. :+1:
Perhaps, `Will ensure the datacenter resource exists and its properties are compliant with HPE OneView` Or something along those lines. As it is right now I'm not sure if it is clear that this resource can actually be created if it does not exist.
I don't like the `: ` here
`loose_driver_version = LooseVersion(PyMongoVersion)` <-- it's already calculated above. I think this case could go to the dict above if done carefully. This could be some hack like `{'-inf': '2.5'}`. But, looking at the error message, I'd say it'd be just `{'2.4': '2.5'}` and the error message would be normilized as well then.
My guess as to why the tests are failing to parse the docstring are due to this line. Since it contains quotes, you'll need to wrap the whole line in single quotes.
So, I think on failure this output would be useful as well. So maybe it's better to create a new dictionary `debug_result` which you can then provide to fail_json calls related to fetch_url failing, and you can merge it with result before exit_json. ```python debug_result = dict( url=url, method=module.params['method'].upper(), headers=headers, payload=payload, ) ``` Then add the response and status: ```python debug_result['status'] = info['status'] debug_result['response'] = resp.read() ``` Then call fail_json using it: ```python module.fail_json(msg=str(e), **debug_result) ``` And exit_json: ```python if module.params['output_level'] == 'debug': result.update(debug_result) module.exit_json(**result) ```
This is handled by the Azure module utils so isn't needed in the module arg spec
Can be removed after an alias for uidnumber is added.
Remove redundant round brackets after = sign ``` msg="Cannot connect to database %s on %s : %s" % (database_name, hostname, to_native(e)) ```
If it is not required, you don't have to add `required: false`. This is implicit (and makes it easier to see what is required).
I pushed this change in my commit to the code
Probably worth using `C(replace_batch_size)` here
If I am reading it correctly, `debug_mode` is a specific thing for a whole Zabbix API and not just for this module. This is not something we use in other zabbix modules and its usefulness for lets say an automated playbook is questionable. From the point of user's view, I shouldn't be expected to debug anything if only thing I am interested in is to create a few user groups. Can you provide some reasoning behind this please? I can understand that it is a good help for development purposes.
`required: false` is the default, can be omitted
(Alternatively, you could remove the line above this one, and let the module fail if the user does not exist, `state` is `present` and the password not specified.)
same here msg="" is missing.
note: in the future this should just be 'distance from current' instead of a specific version number to avoid having to update manually
ignore if it is missing, warn if we fail to remove
The default values of `graph_width` and `graph_height` in the code used to be `None`, not 200 resp. 100. Is this change intended? I don't know how the settings work internally (didn't bother to check), but such a change could modify the behavior of the module (if `None` was "keep whatever the user currently had configured").
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Remove extra space: `inv.update({env: []})`
` or result > 255`
You cannot move this outside of the `if not callback_sent:` block, because it will send a debug log that the callback is being sent, before we know that it is. This applies to other lines as well. Just move the templating outside, and leave the debugs in the `if` block.
Your module is named `gitlab_project_variable` don't use plural in your example
If module uses the default value of 1 for this argument, we should add it in the doc and argspec.
> set the default to be True (that way user have to force into an insecure setup, that's how other modules work) By default tower-cli will assume True by the same reasoning. The net effect after making that change should be the same.
Lets keep logic striate: you want set password if user already exist: ```if state == 'present': if user: if check_user_password(module, user_name, user_password): module.exit_json(changed=False) else: set_user_password(module, client, user_name, user_password) else: create_user(module, client, user_name, user_password, admin) ``` it's ok but lets look on logic above, you already have ```influxdb = InfluxDb(module) client = influxdb.connect_to_influxdb() ``` and when you call ```check_user_password``` you create another connection to db inside of this function. ```def check_user_password(module, user_name, user_password): influxdb = InfluxDb(module) client = influxdb.connect_to_influxdb() ``` Obviously you can pass to this function client object that was init in main() Next ```try: client.switch_user(user_name, user_password) client.get_list_users() except InfluxDBClientError as e: if e.code == 401: return False ``` why do you use```client.get_list_users()```? it returns a list of users : actually a list-object. I guess you can keep only ```client.switch_user(user_name, user_password)``` Another is about ```InfluxDBClientError``` its already part of InfluxDBClient that we import from influxdb in ```module_utils/influxdb.py``` and if you go deeper in ```influxdb-python/influxdb/client.py``` Any way let me try to work with your code and figure out how we can make this code more clean
should we allow 'run once' tasks? since they affect hosts globally it is kind of counter to 'notify for specific hosts'
Don't align the parameters (also, as it's a dict, there should be no space between key, `=` and value)
I would make it a list so user can pass more versions
Why isn't the parameter `mode` also defined here in the argspec? It's listed in the docs but not here.
Format replacement strings with nothing inside of them, {}, are only available in python-2.7 or better. So you'll need to make sure that all your formats have numbers inside of them. For example, this line would then be: `record_ids = client.get('/domain/zone/{0}/record'.format(domain))`
When hitting an error you must exit with module.fail_json
Should become parameter `password` (with a backward-compatible alias). (See #20160 and #25398)
Do not change the variable name throughout the code. That is not necessary.
please use explicit imports `from ansible.module_utils.basic import AnsibleModule`
I wonder if there are more correct than wrong uses of `get` :) I mainly know its use in `route53`, where it shouldn't be a state.
You should use something like this: ``` HAS_JSON = True try: import json except ImportError: try: import simplejson as json except ImportError: HAS_JSON = False ``` And then in the `main()` display proper message if the package wasn't found: ``` if not HAS_JSON: module.fail_json(msg='Cannot import JSON package.') ```
You can avoid the need to import boto3 by just importing HAS_BOTO3 from module_utils.ec2
``` tenant = module.params['tenant']` ```
Same for minor_api_version and rest.
I've also double checked what happens in the scenario you mentioned, and below is the result I receive. So I actually this this method is fine, and there is no need to change it Apart from ensuring the params are not None before checking if they are an existing file. ``` BotoServerError: 400 Bad Request\n<ErrorResponse xmlns=\"https://iam.amazonaws.com/doc/2010-05-08/\"> <Error> <Type>Sender</Type> <Code>MalformedCertificate</Code> <Message>Unable to parse certificate. Please ensure the certificate is in PEM format.</Message> </Error> ```
Please, at most one alias, even better none. Having a long list of aliases is really bad UX IMO.
Isn't `raise` missing there ? Calls to `str` are useless.
do not log due security concerns
use the `get_exception` function in ansible.module_utils.basic instead ``` from ansible.module_utils.basic import get_exception ..... except PanXapiError: exc = get_exception() module.fail_json(msg=exc.message) ```
problem with original, but still `str` is not portable, use `to_text`.
Nowadays, we do: ```yaml type: bool default: 'no' ```
This and other instance attributes should be defined inside `__init__`. Recommendation: - Define as `None` in `__init__` and set in another method. - Set in `__init__` directly or by using the return value of another method. This makes it easier to locate all the instance attributes since they're all listed one place.
If we allow non-Mutable mappings here, then we need to put a try: except around the call to reduce in the if recurse: later as giving it two non-mutable mappings will throw an error. I dislike that non-mutable mappings would be accepted with recurse=False but cause an error with recurse=True so perhaps we should track down why we're getting non-mutable mappings or perhaps we should enhance merge_hash to be able to operate on non-mutable mappings.
The method name with "sane" suggests quite a broad meaning. It's better to be more specific about what that method does. Also, does it need to be a method? I'd have a pure function instead.
```suggestion - This is checked after I(creates) is checked. ```
please quote version_added as well to not be a float.
You probably should just exit here with `changed=False`
```suggestion print('hijacking sys.path to use ansible-vendored files, bwahaha ð£ð£ð£') ```
```suggestion - Specifying C(present) is the same as running C(docker-compose up) / C(docker-compose stop) (with I(stopped)) / C(docker-compose restart) ``` `I(...)` is used for Ansible option names, `C(...)` is used for option values and other stuff. (Also applies to many other changes.)
Are `vmss_name` and `name` different? I'm guessing they are: ```suggestion - Virtual machine extension name. ```
We probably should use that function since it's doing some additional text conversion to ensure it's text type.
This is a "set" method called from redfish_config (which doesn't pass in the systems_uri param). So need to remove that param here and just use self.system_uris[0] below.
Ah, I misread that. Totally makes sense :)
Even better use it in `import_external_network` method
```suggestion self._prefix = 'ansible_host%s' ```
they don't need to, but can be as long as they are acurate
This is the wrong way of doing Ansible. The user should describe the desired state, not instruct modules to perform actions. The module itself should determine what actions the specific state needs based on the current state and the desired state. That is what is needed for idempotency anyway. So rather than action=install, it should be state=present. Also, check-mode support and diff support are very important for a tool like this one IMO.
After thinking about this more, it's probably more reliable and easier to maintain if we just default to always using our version of `ismount()` rather that trying to evaluate the Python version. Ideally we could probe somehow and fallback to this version rather than doing a version comparison, but it's really hard to probe for a bugfix. ```suggestion ```
If you want to use self.skeleton everywhere, the skeleton assignation 2 lines up need to be removed/changed somehow.
You're using the result object to smuggle this around, but it should probably be an instance field instead, since we don't actually want it in the results. Probably the same for the other cases where we're using the result dict as intermediate storage- put them in fields and just construct the result object at the end before it's returned.
This shouldn't be set.
ð To explaining limitations rather than discouraging outright.
```suggestion - The kind of storage. ```
Just noting that this RETURN is incomplete
Is the docsite bug that causes strangeness when rendering complex types resolved? I don't recall the issue number, but I think @willthames pointed it out.
`Specify authentication algorithm.` No need to repeat what's in `choices:`
This variable is causing an `undefined variable` error. ```suggestion command = ["sops", "--decrypt", lookupfile] ```
eewww .... ... if there is no other way .. fine, but do add in more explicit terms when you say it saves the 'current config' that it MAY also include other changes that are not related to this task.
Another (and possibly cleaner) way to do this is to use `pytest-mock`: ```python class SpiedOnTarget: @staticmethod def do_a_thing(): return None def test_empty_retry_iterator(mocker): decorate_with_no_retries = retry_with_delays_and_condition(backoff_iterator=[]) spyable = mocker.spy(SpiedOnTarget, do_a_thing) invoke_retriable = decorate_with_no_retries(SpiedOnTarget.do_a_thing) invoke_retriable() assert spyable.call_count == 0 ```
Could you add the oauth_token parameter to the example
```suggestion - Password for the user in guest operating system. ```
`type='str'` and `required=False` are both defaults, and neither is required in the argument spec (this applies anywhere either might occur)
```suggestion self._prefix = 'ansible_host%s' ```
`# In case of wait=false and state=running, waits for VM to be created`
not a blocker, but requried=false is the default and can be omitted.
An example of using values would be good to have.
note that collections_search_paths is a 'set' which does NOT preserve order, but default_collections_path should
```suggestion url = "/".join([base_url, index_set_id]) ```
but to_boolean doesn't convert values to booleans. It's really normalize_options(). It's just that the only implemented normalization at the moment is for boolean values.
```suggestion - Desired SR-IOV state on interface. ```
I would switch the statements, test for dict, test for list, else raise error.
`current_version` could be mentioned in the error message.
not a blocker but it is usual to use `yes/no` instead of `True/False` in the docs for bool types.
Make this a separate item in the list.
self.cache contains function `get_all_objs` which already does this, so we can reuse it directly rather than modifying `find_obj`
```suggestion - IP associated with the access list. ```
Also, for check more to work properly, you have to put ``` fetch = create(session, collection(session), [200]) fetch = response_to_hash(module, fetch.get('vpc')) ``` below into an `if:`.
features dont get backported
Oh,I just realised this module's still AnsibleModule rather than AnsibleAWSModule. #66863 might be the better version here since it includes some other cleanup.
May be worthwhile to make lines 513-528 a method on the class, so strategy sub classes could override it easier. May also make it easier to write tests for.
We can add this in a second PR. @WojciechowskiPiotr you could also keep this as a branch based on @morph027's with your changes as a new commit, then you can pull and rebase whenever @morph027 adds something, and later (once this PR is merged) create a new PR from your branch. Except, of course, if @morph027 already wants to include TLS support.
not a blocker but it is usual to use `yes/no` instead of `True/False` in the docs for bool types.
Handle NoCredentialsError as well
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Remove extra space: `inv.update({env: []})`
Ah thanks, I checked the implementation again, it verifies this here: https://github.com/ansible/ansible/blob/f2dccb90e893df30c2b8bfc925dba80f6ceed6a7/lib/ansible/module_utils/basic.py#L1376
but this all in a try/except/pass to avoid leaving other temp dirs if one fails all way through
Added this to the guideline docs https://github.com/ansible/ansible/pull/38978
this line could now use a linebreak
The alternative would be to always report `changed=False` in check mode, but that could result in an unexpected change during normal execution when you were expecting no change. I would rather Ansible report a change in check mode, but do nothing in normal mode to be on the safe side.
```suggestion self.module.fail_json(msg="Invalid start VLAN id %s." % vlan_id_start) ```
Another regex that can be precompiled.
Let boto3_conn handle region failures - region can be picked up in a number of ways that mean that the `region` variable doesn't get set but the connection is fine.
Lets deprecate the "old" param: ~~~diff - affinty_type=dict(), + affinty_type=dict(removed_in_version='2.9'), + affinity_type=dict(),
Wouldn't this create a conflict if someone ran this task twice with the same params, thus resulting in the same name (and a conflict)? Generating the name this way seems good, but can you add a check to make sure there isn't a changeset with that name already? If there is one, then you could return unchanged because the changeset already exists so this task's work is already done.
I'd prefer `runlevel` instead of `run_level` in this case. It is a matter of taste obviously.
This should be on a single line.
Typo - `use` -> `used`. (your friendly neighbour nitpicker :)
also potentially end this block with `raise`
`camel_dict_to_snake_dict` already exists
Ok we can use sysprep with from scratch VM. But if we run customization in all cases why this condition ? I think it should be : if we set customizations params : if len(self.params['customize']) > 0:
this would make it incompatible with the service interface
Nowadays, we do: ```yaml type: bool default: 'no' ```
How about - ```suggestion for key in ['title', 'description', 'index_prefix', 'creation_date', 'writable', 'default', 'index_analyzer', 'shards', 'replicas', ] if module.params[key] is not None: payload[key] = module.params[key] ```
```suggestion returned: success and I(ev_eligible) is C(true) and I(domain_status) is C(APPROVED), C(RE_VERIFICATION) or C(EXPIRING). ```
`Runner has been updated`
This check can be also moved to `module_utils`.
I'm concerned with this being the default behavior. In general we should not be creating files on users machines that didn't ask for. Maybe a flag to enable this, but it should be off by default. I'm also questioning why this should be set to `DEBUG` also. Maybe it should only be enabled with `ANSIBLE_DEBUG` is enabled. Regardless, I think this should be changed or removed.
Why not make module a property from the connection object (maybe change that into a UCS object instead ?). Make it automatically log on if there's no handle already, and keep the handle of the UCS object as well. Then you can simply call the setup_macpool function, and it would have access to both the module as well as the login handle, making the module much cleaner.
For public APIs we should be accepting text strings and internally convert to bytes where needed. If we really must accept bytes (which in this case I don't see a reason to) we should prefix the arg with `b_` to indicate that. The `b_` prefix may go away as we start to add type annotations but so far the behaviour is the standard we usually follow in ansible.
i would just keep a templar object and change 'get_handler_templar' to get variables and set it, avoids creating N templar objects and the 'dummy' becomes the main templar object.
If I am reading it correctly, `debug_mode` is a specific thing for a whole Zabbix API and not just for this module. This is not something we use in other zabbix modules and its usefulness for lets say an automated playbook is questionable. From the point of user's view, I shouldn't be expected to debug anything if only thing I am interested in is to create a few user groups. Can you provide some reasoning behind this please? I can understand that it is a good help for development purposes.
This is a bit of a bad way of checking wether it is IPv6 or IPv4: `::` only occurs if one of the hexadectets is `0000`. You can easily end up with `2001:db8:1:2:3:4:5:6`, which does not contain `::`. quick fix: check for `:` in `ipaddress`. Clean fix: use the `ipaddress` python module (python 3.3+ native https://docs.python.org/3/library/ipaddress.html; or https://pypi.org/project/ipaddress/ for 2.6, 2.7 and 3.2, which is a backport (so same functionality). This is the interesting part: > ipaddress.ip_address(address) > Return an IPv4Address or IPv6Address object depending on the IP address passed as argument. Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default. A **ValueError** is raised if address does not represent a valid IPv4 or IPv6 address. ```python >>>ipaddress.ip_address('192.168.0.1') IPv4Address('192.168.0.1') >>> ipaddress.ip_address('2001:db8::') IPv6Address('2001:db8::') ```
You just need to catch ClientError and BotoCoreError. If you want, you can rebase on devel and use the pattern ``` from ansible.aws.core import is_boto3_error_code try: return client.get_application(applicationName=name) except is_boto3_error_code('ApplicationDoesNotExistException'): return None except (BotoCoreError, ClientError) as e: module.fail_json_aws(e, "Could not get CodeDeploy application.") ``` Note: BotoCoreError does not have a .response so if you don't want to use the pattern above you should add ``` except BotoCoreError as e: ``` on line 169
no, really, remove the deprecated files from your commit
This is not a good practice, use module.debug or module.log , you can even check module.verbosity to figure out the level you want.
```suggestion tuple: First element is True if valuemap exists and False otherwise. ```
```suggestion status_down = self.client.check_if_swarm_node_is_down(node_id=self.client.module.params['node_id'], repeat_check=5) ```
This one will fail, since selfsigned_notBefore and selfsigned_notAfter have changed their meaning from the initial draft and don't have default values any more.
too many apis
facts modules can trivially support check mode (#23107)
I think we should add an additional check to check for this parameter only if powerstate is `poweredon` or `rebootguest` otherwise in other options module will wait for IP address.
Parameters that are not required don't need `required: false`.
``` if "floppy" in self.params and self.params["floppy"]: ``` -> ``` if self.params.get('floopy', None): ```
`datastore.name` requires access to the datastore itself, and thus might throw a permission error. This value should be wrapped in a try/except.
https://github.com/ansible/ansible/blob/cd988f645aaf774c55a98a90e3ef42cc5b1a1563/lib/ansible/module_utils/urls.py#L1147 gives all options.
Not sure if we can license module code as Apache License.
Beware that in your examples, you are actually using `application_profile_name` not `app_profile_name`
this should be in the run method, otherwise ansible itself will fail to run
`str` is superfluous here, it should be removed.
Thanks - I've replaced all uses of `filter` with comprehensions.
```suggestion - The plugin also sets standard host variable I(ansible_ssh_common_args) to C(-o StrictHostKeyChecking=no). ``` C(...) is also commonly used for general "code"/"teletype" markings
```suggestion # with the same name and value but with a dm_ name prefix. ```
Maybe we can remove the `if min_version:`? min_version has a useful default, and if `min_version=None` is passed, it is OK to explode, from my point of view.
When delegating, I'd think that we'd need to run the facts module for the delegated host rather than for the inventory_hostname host....
Please add `, no_log=True`
I think I'd handle purge_listeners at the consumer end of this method. Just seems easier than passing it in and handling it here. But not a blocker
```suggestion - A list of tags to be remove from the resources. ```
you just described check mode in general
So yeah, the callers that I see are fine. You should be able to simply remove to_text() here.
can delete this line
before continuing here, check that fields is actually populated as a list, or try/except the following code
which was incorrect solution as the 'non templating' of pause shows
```suggestion - name: Show variables with 'hosts' in their names ```
You should handle the case that `time_str` is not actually a string.
Return ```suggestion return [ (data_0, expected_0), (data_1, expected_1), ] ``` And then have just one invocation.
I would rather add all other fields to the error message.
Spurious `else:` Breaking the tests.
`version_added` should be `"2.7"`
You should set the default value for this like ``` create_mode: description: - ... choices: - ... - ... default: default ```
Since this is controller code, this should probably be using ```to_text()``` here. The ```self.get_option``` also seems redundant since you just pulled that value into inventory_id above? So maybe: ```suggestion inventory_id = to_text(inventory_id, nonstring='simplerepr') ```
remove `default: None` as default is set to None by-default.
You could add the minimum required version (`>= 1.0`) here too.
Do you need expiration to be an int type as well or is it okay if it is a string repesentation (like: "10" )
It's correct where it is
@machacekondra still, it requires the docs also that module would not have passed review, it got merged w/o it so it is not a good example to follow
None is the default.
Please format this like this: ```python repo = { "id": repo_id, "name": repo_name, "url": repo_url, "enabled": True if repo_enabled == '1' else False } ```
I wonder what should happen when disks is [].
not sure if its just me but i still find it confusing, wouldn't it be cleaner as?: ```python flag_val = p[flag] if flag_val: args.extend((arg, to_native(flag_val))) elif flag_val is not None: args.append(arg) ```
```suggestion - This is a only when I(type=private). ```
basically #53869 does same for vultr plugin
Another test that I would move into version specific classes with pytest skipifs
To be consistent with other modules, this should be validate_certs, not validate_cert.
> Well, as I state in PR description, version in trunk practically disables ec2.py cache when using python 3. The idea was to replaces `hash()` call with any hashing function that gives stable results between script runs. Anything from hashlib module will do, `md5` does not have any advantage. One important note: `md5` will not be available on some systems (such as FIPS compliant systems). It's probably better to use `sha256` (as `sha1` could also be removed). > hashlib functions require byte string as input. Python 2 and 3 differ in what is stored in `__file__` variable: python 2 has simple string and in python 3 all strings are unicode. You could do ```.py from ansible.module_utils._text import to_bytes ``` and then ```.py cache_name += '-' + hashlib.sha256(to_bytes(__file__)).hexdigest()[:6] ``` This will work for both Python 2 and Python 3.
Another general exception handling that can be removed.
@tzurE In a follow up PR could you please update all your modules to be in the form `- Tzur Eliyahu (@tzurE tzurE)` This allows Ansibulbot to know who to contact if their are follow up issues or PRs
Maybe add "ansible versions below 2.10" or something so it's clear this is a one-time problem, not that they can never upgrade `ansible` again...
better commit message would be ``` pamd args_present: properly update args, avoid dupes fixes #47197 ```
I would not assign it w/o validation: 1) it might cause errors happening in some other place, which would be hard to spot 2) it might be a weak place, vulnerable to injection attacks (security issue)
I think this needs to be `create_vpn_gateway(**params)` so that we don't always pass the AmazonSideAsn when the user doesn't specify it.
Please update the sample commands.
I'd lean towards making it an optional module arg as well. Mostly for testing purposes but also to support if the url does change users could handle it with just playbook updates instead of requiring a new module version.
You should really have at least one example with `state=absent`.
Sounds fine to me. I don't think I can say shipit yet, but if this gets wrapped up in another PR the rest looks fine to me.
This needs exception handling.
(and there's no need to have this var outside or this loop or increment it manually, then)
Use Jinja variable instead of IPs.
It seems network integration test is failing because of PR #47345, hence reverting the PR
(Additional whitespaceânumber of spaces not multiple of 4.)
I'm fine with shipping as is, but i'm not the best person to say.
Not needed with AnsibleAWSModule
task_uuid seems unused
s/Disk quota ID/Virtual Machine quota ID
Also, this will mean you need to `import traceback`
iirc we decided to allow configure commands as part of cli_command to support config commands that result in a command prompt
There in no module in VMware space, which is absent / present for enable / disable but we can add `state` with multiple choices like `[ absent, present, enabled, disabled ]` .
This could be less nested once you apply `choices`.
Ah, it's nice that the syntax checker caught this bug. This should be `network_interface['tags'] = boto3_tag_list_to_ansible_dict(tag_set_copy)`
These 2 `if` statements could probably be combined. To `pop` when if it doesn't start with `_` or not equal to `msg`.
Sorry, I was still about to reply to this, but then I got sick (unrelated to this PR ;) ) and forgot about this... It is indeed a mamoth block, and I'm not really happy with it; as you said, this complex beast isn't the best idea for a docs example. I guess we should try to simplify/shrink it a bit, though no longer in this PR ;)
You can definitely add yourself here as well.
As exclude_tags could be an empty set, I would directly check `if exclude_tags and set(server_tags).intersection(exclude_tags)`. This way, it should also work when exclude_tags and server_tags are empty.
```suggestion """Test that a new lock can be created within a Process.""" ```
Oh, you're right.
```suggestion choices: [ full list, top sites ] ```
Don't add `required: false`. It is implicit.
It's a matter of aesthetics, but I do think the `argument_spec` is clearly laid out and very readable as it is (i.e. with all the `=` lining up). Which is why I requested it be left alone.
A message string would good to say that image is not preset or something similar.
`check_args` is present in other network platforms for legacy reasons and can be removed here if not used
I'm not that sure it is a broken feature, my expectation is closer to what you expressed, but i still don't see this as broken .. at most, misleading. As for actual contract, no, nothing singed, it is an understanding that things don't change arbitrarily unless they are clearly a bug, to be honest, this is on the line for me.
I think if you revert this part of the code and remove the getattr defaults below, it should be fine.
The `type` value should be quoted: ```python force=dict(type="bool", default=False) ```
you might also want to explain that 'msg' (now an alias) was the main way to use the parameter pre 2.7
If we make `enabled` and `masked` mutually exclusive, this section of code is unnecessary.
asa_argument_spec import is no longer needed
OTOH, this does nothing since the module is already cached by the time this gets executed. So it's a no-op.
This should be: ```yaml type: bool ```
You set `tr` here but don't do anything with it. The code will just continue along and probably fail at 366 `include_file = templar.template(include_file)` because `include_file` is None.
Not sure if it would be useful for something later, but should we have a class attr with the name of the plugin in it? Some plugin types do this others don't.
Please, we are trying to get people do the right thing, read http://docs.ansible.com/ansible/devel/user_guide/windows_usage.html#path-formatting-for-windows All our examples should keep things simple, so make this: ```yaml - name: Copy test file win_copy: src: test01.test.ps1 dest: C:\Pester\test01.test.ps1 ```
@logan2211 you are incorreclty assuming that this is a toggle for each plugin's validation, it is not, it is for the global validation. Each inventory plugin is free to add it's own validation on top, most do and it is not controlled by that toggle. This PR alters the behaviour of the plugin which was always meant to filter the invalid names, the plugin itself never allowed - in group names.
```suggestion if subexpr.endswith(')'): ``` I am concerned here that if subexpr is empty, it may cause an exception. For that reason I prefer to do this.
Sorry, i was unclear, I didn't mean just this line, meant the vars copy/update block . Revisiting this line, I would actually put outside loop, after it ends. Also the existing `variables.copy()` will bypass your efforts as 'container types' will copy by ref, making modifications persist across not only invocations but in returned vars. see deepcopy or deepish_copy.
Please add `note: Version 4.4.3 or high required.`
This condition can be removed
I don't think we want to have environment variables overriding parameters. What is okay is for environment variables to set defaults if the parameters are not given. To do that you probably want the parameters to set a default value of None in the argument_spec. Then in here you can check whether they are None. If so, then try to set from the environment. If it's still None and you have a sensible default (doesn't look like we would here except maybe for ssh_keyfile) then set it to that value here. Also, could shorten this code slightly like this: ``` python for key, env_var in env_overrides.items(): params[key] = os.environ.get(env_var, None) ```
Missing from docs
Hmm... that's a good point. Since everything being called here is from the stdlib, it's possible that any exceptions raised will be well behaved. (e.__str__() will always yield a byte string, for instance). module.fail_json and module.exit_json take care of turning all elements in a dict into text strings before passing them to the jsonify module. So probably this is safe.
We now have a one-line GPL license statement.
Indeed :) I totally missed that...
```suggestion - Name of the package to install, upgrade or remove. - The C(all) package can be used to .... ```
Suggestion: `"""Retrieve a certificate using the ACME protocol."""`
Can be removed, indeed, check other newer modules :)
Perhaps make this a list? - C(endpoints) (...) - C(wwn) (...)
s/like C(mail)/(e.g., C(mail))./
Let boto3_conn handle region failures - region can be picked up in a number of ways that mean that the `region` variable doesn't get set but the connection is fine.
No need to add quotes around this line.
I'm not sure if we need this sanity check. If `lscpu` exists, we should trust it.
Also using recursin isn't really needed here, please use normal iteration.
This needs to be an `int` to be consistent with what we return currently. And if we split on colon, we can get the second list element rather than the last element. ```suggestion cpu_facts['processor_count'] = int(data[1]) ``` You can use the `type_debug` filter to check the type of Jinja variables.
This limits you to 1000 hosts where previously it iterated all the pages.
This applies to a few places.
Do we still need kind? For service I think it should always be v1
I wonder if this should be done in module_utils.ec2.boto3_conn rather than here - it seems like it should be reusable elsewhere (I really don't know how common local implementations of AWS services are, but guess dynamodb isn't the only one - it might (or might not) help with some of the S3 URL problems we've had recently)
This is not a blocker, just a thought on the interface.
it seems inconsistent as you do capture it in some cases
As this is a new module, we only need the top level `version_added`, no need for it per option. ```suggestion ```
```suggestion # Copyright: (c) 2018, CloudGenix Inc. ```
Default not set in argspec.
```suggestion description: Whether the domain is eligible for submission of "EV" certificates. Will never be C(true) if I(ov_eligible) is C(false) ```
This can be simplified as ```python VROUTER_EXISTS = '' if out else None ```
Keep `vswitch_name` for backward compatibility.
This protests if I only specify TargetGroupArn and only uses TargetGroupName (to then get the ARN).
I was actually thinking of moving it closer to the AnsibleModule part, so it would fail immediately (not after 3 minutes). But that means pieces logically belonging together are torn apart.
Even if you look at it in detail, these things are easy to overlook - when you wrote them yourself. This is why it's good to have someone else read docs as well ;)
Could you please refactor following if block to something which uses dictionary like - ```python options = { 'ipv4.address': self.ip4, 'ipv4.gateway': self.gw4, 'ipv4.dns': self.dns4, 'ipv6.address': self.ip6, 'ipv6.gateway': self.gw6, 'ipv6.dns': self.dns6, 'autoconnect': self.bool_to_string(self.autoconnect), 'ipv4.dns-search': self.dns4_search, 'ipv6.dns-search': self.dns6_search, } for key, value in options.items(): if value is not None: cmd.extend([key, value]) ```
Maybe use ```suggestion type: path ``` instead? Then Ansible will replace things like `~` IIRC.
Small nit: ASN.1 TIME, not ASN1.TIME. Otherwise great. :-)
task_uuid seems unused
ð on get_config for clarity.
`Can be configured form the CLI via the C(--user) or C(-u) options.`
Shouldn't this use the value of ansible_python_interpreter? There is a mechanism (winrm.py uses it) to pass in some host variables to connection plugins, so this should probably implement that.
Fair enough, should have actually gone to that link and read it properly
It would be nice if the current tags were added to the response.
1. `@property`. 2. It's not an installation command, it's a version spec. 3. You don't need it, as it's stringified automatically during string interpolation, under 3.6.5: ```python In [3]: from pkg_resources import Requirement In [5]: rqc = Requirement('cherrypy') In [11]: '%s ' % rqc Out[11]: 'cherrypy ' ``` 2.6.9: ```python $ python Python 2.6.9 (unknown, Apr 10 2018, 17:32:50) [GCC 7.3.0] on linux4 Type "help", "copyright", "credits" or "license" for more information. >>> from pkg_resources import Requirement /home/wk/.pyenv/versions/2.6.9/lib/python2.6/site-packages/pkg_resources.py:17: DeprecationWarning: the sets module is deprecated from sets import ImmutableSet >>> rqc = Requirement('cherrypy') Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: __init__() takes exactly 4 arguments (2 given) >>> rqc = Requirement.parse('cherrypy') >>> '%s ' % rqc 'cherrypy ' >>> ```
All descriptions should have a trailing dot. Except the short_description.
Please switch back to just using `%r` here instead of `'%s'` as that assists in providing more information about the original type.
This should be: ```yaml type: bool ```
This file will be kept locally and will not be deleted. It's to reduce amount of API calls during the execution.
What happens when module asks for boto3 but HAS_BOTO3 is False? I believe we should either default to boto2 and give a warning or otherwise a fatal error.
`exec_command` is unused
It would be nice to see the same msg in exit_json.
You should either use ```suggestion cmd = self.docker_cmd[:] ``` or ```suggestion cmd = list(self.docker_cmd) ```
Should this just be folded into `process_username`? You'd lose the `required_together` validation, but probably make it up by ditching some of the masking code.
Your module is named `gitlab_project_variable` don't use plural in your example
I see some more without trailing dot.
This one is wrong... needs to account for both text strings and byte strings. So probably have to compose it from individual constants in six. ``` python shell=isinstance(cmd,(text_type, binary_type)) ```
This should be modeled in the same way that all other modules within ansible currently work. Variables can be set per host and applied to tasks.
I saw the same problem. However we constrained because "no_extra_spaces" is already in use (ini_file). If we go with a better name here, we should deprecate no_extra_spaces in in_file and replace it with the better name as well.
multiple dictionary access: instead of ```python if required_config.get('rotation', None): rotation = required_config['rotation'] ``` use: ```python rotation = required_config('rotation') if rotation is not None: # do your stuff ``` use this rule for all dictionary access below
type is a keyword and shouldn't be used
``` BaseException +-- Exception | +-- TypeError | +-- AnsibleFilterTypeError +-- AnsibleError +-- AnsibleRuntimeError +-- AnsibleTemplateError +-- AnsibleFilterTypeError ```
Chances of not finding datastore is also possible even when user passes the datastore name. Change the error message
I've been playing around with this a bit; the problem seems to be loading the PKCS12 file with OpenSSL. When simply dumping the result of both runs via `openssl pkcs12 -info`, the output is the same for both. Also, the certificates show up in the correct order, and friendly names are correct. I'll go look at how OpenSSL loads PKCS12 files next...
This is also why shippable is failing.
i'm not sure that makes sense, if handler was not included, it would not be available for notification already. Since it should already add the conditionals inherited (only on import or include + apply) you should not need to check any other conditions.
Unfortunately, pytest3.x broke this syntax. The new syntax is: ``` pytestmark = pytest.skip('skipping as missing required netapp_lib') ```
change to data
Rename this to `get_provider_argspec` to be in sync with other platforms
I think this should probably be `'auto'` instead of `None` ... unless I missed something (which I'm always open to the possibility that I have): ```python use_backend = self._task.args.get('use', self._task.args.get('use_backend', 'auto')) ```
This is a private function (starts with an underscore) so I'd hope we could move this without having to leave a stub for backwards compatibility. If you want to remove the stub in a separate commit/PR just in case, though, I can live with that.
Since all of these appear to be constants, it seems to me that making them tuples instead of lists would be good to avoid accidentally modifying them.
I would move this blank line above the `HAS_LDAP`.
```suggestion self.mock_run_nvos_commands.stop() self.run_check_cli.stop() ```
@davidharrigan Nice spot, thanks. From a quick Google I've found * https://github.com/TAXIIProject/libtaxii/commit/59e18912e90550e2248779518fb63fac77d2f5a1 * https://bugs.python.org/issue4773
You should not need this anymore, you should have `self.get_option('api_version')` starting in 2.4 (rest of plugin needs updating)
If possible, do not use global variables. Pass the module to the function as a parameter if needed.
```suggestion ANSIBLE_METADATA = {'metadata_version': '1.1', ```
```suggestion - name: Add tags to a distributed virtual portgroup ```
Probably want to change this to your standard DO argument spec. This will handle testing the `oauth_token` and finding the token in the users environment. ``` argument_spec = DigitalOceanHelper.digital_ocean_argument_spec() module = AnsibleModule(argument_spec=argument_spec) ```
Actually, that is plumbed through already. Should be okay.
This should be sufficient.
This method is technically deprecated from Microsoft, if the executable manifest hasn't been set correctly it will always return `6.2` (Windows 8) even when it is newer. I don't see a need for this to be done in Windows and can potentially return None or a blank value as we shouldn't care there.
does this make sense with a stop? in most cases 'reload' is just sending a signal to the daemon ... not sure it applies to that action either.
Remove as not needed (default)
```suggestion type: str required: True ```
Why not just not set a 'default' for the Option() if the goal is to ignore the default value? Or set the default to an empty container as unfrack_paths intends. Then the callback doesn't need to care about the default
Thanks - I've replaced all uses of `filter` with comprehensions.
This should set self._connected = True (not really needed right now but could have ramifications later) and also use display to print a message. For instance, this is what the docker connect plugin does: ``` def _connect(self, port=None): """ Connect to the container. Nothing to do """ super(Connection, self)._connect() if not self._connected: display.vvv(u"ESTABLISH DOCKER CONNECTION FOR USER: {0}".format( self.actual_user or '?'), host=self._play_context.remote_addr ) self._connected = True ```
``` state=dict(type='str', default='present', choices=['present', 'absent']), ```
catchall ignore ....
Is this correctly handled? I think right now, you're trying to determine whether a database called "all" exists or not.
No longer need deepcopy
The phrase "unless within a playbook adjacent collections directory" is a mouthful. It's also not immediately apparent what that means unless the reader is well versed in Ansible jargon. > The specified collections path '%s' is not part of the configured Ansible collections paths '%s'. The installed collection may not be picked up in an Ansible run. If there is a strong desire to mention adjacency (I know this was explicitly requested in the related issue, but I don't think it's the clearest phrasing), then something like this is probably best: > The specified collections path '%s' is not part of the configured Ansible collections paths '%s'. The installed collection will not be picked up in an Ansible run unless adjacent to a playbook.
you need to skip value from parent if include_tasks/include_role, but still inherit
Strings don't need to be quoted in YAML.
```suggestion - Resource ID of the subnet. ```
with_ anything that returns an empty list has this effect, this is not just first_found
This isn't used in the examples. Is it possible to do this by name instead of URL? It seems a little complex to have to provide a full URL to use non-default networks.
should use choice
should be exception=last_traceback
You want to swap these conditionals, so that check mode can actually report anything. `load_config()` should be the only thing gated by `if not module.check_mode`, that way the result is correct
I've even tried doing some benchmarking and the results are about the same.
Since you return above, unnest the `raise` here.
This one is a bit odd as you are expecting that user will skip both `host_name` and `host_ip` arguments. In that case it is equal to not using your module at all. I would just replace with `fail_json`: ```yaml module.fail_json(msg="No host name or IP provided") ``` Same goes for the line 235, but that should be removed with the whole `is_host_exist` check.
Instead of checking this dictionary directly, update `check_pyyaml` to return a bool based on the result.
Parameters that are not required, don't need a `required: False`. This is implied.
Should not return a fail, just a `changed=False`
I wouldn't dive into that just yet. That would be very hard to do elegantly. I'm not even sure if it really philosophically makes sense.
```suggestion - Tenant ID to make requests on. If not set, the C(TENANT_ID) environment variable is used if set, otherwise the ID ```
provisioning_state is readonly as well, so let's remove it from parameters
Total time, in UNITS, to run stress for.
While there isn't much risk, this would match "UMASKFOO". The 2nd part regarding '#' is also not correct, since '#' need to be the first non space characters, I would recommend to use strip() and verify the first char.
```suggestion type: str required: True ```
boto3_conn now copes with RegionNotFound errors for you
please fill this in
Shouldn't the default for autoremove be "False" rather than "None" ? (just nitpicking)
```suggestion - The application secret to use. ```
For encrypted you should be able to assert something about the format: ``` >>> crypt = getattr(passlib.hash, 'pbkdf2_sha256') >>> crypt.encrypt(u'asda') '$pbkdf2-sha256$20000$PUeoVar1/h8jxNjb./8fgw$UzKj5pfmKEDtguOh.XEvHCqQr2b4AHPgwL/M8BEzez8' ``` Initial string, number of "$", length of the salt and length of the hashed value.
get_exception is deprecated in favor of native exception handling - ``` except Exception as e: module.fail_json(msg=to_native(e)) ```
If you use `env_fallback` then you don't require this check.
This is more, requires the [PowerShellGet](https://github.com/powershell/powershellget) module to be installed instead. You can keep a note saying this is installed with PowerShell v5 though.
Use `I()` around parameter names. ```suggestion - I(url) and I(host)/I(port)/I(user)/I(pass)/I(vhost) are mutually exclusive, use either or, but not both. ```
The description should have a trailing dot. (Only the short_description must not have it)
I think, guard-expression style would fit better here: ```python if not import_name in module_utils: display.warning('%s:%d Invalid module_utils import: %s' % (path, line_number, import_name)) continue imports.add(import_name) ```
There is a missing `os.path.join()` otherwise you get `TypeError: append() takes exactly one argument (2 given)`.
Yeah -- just for info, to_native() is preferable because, with default arguments, it won't traceback if non-ascii values end up in the exception message. In some cases, non-ascii will traceback with str() and with ```'%s' % e```.
Please use the camel_dict_to_snake_dict to fix the camelcase in the boto3 responses here.
You should mention instead of this that the required API version is 1.24. ```suggestion - "Docker API >= 1.24" ```
We can't do this, as this is break bacward compatibility.
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Remove extra space: `inv = {'all': []}`
```suggestion - "Whether to purge the retention policy or not." - "Mutually exclusive with I(retention) and I(overwrite)." ```
My bad, I forgot that [dict comprehensions were added in Python 2.7](https://www.python.org/dev/peps/pep-0274/). Feel free to ignore my suggestion.
This snippet looks just like one in `role_find`. It probably deserves being moved into a reusable function.
``` diff diff --git a/lib/ansible/galaxy/collection.py b/lib/ansible/galaxy/collection.py index caa22308eb..52272cde52 100644 --- a/lib/ansible/galaxy/collection.py +++ b/lib/ansible/galaxy/collection.py @@ -381,6 +381,12 @@ def publish_collection(collection_path, api, wait, timeout): :param timeout: The time in seconds to wait for the import process to finish, 0 is indefinite. """ import_uri = api.publish_collection(collection_path) + if 'v3' in api.available_api_versions: + parsed = urlparse(api.api_server) + import_uri = parsed._replace(path=import_uri).geturl() + else: + import_uri = import_uri + if wait: display.display("Collection has been published to the Galaxy server %s %s" % (api.name, api.api_server)) with _display_progress(): ```
`action=dict(required=True, choices=['get_status']),` So this should be `required: false`
it seems inconsistent as you do capture it in some cases
we've avoided using _ as a 'unused var' in case we decide to use i18n .. which also has special uses for _
I think defaulting to `false` is the safest option, and would be consistent with the purge_tags defaults in other modules.
the community has decided that modules should be named "_facts" when providing host facts, otherwise the sufix should be _info. That is why this module should be renamed `cs_resourcelimit_info`
Here please use C(custom_compatibility_version) instead of `custom_compatibility_version`.
Use module.fail_json_aws(e), which will handle calling ansible.module_utils._text.to_native() on e for you.
Please don't add new options in this PR, please remove this
```suggestion # just get value from attribute itself as normal ```
~if not keeping encryption, remove the __ansible_vault key, just assign the value directly~ nmvd, misread the if to the opposite ...
Because this parameter was added for backward compatibility with **vmware_dns_config**. We could add it as an alias and keep it forever, but I am not in favor of keeping lots of aliases for the same purpose.
remove added space
```suggestion short_description: Local Backup Utility for Alpine Linux ```
It doesn't matter whether it's a method or a function. A private function is related to the module scope, a private method is related to the class. Still, both are private, it's just a different level of namespacing. If a module name starts with an underscore it'd be also private.
double space between `and` and `self.options.subset`
Are these the only valid options, in which case you should add `choices: ['SG_TYPE_STRING', 'SG_TYPE_KEYVAL'] and similar in `argument_specs`
How about selecting a semantically better exception? ```suggestion raise LookupError( 'File "{target_path!s}" not found in collection path "{coll_path!s}".'. format(target_path=path, coll_path=ANSIBLE_COLLECTIONS_PATH), ) ``` P.S. `str()` is unnecessary since the specifier does that already.
Sorry @rajaspachipulusu17 I think this should be `self.mock_run_check_cli.stop()`
```suggestion module.fail_json_aws(e, msg="Boto failure") ``` Boto/API exceptions should use fail_json_aws
This should be executed only `if module.check_mode:`.
I think we don't need to patch `datetime.datetime.fromtimestamp()` and `datetime.datetime.utcfromtimestamp()` methods as they just return a datetime object from patched `time.time()`.
@akatch please add version in which this option is being added. like ``` version_added: 2.5 ```
You are not tracking timeout per child with this code. The time you're recording here is when you ask the library to queue the work.... It's not when the work starts. Therefore, you might as well save a single general timeout at the top of the method.
```suggestion fc_ports = module.params.get('fcaddress', []) ```
I don't see how this is a simplification, we just give modules the information about the dir the controller would have used, but it doesn't force the module to do anything. While this change will alter the behaviour of existing modules that rely on it.
Feels a little long, maybe something like ```suggestion short_description: Retrieves CyberArk vaulted credential using PAS Web Services SDK through the Central Credential Provider ``` or ```suggestion short_description: Retrieves CyberArk vaulted credential using PAS Web Services SDK ```
Both `ipfix_override` and `live_port_move` are still available through the API in vSphere 6.7 and can still serve a purpose, this should not be removed: https://code.vmware.com/apis/358#/doc/vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy.html#livePortMovingAllowed https://code.vmware.com/apis/358#/doc/vim.dvs.VmwareDistributedVirtualSwitch.VMwarePortgroupPolicy.html Suggest adding it back
Could try running the command with the env setup to use LANG=C You can specify the env for the command either with the 'environ_update' arg to run_command() or by setting module.run_command_environ_update before the run command.
This will throw an exception every time when a server is down. When glusterfsd is down the output looks like this: Brick 10.70.43.200:/mnt/engine Status: Transport endpoint is not connected Number of entries: - And you'll be trying to do int('-') which will throw ValueError. And the module throws error: fatal: [10.70.42.25]: FAILED! => {"changed": false, "msg": "Invalid heal status option."} in the function main.
```suggestion - name: Show variables with 'hosts' in their names ```
The default value for state should be `present`.
```suggestion - The broadcast (L2) address for the interface. ```
CI failure due to: ``` 2017-02-15 21:58:57 Traceback (most recent call last): 2017-02-15 21:58:57 File "/root/ansible/bin/ansible-playbook", line 103, in <module> 2017-02-15 21:58:57 exit_code = cli.run() 2017-02-15 21:58:57 File "/root/ansible/lib/ansible/cli/playbook.py", line 156, in run 2017-02-15 21:58:57 results = pbex.run() 2017-02-15 21:58:57 File "/root/ansible/lib/ansible/executor/playbook_executor.py", line 89, in run 2017-02-15 21:58:57 self._tqm.load_callbacks() 2017-02-15 21:58:57 File "/root/ansible/lib/ansible/executor/task_queue_manager.py", line 196, in load_callbacks 2017-02-15 21:58:57 self._callback_plugins.append(callback_plugin()) 2017-02-15 21:58:57 File "/root/ansible/lib/ansible/plugins/callback/junit.py", line 76, in __init__ 2017-02-15 21:58:57 self._task_class = os.getenv('JUNIT_TASK_CLASS', 'False').to_lower() 2017-02-15 21:58:57 AttributeError: 'str' object has no attribute 'to_lower' ```
This is still only one certificate. The name of the module, and the return value should be changed.
`for k, v in opt.items():` <-- gives you key-val pair
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` mutually_exclusive required_together required_one_of require_if ``` Should `whitelist_file` and `blacklist_file` be `mutually_exclusive` `mutually_exclusive=(('blacklist_file', 'whitelist_file'),),`
```suggestion - The friendly name of the monitor. ```
```suggestion - name: Replace after the expression till the end of the file (requires Ansible >= 2.4) ```
Please change `remount` to `remounted`. The same bellow.
This does not belong in here. Since you took it out of a function in task_executor, it might belong in there.
`current_grants[i] = v` is useless (as we don't use current_grants later), just add v to parsed_grants at the end of the loop : `parsed_grants.add(v)` Anyway, that's the solution I was going to purpose after hitting the same bug.
```suggestion module.fail_json_aws(e, msg="Failed to create organizational unit") ``` and here
You should really have at least one example with `state=absent`.
framwork_spec doesn't look like it requires `settings`, so potentially KeyErrors in several places here if not specified (probably should use `.get('settings', {})` or something similar, depending on usage.
```suggestion - Name of container, for example C(imagename:tag). ```
Spaces ! ```suggestion choices: [ absent, present, query ] ```
```python show = [cli, 'access-list-ip-show', 'name', name, 'format', 'ip', 'no-show-headers'] out = module.run_command(show, use_unsafe_shell=True)[1] ```
`ansible_dict_to_boto3_tag_list` likely better here.
comma-separated should not bee needed, just make flags a type=list in argspec, it will accept both actual lists and comma separated strings
`short_description: Manage VLANs on VyOS devices`
Odd -- on python3, to_str should just be an alias for to_unicode so there shouldn't be any difference. On python2, they'd be different but it should work because of automatic coercion of byte strings to unicode strings in python2.
Please add `version_added: "2.4"`
The next `if` should come first. The module should die if not all DBs exists no matter whether it's in check mode or not.
```suggestion default: {'type': 'org.graylog2.indexer.retention.strategies.DeletionRetentionStrategyConfig', 'max_number_of_indices': 14} type: dict ```
It probably makes sense to clean-up flags before exiting this method.
Values we return are in bytes.
All `descriptions:` should be full sentences, and therefore end with a full stop.
enabled/disabled for this as we are talking about a service (email)
define a `poller` and `get_poller_result(poller)` as response
the community has decided that modules should be named "_facts" when providing host facts, otherwise the sufix should be _info. That is why this module should be renamed `cs_resourcelimit_info`
(As in â we should drop the vm/vmis)
I didn't notice this before but you have eval here... What is that for? It's rather dangerous as it means if someone can get code into the config file for the foreman dynamic inventory, they can then execute whatever code they want as the user running ansible. We should get rid of this if at all possible.
connection plugins should not have their own python logic. If distros are using different python/missing python it is up to user to add (plenty of examples with raw and ansible_python_interpreter).
I think this function should return value, which you'd re-assign here: ```python value = to_boolean(value) ```
Instead of repeating the import try/except here, just add `cmd_quote` to the `from lib.util import` below.
Make this: ```python result = set_vm_power_state(pyv.content, vm, module.params['state'], module.params['force']) ``` Remove the stuff below.
I'm not sure how it works with `dnf`, but with `yum`, the name of the package you're trying to install doesn't necessarily need to be an exact match for what's in `exclude` for the package to be excluded. It's better than nothing, though.
Note that there are other pieces of code that need this same fix.
There are only two docker modules which do that: docker_swarm_facts and docker_node_facts. And there it's only for lists of objects returned. This is very different to for example the output of docker_node_facts, and all other _facts modules. So I don't think this is a good reason why the default should be `no`. @morph027 since we can't make up our minds, just pick whatever *you* prefer.
Where possible, generally its a good thing to keep the parameter names the same as the linux module equivalent. is 'replace_dest' the same thing as 'force' in the git module https://docs.ansible.com/ansible/latest/modules/git_module.html ? If it is the same it would nice if it has the same name.
This should be called tags for consistency with the other AWS modules. It also appears tags are only changed/added by this module when first creating the job flow but it should be modifiable since the API supports this with add_tags() and remove_tags(). Here are some general guidelines for dealing with tags. https://github.com/ansible/ansible/blob/bf304832ffb8fc723c4d2f755e2e45ba17809f73/lib/ansible/modules/cloud/amazon/GUIDELINES.md#dealing-with-tags Here are a couple module examples, though there are many: https://github.com/ansible/ansible/blob/ab96a841542478189a6195a05ff748565613056f/lib/ansible/modules/cloud/amazon/ec2_ami.py#L568-L585 https://github.com/ansible/ansible/blob/1905a6e8fb38a6d85eed5632c45250aa676715d9/lib/ansible/modules/cloud/amazon/ec2_vpc_route_table.py#L337-L360
If module uses the default value of 1 for this argument, we should add it in the doc and argspec.
This could cause problems if certain characters sneak into the repr() of the exception. (For instance, "{") Probably need to avoid writing to stdout and stderr.
A general remark: you should always use complete sentences. So this should end with a period.
handle import error
It is available in PR. Added on https://github.com/ansible/ansible/pull/55059/files#diff-2c15779308a54e8ac33b5eba806f6e5bR84
Is there a reason to sort this? Since we're just putting it into a set (to uniquify the list I assume) it doesn't seem necessary to sort. Since we're just iterating over sd_instances, a frozenset is more appropriate than a set.
I would call super here like this: ``` python super(Connection, self).exec_command(cmd, tmp_path, in_data=in_data, sudoable=sudoable) ``` It doesn't do anything useful for the docker connection but once again, it's nice to do it so that anyone looking at the docker connection plugin for a basis to create their own connection plugin will do the right thing (the base class's exec_command() fetch_file(), and put_file() use the @ensure_connect decorator to make sure that our connection is open before attempting these actions. For plugins that actually need to establish a connection, this is a necessary step).
Please put this on a single line. Lines can be 159 characters wide.
```suggestion import traceback ```
```suggestion import atexit import traceback ``` Please import `atexit` module
No need for the try/except, `get_resource_group` already handles this.
You can avoid these list comprehensions by using the paginator's `.build_full_result()` method, which keeps things consistent with the other AWS modules and a little easier to read. `zones = paginator.paginate().build_full_result()`
You could probably do something like ```diff - self.dns4=' '.join(module.params['dns4']) + self.dns4=' '.join(module.params['dns4'] or []) ``` This works fine for me.
In Python, it's common to include docstrings as per PEP 257: ```suggestion def fake_now(monkeypatch): """Patch `datetime.datetime.now()` to return a deterministic value.""" ```
So, my personal view here is that if you list items, and the order has no real meaning, it's better to order them alphabetically.
```suggestion - State the action to perform. Use C(present) to create cpu-class and ```
CI failure due to missing newline at end of file: ``` 2017-02-06 02:26:40 ERROR: PEP 8: lib/ansible/modules/system/java_cert.py:282:11: W292 no newline at end of file (current) ```
can we use `ast.literal_eval()` here to convert string to valid dict (that has double-quoted strings )
This should be wrapped like this: ``` state=dict( required=False, default="present", choices=['present', 'absent']) ```
requests should be removed completely in favor of utilizing `ansible.module_utils.urls`
This description seems redundant to me.
I am pretty sure the rest of the code will blow up, since it assumes that `systems_uri` is a string and not an array.
this is not a 1.0 callback, its using 2.0 API
The original modules have this: ```yaml # (c) 2016, Peter Sagerson <psagers@ignorare.net> # (c) 2016, Jiri Tyr <jiri.tyr@gmail.com> ``` Peter is the original author, I'm the person who polished and published his module. You are another contributor, so you should be at the end of the list.
Please check if this is still valid for `icx` parameter since current release is 2.9
Make these 2 seperate items in the description.
No, maybe @mscherer is talking about `copies`. Do ``` copies=dict(default=1, type='int') ``` rather than ``` copies=dict(default='1') ```
I see. However, if I don't specify `resource_pool` in my playbook I end up with a `null` value for `resource_pool` and the message: ` "msg": "A specified parameter was not correct: spec.location.pool"`.
Upon further reflection, I think these three lines along with `check_mutually_exclusive` are erroneous for subspecs. We don't currently have a way to specify `required_if/one_of/together` or `mutually_exclusive` for subspecs, so in every case *but* the networking "aggregate" thing, this is severely broken (as you'd be making nonsensical checks in most cases)
Types are missing above. token, msg and api are of type "str", port is of type "int". So something like: ```python token = dict(type='str', required=True) ... port = dict(type='int', default=80) ``` Please also add check-mode support. In whatever form you think is appropriate (either log messages adding check-mode run, or not sending messages but e.g. still attempt to connect).
This line does not need quotes. (nitpick)
I suspect this line is the problem with the yaml validation failure as \ indicates to yaml a line continuation, I think. To use a \ like this it would need to be inside single quotes. Likely the same issue on lines 72, 74 and 75
I think that wildcard imports are generally discouraged, because it makes it difficult to refactor and determine the origin of a function or class. For example, at first the `boto3_conn` function used in the constructor seemed undefined.
Please also use proper doc formatting like: "C(template) and C(storage_domain) parameters are provided"
If it's not required, you can leave out `required: false`.
Why have 2 parameters to set the name or ID, surely we would just want to set the name and not worry about the ID. Is there a benefit to using the ID over the name, if not then this should just be removed.
```suggestion updates.extend(line for line in set_commands if line not in config) ```
```suggestion version_added: "2.10" ```
`required: false` can be removed, it's the default `default: null` can be removed, it's the default
(If you're interested in the funny things which can happen because of this, look at #50503...)
```suggestion - The state of the fileset or nimclient to be. type: str ```
Honestly, I just failed to invent a better name
we can probably change it to a list, still this would be the wrong executable in some cases as it does not allow per host config, its also redundant to fallback to /bin/sh as it always is set (default is /bin/sh already). In other cases it will still be a problem, specially when privilege escalation is involved, due to the quoting.
`current_grants[i] = v` is useless (as we don't use current_grants later), just add v to parsed_grants at the end of the loop : `parsed_grants.add(v)` Anyway, that's the solution I was going to purpose after hitting the same bug.
No longer need deepcopy
also potentially end this block with `raise`
"One of your CIDR addresses has host bits set. To get rid of this warning, check the network mask and make sure that only network bits are set. [full boto3 error message]"
Missing example or detail of what the valid options are.
e is unsued, just `except Exception:` to avoid 'bare exceptions'
Please check if this is still valid for `icx` parameter since current release is 2.9
this should be a list of `choices`, not suboptions (which describes sub-object schema)
use the `missing_required_lib` function from `ansible.module_utils.basic`
```suggestion module.fail_json(msg='Unable to find the specified virtual machine : %s' % (module.params.get('uuid') or module.params.get('name'))) ```
Can be renamed to import_string based on my recommendation above.
```suggestion - The application key to use. ```
Python 3 versions are packaged in `python3-libselinux` and `python3-policycoreutils`. But the module needs just `selinux` and `seobject` python modules and version depends on the current interpret version. I don't know how to make it understandable and correct. On lines 267 and 270 I'd probably use module names could be used instead of package names: ```` module.fail_json(msg=missing_required_lib("selinux"), exception=SELINUX_IMP_ERR) module.fail_json(msg=missing_required_lib("seobject"), exception=SELINUX_IMP_ERR) ````
These 2 `if` statements could probably be combined. To `pop` when if it doesn't start with `_` or not equal to `msg`.
We could add a check to send at least an warning if a `mac` is specified with `state=new` in place of `manual_mac`: ``` if network['state'].lower() == 'new' and 'mac' in network [â¦]msg="MAC address '%s' define in `mac` attribute will not be used. If you want to define a manual MAC address, please use `manual_mac`." % (network['mac'])[â¦] ```
Fixed in https://github.com/ansible/ansible/pull/34186
Return is not compulsory but will help end user to understand return value of module.
There is no need to do `- >` here, just like a bit higher up, list items can be multiline.
```suggestion version_added: '2.9' ```
This is not a blocker, just a thought on the interface.
Just use ` and ...` instead of nesting. Less indentation == better readable.
Need to bump this to `2.6`
This variable is never assigned ```suggestion api.get_collection_versions('namespace', 'collection') ```
py3.x-only code; can safely ditch the args to `super()`
One thing to note, merge_type might not work with apply, we might hard code the apply merge strategy to merge (since strategic merge patch would need to know the merge key to intelligently generate the patch)
Now that #39924 has been merged into devel you can: ```python from functools import partial from ansible.module_utils.common.collections import is_sequence test_list = partial(is_sequence, include_strings=False) ```
No, you still have to check `HAS_BOTO3` (imported [here](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/cloudfront_facts.py#L229) and checked [here](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/cloudfront_facts.py#L558) )
this is not a good test, and could cause bugs in the future
Yes, please remove the return and update the caller.
As fair I as know, this is used only for block storages? Can you maybe add a note here? Someone can think that he obtain info about other storages as well..
sure, that's fine
```suggestion - If set to C(present) and library exists, then library is updated. ```
Why not just not set a 'default' for the Option() if the goal is to ignore the default value? Or set the default to an empty container as unfrack_paths intends. Then the callback doesn't need to care about the default
here we can just use "image" instead of GalleryImage
last time i note it as it seems a pattern, don't remove capitalization
already have this in basic.py, no need to create your own, it also includes sanitation and no_log
Though if things are a literal copy of what's in ec2.py (as CloudRetry is) I'd rather use an import so we don't duplicate all the code.
While you are here, can you please add support for - https://github.com/ansible/ansible/issues/24644 - https://github.com/ansible/ansible/issues/41494
Plz also use `match` arg here
You are not returning ansible_facts here. This will break backward compatibility.
excellent handling of congestion control
```suggestion - "Name of VM group to use with rule." ```
Instead of accepting the backoff decorator like `connection = module.client('ses', retry_decorator=AWSRetry.jittered_backoff)` I think you should take the generated decorator, like `connection = module.client('ses', retry_decorator=AWSRetry.jittered_backoff(retries=17))` so that users can change their retry settings per-client, and then on all subsequent calls take a boolean like `aws_retry=True` (defaulted to False) so users have to opt-in at the call site to using retries, but only have to do the configuration once. This seems like the good kind of magic to me ;)
```suggestion description: If True, system firmware will use UEFI boot explicitly. ```
Should not be quoted. It might confuse people to think this is needed. It is not.
Here, `self.count_upgrade` is an int, and `outdated` (as above) a `dict` resp. `list`.
In `check_mode: yes` the returned query will always be `SELECT 1 FROM 'tablename'`. But this is not what I expected. Normally I like to see what query will be executed for that change. Please change this behavior to always return the query which will be executed even if it is not in `check_mode: yes`
Please add `no_log=True`
chack -> check
So, I think on failure this output would be useful as well. So maybe it's better to create a new dictionary `debug_result` which you can then provide to fail_json calls related to fetch_url failing, and you can merge it with result before exit_json. ```python debug_result = dict( url=url, method=module.params['method'].upper(), headers=headers, payload=payload, ) ``` Then add the response and status: ```python debug_result['status'] = info['status'] debug_result['response'] = resp.read() ``` Then call fail_json using it: ```python module.fail_json(msg=str(e), **debug_result) ``` And exit_json: ```python if module.params['output_level'] == 'debug': result.update(debug_result) module.exit_json(**result) ```
Since it's the only plugin which does that, I would remove it. Either all plugins should do that, or none.
```suggestion - This lookup does not understand 'globing', use the ``fileglob`` lookup instead. ```
Add default value as note in description rather than `default:` value.
You should also extend check mode handling for `separate_git_dir` arg.
also potentially end this block with `raise`
specifying `type='int'` removes the need for this, so you only need to check the range.
I like this simplification but I believe that it should done somewhere in the core (suggestion for another PR) and not on per-module bases.
I know. There's an alias for 'server'. Calling it `host` keeps it consistent with the modules and Python client. As a user, you can use `server` or `host`. The Python client calls it `host`, and uses `HOST` in the env variable.
We can reduce the level of indents: ```python elif option == 'test': elif option == 'retries': else: result[option] = self.healthcheck.get(option) ``` And I don't thinks someone will be bored enough to specify a `test: ""` to get into the `elif self.healthcheck.get(value): ` check
I guess for consistency everything should be uppercase "Specific Virtual Machine Scale Set". Should "scaleset" be one word or two words? "scale set"
Also note, str can traceback if e contains non-ascii. Better to use the to_native function from ansible.module_utils._text.
they don't need a 'get' as the default will always be set, if that is not the case, there is a bug with `set_options`
```suggestion booleans or other types by the YAML parser must be quoted (e.g. C("true")) ```
This won't work if 'name' is an alias, rather than the parameter name.
This can be simplified as `if resp.json()`
Probably should also check and fail for `self._connection.transport == 'local'` - no need to go nutty trying to figure out if they're rebooting the controller via a more circuitous route, but at least cover the easy one.
Could we maybe sort this out so it's easier to see? I mean having something in the lines of {'config': {'options': {'system': And so. It'd be just so much more readable.
```suggestion description: The error message returned by the Gitlab API ``` The same for the next one.
No need of the new line here.
Requires a trailing dot.
also replace the word "facts" with "info" in the docs
@dsoper2 I think I mentioned it once before, but this one big try-except block you are using in almost every module is considered a bad practice. We tend to prefer small try-except blocks and catching specific exceptions with specific error-messages guiding users. I understand that that's not always the easiest path, because you may not always know in advance in what ways something can break, but that's something you learn along the way. In this example, there are a lot if statements that can't go wrong (like assignments and conditionals). On the other hand, you're calling class-methods that might as well catch their own exceptions, so there's no need to catch them in the module. Maybe the only call you want to add in a try-except block is the call to CommDnsProvider, because it's external you may need the handle raised exceptions.
Add alias of `username` (shown in argspec).
Could we maybe sort this out so it's easier to see? I mean having something in the lines of {'config': {'options': {'system': And so. It'd be just so much more readable.
Additionally when user sent ticket=true, this module will return also remote_vv_file parameter in vm dictionary, which contains remote-viewer compatible file to open virtual machine console. Please note that this file contains sensible information.
This should be a more comprehensive example, I don't follow what the intent here is. I have an assumption that you're connecting to a ssh daemon that's running in the context of a chroot located at `/mnt` on the `server01` system but it should be more explicitly stated in an attempt to remove the ambiguity.
pyvmomi only support 2.7+, so you can safely bump to Python version to 2.7
No, I mean ``` except (vmodl.fault.SystemError, Exception) as e: ```
get_exception is deprecated in favor of native exception handling - ``` except Exception as e: module.fail_json(msg=to_native(e)) ```
``` for key in data: if ':' in key or '-' in key: newkey = key.replace(':', '_').replace('-', '_') data[newkey] = data.pop(key) ```
It doesn't matter whether it's a method or a function. A private function is related to the module scope, a private method is related to the class. Still, both are private, it's just a different level of namespacing. If a module name starts with an underscore it'd be also private.
You are right, it's not consistent as-is. @Akasurde What is the direction we are taking this ? Also, we should also define a sub-spec for the hardware-parameter at some point.
that isn't only issue, many users require specific directories on their remotes for different reasons, this violates 'remote_tmp' configurations, which are normally per user, that is why most of our focus on creating these lock files had to do with the target file and not a common temp dir.
I think this should be: ```suggestion # value: "{{ sample_com_challenge.challenge_data['sample.com']['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}" ``` (I don't know why github thinks the original line has a leading space...)
a try/except LookupError with a fail_json around this should be sufficient to handle any potential api response data changes gracefully.
he, sadly most people do use duplicate names across hosts/groups ~no, just do line #120 and remove 121-122 as they become redundant~ nvmd, its host facts .. its ok as is .. for some reason i was confusing it with 'vars cache'
Unless it's a specific value, leave the default out and put it in the description like you have done.
I thought this initially too, looks like @sbj-ss is relying on the `if e.response['Error']['Code'] == 'NoSuchEntity'` for that use-case
This is not wanted, a parameter is considered optional by default unless you add `required: yes`.
Is this a requirement listed somewhere? Most of the tests for our modules are already implemented using unittest
This could be moved inside the conditional that follows to avoid checking when there are no vendored modules.
This doesn't seem right to me - you may not need the `catch_extra_error_codes`
What is this option needed for? After all, these are secrets you're dealing with, and if the user wants to print them she can use the `debug` module.
```yaml description: - The desired format for the returned key. choices: - PEM - SSH ```
`auth_realm` should also be added to `fetch_url`.
It's just an example. I just want it to be less scary.
`payload_from_wished_lb` could be called once.
I would reverse order and have parse_kv go first, since it will also still be the most common usage, also the current detection will create many issues, we have used it before (still do for safe_eval). Use a try/fail approach on parse_kv to try yaml parsing afterwards and error out if all fail the module_require_args check should not be limted to kv, but also force skip yaml attempt
In Python, we avoid adding unnecessary brackets.
Same change needs to be made to many other uses of filter.
This doesn't remove any orphan, it only checks whether there are any.
I just had some time to look at this more closely and this is working correctly. As @s-hertel said, `recure: yes` is only valid for `state: directory` but isn't needed when removing directories.
Would be perfect with `delegate_to: localhost`.
Define separate checks for json and boto3
Can you add: ``` type: path ```
Won't this cause no task to ever be printed? You have nested the 'TASK' banner display under a check that ensures that the task name is 'include' and that the verbosity needs to be greater than 1.
do not call "get" twice
I think keeping both is probably best. Changing types of an existing return value, or removing one, will definitely break some people's playbooks. You could deprecate the old return value and announce that in the porting guide; then the old return value can be dropped in 2.13. This is not optimal because there is no mechanism which tells people that the result they are using is deprecated, but at least people who read the porting guide and/or changelog will have four versions to adapt their playbooks.
`short_description: Manage VLANs on VyOS devices`
I am a bit surprised, since "state" is describing action. That sound a bit weird to me to mix 2 differents concepts in one single argument.
this works fine but the if/elif is slightly complicated to follow, one branch touching password the other resource['password']... Consider something like this: ``` if self.module.params['update_password'] == 'on_create': password = None if password is not None: resource['password'] = password ```
Not catching non-200 responses.
A message string would good to say that image is not preset or something similar.
```suggestion username = self.params.get('username') ```
how about at least ```suggestion elif return_tuple[0] in sshpass_return_codes: ```
I think we are fine with having the property and can do w/o the 'special dict key' which would show in the user's dict definition
That will come soonish, I hope. Whenever all more pressing things are done and I find time to work on my version_added PR again ;)
I think you should either use `pid` or `PID` everywhere. Whether you prefer `PID` or `pid` is something you have to decide :)
```suggestion - Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>. ```
use ```from ansible.module_utils.vmware import HAS_PYVMOMI```
This needs to be the **repo** parameter, with possibly **name** as alias.
What's the reason for using the shell here? There's no redirection, pipes, or other needs for the shell that I can see.
use isinstance built-in method
There is a parameter called `validate_certs` which used other modules. It would be great if you could that here so it will match every other module. [Example](https://github.com/ansible/ansible/blob/013c42b14fa06ff6355d8a9d52430f4cb1262047/lib/ansible/utils/module_docs_fragments/vmware.py#L30)
I don't think we need a default for this since I can't image it being generally applicable.
I don't understand why we would `return False` here. This function is about giving back an instance based on the public IP address or failing gracefully with an error message for the user. If this `return False` is happening, we need to write code to handle that in all places it is called within the module. This can lead to extra `if/else` which we should avoid for maintainability purposes.
I get that long format task ARNS might be a prerequisite for tags but might be better say e.g. > "Cannot set task tags: long format task arns are required to set tags"
```suggestion - If set to C(False), will add, reconfigure or remove network adapters according to the parameters in C(networks). ```
`results[mount]['info']['note']`must be changed here, because `res.get()` contains no information about the timeout happened here, e.g. `'Timed out while attempting to get extra information: %s.' % (to_text(res.get()))` Also a `self.module.warn('Timed out while attempting to get extra information for mount %s: %s.' % (mount, to_text(res.get())))` should be added here, otherwise the information that a timeout happened is only in the facts note, and so mostly hidden from the user.
no need. dependency check done by AnsibleAWSModule
Remove as not needed (default)
same, probably stick with the CamelCase form already in use through the rest of the module
For EOS, following line is also required after this line: ``` commands.append( 'no switchport mode trunk') ```
add a `mutually_exclusive` section
Unfortunately, pytest3.x broke this syntax. The new syntax is: ``` pytestmark = pytest.skip('skipping as missing required netapp_lib') ```
You forget to make the change.
I see did some changes of single quotes to double quotes but you left all double quotes are the were. You should change all other cases than named above to single quotes (e.g. keys in the dict vars - `my_dict['my_key']`).
In general your solution is good, but user will always have to specify wait=false, unless we fix it in API. But I am ok with current solution, so let's merge.
Right -- but is it the same format as os-release? If it's not the same format you'll need to add different parsing rules for that file below.
_tmp_args should be a local variable rather than an instance attribute. But if we do that the unittests will need changing in a more intrusive way. I think that's the right choice but I haven't looked at how to achieve that yet.
Don't add this, if the parameter is not required.
Please do not quote `%r` as it will automatically add quotes in creating a string representation of a string.
The docs say this should be `servers`, I'm ok with either but it should be consistent.
For automation, `yes` or `accept-new` are probably more secure choices than `no`. In the end, it's up to the user to decide what kind of security requirements they have and which default setting they want.
Please use `C(...)` instead of backticks.
Actually, the `dimensiondata_network` module already has metadata: https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/dimensiondata/dimensiondata_network.py#L25
understood, but namespacing is also a usability and convenience issue, it makes it easy for the user to define variables 'safe from conflicts'.
Try this: ```python attrs[name] = list(map(to_bytes, value)) ```
This should be a string. ```yaml version_added: "2.3"
Don't do this. The old way is much more pythonic. And it's much harder to see *your* changes as a result
```suggestion if host_network_info.atBootIpV6Enabled: if host_network_info.ipV6Enabled: ... elif host_network_info.ipV6Enabled is False: ... else ```
It doesn't solve the spacing/padding problem, now we have this (one space at 9 columns before the end, i.e after the right-padding of the name and before the left-padding of the time): ``` before ------------------------------------------------------------------ 0.00s after----------------------------------------------------------------- --- 0.00s ```
How is this required if it can also be specified by the environment variable? Compare to openshift plugin via `ansible-doc -t inventory tower` ``` api_key: description: - Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable. ```
Suggest to add the alias for `load_balancing_policy` for backward compatibility, including in doc
```suggestion description: Whether the domain is eligible for submission of "EV" certificates. Will never be C(true) if I(ov_eligible) is C(false) ```
Just because a software is installed it does not make it the service manager, i have runnit and daemontools and encore-6 installed, none of them are 'THE' service manager. This is why checking proc 1 is important, also that only resolves the 'general service manager' which is what this fact tries to provide. If the `/proc/1/comm` path is unreadable we either need to find alternate way of figuring out the command (ps?) or return N/A or None as we failed to determine the 'real' manager.
If we don't add type information the docs don't look as good: https://docs.ansible.com/ansible/devel/modules/zypper_repository_module.html
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific version_added when the options have been added in a newer release.
The `root_uri` may include a port number (e.g. 192.168.1:8000). Should probably split that off also.
It's addressed here https://github.com/ansible/ansible/pull/47803/files#diff-4e0a09d18f6dfe19eb9d0b30c0a53bafR16
(Finally: let's leave the `mode` / optional `name` parameter away and get this merged first; you can then add it in #50428 or a follow-up PR, so that you can use the new `module_utils` Python module.)
This needs to be changed, make it `Not applicable to endpoints of I(type) C(external_endpoints).`
I think this logic should be handled by service instead of ansible client side
No need to set this, or check it.
The problem here is that it has to be maintained outside of Ansible. Might be better to leave it as free-form (and make the module fail message give details).
understood, but namespacing is also a usability and convenience issue, it makes it easy for the user to define variables 'safe from conflicts'.
I think changed needs to be set to True here.
Some modules define this as: ```yaml choices: - 'True' - 'False' - 'yes' - 'no' ``` to indicate that you can also specify it differently. If there is no standard, that's up to you.
`api_token` parameter is missing.
Missing full stop > Descriptions should always start with a capital letter and end with a full stop. Consistency always helps.
The `basedir` path will need to be bytes to avoid unicode errors. Something like this: ```suggestion b_basedir = to_bytes(context.CLIARGS['basedir']) collections_search_paths.update([b_basedir]) default_collections_path = [b_basedir] + default_collections_path ``` I did not test this. I'm just guessing from looking at the test failure.
Missing `=dict` on this and the next few lines
`ManageIQ username. C(MIQ_USERNAME) env var if set. otherwise, it is required to pass it.` and delete the `default:` line. This applies to the remainder of this file
On IRC, @bcoca mentioned that this should be doable with `construct`. It is currently not possible, though, but it is better if this can be solved in a plugin-independent way in the future, than now having plugins do it differently. @ximon18 do you mind removing this? Or is this a feature you absolutely need? With `construct`, you can do essentially the same, but not for arbitrary key-value pairs, but only for keys you know about in the inventory config. If that's ok, removing this probably speeds up getting this merged :)
I'm a fan of this approach @WojciechowskiPiotr for this situation.
I'd recommend adding a main() and a 'if __name__ == __main__: main()' here, but thats optional.
this got named use_backend
Name needs to be updated here.
Do note that this only looks at the primary credential cache. This means that if you use a collection credential cache such as DIR, KEYRING or KCM (default in most distributions these days), you might not see a ticket that exists in a non-primary credential cache. Maybe consider using `klist -A`, or try a `kswitch -p <principal>`? The latter is easier to parse, but might break stuff if people are still using the old krb5 APIs (rather than GSSAPI) and were using the primary credential that you just made secondary.
afaik, winrm is only one using v X 6 and no one is doing the `display.verbose( ..., caplevel=23)`, I was pointing it out JIC you wanted a more precise wording.
I'm not clear on what conditions would trigger this, or what the user's action should be if it did occur.
Typo here, should be L2 interfaces
they always were, most lookups don't take a dict as argument, older lookups, like this one, had created their own interfaces, most others use a 'single string' k=v space separated options (also something we are moving away from)
oh I see, it makes sense then.
add a `mutually_exclusive` section
This seems like a good candidate for module_utils, since it will be needed for other conversions as well.
I realize this was in the original file, but it can be simplified as well: ```suggestion sys.exit(main(sys.argv)) ```
~~~ - name: Ensure a network is present cs_physical_network: ~~~
I think changed needs to be set to True here.
```suggestion - Set the user's plugin used to authenticate C(CREATE USER user IDENTIFIED WITH plugin). ```
Please add the module as a function parameter and maybe replace `dest `trough the `filepath` in the error message error: global name 'module' is not defined
this is checking the directory on the controller, not on the remote
That all sounds correct.
```suggestion - This module can be used to create and delete an access list. ```
An example of using values would be good to have.
Not a must fix. We could remove 2 lines of code and logical branch for ```if not ignore_errors:``` The Core reviewers might like it more direct and declarative.
Okay, let's do this.
Never raise an exception, fail the module instead
Actually someone can sent for example '123213321321321', which isn't valid name nor ID, so it will fail with HTTP 404.
```suggestion # checksum filename ```
`del` is a builtin, not a function. These parens don't have to be here
this is not needed as each section checks for it's own parameter
I am a bit surprised, since "state" is describing action. That sound a bit weird to me to mix 2 differents concepts in one single argument.
```suggestion result = dict( ``` More in line with a lot of modules.
Since role imports are non conditional, the `when` never applies to the inclusion of the role, the 'fun' part was dealing with `include_role` specifically, in which case that would be applied to the action of including the role itself.
An equivalent to this would be `extra['Metadata'].update(metadata)`
Right but this seems arbitrary, cut off at 40 characters ? For readability I think it's better to not split lines if it is not required. But you are right, it's not mandatory. So you can ignore this :-)
This isn't needed if you have set a default.
Please note that I also fixed this in #52402, which just got merged; the conflict you currently have is probably related to this line. I think git should have no problem rebasing to current `devel` (since it will notice that this PR does the same as is already done on `devel`), so resolving it (via rebase) should be no problem.
Allow filters ``` argument_spec = openstack_full_argument_spec(filters=dict(required=False, type='dict', default=None)) ```
Maybe just `_` prefix `warnings`on `ValidationResult` for now? This definitely doesn't seem like it'd be generally useful as-is, and we'd almost certainly have to restructure it later to create actual warning objects if we have more than one (rather than a list of dicts).
Let's keep the naming aligned with docutils' own RST terminology/definitions, at least: ```suggestion _RST_ROLE = re.compile(r":\w+?:`") _RST_DIRECTIVE = re.compile(r".. \w+?::") ```
there are other locations in the file as well where such a fix is required
Hmm, that's pretty inconsistent. So now we got three different choices... :) I guess it's fine to leave it with 1.25.
```suggestion - Netvisor API to enable or disable APIs. ```
did you mean `cmd[u'prompts']`? missing a closing quote
please add ``` from __future__ import absolute_import, division, print_function __metaclass__ = type ```
The more the AWS modules look the same, the easier they are to understand. The majority don't use classes, and those that do are less understandable as a result.
`changed=True` would be better.
The pep8 line length enforced is 160 - can keep this on one line.
Missing `=dict` on this and the next few lines
Same here, I suggest just adding `port_security_enabled=port_security_enabled` or something like that. In this case, `project_id` is pointing to `port_security_enabled` value.
Isn't paging for boto rather than boto3. This should just use standard boto3 pagination methods including build_full_result() I wrote this long before I understood boto3 pagination!
well, maybe. I haven't checked what `.absolute()` does.
```suggestion if os.path.isabs(link): ```
Beware that in your examples, you are actually using `application_profile_name` not `app_profile_name`
Not catching non-200 responses.
```suggestion node=dict(type='str'), ```
```suggestion array = module.params['force_array'] or (values is not None and len(values) > 1) ``` to avoid ambiguities when reading
permissions aside, we can tell user if organization exists and description matches and if it would be updated/deleted.
This should be indented only by 2 spaces.
a better message might start 'Failed to update the organization: `<execinfo>`' ... also It would be nice to make the distinction between retrieval and update, as they could pose separate permission issues. i.e. I can read but not update the organization.
@nitzmahone could you keep this `FIXME` note? This should probably be discussed separately.
Oh sorry, that's a function that we've written ``` from ansible.module_utils.common.collections import is_iterable ```
you can use from `ansible.module_utils.urls import fetch_url` instead of import additional library
```suggestion default: "org.graylog2.indexer.retention.strategies.DeletionRetentionStrategy" type: str ```
Well, the final code is easier to read on a single line, so rather than extending it the result is IMO more readable so worth the effort.
Rather than making these globals, store them as locals and pass them into the functions, or just run `mode.get_bin_bath` within the function. Globals are not worth the future troubleshooting complexity in this case, especially since `RPM_PATH` is the only variable used in two different functions.
I'm not sure what you check with `if want['vlan']` but it seems wrong without any explanation...
i would mention this plugin is Windows specific
Should we just hardcode this instead of using `__name__`? Using `__name__` could make this dynamic, as it could be `__main__` or `ansible.utils.display`. We might benefit from just making it `ansible`
What exceptions are you planning to catch here ? Because we prefer to catch only the exceptions we know can be raised. Blank statements like this one may hide real logic errors under the premise that it was a known issue all along.
Instead of doing this, can we simply re-raise the existing exception? That way the traceback information stays intact: ``` python except AnsibleUndefinedVariable as e: raise except Exception as e: [....] ```
It'd be good to include a default sleep here so this loop doesn't continuously hit the oVirt endpoint. Even just a one or two second sleep would be fine between tries.
This protests if I only specify TargetGroupArn and only uses TargetGroupName (to then get the ARN).
```suggestion - Can be the name or resource ID of the route table. ```
It's recommended to use string interpolation over concatenation. ```suggestion cmd += ['--dns=%s' % ','.join(params['dns'])] ```
```suggestion with pytest.raises(FailJson, match='Unable to find required'): z = TgzArchive( src="", b_dest="", file_args="", module=fake_ansible_module, ) ```
I'm cool with DryRun for this use case - the logic here is pretty simple so catching the exception is plenty sufficient.
You should probably note that these patterns are expected to be regex (vs. globs). The examples show this, but it doesn't hurt to be explicit. It also wouldn't hurt to mention that the patterns are not implicitly anchored.
I would omit the 3, it seems like in the internal API you can set as many recovery actions as you want. It's just the GUI that limts to 3.
i think we require this
Hm, good point. I'm not sure. Maybe making exceptions more specific will be a pr for the future since it's used elsewhere in the module anyway.
I always sort alphabetically if the order has no meaning.
In that case, we'd also better drop it, otherwise we'll get idempotency problems...
when using dict you can just do `dict(msg=to_text(body), message_count=....`.
you should note that the return changed and those fields are new in 2.4 .. also keep dest and note that it is only valid in previous versions
`mutually_exclusive` could be used here ([example](https://github.com/ansible/ansible/blob/94eab56d51c8810bbf1ca39015f58f9112e83b07/lib/ansible/modules/system/systemd.py#L323)).
which was incorrect solution as the 'non templating' of pause shows
Please put this on a single line. Lines can be 159 characters wide.
I think, using `pass` instead of returning `None` in AttributeError as `return None` fails to retrieve snapshots. Snapshot data works perfect with `pass`.
I think changed needs to be set to True here.
I think this was supposed to be ```suggestion assert not (self.hostA == other) assert not (other == self.hostA) ```
`default=True` (as it's a bool, not a string)
I am pretty sure this will fail to run, since concatenating strings and arrays is not something python supports. You will need to add a loop over the `self.systems_uris` and then incorporate all of the responses into final result.
As you already have the same 'or' clause in `_init_server_container` you can just rely on `self._info.get('uuid')` here.
Probably best to add an entry saying the location is derived from `C(resource_group)` if not specified
Why change the requirement? Also, you should add an explanation in the description that this was changed for version 2.3 and that in previous versions it was not requried.
might as well get rid of any `required: false` and `default: null`s
I like the regex approach. Another modification: ``` if disk_size_m: â¦ ``` â ``` if disk_size_m: â¦ else: self.module.fail_json(â¦) ``` (PS: I didn't finish this PR review)
@lpmi-13 thanks for the PR. This looks correct to me - `fail_json` will exit the code.
I'd move this block into it's own method since fetch_file will likely need it as well.
actually, after looking at code 'currently', include_vars always ovewrites as it does not use combine_vars at any point .. this might be a 'bug' in VarsManager on `set_host_facts` and `set_nonpersistent_facts` methods .. unsure if we need to fix considering upcoming deprecation.
```suggestion # just get value from attribute itself as normal ```
```suggestion When some attribute is not listed in the new list of attributes, the existing ```
i would mention this plugin is Windows specific
Fair enough. It is not a hard requirement.
Don't default state. Make it an explicit option.
This argument is marked as being removed in the same version it is introduced. This makes no sense.
@FedericoOlivieri I just raised a PR which should mitigate this problem. This is the one https://github.com/ansible/ansible/pull/54783. Once this is merged, please fetch, rebase and try again.
Good point for handling the `_` char, but have you tested the `-` char ? I know some devs use it ð in the db name, as long as they quote the db name.
I'd change this to keypair if it can be a name too.
I blame my `black` setting.
```suggestion - name: Change login times for user ```
I understand, we are trying to make things more concise over time. But at this time a lot of the modules are not consistent at various levels.
Indentation doesn't look right here.
Here is my reproducer, consistently fails: ``` --- - hosts: localhost connection: local vars: elb_app_lb_name: "{{ elb_app_lb_name }}" tg_name: "{{ tg_name }}" tasks: - name: create an application lb elb_application_lb: state: present name: "{{ elb_app_lb_name }}" subnets: - subnet-17bbda4c - subnet-5c7ecc60 security_groups: sg-29d13055 listeners: - Protocol: HTTP Port: 80 DefaultActions: - 'Type': 'forward' 'TargetGroupName': '{{ tg_name }}' - name: update subnets elb_application_lb: state: present name: "{{ elb_app_lb_name }}" subnets: - subnet-cbdf56ae - subnet-17bbda4c - subnet-5c7ecc60 security_groups: sg-29d13055 ``` Traceback: ``` TASK [update subnets] ************************************************************************************************** task path: /Users/shertel/Workspace/ansible/my_playbooks/elb_application_lb/iterate_over_NoneType.yml:22 Using module file /Users/shertel/Workspace/ansible/lib/ansible/modules/cloud/amazon/elb_application_lb.py <127.0.0.1> ESTABLISH LOCAL CONNECTION FOR USER: shertel <127.0.0.1> EXEC /bin/sh -c 'echo ~ && sleep 0' <127.0.0.1> EXEC /bin/sh -c '( umask 77 && mkdir -p "` echo /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193 `" && echo ansible-tmp-1499709521.38-260285283136193="` echo /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193 `" ) && sleep 0' <127.0.0.1> PUT /var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/tmpiiu8JI TO /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/elb_application_lb.py <127.0.0.1> EXEC /bin/sh -c 'chmod u+x /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/ /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/elb_application_lb.py && sleep 0' <127.0.0.1> EXEC /bin/sh -c '/Users/shertel/Workspace/ansible/venv/python2.7/bin/python /Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/elb_application_lb.py; rm -rf "/Users/shertel/.ansible/tmp/ansible-tmp-1499709521.38-260285283136193/" > /dev/null 2>&1 && sleep 0' The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 1005, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 1000, in main create_or_update_elb(connection, connection_ec2, module) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 895, in create_or_update_elb listener_changed = create_or_update_elb_listeners(connection, module, elb) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 704, in create_or_update_elb_listeners listeners = ensure_listeners_default_action_has_arn(connection, module, module.params.get("listeners")) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py", line 487, in ensure_listeners_default_action_has_arn for listener in listeners: TypeError: 'NoneType' object is not iterable fatal: [localhost]: FAILED! => { "changed": false, "failed": true, "module_stderr": "Traceback (most recent call last):\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 1005, in <module>\n main()\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 1000, in main\n create_or_update_elb(connection, connection_ec2, module)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 895, in create_or_update_elb\n listener_changed = create_or_update_elb_listeners(connection, module, elb)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 704, in create_or_update_elb_listeners\n listeners = ensure_listeners_default_action_has_arn(connection, module, module.params.get(\"listeners\"))\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_CNtIaB/ansible_module_elb_application_lb.py\", line 487, in ensure_listeners_default_action_has_arn\n for listener in listeners:\nTypeError: 'NoneType' object is not iterable\n", "module_stdout": "", "msg": "MODULE FAILURE", "rc": 0 } PLAY RECAP ************************************************************************************************************* localhost : ok=1 changed=1 unreachable=0 failed=1 ```
```suggestion - The repository name. ```
You can replace this line through line 363 with simply: `client = module.client('es')`
^ that seems to be an expression not really a data type issue (sorting keys, this is another known json issue), in any case, there is also an existing `jsonify` in module_utils.
required=False, default=None is default for an argument
This is still something we shouldn't really want to explicitly support.
This is a personal preference, but I'd rather not have a class name in all caps.
doc string doesn't match actual return data
Please include an aggregate example
It's not dicitinonary. It's list of permit names.
```suggestion url = "/".join([base_url, index_set_id]) ```
Not catching non-200 responses.
Please ignore, the param will be set to False when not specified
You can replace this line through line 363 with simply: `client = module.client('es')`
if `scope=user` or `scope=global`, and `daemon_reload=true` or `daemon_rexec=true` â ansible will try to daemon-reload or daemon-rexec the system daemon (instead of the user one).
When this message is printed, it will contain a newline followed by a lot of spaces. You should compose it as follows: ``` .py module.fail_json(msg=('For RSA keys, the minimum size is 1024 bits and the default is 4096 bits. ' 'Attempting to use bit lengths under 1024 will cause the module to fail.')) ```
add ``` datastore = None ```
We talked on IRC. For other people looking for the information, subprocess.Popen.communicate() returns str type on python 2 which are bytes. On Python 3, it returns bytes type which also represents bytes. We'd only need to use to_bytes here if communicate() was returning the unicode type on python 2 or the str type on python3.
This looks more like boto3 exception handling than boto - I'm pretty sure e.message is just a string, so passing it through camel_dict_to_snake_dict seems pointless.
```suggestion - Variables which are present in the playbook, but are not present in the Gitlab project, ```
This results in following error: > RuntimeError: dictionary changed size during iteration I solved it by doing it in two steps: ``` params_to_delete = set() for param in params.keys(): if param not in emr_argument_spec(): params_to_delete.add(param) for param in params_to_delete: del params[param] ```
Please rephrase this like: ```yaml source_username: description: - Username used to authenticate against C(source). - This only affects the C(source) parameter. ```
Method name is deceiving, since the body of the method will only set a single attribute.
Shouldn't we just use a naming alias here so that one can use either role_name or local_role_name? Both of the options have the same fields. ``` aliases: local_role_name ```
For public APIs we should be accepting text strings and internally convert to bytes where needed. If we really must accept bytes (which in this case I don't see a reason to) we should prefix the arg with `b_` to indicate that. The `b_` prefix may go away as we start to add type annotations but so far the behaviour is the standard we usually follow in ansible.
Should be AnsibleAWSModule now you're using fail_json_aws
it seems i misunderstood the feature, i thought this controlled what OS property populated the inventory_hostname
Use [find_datastore_by_name](https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/vmware.py#L145) instead.
I think we should just raise. setup.py is for installing the software. That comes with different assumptions about what you'd want to see than for running the software.
Use whatever fixture names make sense. Personally I'd probably name the fixture `XenAPI` since that's the import it is replacing. Then there's no need to assign `XenAPI = fake_xenapi`. Setting `autouse=True` only loads the fixture for the test automatically. If you want access to that fixture as a local, it still needs to be a function parameter. The benefit to autouse is that it guarantees the import will be mocked, even if the test doesn't require a reference to the fixture. However, there's nothing wrong with specifying an autouse fixture as a function parameter. Doing so simply makes the auto-instantiated fixture available as a local within the test function. To guarantee correct fixture order, declare that the `fake_xenapi` fixture is used by the fixture providing `ansible.module_utils.xenserver`. Modifying `sys.modules`, or making other changes to global state, outside of a test fixture or function will apply those change to all unit tests (everything under `test/units/`) when pytest collects the tests before they are executed. Since we run unit tests with the pytest `--boxed` option, each test is run in a separate Python process after the initial collection is performed. This means that any global state changes made in-process by a test function are discarded at the end of that test function, but all changes made during collection are shared. Imports handled during collection will result in changes to `sys.modules` that will be shared across all tests. This is fine for regular imports. However, the mocked import for `XenAPI` is specific to the tests in `test/units/module_utils/xenserver/`, so it should be restricted to those tests. If another test, such as one for a xenserver module were to also mock `XenAPI` they would conflict.
`self.module.warning` could be used
`'required': False` is the default so you can omit that. Same for any of the following.
it's probably this? ```suggestion :type mutually_exclusive: list[str] or list[list[str]] ```
Well, then they will never really know and think they always have to quote. I don't think it's better to teach them to always quote, and certainly not using double quotes. Besides, you're not being consistent, you're not quoting the task name value and delegate_to.
Catch botocore.exceptions.ClientError instead of Exception here too.
Just noting that this RETURN is incomplete
Let boto3_conn handle region failures - region can be picked up in a number of ways that mean that the `region` variable doesn't get set but the connection is fine.
Delete this line, it's not used either
I could add a commit if you like. Or I'll just make a follow up PR, doesn't matter.
add_group creates and returns a 'sanitized' group name, to avoid warnings you might want to use `self._sanitize_group_name(name)`
@Qalthos exactly, it does nothing under py2, but adds explicit cause under py3. But now that I think about it, it's probably a default behavior anyway.
Tying back in with what I wrote in the ```__init__``` about self.changed, setting self.changed = False here is dangerous. A module might have already run a different method that made a change in state and set self.changed = True. Then the code path in the main module might have accidentally run remove() twice. The second time, self.changed will be set to False, leading to a False report that nothing was changed. Setting self.changed = True on successful removal is a better way to do this. Note, however, that modules will have to be careful. For instance, they may both create and remove() a resource in one module run. In that case, the module probably does not want to return changed due to the resource being removed().
If one sentence is written in two lines, the quotes are required. ð
I would switch the statements, test for dict, test for list, else raise error.
use this instead ``` module.get_bin_path('yum', required=True) ```
its service_facts, not systemd_facts, I don't really want to pollute with states that are nonsensical to other systems
```suggestion - Opaque blob of data which is made available to the EC2 instance. ```
I would propose to give the json paylod in the error message, as it would help for debugging
Please ensure all `descriptions` are full sentences. Capital letters & full stops.
"Only updates an existing macro if set to C(yes)." would be good. Less negation is better :-)
this docstring now wrong
Nitpick - the term `The value` is used twice here with different meanings each time. I suggest changing `...if IE changes the values...` to something like `...if the IE configuration changes...` to resolve the ambiguity.
For integers please: use `type='int` remove the `isdigit` check from `check_params`
Format replacement strings with nothing inside of them, {}, are only available in python-2.7 or better. So you'll need to make sure that all your formats have numbers inside of them. For example, this line would then be: `record_ids = client.get('/domain/zone/{0}/record'.format(domain))`
```suggestion module.fail_json(msg=to_native(e), errno=e[0], reason=to_native(e), **result) ```
No problem. It was pure chance I was here at this time in any case. Have a good evening!
(In order to optionally not make frequent, redundant, probably unnecessary requests to the COPR API)
required=False is the default
```python makedirs_called = 0 def mock_makedirs(path, mode): makedirs_called += 1 expected = os.path.expanduser(os.path.expandvars(am._remote_tmp)) assert path == expected assert mode = 0o700 return ```
brackets in the URL
```suggestion host = find_obj(self.content, [vim.HostSystem], name=esxi_host_name) if host is None: self.module.fail_json(msg="Unable to find host system %s in the given configuration." % esxi_host_name) ```
> Speaking of which, I should submit a PR to add Python 3.5 to tox.ini and .travis.yml #12627.
this line isn't needed
this part feels to me like this should have been a separate PR with separate ISSUE. not a blocker just feels it would be more sterile.
As this is a new module, we only need the top level `version_added`, no need for it per option. ```suggestion ```
Also describe if it deletes the files or not
ansiblemodule already has a .log method, this is redundant.
This change will mean that new targets will not get registered if `purge_targets` is False, which is not what would be expected. We could really use a test suite to catch this kind of thing.
If we make `enabled` and `masked` mutually exclusive, this section of code is unnecessary.
Module are not permitted to uses the requests module, due to unnecessarily adding dependencies to modules. You should utilize the functionality in `ansible.module_utils.urls` instead of requests.
Tripple double quotes (`"""`). No spaces around the sentence. Period in the end of the sentense.
```suggestion - Whether forwarded traffic from the VMs in the remote Virtual Network will be allowed/disallowed. ```
shouldn't the deprecated old `change_hostname_to` and `domainname` be mentioned as well? (i don't know the best protocol for ghost parameters)
Ah, I see it now. yeah, so just change self to be cls to match convention when using `@classmethod` and it should be fine.
Parameters that are not required don't need `required: false`.
Would it be possible to go into some detail, rather than just repeating the configuration options
s/write target file {0}/fetch file to {0}/
Yeah, a list is fine.
lacking parameter validation, user should be notified if the minimal requirements for lookup to work are not met
Also, it seems that you don't strip spaces, so if there will be leading spaces it would not match, for example.
This should have exception handling around it. Once you update to AnsibleAWSModule you can do: ``` except (BotoCoreError, ClientError) as e: module.fail_json_aws(e, msg="Unable to list clusters") ``` and it will use e.response and add the traceback for you.
```suggestion if type is not None: ```
This can be removed
Isn't it missing a whitespace ? Are you sure environ is defined here ? I don't see it. Perhaps this would work too, if you do want OVIRT_URL= to override kwargs['url']: kwargs['url'] = environ.get('OVIRT_URL', kwargs['url']) Example: $ A= python -c 'import os; print os.environ.get("A", "X")' (we get an empty string) If you do not want OVIRT_URL= to override kwargs['url'], then you can use or: kwargs['url'] = os.environ.get('OVIRT_URL') or kwargs['url'] Example: $ A= python -c 'import os; print os.environ.get("A") or "X"' X (we get the value that's at the right of or) Hope this helps
As the `return_timestamps` is reverted, `msg_timestamps` is not needed anymore. lgtm otherwise.
double space between `and` and `self.options.subset`
You can just `return` without `else`.
```suggestion - Use with I(state) C(present) and I(purge) C(true) to specify content paths to be purged. ```
Understood. (I was only looking at the patch, so...)
This is a private function (starts with an underscore) so I'd hope we could move this without having to leave a stub for backwards compatibility. If you want to remove the stub in a separate commit/PR just in case, though, I can live with that.
i would consider moving this to a module_utils/tower as I expect other modules will need to use the same auth
I considered that, but I don't think pytz is a dependency you can count on and in Python 2 you don't have `datetime.timezone.utc`. The following could work, but is rather verbose: ```python try: from datetime import timezone except ImportError: # Python 2 return datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ') else: return datetime.utcnow().replace(tzinfo=timezone.utc).isoformat() ```
Well this would be for 2.4 so maybe that is the better path
It's probably better to loop over the items and check the value before changing, so you can report back if there was a change or not.
(and there's no need to have this var outside or this loop or increment it manually, then)
`import ansible.module_utils.parsing.convert_bool import BOOLEANS` and use that constant
Needs to be unindented so these are always returned
exception classes should be defined after impotrs and constants and before helper functions.
@pascalheraud You can check https://docs.ansible.com/ansible/latest/dev_guide/developing_python_3.html#import-ansible-s-bundled-python-six-library `from ansible.module_utils import six` and then `six.moves.urllib.parse.quote_plus`
Can you please add a `note:` section to say that checkmode isn't supported. Then I think we will be good to merge
This can be removed. If a parameter is required, there is no default.
This should fix the last error that you are getting: ```suggestion type: list elements: str ```
`self.module.warning` could be used
All `descriptions:` should be full sentences, e.g. start with a capital letter, and end with a full stop.
`kubectl` is a valid connection plugin, without looking into the code further I assume that's being used as the transport backend in that inventory plugin. https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/connection/kubectl.py
```suggestion - A list of tags to be remove from the resources. ```
Could be more compactly written as: ``` python try: r = call(['shred', tmp_path]) except OSError as e: r = 1 if r ! = 0: # We could not successfully execute unix shred; therefore, do custom shred. self._shred_file_custom(tmp_path) ```
Okay, so @cyberark-bizdev take out my first example. The last two are what we're shooting for. (The middle one is the same as bcoca's example, just in compact yaml instead of "readable" yaml ;-)
we can probably change it to a list, still this would be the wrong executable in some cases as it does not allow per host config, its also redundant to fallback to /bin/sh as it always is set (default is /bin/sh already). In other cases it will still be a problem, specially when privilege escalation is involved, due to the quoting.
e.message doesn't exist on Python 3 so this may raise an AttributeError
The `bool` is redundant, is it not? IIRC `any` always returns a `bool`
Are you still working on this? I can't find anything like that in the current version.
Add a few more examples of just listing the ports: ```suggestion when: tcp_listen_violations - name: List TCP ports debug: var: ansible_facts.tcp_listen | map(attribute='port') | sort | list - name: List UDP ports debug: var: ansible_facts.udp_listen | map(attribute='port') | sort | list - name: List all ports debug: var: (ansible_facts.tcp_listen + ansible_facts.udp_listen) | map(attribute='port') | unique | sort | list ```
not sure if this is useful
```suggestion - The administrator password for the BIG-IP device. ```
[PEP 8](https://www.python.org/dev/peps/pep-0008/#indentation): Indentation should be 4 spaces instead of 8.
```suggestion - Can be the resource ID of the security group. ```
Hm, given those 15(?) other tests that failed on Python 3 in calls to syslog.syslog(), could we monkey-patch the rest of the tests so this is the only test that actually writes to the real syslog/journal? (EDIT: when I say "the rest of the tests", I mean in test_basic.py.)
ah, nvmd, we overwrite the _task with original_task anyways, need to capture it before that happens or ensure the task_fields are not the original but 'templated results'
I would like to use a more python way: list comprehension and a `to_disk` method to construct the list.
I would also detect if the value is a bool and set it accordingly to `on`/`off`.
SHould have `type: bool` and the default option
Can this use `b_output_path` from line 291? ```suggestion b_output_path, ```
This check is OK.
`You must set C(PUREFA_URL) and C(PUREFA_API) environment variables`
Double quote around Author name.
Absolute paths still can contain `..` in the middle of the path and that would be processed when accessing paths.
Yeah, a list is fine.
Using type `path` is causing the `~/` to be evaluated too early. It ends up resolving to `/root/.ansible/tmp` (the user running ansible-playbook) instead of `/home/ansibletest1/.ansible/tmp` (the become user for the task).
This should probably check if tags is not None first. If the user doesn't specify tags in their play: ``` The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_1M9gC7/ansible_module_ec2_ami.py", line 699, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_1M9gC7/ansible_module_ec2_ami.py", line 692, in main update_image(module, connection, module.params.get('image_id')) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_1M9gC7/ansible_module_ec2_ami.py", line 578, in update_image tags_to_add, tags_to_remove = compare_aws_tags(current_tags, desired_tags, purge_tags=module.params.get('purge_tags')) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_1M9gC7/ansible_modlib.zip/ansible/module_utils/ec2.py", line 757, in compare_aws_tags TypeError: argument of type 'NoneType' is not iterable fatal: [localhost]: FAILED! => { "changed": false, "module_stderr": "Traceback (most recent call last):\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_1M9gC7/ansible_module_ec2_ami.py\", line 699, in <module>\n main()\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_1M9gC7/ansible_module_ec2_ami.py\", line 692, in main\n update_image(module, connection, module.params.get('image_id'))\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_1M9gC7/ansible_module_ec2_ami.py\", line 578, in update_image\n tags_to_add, tags_to_remove = compare_aws_tags(current_tags, desired_tags, purge_tags=module.params.get('purge_tags'))\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_1M9gC7/ansible_modlib.zip/ansible/module_utils/ec2.py\", line 757, in compare_aws_tags\nTypeError: argument of type 'NoneType' is not iterable\n", "module_stdout": "", "msg": "MODULE FAILURE", "rc": 0 } ```
before continuing here, check that fields is actually populated as a list, or try/except the following code
This line is responsible for the python 3.5 syntax error. Change it to the following to fix: ```python print(json.dumps(data)) ```
Since this might be nested-vars, or the user may supply a relative path. To make sure you handle this var well, also use `expanduser` and `expandvars`.
> For example, user_folder is '/DC0/vm' and actual_vm_folder_path for two VMs with same name is '/DC0/vm/finance' and '/DC0/vm/marketing' and user wants VM with '/DC0/vm/finance' path. So there are chances that user might end up in getting wrong VM if we just use user_folder. I think computation of user_desired_path might decrease this chance. How can you only get the VM in '/DC0/vm/finance' if `user_folder` is '/DC0/vm' ? If `user_folder` is `/DC0/vm` we fall into the `user_folder.startswith("%s%s/vm" % (dcpath, user_defined_dc))` condition and [user_desired_path = user_folder](https://github.com/ansible/ansible/pull/33525/files#diff-d5ca044435f1fc628995b038d2e238f7R949). So you get both VM from '/DC0/vm/finance' and '/DC0/vm/marketing'. ################ If you mean to write `/DC0/vm/finance`: If `user_folder` is `/DC0/vm/finance`, we still fall into the `user_folder.startswith("%s%s/vm" % (dcpath, user_defined_dc))` condition and [user_desired_path = user_folder](https://github.com/ansible/ansible/pull/33525/files#diff-d5ca044435f1fc628995b038d2e238f7R949). So using `user_desired_path` or `user_folder` is exactly the sameâ¦ I don't get your example.
It should be a dict, flattened like other AWS Ansible modules. You can use boto3_tag_list_to_ansible_dict for the transformation.
Why remove this test? Is `""` a valid screen name? If yes, there should be a changelog fragment (bugfix since a valid screen name was not allowed by the module).
```suggestion b_path = os.path.expanduser(to_bytes(path, errors='surrogate_or_strict')) ```
also you might want to make this into an option, see ssh connection plugin's `reconnection_retries`
no, it's probably not fixable anyway
Change description to match `enable` and `disable` dvSwitch.
End with a period.
`''.join(self.topic)` could be replaced with `self.topic[0]` (here size of `topic` is always 1). DONE
I would write it as - ``` self.module.params.get('uuid') or self.module.params.get('name') ```
I would let the `scaleway_compute` handles IP assignation to server.
``` tenant = module.params['tenant']` ```
It would be more pythonic to write this as `self.chassis_uri_list = [ch["@odata.id"] for ch in response["data"]]`.
updatedâuptodate (or up_to_date)
This should be 'supported_by': 'community'
```suggestion the machine will be updated. - Use with I(started), I(allocated) or I(restarted) options to change the machine's power state. ```
This can become a function since it no longer makes use of self.
CTR mode doesn't actually require padding, so this is unnecessary. That said, I assume you're staying compatible with existing vault implementations which already do this. It's not a security thing, just a few wasted bytes/CPU cycles.
```suggestion playbooks to use M(dellemc_pmax_addvolume) module." ```
I'm cool with DryRun for this use case - the logic here is pretty simple so catching the exception is plenty sufficient.
Instead of building regexes to match the link parameters and extract them, it would be easier to use `parse_qs` which pulls values from valid query strings. For example: ``` >>> from ansible.module_utils.six.moves.urllib import parse >>> query = parse.parse_qs('/foo/bar?page=6&per_page=20') >>> print(query) {'per_page': ['20'], '/foo/bar?page': ['6']} >>> int(query['per_page'][0]) 20 ``` Or for more advanced parsing, you could use `urlparse` to remove the query string and path to use. ``` >>> parse.urlparse('/foo/bar?page=6&per_page=20') ParseResult(scheme='', netloc='', path='/foo/bar', params='', query='page=6&per_page=20', fragment='') ```
This needs to be C(validate_certs) which is the standardized parameter name.
Omit these lines please.
There is no need to make an api call just for checking that the zone exists. The ovh python package raise a ResourceNotFoundError that can be caught in the next api call to check if the zone exists.
not a blocker to this PR, but this should be moved to config (really should not be a thing in core at all, but setlingling for moving into config).
Please remove `required=False`.
So removed `required=False` and add `type='str' instead. Do this for the others as well.
I would also add to `identity`, `filter`, and `ldap_filter` some form of text saying one of the 3 must be set
there is no need to version params for new modules
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
register it in a playbook and use it later. The module has already parsed the file into a object (self.lines and its records). That avoids the need to refetch and do string parsing to inspect the results.
So the suggestion I added above (copied below) works around this, if we add the following change we don't need to add the `ensure_required_libs` function or make any changes to `ensure_libs`. ```suggestion try: ensure_libs(sslrootcert=module.params.get('ca_cert')) except LibraryError as e: module.fail_json(msg=str(e)) ```
Please rewrite the description what the task is doing in detail. E.g. **Disable the domain firewall profile.**
add ``` datastore = None ```
Instead, please set `self.index = json.load(f)`. The JSON library uses the `.load` function to stream straight from files without needing to `.read()` first. This also avoids pesky encoding issues with Python2/3.
use to_native (module_utils._text) instead of str, it deals with py2/py3 compatiblity
bad place for a typo: s/connecton_timeout/connection_timeout/
I'd avoid such double negation + you can save some indentation here as well: ```suggestion if no_deps: return dependency_map ```
This is wrong. It is too easy. Check-mode in this case does not bring anything to the table. The user might have made mistakes and it has not been tested as it would be for a real run.
I would add here as well some code to set the `result['failed']` according to what the module should do. ``` if action in ['started', 'restarted', 'reloaded']: result['failed'] = result['status']['current_state'] != 'running' elif action == 'stopped': result['failed'] = result['status']['current_state'] != 'stopped' ```
```suggestion - When a value is masked, it must be in Base64 and have a length of at least 8 characters. ```
all the 200s should be 'OK'
This is an invalid yaml. We usually write the description as a list. BTW, there is no need to add the example. if there is ":" in the sentence, the whole line should be quoted. ```yml description: - "XXXXX" ```
After looking at the PR description, it sounds like it'd be saner to use a different variable name. Also, it looks like this could be moved closer to the loop that iterates over these dirs.
I would be consistent and pick one of them. Although, returning after in place modification doesn't add a value, it only makes sense if you will do a deepcopy of the dict and never modify the passed one.
Ah. lambda is prettier though :). maybe we can run pep8 with ignore lambda error.
IMHO this condition is on the wrong place, because the in check mode it seems not to return `changed=True` handled later in the code. As a result, a user may get a changed=False in check mode but a changed=True in live mode. This condition should be right before the actual action(s) happens.
Your PR #52278 needs more `shipit` commands to be merged
Why do we need to force to change powerstate? Seems over protective.
You can remove `, required=False`
I'd rephrase: "Kernel command line parameters (formatted as string) to be used with the kernel specified by `kernel_path` option."
I'm not sure what you check with `if want['vlan']` but it seems wrong without any explanation...
This doesn't seem right to me - you may not need the `catch_extra_error_codes`
You are taking me wrong here. I am just saying that adding additional library will add overhead to people who are using this module and people who will maintain it. I am not saying to port other GitHub modules to use `PyGithub`. One way could be using GitHub REST APIs directly rather than relying on any third party Python modules.
Please remove this. /tmp might not be writable or available.
To be consistent with other modules, can you please change this to: ``` validate_certs: description: - If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates. required: false default: 'yes' ``` And update code & argspec as needed
I'm not a fan of the "I" word because it's quite jargon-y. But I'll yield to consistency for the time being.
Always sort items in a list, if the order is not important.
```suggestion version_added: '2.8' ```
You need to make sure `tf` doesn't write a unicode string. tf.write(u("#!/bin/sh/\necho %s" % quote(self.passphrase)).encode("utf-8")) Ansible may have a utility function to do this.
This method doesn't handle the update/remove, so it's not fully idempotent, but I think we can go with that for start and improve later. If it's OK for High Perf VM.
Rather than bare exception, can we add IndexError as well ? ``` except (KeyError, IndexError) as e: ```
Yes. There are usually many of them, if you don't have a one- or two-node cluster ;-)
As previously discussed on https://github.com/ansible/ansible/pull/20787 I much prefer os.path.isfile That way it won't try to read a directory path.
I wouldn't write a function which was itself a single function call ;-)
the state and status fields are supposed to be generic across init systems, I'm fine with adding optional fields returned when systemd is run, but we should not customize the generic values to systemd specifics.
no, if the variable is set but empty, you should empty out the options
if not handling become methods update the class variable to indicate this
If you don't modify the task args then you don't need to copy() them. However, I think we want to add a ```use``` parameter for the action plugin and we will want to delete that parameter before we pass the args on to the module. So this section would look like: ``` python new_module_args = self._task.args.copy() del new_module_args['use'] [...] result.update(self._execute_module(module_name=module, module_args=new_module_args, task_vars=task_vars, wrap_async=self._task.async_val)) ```
docs say name is required, spec does not
... all networks will be synchronized before modification
Do you have any references for the inline if being discouraged? If you don't like the inline if, then I'd go with the normal if block.
```suggestion - Gitlab access token with API permissions. ```
get_basedir should not be needed, the ansible_search_path should include the correct one
You can safely remove this line.
```suggestion variables = {} ```
Could you please use `AnsibleAWSModule` instead? We didn't have a lot of the aws utils we do now when this was first PRd, it will save having to port it later on. https://docs.ansible.com/ansible/devel/dev_guide/platforms/aws_guidelines.html#creating-new-aws-modules
`for key, value in (doc.get('options', {}) or {}).items():`
I think this would be more readable if you do: ```python org_id = self.get_org_id(org_name) net_id = self.get_net_id(org_name, net_name, data) path = '/organizations/{org_id}/networks/{net_id}'.format(org_id=org_id, net_id=net_id) ``` So using positional arguments where there's no discussion, moving different operations in separate steps, and bring the information together at the very end. The path-string could be coming from somewhere else (if this is something that is being reused, but probably not relevant here).
`check_args()` is a empty function. Is this call required? For other networks platforms `check_args()` is present for legacy reason.
Please change these vars to ansible Host vars rather OS env vars.
How about ```suggestion kv_pairs = [kv_pair.strip() for kv_pair in tags.split(',') if kv_pair.strip()] for kv_pair in kv_pairs: ``` That avoids empty strings showing up in the result, and also allows users to separate with `, ` instead of `,`.
My bad, I forgot that [dict comprehensions were added in Python 2.7](https://www.python.org/dev/peps/pep-0274/). Feel free to ignore my suggestion.
Please use update bolierplate.
I don't believe this should be a function of the `uri` module, but probably implemented in `ansible.module_utils.urls` instead. However, with that being said, we wouldn't be able to use this specific line, as it could cause other issues, in that this would become a global change, and not specific to just a single request. As such, we'd probably want to make use of `sockshandler` instead.
I suggest you use [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move)
```suggestion assert wrap_var(dict(foo=None))['foo'] is None ```
Are these common aliases with maven? Generally with modules we just use `user:` and `password`
we can probably change it to a list, still this would be the wrong executable in some cases as it does not allow per host config, its also redundant to fallback to /bin/sh as it always is set (default is /bin/sh already). In other cases it will still be a problem, specially when privilege escalation is involved, due to the quoting.
@tstoner I am curious why you are raising `TypeError` if capabilities cannot be fetched. Given that the new options added in this PR are not the required options for `nxos_nxapi` module, I don't think we want to fail the module if `device_info` is None. Same for `os_version` and `os_platform`. The module can simply ignore the task and pass when these parameters are used with a warning message if capabilities isn't available instead of failing/raising exception.
Just an idea. Wouldn't you get the same result if you simply have ```suggestion port_ordered = [sorted(d.items()) for d in port[key]] ``` ? `OrderedDict(sorted(a.items())) == OrderedDict(sorted(b.items()))` should be true if and only if `sorted(a.items()) == sorted(b.items())` (for `dict`s `a` and `b`).
register it in a playbook and use it later. The module has already parsed the file into a object (self.lines and its records). That avoids the need to refetch and do string parsing to inspect the results.
yeah, proxying can end up being a lot worse than the original issue, just made the note to make sure we all knew 'this is possible' .. but as you said, we write a LOT of info all the time and during shutdown it gets flushed anyways
From the mail I got I saw this obvious typo "receipient_id". Also now that we are at it, parameters can be indicated using C(parameter). So that line should read: ```yaml - The C(recipient_id) type must be valid for the supplied C(recipient_type). ```
I'd write this as `NTP server IP address or hostname`.
We tend to use snail_case, so all parameters should be snail_case.
I think this logic should be handled by service instead of ansible client side
I think you can get rid of the rstrip('\n') here for the same reason as you got rid of it in _find_bind_mounts() (or alternatively, if rstrip is necessary here, then it's probably still needed in _find_bind_mounts() as well).
Make pep8 happy ```suggestion priv, append_privs, module) ```
also extends `azure_tags`
The other option is to strip the arguments and keep it as a list
not a blocker but there is also a helper for json.dumps https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/basic.py#L792
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific version_added when the options have been added in a newer release.
Please fix: '... if it doesn't exist:'
This could be either a repeat of the `count` input param, in which case it is redundant (like `dest`, below), or it is set to the same value as `packets_tx`, in which case it is completely redundant. In either case, I don't see any reason for this to be included in `RETURN` nor `results`.
This code is pretty incomprehensible, I'd try and avoid map and lambda and use a list/dictionary comprenhension (or a for loop if it's still unreadable)
Another general exception handling that can be removed.
What exceptions are you planning to catch here ? Because we prefer to catch only the exceptions we know can be raised. Blank statements like this one may hide real logic errors under the premise that it was a known issue all along.
I don't think Lightsail allows custom AMIs, at least from what I've seen in the docs and prodding at the console a bit. There is a question of if we should have a default to use the region default key when state=present instead of requiring a user specification, generally the way lightsail does keys is different from the way ec2 does keys though and I'm still familiarizing myself with the differences.
and please add space after `)`
```suggestion A command may be either a string or a list of strings. ```
Python 3 versions are packaged in `python3-libselinux` and `python3-policycoreutils`. But the module needs just `selinux` and `seobject` python modules and version depends on the current interpret version. I don't know how to make it understandable and correct. On lines 267 and 270 I'd probably use module names could be used instead of package names: ```` module.fail_json(msg=missing_required_lib("selinux"), exception=SELINUX_IMP_ERR) module.fail_json(msg=missing_required_lib("seobject"), exception=SELINUX_IMP_ERR) ````
New person will be confused when you refer to `msg`, adding a brief description will help.
http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_general.html#new-module-development There is written: ``` # during the execution of the module, if there is an exception or a # conditional state that effectively causes a failure, run # AnsibleModule.fail_json() to pass in the message and the result if module.params['name'] == 'fail me': module.fail_json(msg='You requested this to fail', **result) ``` AFAIK module should return with `module.exit_json` or `module.fail_json`, not `raise ValueError` for example.
Change description to match `enable` and `disable` dvSwitch.
Wouldn't it make sense if the module does that as well? Also: ```suggestion - To make the DNS record changes effective, you need to run C(update dnsserver) on the ipwcli. ```
Okay, sounds like an issue on Darwin. Let's convert to text on line 579 and then change the strings to u"" strings: ``` python from ansible.module_utils._text import to_bytes, to_native, to_text [...] system = to_text(platform.system(), errors='surrogate_or_strict') [...] if system == u'Linux': [...] elif system == u'FreeBSD': [etc] if system == u"Darwin": ```
You'll need: ``` python retries = sorted(list(retries)) ``` sort() is an inplace sort and returns None.
No need to quote the path, not using double quotes also means you don't need to double up on `\`, e.g. just do `path: C:\Windows\temp`.
```suggestion - "Datacenter to search for given cluster. If not set, we use first cluster we encounter with C(cluster_name)." ```
If you're only going to get `APSCOOKIE_` _or_ `ccsrftoken`, then you can just return `None` if you don't find anything and the existing token will be reused. If you are expecting to have both, then I would just dedent the next line to be outside the for loop, so that the token is always added to the dictionary on every run. Then you should be able to at least remove the manual headers building in `send_request`.
Nowadays we define the authors in a list: ```yaml author: - Trond Hindenes (@trondhindenes) - Peter Mounce (@petemounce) - Pepe Barbe (@elventear) - Adam Keech (@smadam813) - Pierre Templier (@ptemplier) ```
@gundalow Removed the remark. Thanks again.
Don't need to import HAS_BOTO3 now.
Make this a regular function
my intention was to allow this but as a toggle, but not by default
Rather than making these globals, store them as locals and pass them into the functions, or just run `mode.get_bin_bath` within the function. Globals are not worth the future troubleshooting complexity in this case, especially since `RPM_PATH` is the only variable used in two different functions.
As a side effect on this, it should always result in `changed=True` similar to the `shell` and `command` modules.
Wouldn't this create a conflict if someone ran this task twice with the same params, thus resulting in the same name (and a conflict)? Generating the name this way seems good, but can you add a check to make sure there isn't a changeset with that name already? If there is one, then you could return unchanged because the changeset already exists so this task's work is already done.
role_name can be lower case as well. For example, user can provide admin for `Admin` value, then this function will return None.
```suggestion msg='vRouter with interface %s does not exist' % ip ```
Another test that I would move into version specific classes with pytest skipifs
following task -> the following task
```suggestion the original private key back if you created a new one by accident. ```
Note, not a blocker for this backport but a few things to keep in mind: * ````re.compile()```'ing these regexes outside of the loop would be a nice optimization * there may be something that's useful in ```ansible.module_utils.compat.ipaddress``` that would let us not maintain our own regexes for some of the things done here.
Default value not specified in argspec.
add a `mutually_exclusive` section
I don't think you need the `list` here - `for` can iterate over a `set`
With pytest, we usually go for fixtures so that you'd have a separate fixture function patching staff and yielding some object for testing and the test function will be more readable and contain actual testing code with assertions. For example: ```python @pytest.fixture def patched_openvswitch_bridge(monkeypatch): with monkeypatch.context() as mp_ctx: mp_ctx.setattr( openvswitch_bridge, 'map_config_to_obj', { 'bridge': 'test-br2', 'parent': 'test-br', 'vlan': 200, 'fail_mode': None, 'external_ids': None, 'set': None, }, ) # code before "yield" is executed before test function yield openvswitch_bridge # "yield"ed value is what test function receives as an input # code after "yield" is executed after test function # and can be used for cleanup, we don't need this because # it'll be taken care of by the context manager def test_openvswitch_bridge_updates_vlan(self, patched_openvswitch_bridge): ... # patched_openvswitch_bridge is patched inside this test method ```
I would prefer that we stay away from nested functions like this if possible, moving into a scope where it could be tested independent of the `tests` method. We should probably give it a better name too. In `filters.core` we utilize a `unicode_wrap` function, so maybe we could do similarly here. We also use `partial` there instead of creating our own closure, but either way is fine with me. I'd also write tests to verify this functionality.
is_vapp_changed = False
`is` tests identity in python so if statement always produces a change. We need to use `!=` here to compare equality instead of identity.
Same here. ```suggestion self.cron_file = os.path.join('/etc/cron.d', cron_file) self.b_cron_file = os.path.join(b'/etc/cron.d', to_bytes(cron_file, errors='surrogate_or_strict')) ```
(In order to optionally not make frequent, redundant, probably unnecessary requests to the COPR API)
rephrase of 'never used options, now it is recommended to always use options' .. which is 'format neutral', covering both `k=v` and `k: v`
Looking at how this is handled, I wonder if this could be turned into a sequence of transformations. ```python _RST_TRANSFORMATIONS = ( (re.compile(r".. seealso::"), "See website for:"), # seealso directive (re.compile(r".. note::"), "Note:"), # note admonition (re.compile(r":\w+?:`"), "website for `"), # any role (re.compile(r".. \w+?::"), ""), # any directive ) ``` And then just ```python for regex, replacement in cls._RST_TRANSFORMATIONS: t = regex.sub(replacement, t) ``` (below)
We don't need this import of Display since we have it again on line 87.
```suggestion fw_family=dict(type='str'), ```
This also needs bounds checking and (maybe) retries if the ASG isn't yet available.
This doesn't seem right to me - you may not need the `catch_extra_error_codes`
```suggestion description: IP range of the network
If you do `module.get_bin_path('subscription-manager', True)` then `get_bin_path` will call `self.fail_json` directly, do you can delete the lines ``` if not SUBMAN_CMD: module.fail_json(msg="Could not find subscription-manager. Please ensure it is installed.") ```
Please add a `version_added` to this as well.
@tstoner I am curious why you are raising `TypeError` if capabilities cannot be fetched. Given that the new options added in this PR are not the required options for `nxos_nxapi` module, I don't think we want to fail the module if `device_info` is None. Same for `os_version` and `os_platform`. The module can simply ignore the task and pass when these parameters are used with a warning message if capabilities isn't available instead of failing/raising exception.
We should be using `ansible.module_utils._text.to_bytes` instead of this method.
`six` is [bundled with Ansible](http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_python3.html#bundled-six).
This is not a good idea, since `ca_cert` is already a module option. (Due to `url_argument_spec()` above.) Either do ```suggestion feed_ca_cert=dict(aliases=['importer_ssl_ca_cert'']), ``` and make sure that `feed_ca_cert` is set to `ca_cert`'s value if not set, or name the option `ca_cert` and add `feed_ca_cert` and `importer_ssl_ca_cert` as aliases. (Then there's no way to separate these options.)
I would probably go for an immediate default: ```python command = "ps aux" if terms: command = "%s | grep %s" % (command, ' '.join(terms)) ```
It doesn't really work that way, since docker indicates "no healthcheck" by returning `None` (I think), which isn't compatible to what `comparisons` does. I don't understand why this logic (you mean `disable_healthcheck`?) conflicts with `docker`'s original logic? In any way, I think we have to convert the string syntax for `test` to `CMD-SHELL`, otherwise idempotency won't work. That's a good point! (We should also have a test for it.)
```suggestion if type is not None: ```
I think for consistency we should add `.gcp_compute.ya?ml` as an accepted suffix, since that's the actual plugin name.
These two lines are not needed, as there is no reason to filter out the option when delegating.
If you don't want to put the router data in a separate file, I would prefer the following for readability ```python return_value = """ router ospf 1 bfd router ospf 2 """ I know the alignment looks a bit odd but it's easier to read IMO.
Oh, and the new PR will need a separate backport to the stable-2.9 branch too since we branched that on Thursday last week.
Should we add here that the win_copy module is not a very efficient transfer mechanism and if possible using HTTP downloading using *win_get_url* or *win_uri* is preferred.
C/P error, should be `AWS ElastiCache is down`? Same on L450
In python, this is probably better represented as a global dictionary in a separate module (as outlined above). Something like file serviceprovider.py: SPKEYS = { 'ID': 'id', 'NAME': 'name', [..] } ```
```suggestion version_added: '1.9' ```
```suggestion - The VM to use as the source (template). ```
This should be configurable in the module arguments.
If it is not required, you don't have to add `'required: False`.
period at the end of statement.
Making `name` optional is probably a good idea.
No need to split the line.
...The remote host **MUST** support...
This should set self._connected = True (not really needed right now but could have ramifications later) and also use display to print a message. For instance, this is what the docker connect plugin does: ``` def _connect(self, port=None): """ Connect to the container. Nothing to do """ super(Connection, self)._connect() if not self._connected: display.vvv(u"ESTABLISH DOCKER CONNECTION FOR USER: {0}".format( self.actual_user or '?'), host=self._play_context.remote_addr ) self._connected = True ```
This behaviour is really not Ansible like, it seems to indicate if a create or "update" will report a change which is ok but the trouble is that we aren't checking if an update is actually required. So a check mode run will always report a change if the database exists. We should be putting a check above this to verify that if the database exists, then we check the details like `charset`, `collation` to see if they match our parameters. If they do then no update is required, if they don't then we would report a change. This module makes things a bit difficult as I'm not sure you can change the collation and charset after it has been created so we would need to error out or display a warning saying we couldn't update it.
All of these uses of `str` should be switched to `to_bytes(var, errors='surrogate_or_strict')`. `to_bytes` comes from `ansible.module_utils._text`.
You need to check the requirements (PyYAML and GlusterFS > 3.2) there.
note, that `type: <...>` should be added to all params. here `type: str`. It will be enforce by sanity check very soon
```suggestion changed = False if not module.params.get('size', False): module.fail_json(msg='Size is required to update volume') ```
Note: This syntax is python-2.7 or greater. Using .format() with positions is 2.6+: ``` python cmd += ' {0}'.format(uuid) ``` It's more pythonic to create a single string rather than two. for instance: ``` python cmd = '{0} {1}'.format(cmd, uuid) # or cmd = ' '.join((cmd, uuid)) ``` If you need to be compatible with python less than 2.6, you need to avoid .format() altogether. So the .join method or percent formatting: ``` python cmd = '%s %s' % (cmd, uuid) ```
No need to re-add these docs, as the default for any non-specified param is `null`
While you're here could you change it or add a `except botocore.exceptions.ClientError as e:`? (I don't know if it might raise a ValueError, but I see it can definitely can raise a ClientError). In addition if you keep 'except ValueError as e' the module.fail_json below it needs to be left as it was before + exception=traceback.format_exc() since ValueError doesn't have an .response attribute.
From the way the docker modules currently operate, it probably makes sense to add a `AnsibleDockerSwarmClient` to `module_utils/docker_swarm.py`, which extends `AnsibleDockerClient`. Then `docker_swarm`, `docker_swarm_facts`, `docker_node` and `docker_node_facts` could use `AnsibleDockerSwarmClient` instead of using `AnsibleDockerClient` directly.
Can we have a list of packages which can be locked/unlocked? just like yum module does.
Could as well drop this now: ```suggestion if not context and arg == 'state': ``` because the intersection with an empty set is always an empty set which will result in no iterations of that for-loop
I would have write: ``` - try: - task = self.cluster.AddHost_Task(host_connect_spec, as_connected, resource_pool, esxi_license) - success, result = wait_for_task(task) - return success, result - except TaskError as add_task_error: - # This is almost certain to fail the first time. - # In order to get the sslThumbprint we first connect - # get the vim.fault.SSLVerifyFault then grab the sslThumbprint - # from that object. - # - # args is a tuple, selecting the first tuple - ssl_verify_fault = add_task_error.args[0] - host_connect_spec.sslThumbprint = ssl_verify_fault.thumbprint - - task = self.cluster.AddHost_Task(host_connect_spec, as_connected, resource_pool, esxi_license) - success, result = wait_for_task(task) - return success, result + for _ in range(0, 2): + try: + task = self.cluster.AddHost_Task(host_connect_spec, as_connected, resource_pool, esxi_license) + success, result = wait_for_task(task) + return success, result + + except TaskError as task_error_exception: + + task_error = task_error_exception.args[0] + if self.esxi_ssl_thumbprint == '' and isinstance(task_error, vim.fault.SSLVerifyFault): + # User has not specified SSL Thumbprint for ESXi host, + # try to grab it using SSLVerifyFault exception + host_connect_spec.sslThumbprint = task_error.thumbprint + else: + self.module.fail_json(msg="Failed to add host %s to vCenter: %s" % (self.esxi_hostname, task_error.msg)) + + self.module.fail_json(msg="Failed to add host %s to vCenter: %s" % (self.esxi_hostname, task_error.msg)) ``` It seems vim.fault.SSLVerifyFault and other vim.faultâ¦ are always packed in a TaskError.
Might be worth validating that zones is a list rather than a single zone provided as a string.
`a['adress']` could be used instead of `(len(a['address']) > 0)`.
there is 'non AnsibleModule' version in lib/ansible/module_utils/common/process
Not required if one of password or api_key is required. Descriptions for password and api_key should both state. "Exactly one of I(password) or I(api_key) is required."
Please remove this line
I pushed this change in my commit to the code
tempted to say just use check_opts=True and remove syntax check afterward with remove_option (we do this in ansible-inventory).
`zone` is returned, but not zoneid
better to move this line in else part. something like ``` if hasattr(resp, 'data_xml') or hasattr(resp, 'data_ele'): result = resp.data_xml else: result = resp.xml ```
This should probably be `docker.exec_command()`
use ```from ansible.module_utils.vmware import find_obj```
`changed=True` would be better.
I'd use "determine if the file is transferred" - "influence" sounds like the setting could be overridden by another paramreter.
Is there a reason to do deepcopies here (and at the top of a few other methods)? deepcopies are slow and it doesn't look like the data is being modified (for which you might want to have a pristine copy and a modified copy) so you can probably discard the deepcopy to improve your speed.
With the latest change this import is no longer needed: ```suggestion from ansible.module_utils.six import text_type ```
It should be a dict, flattened like other AWS Ansible modules. You can use boto3_tag_list_to_ansible_dict for the transformation.
Unfortunately, pytest3.x broke this syntax. The new syntax is: ``` pytestmark = pytest.skip('skipping as missing required netapp_lib') ```
Ah yes sorry, ~~prefix~~ suffix
rm debugger hook.
You don't need to specify required=False or default=None or type='str' for any of these as it is the default.
I understand what you're trying to do here, but managing both parent as child objects in a single module is going to be problematic IMO. This can only work if your childs are always fully listed (and replaced/updated).
Awesome, thanks for making such a comprehensive post ð
I would default to 'auto' and not require it, let the command fail if it is not present in fstab (like mount does)
Yep. In default configurations, pylint will complain that Exception is caught (exception too broad). It does not complain that the exception is not assigned to a variable. (Our configuration of pylint allows catching Exception. Mostly because it would be extremely time consuming for us to clean that up... Having to evaluate every usage of Exception to see if it is valid or should be replaced with something more targeted)
Is there no existing Python library to manage BLOCKS API logins & resources? Ansible is ok with modules that require an external client (such as the `boto3` client for AWS APIs, or `shade` for OpenStack). If there's an equivalent for PubNub it would be great not to duplicate code here.
That's fair, but you can wrap the file descriptor in a `file` object: https://docs.python.org/2/library/os.html#os.fdopen
I would be consistent and pick one of them. Although, returning after in place modification doesn't add a value, it only makes sense if you will do a deepcopy of the dict and never modify the passed one.
```suggestion module.fail_json(msg="At least one resource ARN must be provided") ```
In this case, you don't need a generator, just ```suggestion return openvswitch_bridge ```
Ah, those just map the shorter names to the longer ones...
The answer to that is in the commit message: "If the code fails in shutil.copy2 or shutil.move this should not be related to issue #13981 since they write to b_tmp_dest_name."
This and other instance attributes should be defined inside `__init__`. Recommendation: - Define as `None` in `__init__` and set in another method. - Set in `__init__` directly or by using the return value of another method. This makes it easier to locate all the instance attributes since they're all listed one place.
use boolean type, "yes" and "no" are supported for boolean types
this can return an exception
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
Similarly, this option is highly `network_cli`-specific, so much that I'm pretty sure `netconf` doesn't even need it. This should go back to `network_cli`
```suggestion short_description: Execute tasks inside a VM via VMware Tools ```
The `â` isn't an ASCII `-`, which is causing CI failures.
This is not a blocker, just a thought on the interface.
Since a lot of people have been relying on broken functionality (filtering without specifying a unique identifier), perhaps we want to add something to the docs, clarifying how modification should work. The examples for modify do use eni_id though, so perhaps we don't want to add to the docs and instead should just let people know when relevant issues are run across that the functionality only ever would have worked due to chance. Not requesting a change for this, just wondering about your thoughts.
Reading the code, this appears to expect a hostname and not a URI.
Don't use except without an exception type. What could be the exceptions here ? It would be better to check if `get_param` returns `None`.
No longer needed.
oh tricky i didn't noticed this typo
Incorrect description; "If remote gateways can be used on this virtual network."
I think it would be more helpful to the user to show them both errors by default rather than hiding one in `-v`. Ideally we could have templating errors take precedence over loop errors and only display the templating error first, but that may not make sense in all situations. If we don't want to display both as was done originally, then I'm fine with the current use of `-v` rather than using debug since debug is information overload for users.
unnecessary import - defaultdict is not used
No worries- we assumed it was an oversight. ;)
The same like above.
`else` is unnecessary here, you could drop it to decent the block. Not sure why this pylint rule is disabled :man_shrugging:
It took me a while to figure how 'name' could be in DOCKER_RESERVED_IMAGE_NAMES. And then it hit me, `docker_container`, and probably `docker_image`, split the `image` parameter on ':', and assume that the first element is 'name', and the second element is a 'tag'. I think it would be preferable to have the code recognize when it receives an ID or partial ID value, and search accordingly. It would be nice if this could work with partial IDs, but this code will not support that.
```suggestion changed = False if not module.params.get('size', False): module.fail_json(msg='Size is required to update volume') ```
```suggestion raise AnsibleError('Invalid setting identifier, "%s" is not a string, it is a %s' % (term, type(term))) ```
Instead of taking a list of `[name, value]`pairs, it'd be nice to accept a map like: ``` values: activerehashing: yes something: no ```
Unless it is an actual value omit the `default`, I see the description already contains what it defaults to in this case.
boto3_conn, ec2_argument_spec, get_aws_connection_info are not needed with AnsibleAWSModule
lets' decide myAsg or myApplicationSecurityGroup
> I feel like a [WARNING] should pop up when you do that When specify a hash string that matches more than one image? We should `fail` immediately, this is users' fault.
```suggestion - Accepts a list of dicts where each dictionary contains two keys, I(path) and I(key_data). ```
Use existing methods from `module_utils/vmware.py`
This should not be moved. They're libraries from the current project so go below the imports for stdlib and third party libraries.
So the default option in Ansible is named validate_certs and it defaults to 'yes'. So I would prefer we do it like this.
```suggestion # just get value from attribute itself as normal ```
boto3_conn, ec2_argument_spec, get_aws_connection_info are not needed with AnsibleAWSModule
Try this: ```python attrs[name] = list(map(to_bytes, value)) ```
Thanks - I've replaced all uses of `filter` with comprehensions.
These parens aren't necessary, please remove them.
This line has trailing whitespace, and is causing the shippable PEP8 checks to fail.
"Post the tags" is not very clear (and the fact it uses POST not interesting). "Perform assign/unassign action" ? More importantly I'd say a few words about what `tags` is.
s/if it specified/if specified/
We should be utilizing `ansible.module.utils.six.string_types` instead of declaring `basestring` in py3.
Your logic from the code above is: if `accept_terms` is `True`, `plan` must be specified. (That can also be modelled by `required_if`.) If you want the logic the other way around, you have to change your code (and you can't use `required_if` AFAIK).
```suggestion target: /tmp/dump.sql ``` Adding an extra variable in the example may mislead the reader on how to use the module
I don't see how this is a simplification, we just give modules the information about the dir the controller would have used, but it doesn't force the module to do anything. While this change will alter the behaviour of existing modules that rely on it.
Elaborate more on case - what happens if state is set to absent. Also, other conditions like if permission does not exists.
Again, suggest rewording this as suggested for win_http_proxy.
```suggestion version_added: '2.8' ```
This is handled by the Azure module utils so isn't needed in the module arg spec
please use here self.param('version').get('base_template')
Please remove this, having this toggle in modules you don't own is going to get annoying...
I realize this was in the original file, but it can be simplified as well: ```suggestion sys.exit(main(sys.argv)) ```
This command expects results in JSON format (the `TABLE_interface` bits below), so needs to have output set to json
In order to improve readability (meaning the change described below isn't required): * `delete_cert`, `import_pkcs12_path`, `import_cert_path` and `import_cert_url` never return (either `exit_json` or ` fail_json` are called) * it's quite disturbing that `changed` isn't set (and it doesn't need to be set) when `delete_cert` is called then i would rather call `module.exit_json(changed=changed)` here (then keep `module.exit_json(changed=False)` unchanged at the end the file.
Should probably check if region exists before this line.
We don't support Server 2008 with this module so this line isn't needed.
ditto about s/no/'no'/
minor, convention is to use `yes` or `no`, and not `True` or `False`, for values in case type: bool
```suggestion (u'1', u'PB', 1125899906842624), (u'1E', 1152921504606846976), (u'1EX', 1152921504606846976), (u'1Z', 1180591620717411303424), (u'1ZB', 1180591620717411303424), (u'1Y', 1208925819614629174706176), (u'1YB', 1208925819614629174706176), ```
Missing full stop
this should use atomic_writes (but given how containers normally mount the file, it should note that for them users might need a toggle to allow 'unsafe=true'
Use whatever fixture names make sense. Personally I'd probably name the fixture `XenAPI` since that's the import it is replacing. Then there's no need to assign `XenAPI = fake_xenapi`. Setting `autouse=True` only loads the fixture for the test automatically. If you want access to that fixture as a local, it still needs to be a function parameter. The benefit to autouse is that it guarantees the import will be mocked, even if the test doesn't require a reference to the fixture. However, there's nothing wrong with specifying an autouse fixture as a function parameter. Doing so simply makes the auto-instantiated fixture available as a local within the test function. To guarantee correct fixture order, declare that the `fake_xenapi` fixture is used by the fixture providing `ansible.module_utils.xenserver`. Modifying `sys.modules`, or making other changes to global state, outside of a test fixture or function will apply those change to all unit tests (everything under `test/units/`) when pytest collects the tests before they are executed. Since we run unit tests with the pytest `--boxed` option, each test is run in a separate Python process after the initial collection is performed. This means that any global state changes made in-process by a test function are discarded at the end of that test function, but all changes made during collection are shared. Imports handled during collection will result in changes to `sys.modules` that will be shared across all tests. This is fine for regular imports. However, the mocked import for `XenAPI` is specific to the tests in `test/units/module_utils/xenserver/`, so it should be restricted to those tests. If another test, such as one for a xenserver module were to also mock `XenAPI` they would conflict.
new_X is a bad pattern, if you have a unique identifier a comparison of account_id supplied vs existing should determine if this changes or not
Please do not quote `%r` as it will automatically add quotes in creating a string representation of a string.
This statement raise an exception when user_data isn't specified by the user: `TypeError: argument of type 'NoneType' is not iterable`.
```suggestion type: int version_added: '2.8' ```
use ```from ansible.module_utils.vmware import get_parent_datacenter```
You don't need to escape EOL. Just have two strings and Python will automatically know that it's in fact one string: this ```python ( "series " "of" " words" ) ``` equals ```python "series of words" ```
Oh, nevermind, you're right about this. I guess the filters are entirely optional and it will just get all of the enis in this case. It could accidentally work (if you have only a single network interface) if you don't add this.
Is there precisely one time you can specify this? It sounds to me like this should be allowed to repeat multiple times. So this should be a `list`. Or maybe even better a `dict`, so people can specify things like ``` blkio_weight_device: /dev/sda: 100 /dev/sdb: 200 ```
Returning "magic" status variables, which need checking is required if you write in `C`, but Python has better mechanisms for communicating errors. In Python this is not a good API. Please raise exceptions and do proper processing with try/except.
```suggestion - name: Change login times for user ```
this could return here? Then the next stanza doesn't need the extra indent level
This needs to be a string: `"2.3"`
I think instead of comparing chunks like this, it might be better to sort the lists of policies first, following a heirarchy like: - SID - Effect - JSON-sort-key-dumped Action
Can be `except ImportError:`
Use `https` instead of `http`. Yes, the site currently redirects back to the HTTP version, but that should eventually be fixed.
If for some reason you want to be able to enable without installing, you could add a flag which for `enable`/`disable` fails instead of installing (if the plugin doesn't exist). But the default behavior should be "install if not there, then make sure you have the correct state".
Drop the extra "Mac" here.
we try to use 'state' instead of action, as ti keeps with the declarative voice of Ansible vs an imperative approach from programming languages.
All of these uses of `str` should be switched to `to_bytes(var, errors='surrogate_or_strict')`. `to_bytes` comes from `ansible.module_utils._text`.
`state` argument is probably missing for this module.
Not sure what "This one go down into the class tree" means. I know it's from the original method, but see if you can improve this language so it's more clear.
This also needs bounds checking and (maybe) retries if the ASG isn't yet available.
This is handled by the Azure module utils so isn't needed in the module arg spec
Right, I personally use and prefer: ```suggestion skydive_meta: >- ``` (which also trims spaces)
Is there the potential that the response could be 200, but the JSON not include these keys? Maybe they should be guarded with try/except to avoid exceptions.
we probably want to move this 'adhoc list' into constants.py anyways
profile_name is mispelled (and there is a missing quote after profile_name as the tests suggest). No need for two spaces after the full stop.
```suggestion re.compile(br'[\r\n]?<.+>(?:\s*)$'), ``` And so on for all the entries of both `terminal_stdout_re` and `terminal_stderr_re`.
Doing this inline is OK for beta- it makes the feature function, but it's a performance problem. Post-beta, we'll want to move most of this to an intermediate lazy indexing process during playbook parsing when a module_defaults clause references a group, where we'd build that global "sieve" I was talking about for O:1 lookup. At that point, we can probably get rid of the transformation in the collection metadata canonicalization phase entirely and just store it plain.
I think for consistency we should add `.gcp_compute.ya?ml` as an accepted suffix, since that's the actual plugin name.
Can you add: ``` type: path ```
`_connect` already does nothing if `_connected` is False. It might _look_ weird, but you can call `_connect()` without checking and the right thing will happen.
there is no need to version params for new modules
This can just be ``` if module.params.get('version') is not None: return str(module.params['version']) elif module.params['alias']: return str(module.params['alias']) ``` And that would be functionally equivalent.
Ah ok. Yeah, after I posted, I was like "Oh wait this may just be a version thing"
I would switch the statements, test for dict, test for list, else raise error.
Required is False by-default, so no need to describe explicitly in docs.
remove added space
This can become a function since it no longer makes use of self.
Rather than using separate variables, you can accomplish this in one line: `result = json.loads(content.decode('utf-8'))`
How is this required if it can also be specified by the environment variable? Compare to openshift plugin via `ansible-doc -t inventory tower` ``` api_key: description: - Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable. ```
url is not requried according the arg_spec
You don't need to state default=None as this is the default value.
`, no_log=True` here please
I would suggest to set `type='int' for vlan.
comma-separated should not bee needed, just make flags a type=list in argspec, it will accept both actual lists and comma separated strings
oh, that was a misunderstanding. I didn't want to change the default, I just wanted to suggest you choose the python boolean `False` instead of string 'no'. Sorry for the confusion.
#45989 has a response on it. The preferred way is to *not* advance the date or add a range.
The other option is to strip the arguments and keep it as a list
community.general also contains some of the modules of the `k8s` module defaults group (the `kubevirt` modules), and some modules of the `ovirt` module defaults group (the deprecated `_facts` modules).
It would be better to check the error code. You can use `if e.response['Error']['Code'] == "NoSuchLifecycleConfiguration":` Caveat: Only ClientError has an e.response, so you will need to break up the exception handling: ``` except ClientError as e: # check e.response['Error']['Code'] # else call module.fail_json_aws except BotoCoreError as e: # call module.fail_json_aws ```
host_storage.type == otypes.StorageType.FCP
The current behavior is: * if the user did not specify `env` (i.e. `self.env is None`), don't compare. * if the user did specify `env`, compare user's `env` to the service's `env`. * if the service's `env` is empty, treat it as `[]`: this simply means that no env variables have been set for the service. So this does not ignore empty lists, but treats them correctly. (What it doesn't do is consider order - you're totally correct on that one.)
```suggestion - name: Replace after the expression till the end of the file (requires Ansible >= 2.4) ```
I don't think the `lambda` is necessary here. You should be able to set [`return_value`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value) instead.
This should be ``` 'supported_by': 'community' ```
```suggestion pass # Handled by AnsibleAWSModule ```
Actually, even more than +1 to changing this to packages because this is in the error messages which we return to the user, not just about variable naming. Everyone will understand what packages means in this context but sysadmins who just need to translate a script to setup the production environment their dev team gave them won't understand "distribution".
```suggestion def _post_request(self): ```
boto3 import failure is handled by AnsibleAWSModule. ``` try: from botocore.exceptions import BotoCoreError, ClientError except ImportError: pass # Handled by AnsibleAWSModule ```
Full stop, rather than comma at the end.
If it is not required, you don't have to add `required: false`. This is implicit (and makes it easier to see what is required).
This inline doc formatting is odd to me. Are you trying to do sphinx format maybe? ``` :param binary: ... :param subsystem: ... :param other_args: ... ```
better to move this line in else part. something like ``` if hasattr(resp, 'data_xml') or hasattr(resp, 'data_ele'): result = resp.data_xml else: result = resp.xml ```
I don't really get this, why not just do. ```suggestion auth_str = "Signature" ```
You have identical code on lines 159-163, 193-197, 228-232... Move it into a function.
No need to duplicate these lines of code- just conditionally assign a local `virtual_network_resource_group` as `self.resource_group` or `self.virtual_network_resource_group` as appropriate and use it below the conditional.
So I'd change this description here to required when I(state=present) or something.
I don't think the data belongs in constants.py. Using Facts.PKG_MGRS was an attempt to make a single canonical source for the data. We should probably derive this from ```ansible.module_utils.facts.system.pkg_mgr.PKG_MGRS``` now. Tangent: Looking at this now, I realize that when I coded this, I was overly optimistic about the data being usable in this way. Not everything in C.PKG_MGR_MODULES is actually a module. OTOH, it's not a big problem. We just add a few more dictionary keys that map to other Lock() objects. (this is a, preexisting problem, doesn't need to be solved)
```suggestion module.fail_json(msg='Unable to find the specified virtual machine : %s' % (module.params.get('uuid') or module.params.get('name'))) ```
missing import of get_exception()
we should also return if we both delegate executions and delegate_facts
If a parameter is not required, you do not have to add `required: false` as that is implicit. Is is easier to find what is required if these are not listed.
default will be 'None' which is 'falsey', that should be good enough and even allow for smarter logic when it was 'unset'
Putting this under a conditional makes it undefined under the opposite condition.
You can omit `type` and `default` in the docs for these options.
Actually it needs to be `AttributeError` to keep everything happy (which the import machinery will turn into an `ImportError` if it was sourced by an import)
This supports more than just URLs, I would add more points talking about what it actually supports.
`memlimit` and `memswaplimit`: allowed units could be mentioned.
`AclArgs.argument_spec` is returning `None`, which is causing `validate-modules` to stack trace. There's probably a bug in that class.
Sort alphabetically, add defaults before choices. ```suggestion state=dict(type='str', default='present', choices=['absent', 'present', 'query']), ```
```suggestion type: str required: True ```
The docs state that the hard limit is derived from the soft limit, so we should be able to simplify this: ```suggestion options.extend(['--ulimit', 'nofile=%s' % MAX_NUM_OPEN_FILES]) ```
Ah ok. Yeah, after I posted, I was like "Oh wait this may just be a version thing"
Are we doing singleton `__new__`/`__call__` magic internally on some of the callback plugin types? Seems like this would never be `False` otherwise...
Sorry for the late update, just spotted this (caught me out somewhere else) [fail_json_aws is defined](https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/aws/core.py#L191) as `fail_json_aws(self, exception, msg=None):` You can simplify this to ``` module.fail_json_aws(e, msg="Unable to delete user {0}".format(user_name)) ``` Probably worth swapping out most of the fail_json calls for similar fail_json_aws calls too.
Can be replaced with https://github.com/ansible/ansible/blob/a3390b63fe317eb2fea5d78fb99c8a5e8fc8eaf3/lib/ansible/modules/cloud/vmware/vmware_host_ntp.py#L93
Could you create a function here as well
no, nope, don't do this, a 'do' option is not something we would accept if you want to add a persistent=no|yes option to save or not, that would be acceptable
Seems to be unreachable code to me.
`get_config` is not implemented in the cliconf plugin. This function is not used and will only ever return `"None"` if tried.
I don't like the `: ` here
This should be configurable in the module arguments.
Move this up to before line 2641 so that the diff is returned in check mode.
HAS_BOTO3 doesn't need to be imported since AnsibleAWSModule checks it.
Removing these lines will re-break: https://github.com/ansible/ansible/issues/24169
another case where it functions properly as-is, but an explicit `else: return None` is probably apropos just in case.
Little :bug: : In **check** mode, the `keycloak_realm` always returns `result['changed']: True` You need to add something like `result['changed'] = (before_realm != updated_realm)` here...
Ok, so long descriptions are not a good idea. Best practice is to do: - First line is a short description of what the parameter is - Subsequent lines for additional information on behaviour, or what different possible values mean
note, the spelling of this word is: vacuumed. Probably should change it everywhere.
basic is now a real import, since ansiballz were introduced
`short_description: Manage VLANs on VyOS devices`
It's not a big deal either way, but since import sanity actually has to run on 2.x, it'd be *nice* if the type hint support was getting exercised there as well. Honestly I don't have strong feelings either way- I'm happy to merge as-is and we can go fix it and turn on remote-side stuff later (or not), or we can wait for Matt C to be back late next week and see what he says. There are also a couple other ways to fix this for 2.x (but a bit gnarlier at the import sites). I suspect that having the blanket ignores present for 2.x's benefit could mask potential problems or missing typeshed stuff in 3.x, so we *might* want to look at the fully-inline options if/when we light this up for 2.x.
you can avoid the try/except if you just test `response_data`: ``` if not response_data.get('value'): raise ConnectionE.... ```
This should be `module.fail_json(...`, not an Exception
and if possible please: `Destination %s is not writable` (the word `is` is missing)
Yes. We'll probably need to consider redesigning defaults separately. Out of scope now.
Another (and possibly cleaner) way to do this is to use `pytest-mock`: ```python class SpiedOnTarget: @staticmethod def do_a_thing(): return None def test_empty_retry_iterator(mocker): decorate_with_no_retries = retry_with_delays_and_condition(backoff_iterator=[]) spyable = mocker.spy(SpiedOnTarget, do_a_thing) invoke_retriable = decorate_with_no_retries(SpiedOnTarget.do_a_thing) invoke_retriable() assert spyable.call_count == 0 ```
```suggestion except Exception as err: ```
Nit: `(object)` is unnecessary
Oh! That's actually quite scary. Could people unexpectedly clobber their own variables through ansible_facts? I'm actually much more worried about ansible_facts than I was before - I really don't think it's clear that if you use a module, variables will be set whether you like it or not. I prefer explicit use of `register`.
Typo in `module_utils`.
compare_aws_tags returns the tags to add and the tags to remove. The tags to remove are in the format of a list of keys. You could call that once in main rather than handle it in each function (you'll need to pass True as the last argument to compare_aws_tags, so it returns the list to remove if state is absent).
```suggestion type: str required: True ```
Please modify this to `elif delta.get('peer-link') and not existing.get('peer-link'):`
I thought the module was older :)
Please don't add any aliases except for backward compatibility. We don't want to offer more choice than necessary.
i mean `display.warning('file %s was empty and had no tasks to include' % include_file)`
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Remove extra space: `inv = {'all': []}`
I'd rephrase: "Kernel command line parameters (formatted as string) to be used with the kernel specified by `kernel_path` option."
```suggestion type: int version_added: '2.8' ```
No need to quote.
We try and wrap the smallest amount of code possible in a try/except. Our preference would be to only wrap the `_run` and `exec_command` lines in try/except. Once this is done, we'll need to review again, but overall this approach looks correct.
```suggestion - Exactly one of I(name) or I(group_id) must be provided. ```
This import is unnecessary.
```suggestion - Requires API version >= 1.30 ```
Don't return the value as part of `ansible_facts`, this should be reserved for facts about the remote host (executing the module). We are getting facts on another resource that's not necessarily related to the executing host. Because these aren't stored as part of the facts we can shorten the name of the key. This is because there is no need to let them know this is Azure VMs, they already know because they ran an Azure module and registered the result. I would personally use `vms` as the key but up to you if you want to use another name. tldr: just do ``` self.results = dict( changed=False, vms=[] ```
> wirte write
When required is false, it can be left out (since it is the default).
```suggestion class VMwareExportVmOvf(PyVmomi): ```
get_basedir should not be needed, the ansible_search_path should include the correct one
I would prefer 'true', actually C(true).
```suggestion if ci: ```
period at the end of statement.
period at the end of statement.
<nod> I'd be happy to see fixing it everywhere added here if you want but don't demand it :-)
according code, it is not required.
No, maybe @mscherer is talking about `copies`. Do ``` copies=dict(default=1, type='int') ``` rather than ``` copies=dict(default='1') ```
So, this doesn't verify anymore that user is set, unlike the previous PR, I think that should be corrected.
Do not use print statement. All module output is supposed to be returned as JSON.
Sorry it's now 2.10
Remove default from `description:`
The CamelCase exception .response attribute is particular to boto3's ClientError. IOError doesn't have .response so you can remove the `**camel_dict_to_snake_dict(e.response)` bit of this.
`module_utils.postgres.HAS_PSYCOPG2` could be used here.
```suggestion - Note that to use dedicated tenancy you MUST specify a I(vpc_subnet_id) as well. ```
Include PEP 484 type hints to match the changes and remove the old PyCharm type hints below. ```suggestion def __init__(self, running, # type: bool hostname=None, # type: t.Optional[str] port=None, # type: t.Optional[int] username=None, # type: t.Optional[str] password=None, # type: t.Optional[str] ): # type: (...) -> None ```
The the formatting argument is single value, it doesn't have to be in braces: ``` cmd += " --format=%s" % p["format"] ``` It improves the readability slightly. The same should apply across the whole code.
Apparently, Python 2 does not have a `TimeoutError`
You may try
Create address service object on PanOS devices This may need updating on existing modules
osx_say is still there as a symlink, unsure if this is the correct solution as this will be the case with any aliased module.
```suggestion - Status of the primary location of the storage account. Possible values are C(available) or C(unavailable). ```
Another new addition is a bunch of *_config methods raising NotImplementedError if not overriden in the subclass. Which is to say, `replace_config()` is also unnecessary here
I would make present the default
`inspect_service()` returns a `NotFound` exception if it cannot find the service ([CI error](https://app.shippable.com/github/ansible/ansible/runs/108392/51/tests)). Check out module_utils/docker/common.py, it catches that in a few cases I think.
This looks more like boto3 exception handling than boto - I'm pretty sure e.message is just a string, so passing it through camel_dict_to_snake_dict seems pointless.
Just a suggestion. We can rely on the GuestID here to set the default value: If the GuestId starts with "win" -> PowerShell, otherwise, /bin/sh.
Don't do this. The old way is much more pythonic. And it's much harder to see *your* changes as a result
`if filters:` should be enough if you are checking for empty dict
Please add `, no_log=True`
This looks needlessly generic. why not just do: ``` python if op == 'get_password': get_password([...]) elif op == 'create_host': create_host([..]) ``` If you think you're going to have a lot of operations, you can have a lookup table: ``` OPERATIONS = {'get_password': get_password, 'create_host': create_host} method = OPERATIONS[op]([...]) ``` but for just a few operations I'm not sure I would do that... it obscures what the code is doing in any given situation to code it like that.
If you use a catchall exception handler like this then you should also provide the traceback like this: ``` python import traceback from ansible.module_utils._text import to_native [...] module.fail_json(msg='Unanticipated error running atomic: %s' % to_native(e), exception=traceback.format_exc()) ```
`Check the configuration files` seems vague, I propose: `Check inventory file and vultr configuration files`.
Unfortunately, shlex.split() needs a bit of code to make it compatible with both python-2.6 and python3.x On python-2.6, it only works on byte strings. In python3.x it only works with text strings. So you have to test for python version and then convert appropriately. Code like the following is what I use: ``` python from ansible.compat import six from ansible.module_utils._text import to_bytes, to_text [...] nspawn_args = self._play_context.nspawn_args if six.PY2: nspawn_args = shlex.split(to_bytes(nspawn_args, errors='surrogate_or_strict')) else: nspawn_args = shlex.split(to_text(nspawn_args, errors='surrogate_or_strict'))
Do you want the same example for all modules? Normally we don't put any examples in `docs_fragment`
This one *might* not be redundant, if it's possible to make changes that will cause the CDN endpoint hostname to change...
```suggestion - name: Update all filesets to latest level from lpp_source lppsource_aix6109-06 ```
As long as the schema validation will report the issue, it should be fine to ignore the error.
We are beyond 2.7 development cycle, we need to update this to 2.8 as it is current development cycle.
This might shadow built-in `format`
```suggestion - When set to true, pool member FQDNs are instead resolved on service engines in this cloud. ```
`"Allowed values: 1, 2, 3, ''."`
I don't think we can just remove this now that it has been in a release. We'll have to deprecate it, potentially by still accept it but warn when it is given.
`default=False` (same for others)
This isn't valid yaml ` : `
While this works, I think the list version is better because it is easier to extend.
To apply the side effect, use this: ```suggestion mocker.patch('ansible.module_utils.network.meraki.meraki.fetch_url', side_effect=mocked_fetch_url) ``` You'll also need to update `mocked_fetch_url` to accept args, like: ```python def mocked_fetch_url(*args, **kwargs): ```
Good point. TBH, I have no idea why module_utils/docker/common.py does this replacement Â­â maybe it once was necessary, but isn't anymore. Or maybe it was never necessary...
Use standard boto3 exception handling: - https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-2 I've just noticed there's a missing `c` at the end of `traceback.format_exc()`, so just be careful there :) - I've added #23168 to fix that
Do you support IPv6, if not then this should say IPv4 address.
Typo in the help message
I think `if props is not None` is more conventional :smile:
It is okay for me
space looks unnecessary
problem with original, but still `str` is not portable, use `to_text`.
`else` is unnecessary here, you could drop it to decent the block. Not sure why this pylint rule is disabled :man_shrugging:
```suggestion 'HostSystem', 'DistributedVirtualSwitch', ```
This will collide with #61522. Also, you should use a similar approach as in there, i.e. don't do an `if` with two copies of `self._run_command()`, but collect the options in a list and then finally call `self._run_command()`.
```suggestion - The VM to use as the source (template). ```
Please do not quote `%r` as it will automatically add quotes in creating a string representation of a string.
+ type: str
its not a question of slow, but 'blocking' i.e accessing a bad NFS mount, that puts the process in 'B' status for the kernel and does not allow interruption.
no, if the variable is set but empty, you should empty out the options
Generally we don't treat usernames as secrets, so no need to mask
```suggestion - content library id for which details needs to be fetched. ```
Right, in this case the connection vars are actually `client_id` and `client_secret`, for those we picked standard names, like in `typetalk` or `azure` modules. Using those connection variables, you can modify repositories belonging to any `username` you have access to, be it a team or a user.
```suggestion module.deprecate("Alias \'{aliase}\' is deprecated".format(aliase=aliase), "2.10") ```
Spurious `else:` Breaking the tests.
`OrderedDict` is not available in Python 2.6, which is why CI tests are failing.
Turns out it was in commit d5f20e6b2163b7bc74f5855f1da58cabd30edcbd that DISPLAY_SKIPPED_HOSTS was added. At that time, it was the only env var in lib/ansible/constants.py to NOT start with `ANSIBLE_`
What is the purpose to sorting this? Forgive me if I'm being obtuse, I'm just trying to understand what is happening here, and this step is a little unclear.
This information is used by Ansibullbot so list should be in format "name (@<github_handle>)"
If there's no sample, please remove that line.
This protests if I only specify TargetGroupArn and only uses TargetGroupName (to then get the ARN).
If it is not required, you don't have to add `required: false`. This is implicit (and makes it easier to see what is required).
At some point, this will probably be locally cached, as it's done in the script https://github.com/ansible/ansible/blob/4311990c3312b23e87d26c86ebca394501aecd4a/lib/ansible/plugins/inventory/foreman.py#L251 but that intersects the development of reports, https://github.com/ansible/ansible/pull/62438, so it makes sense that's not done right now.
How about using `LooseVersion` from `distutils.version`? It usually handles version numbers pretty well. (Grep for `LooseVersion` in the modules directory to see plenty of examples.)
ok, well argued.
Just because a software is installed it does not make it the service manager, i have runnit and daemontools and encore-6 installed, none of them are 'THE' service manager. This is why checking proc 1 is important, also that only resolves the 'general service manager' which is what this fact tries to provide. If the `/proc/1/comm` path is unreadable we either need to find alternate way of figuring out the command (ps?) or return N/A or None as we failed to determine the 'real' manager.
Ok, not sure why this one is still open.
BTW, if `secondaryip` might be missing, replace `nic['secondaryip']` with `nic.get('secondaryip', ())`
It'd be cleaner to have only kwargs conditional: ```suggestion optional_kwargs = {'ExtraArgs': {'VersionId': version}} if version else {} s3.download_file(bucket, obj, dest, **optional_kwargs) ```
@goneri [`vmware_guest_custom_attributes`](https://github.com/ansible/ansible/blob/14ab205ea26b99e4a33a092dedd2f5d6ad1ae7c9/lib/ansible/modules/cloud/vmware/vmware_guest_custom_attributes.py#L142) and [`vmware_guest_custom_attribute_defs`](https://github.com/ansible/ansible/blob/14ab205ea26b99e4a33a092dedd2f5d6ad1ae7c9/lib/ansible/modules/cloud/vmware/vmware_guest_custom_attribute_defs.py#L94) has the same code, so it would be great to fix those as well. I am OK with any implementation.
current_encryption will only exist if `hasattr(s3_client, "get_bucket_encryption")` is True. You could add an `else` on line 267 to default the value.
``` tenant = module.params['tenant']` ```
This is not a blocker, just a thought on the interface.
from ansible.module_utils.vmware import get_parent_datacenter
Use `C` formatting function for the sample list.
azure-mgmt-containerinstance 0.3.0 is out, `models` is on the operation group. https://pypi.python.org/pypi/azure-mgmt-containerinstance/0.3.0 This is a new Api version, but I was able to record the tests I have without changing any code, so should be fine.
You are not returning this.
class/objects should validate their FAs when validated, we should generalize this and not make loop_control custom, that opens up having other keywords expand as 'class/object' entries w/o having to repeat custom validation for each
just for being consistent with other dicts in the module
Also, this was added for a specific reason which made the module fail for some users, so removing it will also make the module non-functional for those users. Another reason why this is a NO-GO.
eliminate intermediate list ```suggestion new_versions = set(v for v in self.versions if self._meets_requirements(v, requirement)) ```
not exactly what i was asking, but good enough
Did you try using `jxmlease` for dict to xml conversion? As it is already used in other modules it makes sense to reuse it. ``` from jxmlease.dictnode import XMLDictNode XMLDictNode({'unlock': {'target': {'candidate': None}}}).emit_xml() ```
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific version_added when the options have been added in a newer release.
Like above, I think this should be `userid, name, password, group, email`
I think this should be using mock.patch? iirc, this can leave ansible.module_utils.facts.system.pkg_mgr monkeypatched to be a mock for the rest of the tests.
```suggestion - Whether to automatically try to install Python apt or not, if it is not already installed. ```
The change you are making here is allowing `-` to be returned. We can replace `-` with `_` with what we control, but we _cannot_ replace `_` with `-` after the plugin has already sanitized them - which is the current state of `devel`. This toggle does not replicate the ec2.py behavior, because that replaced dashes inconsistently. The simple explanation of the functionality of _this_ toggle is "dashes are not replaced". For compatibility, the user is on their own. The reason this is related to compatibility is that it's theoretically impossible to have compatibility until we get something in `devel` that does not replace the dashes.
same here for arg bools vs strings- this needn't exist
Could probably get rid of the surplus required=False entries I seem to have missed as well
```suggestion return to_text(v.ip) ```
Why is self._play_context updated instead of the passed in play_context? (where does self._play_context come from? I don't see it set/defined anywhere)
Hi, That can be done in a follow up Pull Request when you have time. Thanks again for for help module.
Ah thanks, I checked the implementation again, it verifies this here: https://github.com/ansible/ansible/blob/f2dccb90e893df30c2b8bfc925dba80f6ceed6a7/lib/ansible/module_utils/basic.py#L1376
Have you tried ```suggestion monkeypatch.setattr(datetime.datetime, 'now', lambda: TIMESTAMP) ```
But since Python 2 doesn't support the `default` keyword argument, here's a cross-compatible shim for you: ```suggestion try: return max(v for v in self.versions if v != '*', key=LooseVersion) except ValueError: # ValueError: max() arg is an empty sequence return '*' ```
Make this a proper YAML list: ```yaml author: - Joseph Callen (@jcpowermac) ```
I have submitted a couple of modules with the new approach that takes care of check-mode. I am waiting to hear back from @schunduri that this approach is acceptable before continuing to enhance other modules being developed.
Please add `type: bool`
You also need to add the choices in the `argument_spec`.
AFAIK this test is wrong. The previous version had `until: server.ssh_fingerprints`. The API always returns the ssh_fingerprints key, but until the fingerprints are available the value is `null`. So the new condition is always true even if the fingerprints are not yet available. If you are concerned that the key might not be available (this should never happen) you might want to write it as `until: server.ssh_fingerprints is defined and server.ssh_fingerprints`.
I am not clear as to why `before` `hostname` and `vmnic` are required, whatever the input parameters can be obtained from `module.params`
Again, path concatenation is not something that would be used much when dealing with Redfish. And in this particular case, we may get invalid path from the concatenation, since `self.manager_uri` can have a trailing `/` (and on most systems I encountered, this is actually true).
use to_text , as that is more portable and does not make encoding assumptions to convert to unicode strings
could be just `if module.params['dns_domain'] is not None:`
Sort alphabetically, add defaults before choices. ```suggestion state=dict(type='str', default='present', choices=['absent', 'present', 'query']), ```
can delete this line
Phantom Module Syndrome . . . that explains it. Thanks @bcoca.
Examples should be in multi-line with `key: value`
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` mutually_exclusive required_together required_one_of require_if ```
This can also be an ARN, right? In which case the length can be up to 140 characters.
Isn't `raise` missing there ? Calls to `str` are useless.
missing default value
Format replacement strings with nothing inside of them, {}, are only available in python-2.7 or better. So you'll need to make sure that all your formats have numbers inside of them. For example, this line would then be: `record_ids = client.get('/domain/zone/{0}/record'.format(domain))`
I am not sure if you have anything presentable in the result with `check mode` here. Here is a brief example on how `check mode` is perceived: If check_mode is set, and say a module is configuring IP address on an interface, the module would show the output of actual task performed minus the final `commit` operation that brings the task in force.
`short_description: Manage VLANs on VyOS devices`
The same like above.
needs to be a string, "2.7" otherwise it will be used as a float and not fare well in comparissions
```suggestion - Exactly one of I(name) or I(group_id) must be provided. ```
`check_rc` is false by default, no need to pass.
OK, if we are being consistent with something else that makes sense. I personally find putting the message in quotes can be useful for checking for trailing whitespace, , as well as making the message stand out more.
> Well, as I state in PR description, version in trunk practically disables ec2.py cache when using python 3. The idea was to replaces `hash()` call with any hashing function that gives stable results between script runs. Anything from hashlib module will do, `md5` does not have any advantage. One important note: `md5` will not be available on some systems (such as FIPS compliant systems). It's probably better to use `sha256` (as `sha1` could also be removed). > hashlib functions require byte string as input. Python 2 and 3 differ in what is stored in `__file__` variable: python 2 has simple string and in python 3 all strings are unicode. You could do ```.py from ansible.module_utils._text import to_bytes ``` and then ```.py cache_name += '-' + hashlib.sha256(to_bytes(__file__)).hexdigest()[:6] ``` This will work for both Python 2 and Python 3.
Okay, so alancoding says that this could throw an error that it can't figure out which organization you meant if there is more than one organization. Perhaps what we need here is: ``` python if organization is not None: try: organization = organization_res.get([....] ```
No need for quotes here.
So removed `required=False` and add `type='str' instead. Do this for the others as well.
LGTM To simplify this more, you could remove line 244 and do: `for container in module.params.get('containers', []):` You could do that below as well: `for environment in container.get('environment', []):`
or entirely omit `else:` since it would fail in case of `if` part.
You can use [`env_fallback`](https://github.com/ansible/ansible/blob/8f41270a010c00d058c70bdccdc611df8b454139/lib/ansible/module_utils/basic.py#L726)
@logan2211 you are incorreclty assuming that this is a toggle for each plugin's validation, it is not, it is for the global validation. Each inventory plugin is free to add it's own validation on top, most do and it is not controlled by that toggle. This PR alters the behaviour of the plugin which was always meant to filter the invalid names, the plugin itself never allowed - in group names.
Now that there are two lines, "it" is a bit unclear. I'd change this to "Setting C(default) to C(yes) causes an error if the path is a file."
This code is pretty incomprehensible, I'd try and avoid map and lambda and use a list/dictionary comprenhension (or a for loop if it's still unreadable)
I'm not sure you need the `ctl_exist` variable.
```suggestion version_added: "2.10" ``` The current devel version is 2.10, so I think `version_added` is `2.10`. https://github.com/ansible/ansible/blob/devel/lib/ansible/release.py
If that's too much of a headache, even just removing the accidental line would be good.
please add the httplib in requirements
I propose: `expect = disk['size'].rstrip('tgmkb')` It allow use to fail (later) if the user try to use something like '1gb500mb'.
Please add spaces around the equal sign.
Sorry, i was unclear, I didn't mean just this line, meant the vars copy/update block . Revisiting this line, I would actually put outside loop, after it ends. Also the existing `variables.copy()` will bypass your efforts as 'container types' will copy by ref, making modifications persist across not only invocations but in returned vars. see deepcopy or deepish_copy.
Not sure what exceptions could happen, but it may be easier for the end-user to debug if the exception is being reported to. ```python except: e = get_exception() module.fail_json(msg='Error connecting device. %s' % e) ```
afaik, winrm is only one using v X 6 and no one is doing the `display.verbose( ..., caplevel=23)`, I was pointing it out JIC you wanted a more precise wording.
```suggestion module.fail_json(msg='Unable to find the specified virtual machine : %s' % (module.params.get('uuid') or module.params.get('name'))) ```
Default not set in argspec.
I would format this like this: ``` ANSIBLE_METADATA = { 'status': ['preview'], 'supported_by': 'community', 'metadata_version': '1.0' } ```
Why not also do this when `module.check_mode` is `True`? Then the check mode behavior is closer to the real thing.
This is now auto-handled by AnsibleAWSModule
Instead of child.encode(), use to_bytes(child, errors='surrogate_or_strict"). to_bytes() protect against calling encode() on something that is already a byte string. (calling encode on a byte string can sometimes traceback).
Catch botocore.exceptions.ClientError instead of Exception here too.
I would be consistent and pick one of them. Although, returning after in place modification doesn't add a value, it only makes sense if you will do a deepcopy of the dict and never modify the passed one.
Could add to the line above rather than lots of line breaks
@abadger I checked the source of that `warning()` function and it seems like it concatenates input with native strings which concerns me.
This should probably mention both slash and no-slash paths...
```suggestion message_text = self.get_deprecation_message(msg, version=version, removed=removed, date=date, collection_name=collection_name, warn_change=warn_change) ```
probably. It is a tradeoff between information that you have locally that may help with debugging versus having a complete traceback. So if ```policy_json_string``` has important information that won't be available in the outer try/except yo may want to do this here. A solution common in our modules is to call module.fail_json() at this level so you can have access to both the traceback and the additional information. (But then you have to pass the module into the do_grant() function).
Please also use proper doc formatting like: "C(template) and C(storage_domain) parameters are provided"
```suggestion [datastore_name] path/to/file.vmdk ```
This line can also raise a `ValueError`.
That `get_multi_something` pattern repeats itself quite a few times in the file, which makes it a good candidate for a refactor into more general function. Something similar to this should work: def aggregate(self, func): ret = True entries = [] for systems_uri in self.systems_uris: inventory = func(systems_uri) ret = inventory.pop('ret') and ret entries.append(inventory) return dict(ret=ret, entries=entries) def get_multi_storage_controller_inventory(self): return self.aggregate(self.get_storage_controller_inventory) def get_multi_disk_inventory(self): return self.aggregate(self.get_disk_inventory) This should reduce the code duplication significantly.
Personally i'd like it better if this was `changed_state`, for instance, as that better indicates the purpose of this variable, looking at the code
according arg spec, required=False
I like the `warn: no` but using `env` is less typing ;o)
`client.start_execution` is idempotent but `start_execution` always returns `changed=True` if `action=start`. We probably want to `client.list_executions` to see if the execution is already running before proceeding.
Like many other statements in the examples.
This doesn't work as expected, unfortunately. ``` >>> test_dict = {'one': 1, 'two': None} >>> print(test_dict.get('two')) None >>> print(test_dict.get('two', 2)) None >>> print(test_dict.get('three', 3)) 3 ```
This should set self._connected = True (not really needed right now but could have ramifications later) and also use display to print a message. For instance, this is what the docker connect plugin does: ``` def _connect(self, port=None): """ Connect to the container. Nothing to do """ super(Connection, self)._connect() if not self._connected: display.vvv(u"ESTABLISH DOCKER CONNECTION FOR USER: {0}".format( self.actual_user or '?'), host=self._play_context.remote_addr ) self._connected = True ```
this is not in core and will result in exceptions if not present, use same pattern as we do with boto
this should be in the run method, otherwise ansible itself will fail to run
Do you really need this extra var? Maybe just save stuff there right away? ```suggestion b_output, b_tmp_stdout = self._examine_output('stdout', b_tmp_stdout, sudoable) ```
```suggestion assert isinstance(wrap_var(('foo',)), tuple) ```
```suggestion into namespace I(netns). ```
Hm, given those 15(?) other tests that failed on Python 3 in calls to syslog.syslog(), could we monkey-patch the rest of the tests so this is the only test that actually writes to the real syslog/journal? (EDIT: when I say "the rest of the tests", I mean in test_basic.py.)
Please put this on a single line. Lines can be 159 characters wide.
You seem to have gone through the process of making this class a context manager, but don't use it as a context manager.
this doesn't look good to me yet, but I see my previous suggestion looks wrong too. How about the following? ~~~python # set banner if empty value or value differs if state == 'present' and (not current_banner or current_banner != module.params['banner']): set_banner(module, array) # clear banner if it has a value elif state == 'absent' and current_banner: delete_banner(module, array) ~~~
is there a reason why you have a native str, I would have assumed it was a byte str beforehand for a reason. I know the tarfile is very particular about the type of string being used.
Minor, please append `type: str` here as well
When using format, you will need to specify the index `{0}` so this would still work with Python 2.6
Do not add `required=False` or `default=None` as these are implied. But please do add the parameter type explicitly. ```suggestion extra_args_precommand=dict(type='str'), ``` PS Yes, the other definitions are incorrect too, they should all include type information.
Look like you could set ``` python res_list = tuple() ``` here and then the for loops can just be: ``` python for res in res_list: ```
changed is displayed as False by default so you don't even need to specify it at all. Can delete this line.
```suggestion - Private IP allocation method. ```
Don't align the parameters (also, as it's a dict, there should be no space between key, `=` and value)
`then` -> `the`
Remove the "See examples."
pep8 will probably complain about missing a space before the ```in```.
All `description` should start with a capital letter, and end with a fullstop.
I would write this as ``` if current_values.get(key, "").lower() != val.lower(): ```
This should be an error by default, created #17902 to allow this to be configurable so this change should be removed from here.
Please, at most one alias, even better none. Having a long list of aliases is really bad UX IMO.
`choices` : the new value must be added.
to avoid dual stripping, change to ``` res = [] for p in patterns: p = p.strip() if p: res.append(p) return res ```
Should catch `BotoCoreError` and `ClientError` here, and use `module.fail_json_aws()`.
no need to be sorry (i'm the tpyoe king!)
```suggestion why: Deprecated in favor of C(_info) module. ```
Use module.fail_json_aws(e), which will handle calling ansible.module_utils._text.to_native() on e for you.
This looks more like boto3 exception handling than boto - I'm pretty sure e.message is just a string, so passing it through camel_dict_to_snake_dict seems pointless.
get_exception is deprecated in favor of native exception handling - ``` except Exception as e: module.fail_json(msg=to_native(e)) ```
Don't quote strings when that's not necessary, and add spaces in Jinja variables for readability. ```suggestion msg: TCP port {{ item.port }} by pid {{ item.pid }} violates the whitelist ```
And we tend to start with the `type=`, since this is the only key that every parameter defines. The order usually is: `type`, `required`, `default`, `choices`, ...
These 3 tests are actually one test. It should be parametrized rather than copy-pasted.
And you don't have to quote it.
Use iface['subnet'] in the fail_json().
@resmo Aren't both same ? ```py def x(): return (1, 2, 3) def y(): return 1, 2, 3 x() == y() #True
result is always changed when rerunning playbook with your first example (create of zabbix user). This breaks module idempotency. I believe this can be solved by comparing all `update_user()` arguments with information returned from `user.check_user_exist(alias)`
Description should be a sentence and include a full stop at the end
Duplicate with `get` method? This logic can be handled as `if get_traffic_manager_profile`
You can use get_option() instead of accessing the dict directly.
Also note, str can traceback if e contains non-ascii. Better to use the to_native function from ansible.module_utils._text.
I think this line isn't needed.
This needs to be changed, make it `Not applicable to endpoints of I(type) C(external_endpoints).`
``` diff diff --git a/lib/ansible/galaxy/collection.py b/lib/ansible/galaxy/collection.py index caa22308eb..52272cde52 100644 --- a/lib/ansible/galaxy/collection.py +++ b/lib/ansible/galaxy/collection.py @@ -381,6 +381,12 @@ def publish_collection(collection_path, api, wait, timeout): :param timeout: The time in seconds to wait for the import process to finish, 0 is indefinite. """ import_uri = api.publish_collection(collection_path) + if 'v3' in api.available_api_versions: + parsed = urlparse(api.api_server) + import_uri = parsed._replace(path=import_uri).geturl() + else: + import_uri = import_uri + if wait: display.display("Collection has been published to the Galaxy server %s %s" % (api.name, api.api_server)) with _display_progress(): ```
Please add `type: bool`.
Actually it needs to be `AttributeError` to keep everything happy (which the import machinery will turn into an `ImportError` if it was sourced by an import)
Why are all of these `@property`s? They don't return anything, so I don't see what the use of that is.
version compares should be done differently (as, for instance, dnf-10.0 should satisfy the check). You can use something like this: ``` python from distutils.version import LooseVersion [...] if LooseVersion(dnf.__version__) >= LooseVersion('2.0.1'): ```
`self._url` is hardcoded (to `"/jsonrpc"`) in `login()`, sent through `to_text()` here, and also stringified on the immediately preceding line of executing code. on the next line of executing code. Is there any particular reason for all this, or would it be just as clear to do this instead? ```suggestion response, response_data = self.connection.send(path='/jsonrpc', data=to_text(data), ```
It would be better avoiding changing method signature, you can pass the config and state as a dictionary to the method and unpack the them inside the render_config.
@pascalheraud You can check https://docs.ansible.com/ansible/latest/dev_guide/developing_python_3.html#import-ansible-s-bundled-python-six-library `from ansible.module_utils import six` and then `six.moves.urllib.parse.quote_plus`
Should also have trailing dot :-/
All the more reason to not use key=value format in the samples; works fine with YAML
<nod> I'd be happy to see fixing it everywhere added here if you want but don't demand it :-)
We tend to have full descriptions, so that the meaning is more clear to the end-user. The first line is a description of the parameter. Subsequent lines clarify the value, its use or dependencies. All descriptions (except the short_description) should have a trailing dot, so please add those everywhere. ```suggestion - The ID of the Hetzner server to manage. ```
The 2 `if` can be merged.
I would like to use a more python way: list comprehension and a `to_disk` method to construct the list.
```suggestion - name: list hooks for a repository (password auth) github_webhook_facts: ```
Should this just be folded into `process_username`? You'd lose the `required_together` validation, but probably make it up by ditching some of the masking code.
Does this need to be a nested function? The overall cyclomatic complexity of this method is 8. I bet it could be reduced by removing this nested function. It would also make this method (and the function) easier to test.
`get_provider_argspec` again added to support local connection type with platform agnostic modules. This function can be removed.
You can use `C(sf\_) ` to format this as code, which may be clearer.
This should also check for `provider['timeout']` value. Something like `persistent_command_timeout = C.PERSISTENT_COMMAND_TIMEOUT or self._module.get(âproviderâ, {}).get(âtimeoutâ)`.
Resource path should not be manipulated by hand, since we should only use paths that Redfish API returns (with one exception that has been actually removed from the latest version of the Redfish standard).
You could change this to `if not (module.params.get('exact_count') and module.params.get('min_count') and module.params.get('max_count')):`
doc string doesn't match actual return value
I believe selinux uses native strings (byte strings in python2 and text strings in python3) rather than always using byte strings. So that's why we weren't using to_bytes here earlier. We may need to move the to_native call earlier, though. I'm not sure if it was all selinux functions or only some of them which had bugs if the wrong type of string was passed to them.
Read operation: Ideally should be in a try/catch block, in case file does not exist, permission issue, ...
Okay, I see. (should not look at code before the first coffee)
I like the fact that you move the potential conversion from text to bytes lower in the call stack, to where the API actually needs a byte string.
traditionally, variables is a keyword arg. I don't think it matters in our paticular code base but we should keep it consistent with other lookup plugins.
Do we also need to copy the file from controller to target? I've only ever tried this with controller == target.
according to doc spec, there should be an alias: ~~~diff - ip=dict(), + ip=dict(aliases=['network']), ~~~
i removed this as even if you respect the play's no_log there is no current way to respect the module spec's no_log
I'd use `elif` here.
```suggestion - Export an ISO image of the media mounted on the CD/DVD Drive within the virtual machine. ```
Don't do this. The old way is much more pythonic. And it's much harder to see *your* changes as a result
Rather than treating the option type here as a string and parsing via ast.literal_eval(), I think it would be better to declare it as type dict (and name it as network_protocols to match the command naming I mentioned above): ``` network_protocols=dict( type='dict', default={} ) ```
This property should probably also be `_` prefixed- the way the aliases are encoded in here right now makes it pretty useless for anything but generating that string in the error case.
missed .copy() so that should not be an issue, thought you were polluting `environ` .. still i would just refactor the call to one location vs keeping dupe code around
would you mind minimalizing the example for state=absent to the things required: ~~~yaml - name: Remove a vpc offering local_action: module: cs_vpc_offering name: my_vpc_offering state: absent ~~~
please use explicit import statements
This is a "set" method called from redfish_command (which doesn't pass in the systems_uri param). So need to remove that param here and just use self.system_uris[0] below.
Not sure if we need `normalize_interface` when fetching interface names from running-config.
+1 and the same for all the other fail_json's as well.
This doesn't really matter since only a single instance of ForemanInventory is created in this script but config_paths should really be an instance attribute (created and given an initial value in ```__init__```) rather than a class attribute. Class attributes exist a single time per class. All instances of the class would share the same instance of that attribute. Instance attributes exist, one per instance and thus can change independently. Modifying config_paths later in the code is a tip-off that this should be an instance-attribute rather than a class-attribute. Also, you can probably move the setting from an environment variable to be with this code when you do that. It would seem to make sense to keep that all together.
I don't see a backup option in the code
needs to be a string, "2.7" otherwise it will be used as a float and not fare well in comparissions
Can that raise a ClientError? I don't think boto3 verifies the connection like boto does when it's first created.
How about we deprecate `vmware_dns_config` and not to make `vmware_host_dns` as drop-in replacement. (Sorry for typo)
IMO, we can move the `get_connection_string` and construct the endpoints to one conditional check `if self.show_connection_string`.
I think we should have "Get info" considering renaming ;-) but that's minow
`self._url` is hardcoded (to `"/jsonrpc"`) in `login()`, sent through `to_text()` here, and also stringified on the immediately preceding line of executing code. on the next line of executing code. Is there any particular reason for all this, or would it be just as clear to do this instead? ```suggestion response, response_data = self.connection.send(path='/jsonrpc', data=to_text(data), ```
but this all in a try/except/pass to avoid leaving other temp dirs if one fails all way through
Be more specific in this message about what was happening when the exception happened, and remember to include the `exception=traceback.format_exc()` argument to fail_json to include the stacktrace.
Supporting multiple endpoints doesn't add value unless thresholds are implemented by the ansible-core-ci service.
You can replace this line through line 363 with simply: `client = module.client('es')`
```suggestion - If an API has a specific timeout that is less than this value, this value will become the new timeout. ```
Can we update the `description` text to be a little more explicit that it is the controlling host (the machine running Ansible) and not the target node that must have an established Conjur identity for the lookup plugin to work? Right now it's a bit confusing because the `requirements` is clear about that but the description just says `...the server's Conjur identity` without saying what 'the server' is in this context.
Since it's the only plugin which does that, I would remove it. Either all plugins should do that, or none.
Since we know that the message returned from Tower CLI isn't very helpful here, lets replace `excinfo` with `organization`. When I originally did this, I made a (bad) assumption that the Tower CLI error message would be useful. except exc.NotFound: module.fail_json(msg='Failed to update project, organization not found: {0}'.format(organization), changed=False)
Please could you change it to: ``` if ( fstab_file and fstab_file != '/etc/fstab' and get_platform().lower() != 'sunos'): ```
I'm not sure if making this and lock_file conditional upon check_mode is the right thing to do. A module might need to lock a file in order to read it and decide if changes should be made.
one more question, this would also be "true" for enlargement of the disk, would this work as expected? if yes, `allow_root_disk_shrink` would be a misleading name because it would not only resize to smaller, but also resize to bigger volume --> `allow_root_disk_resize`
+1 for this.
Imports for `ModuleStub`, `add_argument`, and `Command` should be able to be removed without consequence. `NetworkModule` and `NetworkError` are being imported by your modules, but they should probably be removed from here and the imports changed to network anyway, to clarify where the code is coming from.
The official name is "Docker SDK for Python" ([docs](https://docker-py.readthedocs.io/en/stable/)).
The grow and shrink booleans are used for allowing to grow and shrink the image. (That is why they default resp. to true and false). So you have to compare the original size against the wanted size, and if it shrinks and shrinking is allowed, only then should it resize (otherwise it needs to escalate). Similar for the grow-case.
If `date` and `time` is not added as part of a file name (in case of a configurable backup path option) `date` and `time` logic can be changed to fetch from the file information probably using os.stat()
docs needed to say at which version the aliases are available
Here be dragons. I don't see check-mode being tested anywhere in the module. So I expect the module to perform a reboot in check-mode. Probably not what people expect.
I would separate individual examples by an empty line.
Instead of building regexes to match the link parameters and extract them, it would be easier to use `parse_qs` which pulls values from valid query strings. For example: ``` >>> from ansible.module_utils.six.moves.urllib import parse >>> query = parse.parse_qs('/foo/bar?page=6&per_page=20') >>> print(query) {'per_page': ['20'], '/foo/bar?page': ['6']} >>> int(query['per_page'][0]) 20 ``` Or for more advanced parsing, you could use `urlparse` to remove the query string and path to use. ``` >>> parse.urlparse('/foo/bar?page=6&per_page=20') ParseResult(scheme='', netloc='', path='/foo/bar', params='', query='page=6&per_page=20', fragment='') ```
Also, this will mean you need to `import traceback`
you can use get_id_by_name, and don't have care about checking.
I would replace these 3 lines by: ``` # Add these imports from ansible.module_utils.compat import ipaddress from ansible.module_utils._text import to_text ### prefix = ipaddress.ip_network(data["prefix"]) network = to_text(prefix.network_address) mask = prefix.prefixlen ``` This way, it will not fail if `data["prefix"]` doesn't have a netmask (default it to /32 for ipv4, /128 for ipv6).
Please also write that either id or name is required in case of upload/download and add code that checks it was properly passed.
facts modules can trivially support check mode (#23107)
You reassign this var on each loop iteration, please move it outside. ```suggestion ```
oh, that was a misunderstanding. I didn't want to change the default, I just wanted to suggest you choose the python boolean `False` instead of string 'no'. Sorry for the confusion.
```suggestion type: str choices: [ absent, present ] ```
I bet it's possible that this thing raises `IOError`
```suggestion out = run_gluster(['volume', 'heal', name, 'info'], environ_update=dict(LANG='C', LC_ALL='C', LC_MESSAGES='C')) ```
this creates race condition. there is a time between remove and move that the file is unavailable. I see original code did same, but we should just allow move to work as it will be an atomic operation
```suggestion module.fail_json(msg="At least one resource ARN must be provided") ```
While you can create dict comprehensions in python 2.6, you don't need to here: > tags (dict or list) â Either a dictionary containing name/value pairs or a list containing just tag names. If you pass in a dictionary, the values must match the actual tag values or the tag will not be deleted. If you pass in a value of None for the tag value, all tags with that name will be deleted. ``` tag_remove_list = [x for x in tagdict if x not in tags] ``` The 2.6 equivalent, for reference, is ``` dictremove = dict((x, None) for x in tagdict if x not in tags) ```
We should probably do more here than just reraise the exception with a different type. Add a message here so it gives context about the failure. The same with the next one too.
Add a blank after this to notify that these are two separate tasks.
I see did some changes of single quotes to double quotes but you left all double quotes are the were. You should change all other cases than named above to single quotes (e.g. keys in the dict vars - `my_dict['my_key']`).
`return migs != 0` is equivalent ot lines 380 to 382.
No need to have the `required: false` lines, it's implicit.
> Speaking of which, I should submit a PR to add Python 3.5 to tox.ini and .travis.yml #12627.
```suggestion - The default key (C(alias/aws/ssm)) is automatically generated the first ``` and a period at the end of the sentence (in the next line). Maybe also clean up the sentence above :)
This would be handled by the `AnsibleAWSModule` ```python try: import botocore except ImportError: pass # handled by AnsibleAWSModule ```
```suggestion if self.client.module.params['disk_usage']: ```
```suggestion return False, 'Command "%s" found no files in archive. Empty archive files are not supported.' % self.cmd_path ```
Same here. required=False and default=None are obsolete. Only specify them if they are set.
Leave the trailing comma. This is explicitly allowed by python in order to make line-modifications (like moving the order of lines, or adding lines) without having to update unrelated lines.
s/will created/will be created/
This could cause problems if certain characters sneak into the repr() of the exception. (For instance, "{") Probably need to avoid writing to stdout and stderr.
```suggestion if not os.path.exists(to_bytes(xdg_path, errors='surrogate_or_strict')) and euid != 0: ```
It looks like scaleway modules allow a series of fallback environment variables as well as a module option. If you wanted to do the same thing for this plugin you could do ``` options: ... oauth_token: env: # in order of precedence - name: SCW_TOKEN - name: SCW_API_KEY - name: SCW_OAUTH_TOKEN ``` Then you can use self.get_option('oauth_token').
Please rename **follow** to **insertafter**, that is an existing parameter already used by **lineinfile** and better describes what it does.
Could you please update `lib/ansible/utils/module_docs_fragments/docker.py` to mention these variables, see `lib/ansible/utils/module_docs_fragments/vmware.py` to an example
You could as well just call `exit_json` in `execute()` since you're already not using functional approach.
Write a method to generate final diff so it can be used anywhere in the code when required.
Typo - `use` -> `used`. (your friendly neighbour nitpicker :)
Required when I(shared_access_key) not defined.
We can add this in a second PR. @WojciechowskiPiotr you could also keep this as a branch based on @morph027's with your changes as a new commit, then you can pull and rebase whenever @morph027 adds something, and later (once this PR is merged) create a new PR from your branch. Except, of course, if @morph027 already wants to include TLS support.
```suggestion # Install all filesets to latest level f.i. install a TL or ML ``` Not sure what all this means.
plz use string interpolation ```suggestion self.module.log("PODMAN-DEBUG: %s" % " ".join(command)) ```
This should not be moved. They're libraries from the current project so go below the imports for stdlib and third party libraries.
should be superfluous unless you want to add a different command for check_mode support (since `supports_check_mode` is false)
vault is also used to encrypt private keys and certs, so you cannot always assume its valid yaml
Yes, please remove the return and update the caller.
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific version_added when the options have been added in a newer release.
Please use our best practices for AWS exception handling https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#using-fail_json_aws
default is false by default so no need to have false
@thomwiggers `line.partition(':')[2]` yes, I have no problem with that.
This should be: ```yaml with_items: "{{ ret.bindep_packages.missing }}" ```
You should be able to use `self.vmware_test_platform` here.
```suggestion - 'If a I(checksum_url) is passed to this parameter, the digest of the ```
instead of a catchall here, you should give more relevant errors in _discovery and _add_device, which you already do in some cases, but then this catchall obscures
Options that are not required don't need a `required: False`. It is implicit. You can leave that out.
If the line would be `cmd = self.docker_cmd`, the original value of `self.docker_cmd` (which is a list) would be modified by the `cmd += ...`'s below. That's why a copy must be created.
```suggestion - I(update_password) must be C(true) for an existing user's password to be updated. ```
I meant the `headers` variable. I just don't see it used anywhere else.
You use `re.match` which already checks the beginning of a string. So caret `^` is not needed. https://docs.python.org/3/library/re.html#search-vs-match
```suggestion - Whether the VMs in the linked Virtual Network space can access all the VMs in local Virtual Network space. ```
I don't like to frame such big block of code into an exception. Please put the exception only around the command which actually can throw an exception.
This looks like debugging code that should have been removed? It causes the module to fail to detect installed OpenCSW packages. All tests succeed iff these two lines are removed.
Actually, we had some discussions about group names the previous days on IRC. Apparently dashes have been not allowed in group names from Ansible 2.4 on; this hasn't been enforced so far, but now (with Ansible 2.8) it will be. It's still possible to disallow it, but every group with a dash (or other invalid chars) in them will trigger a big fat warning. So please get rid of the dashes here so users of this inventory plugin won't automatically get a list of warnings, even if they don't have invalid chars in their labels.
Also, this would break while deleting a stack without providing a template.
the tests should not really be for hostfile, as we are going to remove it. a mock setting with 2 entries would test the functionality, not the specific setting
All these vars should start with 'ansible_'
I think that wildcard imports are generally discouraged, because it makes it difficult to refactor and determine the origin of a function or class. For example, at first the `boto3_conn` function used in the constructor seemed undefined.
result is attempted to be used below
This is fragile, and just a wild guess as to what we should do here. Instead of this, we should be extending the functionality of the `file` lookup, to accept an `encoding` parameter.
```suggestion msg = "" ```
AFAIR the flag is `failed`, not `fail`
A message string would good to say that image is not preset or something similar.
I'd do: ```python from functools import partial ... def is_satisfied_by(current_version, constraint_predicate): op, ver = constraint_predicate return op_dict[op](current_version, LooseVersion(ver)) satisfies_target_version = partial(is_satisfied_by, current_version=LooseVersion(version_to_test)) return all( satisfies_target_version(spec) for spec in self._requirement.specs ) # or return all(map(satisfies_target_version, self._requirement.specs)) ```
Please, we are trying to get people do the right thing, read http://docs.ansible.com/ansible/devel/user_guide/windows_usage.html#path-formatting-for-windows All our examples should keep things simple, so make this: ```yaml - name: Copy test file win_copy: src: test01.test.ps1 dest: C:\Pester\test01.test.ps1 ```
```suggestion serial_port=dict(type='int', required=True), ```
I think you added a little too much here: ```suggestion - The passphrase for the privatekey. ```
add 'version_added: 2.5' here.
Use `==` to compare booleans. The `is` test should *only* be used when you really want to compare identities of objects! Finally, there's no need to compare a boolean to `True` or `False` explicitly; simply write `elif self._has_migs(local):`.
This is also not properly idempotent- you're not comparing to the existing port list, so always returning "changed: True" even if it's already in the right state.
iirc we had specifically stated that .yaml was an invalid extension for galaxy file.
Please add `no_log=True`
This class isn't really providing any value. Usual practice is to create the client in main and then call a describe_task_definitions method.
host, username, password, timeout and vdom is already in fortios.py in module_utils
Why change the old format at all? That works on all relevant pip versions and also allows multiple versions joined by comma.
```suggestion def validate_wwn(module): ```
As far as I understand this is only necessary to support stuff like `djang>1.11.0,<1.12.0,bottle>0.10,<0.20,!=0.11`. Why should we support this? Using a list is to me the obviously better API and support this structure adds a lot of (to me unnecessary) complexity.
```suggestion - Due to the B(very) sensitive nature of these credentials, it is B(highly) recommended that you only pass in the minimal credentials ```
We try to avoid the requests library as it has many issues across older versions and even major incompatibilities across it's own versions, look at using the ansible open_url/fetch_url functions instead.
I don't know the `purestorage.FlashArray` API behind the `array` type, but was curious if there a potential error condition or unhandled exception that could occur here in the event the attempt to `set_hgroup` fails? (same question for various `set_hgroup`, `connect_hgroup`, and `set_hgroup` calls in this patch).
`default=True` (as it's a bool, not a string)
I see did some changes of single quotes to double quotes but you left all double quotes are the were. You should change all other cases than named above to single quotes (e.g. keys in the dict vars - `my_dict['my_key']`).
Datacenter parameter is used in [`get_vm`](https://github.com/ansible/ansible/blob/a62f0a2fdafc283203ff62a2a2de3c83916cdee1/lib/ansible/module_utils/vmware.py#L917) API, so I would say this is a required parameter.
No need to wait twice - the below lines do the same "wait" while respecting max wait time.
Leave the trailing comma. This is explicitly allowed by python in order to make line-modifications (like moving the order of lines, or adding lines) without having to update unrelated lines.
or maybe you just don't accept a 'list of terms' but only named parameters, specially cause you only take 'the first term' in your code below vs looping over them.
I prefer `if not module.check_mode and change_string:`.
You can remove `required=False` as that's the default.
I think we should just let this exception propagate. We aren't adding any value by catching it here (and might be removing value if the traceback were useful). This isn't code in ansible itself so we don't have to create a nicer error message either.
Can you add: ``` type: bool default: no ```
Suggestion: ``The name of the node to be renamed. If I(name) already exists, no action will be performed.`
This method will retrieve only inventory of the last system that Redfish API returned in `_find_sytems_resource`.
Various modules allow to specify the name of the executable in order to use a binary from a non-standard location (i.e. a binary not located in the PATH). Look at e.g. the isoextract on how to do this.
```suggestion - The type of the port that should be created ```
Please add spaces around the equal sign.
If it is not required, you don't have to state it as it's the default.
... and then the call to instantiate AnsibleModule can look like this: ``` python self.module = AnsibleModule(argument_spec=merged_arg_spec, required_if=merged_required_if, **kwargs) ```
You can remove this `module.exit_json` since the one on line 219 can be used.
reading listdir output, they are unicode objects, so these should be `u' '`
Please remove this. /tmp might not be writable or available.
Isn't duplicate this loop in here? I also think we could simplify it here starting after the first line ```python for line in out.splitlines()[1:] ```
while purging all username we should preserve the username which is used to run the playbook otherwise we might hit connection timeout in middle and leave the box with partial configurations
I think we should add an `allow_overwrite` or similar param.
I would only add the second example. They differ only in a syntax detail which is not that important.
So you can remove the following lines (and from docs) ``` # this argument is deprecated in favor of setting match: none # it will be removed in a future version force=dict(default=False, type='bool'), ```
It would be useful to tell the user which `key` is invalid.
```suggestion - The value C(auto) selects a format based on the key. The value C(auto_ignore) does the same, ```
vnc_port can be of type `int` so `type='int'`
Can we update the `description` text to be a little more explicit that it is the controlling host (the machine running Ansible) and not the target node that must have an established Conjur identity for the lookup plugin to work? Right now it's a bit confusing because the `requirements` is clear about that but the description just says `...the server's Conjur identity` without saying what 'the server' is in this context.
```suggestion if not os.path.exists(to_bytes(ldir, errors='surrogate_or_strict')): ```
this should really happen in the connection
Missing full stops at the end of descriptions
Please use `has` in the beginning. Also, I feel like this should be a `@property`.
I am a bit surprised, since "state" is describing action. That sound a bit weird to me to mix 2 differents concepts in one single argument.
Hm, good point. I'm not sure. Maybe making exceptions more specific will be a pr for the future since it's used elsewhere in the module anyway.
actually .. uptime is a bad check then, since you get a race condition in the case of 'chained reboots' not something that will happen often, but you can get to the point in which the previous uptime < current uptime even though you rebooted. You should check the uptime vs the time since you started the reboot.
The docs say this should be `servers`, I'm ok with either but it should be consistent.
`check_rc` is false by default, no need to pass.
and please add space after `)`
I think this would be 2.7.
this is not needed as the 'super' already would trigger this from the base class, this is actually dead code and should be removed
Could you add a RETURN block? You can find an example [here](https://github.com/ansible/ansible/blob/42e63d429c63e078e406d95edebd8f86cd44cfbd/lib/ansible/modules/cloud/google/gce_mig.py#L180)
I think this code should just be: ``` dummy, dummy, boto_params = get_aws_connection_info(module, boto3=True) profile = boto_params.get('profile_name') s = session.Session(profile_name=profile)(**boto_params) credentials = s.get_credentials() return credentials.access_key, credentials.secret_key, credentials.token ```
```suggestion file_name, file_exts = os.path.splitext(str(url.rsplit('/', 1)[1])) # Preserving double filename extensions like .tar.gz _, double_ext = os.path.splitext(file_name) if double_ext: file_exts = double_ext + file_exts: ```
No quotes for None, makes it unclear if it's python `None`/yaml `null` or a string.
Default value mentioned but not added in argspec.
I'm not sure the `if seconds` makes sense here since we'll never get to this point if `seconds` is defined.
This needs to be bumped to 2.4 as time marched on a little too fast for us.
@bcoca yes, it would - but it's not worth fixing that underlying issue, since we don't really need a link there at all
The method does nothing, should not this method be removed ? * [X] Done
Use module.fail_json_aws(e), which will handle calling ansible.module_utils._text.to_native() on e for you.
I would also add the deprecation warning here in addition to the failure.
@jmighion would be great if you can update ios_config as well. Thanks!
Let boto3_conn handle region failures - region can be picked up in a number of ways that mean that the `region` variable doesn't get set but the connection is fine.
What is this option needed for? After all, these are secrets you're dealing with, and if the user wants to print them she can use the `debug` module.
Line is too long.
I don't think you need `new` anywhere.
```suggestion - true, Run Puppet agent with C(--noop) switch set. ```
This isn't valid yaml ` : `
data is too generic, and template_json was the first thing that came to mind. I'm not married to it though.
```suggestion self._module.fail_json(msg=("An error occurred trying to get the ADOM Info. Error: " + to_text(resp_obj))) ```
We should use `display.deprecated` here, and if we are doing so, we also need to indicate in which version they will be deprecated. We have a +4 version requirement on deprecations. So if this goes into 2.6, they could be removed in 2.10.
Why go through all this trouble instead of ``` start = get_timestamp() responses = run_commands(module, commands) end = get_timestamp() timestamps = (start, end) ```
Not required with AnsibleAWSModule
```suggestion locally, you can call the module with the image name, then check whether the result list is empty (image does not ```
This could be either a repeat of the `count` input param, in which case it is redundant (like `dest`, below), or it is set to the same value as `packets_tx`, in which case it is completely redundant. In either case, I don't see any reason for this to be included in `RETURN` nor `results`.
Create address service object on PanOS devices This may need updating on existing modules
Another variable with value using `special characters outside of AâZ, aâz, 0â9` and enclosed with quotes might be added there.
```suggestion - This module creates clones for libvirt. ```
I think that wildcard imports are generally discouraged, because it makes it difficult to refactor and determine the origin of a function or class. For example, at first the `boto3_conn` function used in the constructor seemed undefined.
`required: false` is the default, can be omited. Also, I would prefer to see the parameter types here.
If possible, do not use global variables. Pass the module to the function as a parameter if needed.
This is unreachable code.
Would be good to state this was added in Ansible 2.9.
hmm, most of the things in other modules are in lower case, better to be consistent
facts modules can trivially support check mode (#23107)
tempted to say use subdirs and read them as 'container lists', avoids much hardcoding
The double backslashes are not needed here. They are actually unwanted.
There's no need to do the 'else', because everything that follows is also your 'else'. It's the continuation of your program.
consider using `ansible.module_utils.urls` instead of `requests` for better compatability
How will fmg handle idempotency ? Does it return 200 even if you try to add same object again ? This return code should be retuned to ansible with result['changed'] value 1 if add was done for new object, 0 if same object exists earlier on system.
`A list of virtual machine names starting with the given regex`
Just noting that this RETURN is incomplete
`if not check_rc` is not required. It can go in else part
But you don't call it without this argument anywhere.
not a blocker but `required: false` is the default and can be omitted.
All of these uses of `str` should be switched to `to_bytes(var, errors='surrogate_or_strict')`. `to_bytes` comes from `ansible.module_utils._text`.
``` tenant = module.params['tenant']` ```
You can import HAS_BOTO3 from ansible.module_utils.ec2
The way this is done is going to lead to unicode errors eventually. This is probably the least messy way to handle that: ``` python msg = u"An unhandled exception occurred while running the lookup plugin '%s'. Error was a %s, original message: %s" % (name, type(e), to_text(e)) if errors == 'warn': display.warning(msg) elif errors == 'ignore': display.log(msg) else: raise AnsibleError(to_native(msg)) ```
```suggestion - The full path to a list of block devices such as hdd, nvme or nvme. ```
I think it makes sense - the user is responsible for making sure the library is available for specified Python interpreter. Similar to how user is required to install necessary prerequisites for modules, for example.
Example should reflect the basic attribute (`portgroup`) instead of the alias
Can we emit a warning/info instead of silently failing
```python cmd = [self.nmcli_bin, 'con', 'add', 'type', 'ip-tunnel', 'mode', 'sit', 'con-name'] ```
doesnt --> does not
version added is 2.4
The more the AWS modules look the same, the easier they are to understand. The majority don't use classes, and those that do are less understandable as a result.
Please add `type="str"`, and maybe list the possibilities as `choices=`.
`required=False` is the default, and thus not required
Use module.warn() instead.
I would add here as well some code to set the `result['failed']` according to what the module should do. ``` if action in ['started', 'restarted', 'reloaded']: result['failed'] = result['status']['current_state'] != 'running' elif action == 'stopped': result['failed'] = result['status']['current_state'] != 'stopped' ```
```suggestion - Accepts a list of dicts where each dictionary contains two keys, I(path) and I(key_data). ```
this was correct before IMHO
since we are only interested in the creationToken field, is it possible to scope the query to only return this field? I'm concerned this can generate a lot of traffic if all attributes are returned. Can be delayed.
Please restore, or the module will fail to work in v2.7+
_tmp_args should be a local variable rather than an instance attribute. But if we do that the unittests will need changing in a more intrusive way. I think that's the right choice but I haven't looked at how to achieve that yet.
there is a missing condition for check mode
I would default to 'auto' and not require it, let the command fail if it is not present in fstab (like mount does)
BotoCoreError should be caught here as well and all other places catching ClientError https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-1 BotoCoreError does not have a .response, so using AnsibleAWSModule will cut down on exception handling logic as I suggested above.
better to move this line in else part. something like ``` if hasattr(resp, 'data_xml') or hasattr(resp, 'data_ele'): result = resp.data_xml else: result = resp.xml ```
Missed one.. Should just be as below unless you want to also pass module into the function. ``` if os.path.isfile(cert_chain): cert_chain = open(cert_chain, 'r').read() ```
This also needs bounds checking and (maybe) retries if the ASG isn't yet available.
```suggestion parts = to_native(date.strip()).split(':', 1) ```
Move `FOREMAN_URL` and the other variables that follow inside the `CallbackModule` class.
Also, this will mean you need to `import traceback`
Should note about `is_dir` and `is_link` here.
You can add required=True here too and remove the check below.
I am not sure if you have anything presentable in the result with `check mode` here. Here is a brief example on how `check mode` is perceived: If check_mode is set, and say a module is configuring IP address on an interface, the module would show the output of actual task performed minus the final `commit` operation that brings the task in force.
Sam here, add a blank line before this line and make it: ```python # Copyright: (c) 2016-2017, Hewlett Packard Enterprise Development LP ```
Thanks for that clarification. Upon reviewing the code, it wasn't obvious to me that this module is actively using both connection paths (to the k8s API and also to the Upload Proxy.) I've taken your word for it and updated my related PR.
Can you use a different example here? It's easy to confuse this with a dummy VGW ID. Maybe "main-virt-gateway" would be a better docs slug.
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
is this ```suggestion :type required_one_of: list[list[str]] ```
perhaps "if not region"? that keeps the standard flow from being in an "else", lets us bring the indenting back a level, etc. Otherwise this is fantastic. Thanks for pep8 and removing the stray code.
```suggestion b_colldirs = list_collection_dirs(coll_filter=coll_filter) ```
You need to use `.sort()` first and then use it in comparison, since `.sort()` returns None and will always results True in comparison. ``` >>> a = [1, 3, 2] >>> b = [1] >>> a.sort() == b.sort() True >>> a [1, 2, 3] >>> b [1] >>> a == b False ```
Please update formatting as per `mcp_user`
What will happen if `ssh-keygen` outputs something different (like not a valid file)? This will probably break.
Please remove `The only valid value is 1Minute.` That is covered by the `choices:` line
As we talked about in the WG yesterday, please set the API version in the module and pass it along here.
we normally add more than the 'library' error as they tend not to be as helpful as giving a user context on what you were attempting to do exactly when the error occurred.
End with period
It seems name param removed from the return, but it should not.
Get rid of this.
This place in code **does not affect** cloning/initing, while operating on **existing repo**, which makes it pointless. Also, it would be architecturally wrong to do it from some random phase of module execution. We would still have to bypass it to clone/init anyway.
`no_log=True` is argument spec will handle this.
I think `hosts` is a name that does not violate the principle of least surprise. I merely wanted to point the rest of the cfg mgmt ecosystem and possible Windows support. Let's see what @abadger thinks about it given the above.
Should also have trailing dot :-/
Is there a reason for first creating a JSON string and then parsing it? Why not simply do something like this: val = attr["mgr_attr_value"] payload = {"Attributes": {attr["mgr_attr_name"]: int(val) if if val.isdigit() else val}}
`If an empty list C([]) is specified`
Actually, that's different case. The code above I've sent: ```python achitecture=otypes.Architecture( self.param('cpu_arch') ) if self.param('cpu_arch') else None, ``` Ensures it sent `<achitecture/>` xml element when creating/updating cluster only when user passes `cpu_arch` parameter to Ansible. The current code you've sent will sent `<achitecture/>` element also when user don't `cpu_arch` parameter.
You cannot move this outside of the `if not callback_sent:` block, because it will send a debug log that the callback is being sent, before we know that it is. This applies to other lines as well. Just move the templating outside, and leave the debugs in the `if` block.
and if possible please: `Destination %s is not writable` (the word `is` is missing)
This is probably more a bigger-picture usability thing with inventory plugins, but it seems like making the plugin do this validation is error-prone, and potentially opens the door to malicious or poorly-written plugins to consume stuff they shouldn't. A realistic setup might have multiple cloud inventory plugins enabled (eg, I'd argue that all the ones we ship in the box should be enabled), which means there's a lot of refusal going on. Regardless, it seems like for config-based plugins like this, that this should be handled by the engine, not the plugin itself. Topic for broader discussion, I'm sure.
What's the reason for using the shell here? There's no redirection, pipes, or other needs for the shell that I can see.
Please add spaces around the equal sign.
I'd do ```suggestion if not ignore_errors: raise ```
The default here is to use 'yes'. That's how all modules work, by default they take the system configuration.
It's unclear from the name what this is (or even that it's supposed to be a URL). Please rename.
This may seem obvious, but it'd be nice to add to this doc something like "WARNING: if the stack does not exist, it will be created. If the state is `absent`, the stack will be deleted immediately with no changeset." since I can see people missing that part.
is_map should be done using global re 'MAP_RE' so we have one way to identify map in a column value.
If `ports_expand` took a rule rather than the value of its `ports` key this entire function could be replaced with ``` return [ports_expand(rule) for rule in rules] ``` Edit: of course `ports_expand` returns a list, so you need to flatten the result: ``` return [rule for expansion in ports_expand(rule) for rule in expansion] ```
Returning an error on Ansible module protocol level shouldn't be mixed up with just identifying a directory. Use exceptions to communicate failures to the calling code and process them there, outside of this function. So no `module` argument is needed here â let's separate different abstraction layers.
Ah, let me see if I can find an example of mocking run_command.
depends ... some DNS servers allow multiple entry as a way to skew the load, i.e: ``` www.example.com 10.10.1.1 www.example.com 10.10.1.1 www.example.com 10.10.1.2 ``` ^ will send 2/3 of traffic to first IP and 1/3 to the last .. so technically it should be accepted .. but that depends on the server software (some do this, some ignore, some error out).
This will not be idempotent, is that intended? We should try to support `present`, or if this is not possible warn users that there is no idempotency.
In the metric system, 'kilo' is abbreviated as 'k'. I guess this is wrong in the UCS interface though.
You should either use ```suggestion cmd = self.docker_cmd[:] ``` or ```suggestion cmd = list(self.docker_cmd) ```
Should not be needed, it can only be "present" or "absent"
If a parameter is not required, you do not have to add `required: false` as that is implicit. Is is easier to find what is required if these are not listed.
```suggestion @pytest.mark.parametrize( 'input_value,expected_outcome', ( (i1, r1), (i2, r2), ...etc ), ) def test_lenient_lowercase(input_value, expected_outcome): ```
Not sure why you need all this complexity ? (And the complexity below) I would have expected this to be much more simple.
following task -> the following task
This is duplicated 15 lines above that ;)
This can become a function since it no longer makes use of self.
```suggestion ssl_keyfile=dict(type='path'), ```
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` required_together ```
Note that fail/exit_json should be handling bytes or text; making them the proper string type for that python version before passing them in to the stdlib's json.dumps().
Only those two lines are required, and it works for me with it
Python 2.6's `re.sub` doesn't accept `flags` -- but `re.compile` does.
Maybe we can remove the `if min_version:`? min_version has a useful default, and if `min_version=None` is passed, it is OK to explode, from my point of view.
This logic seems ignore the use case of removing all tags.
Not saying that: https://github.com/ansible/ansible/blob/devel/lib/ansible/utils/collection_loader/_collection_finder.py#L703 is the authoritative way of doing that, but it certainly looks leaner than above. ```suggestion COLLECTION_NAME_RE = re.compile(r'^(\w+(\.\w+)+)$') FULLY_QUALIFIED_COLLECTION_RESOURCE_RE = re.compile(r'^(\w+\.\w{2,})$') ```
Should we just hardcode this instead of using `__name__`? Using `__name__` could make this dynamic, as it could be `__main__` or `ansible.utils.display`. We might benefit from just making it `ansible`
This method is technically deprecated from Microsoft, if the executable manifest hasn't been set correctly it will always return `6.2` (Windows 8) even when it is newer. I don't see a need for this to be done in Windows and can potentially return None or a blank value as we shouldn't care there.
this should be moved into the run method, as we only want this to error on running, not on loading, which will always happen if this is included in ansible. or in the hasivault class init, which gets called from run.
This could be less nested once you apply `choices`.
This shouldn't be needed, just do `to_bytes(cmd, errors='surrogate_or_strict')` without the PY3 conditional. Doing `""` on Python results in a byte string so `to_bytes()` will just be a no-op for that version. Also one style we try to follow in Ansible it to prefix any byte strings to `b_`. That was we can easily infer the type of string being used based on the variable name. If you have an explicit native string (bytes on 2, unicode on 3) then we prefix with `n_`. Otherwise a general text string has no prefix.
This module doesn't support check mode. I'm not sure if this is the best method to do this either though.
I think this needs to be a dict since it's used as-is in the call to ansible_dict_to_boto3_filter_list().
This is not needed for parameters that are not required. Guideline dictates to leave it out.
Hm... How about then introducing a prefix for such settings at least for this module? So, if user wants to provide binary data to be stored in property, they'd have to say, e.g. 'B64:blah' (where blah would be base64-encoded data). Caveat being that if users wants to store string which starts with B64:, they'd have to do something along the lines of B64:QjY0Og== (QjY0Og== being base64-encoded B64:, I think you get the picture :) Now, truth be told, not sure if this would be more acceptable for Ansible as project, but I'd see it as more consistent. Maybe second opinions on this could be useful too :)
Just making a note that we should probably restrict this to the exceptions that will likely occur and call fail_json instead of raising an Exception again.
This is fine, but we should only update (all labels) if one changed, misses or should be added.
Please remove this as it is not common across all influxdb modules
Just to reduce duplication, you could switch the 'else' below to a ``if not module.check_mode:`` and leave the ``result['changed'] = True`` outside the if statement. the result won't be returned if an exception is thrown while making the change. (and the same below)
This line has to go: ```suggestion ```
If the VLAN exists, you should check the name and state to make sure they are same as requested.
Thanks for your work on this! It works as expected (although I wish describe_db_instances() could filter by tags as it would be simpler not to filter out the results while retrieving them).
Fails because self_host is not defined for accelerate transport.
Since this is displayed after the polling has occurred, I think the new messaging isn't any more clear. How's this? ```python display.info('Retrieved %s/%s instance %s (status: %s)' % (self.platform, self.version, self.instance_id, status), ```
Maybe use ```suggestion type: path ``` instead? Then Ansible will replace things like `~` IIRC.
Unfortunately, shlex.split() needs a bit of code to make it compatible with both python-2.6 and python3.x On python-2.6, it only works on byte strings. In python3.x it only works with text strings. So you have to test for python version and then convert appropriately. Code like the following is what I use: ``` python from ansible.compat import six from ansible.module_utils._text import to_bytes, to_text [...] nspawn_args = self._play_context.nspawn_args if six.PY2: nspawn_args = shlex.split(to_bytes(nspawn_args, errors='surrogate_or_strict')) else: nspawn_args = shlex.split(to_text(nspawn_args, errors='surrogate_or_strict'))
```suggestion def _post_request(self): ```
ehm, this should stay here. ;)
Should be a string.
This may apply to some of the other PRs in flight, as well as some of your existing modules.
...Or being root and running ansible locally. (bcoca suggests the wording: "root privileges are required"
required=False, default=None is default for an argument
I am not sure this will work. It is unlikely that resp is set when there's an Exception.
Tiny optimization: check self.check_mode before checking os.path.exists. That way in the common case we don't have to use a system call to determine if the path exists.
This line can also raise a `ValueError`.
No need to split the line.
If it's not required, you can leave out `required: false`.
```suggestion 'Socket path %s does not exist or cannot be found. See the socket path issue ' ```
This will remove check for datacenter from line 215 ```suggestion dc_obj = self.find_datacenter_by_name(datacenter_name=self.params['datacenter']) if not dc_obj: self.module.fail_json(msg="Failed to find the datacenter %s" % self.params['datacenter']) objects = get_all_objs(content, vimtype, folder=dc_obj.networkFolder) ```
Do you have any references for the inline if being discouraged? If you don't like the inline if, then I'd go with the normal if block.
To get urlencode, please use `six.moves` instead.
I think you can get away with `str(group_ids)` here: ``` >>> a = ["sg-123", "sg-abc"] >>> str(a) "['sg-123', 'sg-abc']" >>> import json >>> json.dumps(a) '["sg-123", "sg-abc"]' ```
[`get_param`](https://github.com/spotify/pyfg/blob/master/pyFG/forticonfig.py#L249) should not raise an exception. I guess you could check if `f.running_config[path]` contains `module.params['name']Ì`.
You could fix #19781 real quick right here :D
I don't have a strong preference. LGTM!
Line is too long.
I would also do `not host` as `''` is both a string and not None, but i would argue still an invalid host
You need a paginator here still.
Awesome. This is much better now.
Not required if one of password or api_key is required. Descriptions for password and api_key should both state. "Exactly one of I(password) or I(api_key) is required."
I see... it's putting them near split_xpath_last which is where they're used. Maybe move both the variables and the split_xpath_last function up to below the imports.
please fill this in
```suggestion - ID of the project, get it with U(https://api.ovh.com/console/#/cloud/project#GET) ```
Please check this.
Default value not specified in argspec.
We can use `urlparse.urlunsplit()` and `urlparse.urljoin()` here.
Same for other description.
```suggestion - Web SSL (HTTPS) to enable or disable. ```
i would still not make this an option, but try to capture the copystat error on hp/ux and issue the warning as we do for enosys case
There can't be spaces in cluster name.
I think this needs to move out one indentation level to match `Field`
Please order the options alphabetically.
self.ec2 still needs to be defined here. Also, AnsibleAWSModule lets you do `self.ecs = module.client('ecs')` and `self.ec2 = module.client('ec2')`, so you could remove the imports get_aws_connection_info and boto3_conn.
Instead of checking `if existing_source_type and existing_source:` after `source: default`, I think it would make more sense to add this after Line 285.
I don't think we need python 2.6 listed as a requirement since that is the standard minimum version for all modules unless otherwise specified.
spec is also returned
Can you please write that: Since Ansible 2.8 they are persisted by default? So it's clear.
`key: write_csv` should be `key: write_files`
I was suggesting the ansible core could add an ipaddr argument type and validate it early enough that the concern from @pdellaert would be addressed both here and elsewhere in an easier way for everyone. It doesn't have to be done as part of this PR.
Refer https://github.com/ansible/ansible/pull/59914#discussion_r313247935 Same doc guideline is followed for other modules.
Keep a blank line between examples for readability.
Thanks - I've replaced all uses of `filter` with comprehensions.
```suggestion - List of paths to include. ```
Do you have any references for the inline if being discouraged? If you don't like the inline if, then I'd go with the normal if block.
Please rename **follow** to **insertafter**, that is an existing parameter already used by **lineinfile** and better describes what it does.
please use here self.param('version').get('base_template')
I'm not 100% sure this is correct, or at least maybe not exact enough, although it probably works correct. You could probably just do: ``` term_results = [to_text(g, errors='surrogate_or_strict') for g in globbed if os.path.isfile(g)] if term_results: ret.extend(term_results) break ```
AFAIR the flag is `failed`, not `fail`
Looks like we could keep this pretty much as-is if you also remove the getattr() defaults. That will cause line 284/285 to throw an error, and then we can rely on later code to warn the user that the secrets.py file wasn't found.
If we get into this else block the lack of an exception is going to throw a traceback. I'm not really sure about this if/else (could it take a few moments to successfully create the launch config?). But you can just fail with the module.fail_json(msg="helpful message") here since there isn't a traceback or an exception to have a .response.
same here for arg bools vs strings- this needn't exist
Are there any other IDs/names that a url_map would be known by? If so, we should call this "url_map_name" or something.
use `fetch_url` instead of `requests.get`
```suggestion - Network backend to use for this definition. Currently supports `networkd` (default) and `NetworkManager`. ```
So why are you setting `ip_configuration` with `ip_configurations`, if there is only 1 IP configuration then shouldn't the Azure SDK be able to handle that within the `ip_configurations` field making this a moot parameter.
This regexp should be put into a constant, especially since it is reused multiple times. Also, maybe it makes sense to precompile it (and potentially others) with `re.compile()`.
+10k to what @sivel states above
use `fetch_url` instead of `requests.get`
This module only deregisters a module if `current_target_state` is `unused`. I would like to use it to deregister used targets. This fails silently now.
Just a matter of opinion, I don't like the strings symbolic_link, junction_point and hard_link. I would prefer: *symlink*, *hardlink* and *something* else for junction_point :-) The strings for Linux/Unix is *link* and *hard* which is also not optimal ;-)
Well, how do you determine which action was just run if you only return `changed`? The `state` is standard key which is expected to be return by any module. Please add it (`state=state`).
Method name is deceiving, since the body of the method will only set a single attribute.
Capital letter at the beginning and dot at the end.
It's rarely appropriate to catch all Exceptions.
Same for other description.
You should be able to use `self.vmware_test_platform` here.
This feels wrong because if it matters that we get inventory_hostname when using delegate_to then we wouldn't want to also use inventory_hostname in the non-delegate_to case... that probably means that this happens to make some test cases work but hte real bug is elsewhere (or we shouldn't have inventory_hostname in the else?) Would need to explore this more to understand what's actually happening here.
We can use `urlparse.urlunsplit()` and `urlparse.urljoin()` here.
When the new iLO version is installed, this argument is not used. I think you should hint at this in the docs or use this argument to create the ssl_context in the new version. If I set ssl_version to TLSv1_2 I expect that a TLSv1_1 connection would fail, but that is not the case with this implementation.
"Post the tags" is not very clear (and the fact it uses POST not interesting). "Perform assign/unassign action" ? More importantly I'd say a few words about what `tags` is.
Ah, I misread that. Totally makes sense :)
No longer need deepcopy
Also, you could go for a generator comprehension with extending the command: ```python cmd += ''.join(' "%s"' % dist for dist in distributions) ```
To match style in other AWS modules, can you please use `policy` to take a "json" typed argument and a mutually exclusive `policy_file` argument to take a file path? That way users can specify a JSON string, a regular YAML dictionary, or a file from another source so they have the maximum flexibility.
No wrap needed.
It seems network integration test is failing because of PR #47345, hence reverting the PR
Maybe we can remove the `if min_version:`? min_version has a useful default, and if `min_version=None` is passed, it is OK to explode, from my point of view.
The CloudStack API accepts a resourcetypename parameter in the listResourceLimits endpoint. You could avoid the need to maintain this mapping if you used that instead of the resourcetype parameter. You'd just need to get the list from the docs, have them as choices in your module arguments and pass the chosen one directly.
```suggestion short_description: Uses onesixtyone to find hosts to target ```
I am probably wrong but I swear there was a case where we load the plugin even when it may not be used but I can't for the life of me remember what it could have been. Hopefully bcoca can let me know whether that is true or not. So if the above is true if requests was not in the try/except block and Ansible goes to load the plugin (even when the user didn't request it) then it will bomb out.
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific version_added when the options have been added in a newer release.
```suggestion - Allows a pre-defined MAC address to be assigned to the cloned VM. ```
Same, `device-mac` or `device-mac-address`.
You don't need to specify `default: null` as that is the default.
Don't return the value as part of `ansible_facts`, this should be reserved for facts about the remote host (executing the module). We are getting facts on another resource that's not necessarily related to the executing host. Because these aren't stored as part of the facts we can shorten the name of the key. This is because there is no need to let them know this is Azure VMs, they already know because they ran an Azure module and registered the result. I would personally use `vms` as the key but up to you if you want to use another name. tldr: just do ``` self.results = dict( changed=False, vms=[] ```
You'll need: ``` python retries = sorted(list(retries)) ``` sort() is an inplace sort and returns None.
Very interesting. I haven't seen this happening for all my `letsencrypt` PRs over the last few weeks. I'll investigate a bit, this made me very curious :)
s/status is/facts are/ Since we are returning the facts, which also includes status.
fail if `scope=user`. (root and scope=user are incompatible)
I think this may read better: ```suggestion if missing_keys: ```
The usual idiom I see with these *Module type of classes is that they hold onto module in an attribute. I happen to think that's the wrong thing to do (as it leads to calling self.module.fail_json() instead of raising exceptions that are then handled at a higher level). But if you aren't going to hold onto module, you shouldn't pass it into the constructor. Instead pass in the specific parameters that you care about: ``` python def __init__(self, path, state, force, check_mode): ```
Ok. We can work an clarifying the description if it is not clear enough. If you have any helpful suggestions as to how it could be less confusing, please share.
You should be able to use `self.vmware_test_platform` here.
``` auth_key=dict(type='str', no_log=True) ``` -> ``` auth_key=dict(type='str', no_log=True, fallback=(env_fallback, ['MERAKI_KEY']), ```
i'm not sure that makes sense, if handler was not included, it would not be available for notification already. Since it should already add the conditionals inherited (only on import or include + apply) you should not need to check any other conditions.
same here, snake case, and convert value to lowercase
Please change this to 1.1
AFAIR the flag is `failed`, not `fail`
even cleaner ```yaml - include_vars: "{{ item }}" when: item is file loop: - "{{ ansible_os_family | lower }}.yml" - "{{ ansible_distribution | lower }}.yml" - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml" - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version.replace('.', '-') | lower }}.yml" ```
might as well get rid of any `required: false` and `default: null`s
```suggestion _vars_sources = {} ```
Well, I am mostly concerned with absent/present because that is a generic option used by other modules. Besides your examples use it as lowercase anyway. For the others, if the casing is important, leave as-is, but ensure you validate using strict casing as well, or users with casing-issues may get an ugly exception.
Once we have a client, I don't think we need to handle this exception again.
My concern about this really needing to be two modules, one for settings_facts and one for settings, has not been addressed.
I'm ok with this change, however the additional formatting changes should be reverted. The current formatting meets our code standards.
Do we have PEP257 linter in CI? It should've failed here.
Both [`exit_json`](https://github.com/ansible/ansible/blob/ebd08d2a01d96d41f8bc1ccf27bc1bbf91060a44/lib/ansible/module_utils/basic.py#L2254) and [`fail_json`](https://github.com/ansible/ansible/blob/ebd08d2a01d96d41f8bc1ccf27bc1bbf91060a44/lib/ansible/module_utils/basic.py#L2261) methods call `sys.exit`: the old code checked that `fail_json` has been called and would have failed if `exit_json` were called in `pip.main`.
Yeah, I think we need to improve the logic, to not just strip. But instead normalize the filename by checking if `f[0]` is `*` and then only stripping the first char, while also using `os.path.basename` to strip things like `./`. Maybe this instead: ```diff diff --git a/lib/ansible/modules/get_url.py b/lib/ansible/modules/get_url.py index 94d1d88dcb..574e4fbe63 100644 --- a/lib/ansible/modules/get_url.py +++ b/lib/ansible/modules/get_url.py @@ -514,7 +514,9 @@ def main(): for line in lines: parts = line.split(None, 1) if len(parts) == 2: - checksum_map.append((parts[0], parts[1])) + if parts[1][0] in './*': + parts[1] = parts[1][1:] + checksum_map.append((parts[0], os.path.basename(parts[1]))) filename = url_filename(url) # Look through each line in the checksum file for a hash corresponding to ```
you can use get_id_by_name, and don't have care about checking.
Please fix the trailing space and it's ok to be merged. Thanks!
Needs a period at end of the description
`default=True` (as it's a bool, not a string)
plugins should not error on import, capture the fact that it is missing the library and exit on 'parse' also see ` from ansible.basic import missing_required_lib` which gives users specific information.
```suggestion - Name of the package to install, upgrade or remove. - The C(all) package can be used to .... ```
1) Is this the same as EOS & IOS's privilege mode? 2) Would a password ever be needed 3) In Ansible 2.5 we are moving to using the standard Ansible 'become` system to enter enable mode, though that requires `connection: network_cli`, which I don't believe you are currently using.
Perhaps it would be a good idea to display the actual `message` from `ImportError` also? Then you would actually get a better understanding of what was missing, instead of having to try and install everything.
Remove the "See examples."
Remove the `try` block, it is unused.
Required: false is implicit and not required
How about: ```suggestion if not os.path.exists(file_path): continue ```
This protests if I only specify TargetGroupArn and only uses TargetGroupName (to then get the ARN).
`is` tests identity in python so if statement always produces a change. We need to use `!=` here to compare equality instead of identity.
The reason is we don't really want to specifically call out relative paths as what they are relative to is determined by the setup of the remote system rather than anything under ansible's control.
```suggestion is_auto_revert=dict(required=False, type='bool', default=None), ```
Don't align things like this (it violates pep8 and is annoying if a longer thing gets added later)
Guess you'll have to drop this line
Don't add this, we are deprecating this for modules that predate v2.4. So very soon all modules will have this removed.
If a parameter is not required, you don't have to add this. This is implied, `required:` is only needed for parameters that are required.
How about - ```suggestion for key in ['title', 'description', 'index_prefix', 'creation_date', 'writable', 'default', 'index_analyzer', 'shards', 'replicas', ] if module.params[key] is not None: payload[key] = module.params[key] ```
And just because we show signs of OCD. The items in `description:` should end with a dot. This is not true for `short_description:`, there we do not allow a dot. Isn't life beautiful like that ? :-P
The module has required options, but you don't provide any in this example.
this is checking the directory on the controller, not on the remote
Suggest changing to `if 'tags' in host:`
botocore.exceptions.PartialCredentialsError can also occur on connection creation.
Maybe it's better to return `value` and `value_pretty`? Or `value_bytes` and `value`. We should try to make it as easy as possible on the user. For example in Postgres you usually use byte values with a suffix, so it should be easy to use it like that in the module. For example if I want to compare values I shouldn't bother with units etc, just compare my value to the registered value.
Please use `C(present)` and `C(absent)`.
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` mutually_exclusive ```
same typo here WinTreshold -> WinThreshold
That should already be the case except where 'python stringification' takes place, ... which affects fields like Default but not most others. Removing the python stringification would make it match.
Remove the two extra double-quotes here.
So if I update some parameter+ change state to running, it won't start, IIUC
should the line start with `gitdir` or should it be in the end of line with smth prefixed? you might want to prefix the regex with `^`. On the other hand, taking into account that regexps are expensive, you could just use str.split or partition with bits of validation on top, like: ```python try: ref_prefix, separate_git_dir = data.split('gitdir: ', 1) if ref_prefix: raise ValueError('.git file has invalid git dir reference format') if not os.path.isdir(separate_git_dir): raise TypeError('%s is not a directory' % separate_git_dir) os.environ['GIT_DIR'] = separate_git_dir except (TypeError, ValueError) as err: """``.git`` file does not have a valid format for detached Git dir.""" module.fail_json( msg='Current repo does not have a valid reference to a ' 'separate Git dir or it refers to the invalid path', details=str(err), ) ```
Instead of listing here, point at `ansible-doc -t conneciton -l` and maybe link to the connection plugins page, since this can change by installation.
Should be 2.4 (as we don't backport new modules to older releases).
this condition, and previous one, are complicated. partly caused by `set_data` asymmetry. can you first compute 2 vars with existing notes and new notes (using None or '' where missing), and then just check `if old_notes != new_notes:`? Also, please open manageiq-api issues for each read vs write format asymmetry in the API. There are too many of these :-(
Not required, we already have method called `connect_to_api`. Also, I would recommend to use `from ansible.module_utils.vmware import PyVmomi` which base class for all VMware_* modules.
no need to specify required=False or type=str as these are defaults
Actually, my formulation is closer to what happens in Python2 as well. ```objects.items()``` on Python2 creates a list whereas mine creates a tuple. (and the code in this PR creates a new dict).
Thanks, that's the point I want to get. Your code is consistent among 2.x and 3.x, because `for line in f` returns `line` consistent with `r''`.
If it is not required, you don't have to add `'required: False`.
Make this: ```yaml type: bool default: 'no' ```
```suggestion version_added: '2.8' ```
It's more about doing it step-by-step. It should be the first step, yes. Yet, it now feels like the entry point got spread out across multiple places. It's fine to keep it here for now. I don't want to be overly nitpicky. It's probably good enough for the first iteration.
Is this for Python 3 compatibility? I don't see what might raise a TypeError. It doesn't look like any of the list-type parameters take dict or mixed type elements.
Please use add `type: bool`
Similarly, this option is highly `network_cli`-specific, so much that I'm pretty sure `netconf` doesn't even need it. This should go back to `network_cli`
Will fail if `self.systems_uri` is not set yet.
``` from ansible.module_utils.common.process import get_bin_path ```
It might also be no IGWs found here.
The grow and shrink booleans are used for allowing to grow and shrink the image. (That is why they default resp. to true and false). So you have to compare the original size against the wanted size, and if it shrinks and shrinking is allowed, only then should it resize (otherwise it needs to escalate). Similar for the grow-case.
Why can't we just use `SHOW` to check if the parameter is set to the correct value? Not supporting check mode is a big limitation for this module which for me it would make it useless. Postgres is usually a very I important so I should know what changes are going to be made on it, before they are made.
Ditto about the deprecation notice
This will need to be version `2.10`.
Make a common method in class to get url and return json loads response.
Lines don't need to be wrapped so short since we allow up to 160 characters.
Even if you look at it in detail, these things are easy to overlook - when you wrote them yourself. This is why it's good to have someone else read docs as well ;)
This needs to be addressed.
Ok, there are a bunch of these that need addressed, to index your format string for py2.6 support.
Please verify, before push. `required_of` -> `required_if`
That `__metaclass__ = type` line in the top of this module turns all classes into new-style automagically. So you don't need to inherit from `object` explicitly anymore. ```suggestion class PodmanManager: ```
@gforster Beware you broke YAML there ! But I put your suggestion into mine.
I don't think the `+` applies, if I read COPYING.
type='str' is a default value, not require to explicitly mention it
Looking through the code more carefully, I think this change is correct. We should only being using `hostnamectl` where we pass it flags to return _only_ the hostname. That is currently the `SystemdStrategy` class. Otherwise the value returned from `self.hostname_cmd` would be not at all what we expect. I don't think having this conditional buys us anything, nor does it help with backward compatibility.
Use `get_bin_path()` to ensure we always can find the command in case the path changes. ```suggestion vm_stat_command = get_bin_path('vm_stat', True) rc, out, err = self.module.run_command(vm_stat_command) ```
This doesn't currently appear resilient to missing collection(s) in the group's list (eg, you only have `amazon.aws` and not `community.aws` available).
No line break.
disks = self._module.params.get('disks', list())
`Description` (capital letter)
```suggestion changed = False if not module.params.get('size', False): module.fail_json(msg='Size is required to update volume') ```
Typos, should be: `The ID or Name of the Hetzner Cloud Network.`
```suggestion return super(cls, new_cls).__new__(new_cls, *args, **kwargs) ```
We support python-2.6 and python2.7 (and python3.5 and above) in controller code (which this is). For modules we support python-2.4 and above unless there's a dependency that requires a newer version of python.
Hm... How about then introducing a prefix for such settings at least for this module? So, if user wants to provide binary data to be stored in property, they'd have to say, e.g. 'B64:blah' (where blah would be base64-encoded data). Caveat being that if users wants to store string which starts with B64:, they'd have to do something along the lines of B64:QjY0Og== (QjY0Og== being base64-encoded B64:, I think you get the picture :) Now, truth be told, not sure if this would be more acceptable for Ansible as project, but I'd see it as more consistent. Maybe second opinions on this could be useful too :)
Move this up to before line 2641 so that the diff is returned in check mode.
This break will be unnecessary if the loop gets dropped
`self._url` is hardcoded (to `"/jsonrpc"`) in `login()`, sent through `to_text()` here, and also stringified on the immediately preceding line of executing code. on the next line of executing code. Is there any particular reason for all this, or would it be just as clear to do this instead? ```suggestion response, response_data = self.connection.send(path='/jsonrpc', data=to_text(data), ```
I would prefer the syntax `[7, 8]` comma separated can be confusing
It'd be good to include a default sleep here so this loop doesn't continuously hit the oVirt endpoint. Even just a one or two second sleep would be fine between tries.
@kaneda-fr its a direct network. is there anything in particular you'd like me to pull for you in the config. i will warn you, i'm very new to VCD and pyvcloud so this is me trying to get to where i'm not just using the gui all the time. I did not set this up, it was already configured. are you in the irc channel? if so i am xaeth
In the code, you enforce setting all 3
Need a space here
What are the properties? * As other modules, we flatten the properties in the ansible module's parameter. * And for the second level of dict type, we can use `options` to specific another spec to define the key-value pairs in the dict. Like ``` py props_spec={ name=dict(type='str') } self.module_arg_spec = { props=dict(type='dict', options=props_spec) } ```
Thanks, that's the point I want to get. Your code is consistent among 2.x and 3.x, because `for line in f` returns `line` consistent with `r''`.
We like to separate out our imports as stdlib imports, stdlib from imports, blank line, 3rd party libs, blank line, ansible.module_utils libs. So it will look like this: ``` import collections import json import logging import os from copy import deepcopy from ansible.module_utils.basic import AnsibleModule ```
```suggestion b_password_string = b"|".join((br'(\w+\'s )?' + to_bytes(p.format(**self._fields))) for p in prompts) ``` `.format` requires splatting the dict, instead of just the dict itself
```suggestion array = module.params['force_array'] or (values is not None and len(values) > 1) ``` to avoid ambiguities when reading
`Could not recursively set attri...`
The comparison doesn't work even for valid values. I've run the following commands: * `openssl x509 -noout -modulus -in m.ansible.com.crt | openssl md5` * `openssl rsa -noout -modulus -in m.ansible.com.pem | openssl md5` * `openssl req -noout -modulus -in m.ansible.com.csr | openssl md5` They all output the same md5 meaning they're all valid for each other yet this test fails. I'd guess the content of the object needs to be compared, not the object themselves
Yeah, looking at the code, I remember this.... the output phase was really, really screwed up before (intertwined with the data processing phase) and we were on a deadline so I didn't fully decouple the output phase when I restructured the run() method. There should be another explict phase (processing) here: https://github.com/ansible/ansible/pull/72359/files#diff-9732216f79978750789dbeb4c2ed1280d841c4211306ecb1b5c70e3db3fcb2f7R263 All of the generation of the stuff in the generate extra data section of `format_plugin_doc` should go into that phase.
It's more about doing it step-by-step. It should be the first step, yes. Yet, it now feels like the entry point got spread out across multiple places. It's fine to keep it here for now. I don't want to be overly nitpicky. It's probably good enough for the first iteration.
Please restore, or the module will fail to work in v2.7+
The term is "Azure Container Service", "instance" is not in the term, no need to capitalize it
You could convert things to int right here: ```suggestion requests_version = tuple(map(int, requests.__version__.split('.'))) ```
My bad. Didn't see if in later stages.
Creating paths by concatenating them together is a no-go with Redfish. Paths should always come from the Redfish responses itself (`redfish/v1` being exception here).
Same here. You are changing behavior. ```suggestion data = host_fh.read() ```
Please replace with `type: bool`
```suggestion the original private key back if you created a new one by accident. ```
Yeah -- just for info, to_native() is preferable because, with default arguments, it won't traceback if non-ascii values end up in the exception message. In some cases, non-ascii will traceback with str() and with ```'%s' % e```.
This should be `'supported_by': 'community'`
This can be moved to `check_dict` method.
Please replace your mail with your github handle (also in cloudscale_server module)
Rename DO to DigitalOcean to avoid acronyms
I believe you should be able to update ``` $modules/cloud/amazon/: ignored: erydo seiffert simplesteph nadirollo tedder joshsouza maintainers: $team_aws ``` And add defionscode to the amazon/ ignored list
Beware that in your examples, you are actually using `application_profile_name` not `app_profile_name`
This check would have to be adjusted for `db_all` if you make the above change.
VM or VirtualMachine
use to_text instead of str()
CI failure due to: ``` 2017-01-31 20:28:20 ERROR: PEP 8: lib/ansible/module_utils/basic.py:725:18: E121 continuation line under-indented for hanging indent (legacy) ```
we cannot set remote_addr w/o post_validating first
This condition can be simplified to be more readable ``` if backup_options and backup_options.get('filename'): result['date'] = time.strftime('%Y-%m-%d', time.gmtime(os.stat(result['backup_path']).st_ctime)) result['date'] = time.strftime('%Y-%m-%d', time.gmtime(os.stat(result['backup_path']).st_ctime)) else: result['date'] = tstamp.split('@')[0] result['time'] = tstamp.split('@')[1] result['shortname'] = result['backup_path'][::-1].split('.', 1)[1][::-1] result['filename'] = result['backup_path'].split('/')[-1] ```
at this point you are just making a copy of the copy action plugin, this is something we want to avoid, a role that uses both copy and docker_service is more appropriate in this case.
This needs to be '2.8' since freeze dates for 2.7 have passed.
We've switched from pipes.quote() to six.moves.shlex._quote for python3 compatibility: ``` python from ansible.compat.six.moves import shlex_quote out_path = shlex_quote(self._prefix_login_path(out_path)) ```
Actually... Even better: use a defaultdict instead of this. This is how defaultdicts work: ``` python from collections import defaultdict foo = defaultdict(list) foo[k].append(v) ```
Note: you don't have to use set explicitly here. The set methods can work with an iterable (which tuple is)
Please add docs on what this module returns.
This condition can be removed
While fixing bugs is important, we typically do not prioritize bugs that are the fault of other software, or software that misuses the Ansible Python API. Ansible itself does not suffer from these problems, thus it sounds like the actual bug is really in ansible-lint that is causing issues. Making these changes, could result in bad behavior of Ansible itself, since we may be handling this differently elsewhere.
Do we need to do any check on this? Can this fail due to permission issues, or due to the file already existing? I'm fine with this always overwriting the destination file, and coming up `changed=True` every time, i just wonder if there is a risk of exceptions (pretty sure both `fetch_url`, `open` and `write` can throw a bunch of exceptions.)
Missing full stop
No need for this var actually: ```suggestion ```
Remove the portion that adds message as a special key. If there's modules returning message expecting it to be treated specially, change then to return msg instead
Same for VMs.
@willthames yep, thats the only way I see of doing that, create in tmp dir, md5sum both of them, if match OK, if different CHANGED. Although that does add some complexity.
boto_profile should be aws_profile, but rather than passing these explicitly, it seems like other lookups use **kwargs instead. If you change that to **kwargs and if you use the doc fragment for credentials, then you'd need: `self.set_options(var_options=variables, direct=kwargs)` below and then you can access any of the options with `self.get_option(optionname)`.
this could just return ```suggestion return not self._raising ```
aws_ip_ranges -> aws_service_ip_ranges
Shouldn't have `required: true` for things that have a default.
ack. merging this in since this isn't a blocker.
Plz also use `match` arg here
Similar here (and all the other ones, I guess): ```suggestion - Maps C(docker service create)'s C(--constraint) option. ``` or ```suggestion - Corresponds to the C(--constraint) parameter of C(docker service create). ```
This debug needs to be updated for a few things: 1. Use full YAML syntax, not `key=value` 1. `.pid` should be `.pids` 1. Instead of `','.join` please use the `|join` jinja filter.
I would insert an empty line in front of every example to separate it a bit.
Remove the portion that adds message as a special key. If there's modules returning message expecting it to be treated specially, change then to return msg instead
``` - dict of registered cluster nodes (with C(nodename) as the key and last registration time as the value). This is 'registeredNodes' in KeyCloak REST API. ``` Example of mentioning the upstream api camel case name.
Looks good to me! This is working as expected. A couple minor things I noticed: * Using STS credentials doesn't work with dynamic inventory (it doesn't work on devel either). * I'm also wondering about this bit. I'm reading the removed lines 459-462 as 'if this group_by_thing doesn't have the option provided it defaults to true' - if the file doesn't exist then it seems like the behavior is changing a little. (such as, group_by_aws_account is false by default in the ini but if it isn't provided it defaults to true here; now it defaults to false always). I think that's okay though.
Sorry...nitpicking - I think ``` security_groups = get_ec2_security_group_ids_from_names(module.params.get('security_groups'), ec2_connection=ec2_connect(module), vpc_id=vpc_id, boto3=True) ``` is a lot easier to read. Not a blocker, just my opinion. But boto3 needs to equal to True here.
It might also be no IGWs found here.
You don't need this conditional, since Ansible enforces that these are the only choices.
this should really be stdout or stderr
Just to be safe, we should raise an exception here if `ansible.module_utils.basic` was not found. It shouldn't happen, but if it does, the `ImportError` message will be wrong and confusing.
Typo in `module_utils`.
i'm not sure that makes sense, if handler was not included, it would not be available for notification already. Since it should already add the conditionals inherited (only on import or include + apply) you should not need to check any other conditions.
```suggestion module = AnsibleModule(argument_spec=argument_spec, mutually_exclusive=[['retention', 'purge_retention_policy', 'overwrite']]) ```
could be just `if module.params['dns_domain'] is not None:`
If there are uncommitted changes on the prompt, this will not exit. Assuming there are no uncommitted changes, you can use `end` instead of `exit` to exit from configure mode. If stale uncommitted changes are expected by any chance; use`abort`. This will abort any uncommitted changes and bring prompt out of configure mode. This may apply to other platforms as well.
```suggestion vmware_host_snmp: ```
```suggestion version_added: '2.8' ```
Drop the extra "Mac" here.
Please call this only when needed and report change=true/false if it was called and is needed.
Apparently, I don't have permissions to push to your branch. I didn't want to hold up merge. Feel free to raise a PR to fix this if you'd like, though don't lose sleep over it
Same here. ```suggestion self.cron_file = os.path.join('/etc/cron.d', cron_file) self.b_cron_file = os.path.join(b'/etc/cron.d', to_bytes(cron_file, errors='surrogate_or_strict')) ```
Can you add: ``` type: bool default: no ```
we try to use 'state' instead of action, as ti keeps with the declarative voice of Ansible vs an imperative approach from programming languages.
```suggestion - Gitlab access token with API permissions. ```
```suggestion - Must be in the same resource group as VPN gateway when specified by name. ```
This option isn't required but is throwing an error for me if not provided (because if not provided it attempts to iterate over a Nonetype). Can you add default=[]? fixes the problem for me.
right now, this would need to be version_added: '2.6'
Please add dot at the end.
Same thing here: need `post_reboot_delay_sec` here since `win_reboot` accepts that.
no, if the variable is set but empty, you should empty out the options
You're right. I also checked the source at tag `2.1.0`, and it contains that parameter. I guess they did some refactoring between 2.2.x and 2.3.0 which resulted in that commit...
This method is called with only one argument, but there are no defaults given for the unused arguments. If it is called, the `NotImplementedError` will never be reached.
traditionally, variables is a keyword arg. I don't think it matters in our paticular code base but we should keep it consistent with other lookup plugins.
I'd move this into an example
When pytest executes on multiple nodes, each node is required to collect the same tests in the same order. If that does not occur then test collection fails and tests are never executed. This is usually only an issue with parameterized tests that source their items from dicts on older Python versions, although it can occur in other scenarios as well. Thankfully the solution is straightforward. Just make sure parameterized tests use a list or tuple, or if using a dict, that the items are sorted before giving them to pytest.
Ah, I see it now. yeah, so just change self to be cls to match convention when using `@classmethod` and it should be fine.
No need to quote strings here.
Not sure if this piece is doing exactly what you expect in all cases.
Boolean parameters: add default value (`False` is default value for `has_expired`, `extendedKeyUsage_strict`, `subjectAltName_strict`).
It's addressed here https://github.com/ansible/ansible/pull/47803/files#diff-4e0a09d18f6dfe19eb9d0b30c0a53bafR16
All new modules should include actual RETURN data.
tempted to say just use check_opts=True and remove syntax check afterward with remove_option (we do this in ansible-inventory).
What's the difference between Seeing state `present` and state `update` looks a little strange here. ```yaml - name: Change role type for existing user purefa_user: name: ansible role: storage_admin state: present # <---- fb_url: 10.10.10.2 api_token: e31060a7-21fc-e277-6240-25983c6c4592 ``` ```yaml - name: Change role type for existing user purefa_user: name: ansible role: storage_admin state: update # <---- fb_url: 10.10.10.2 api_token: e31060a7-21fc-e277-6240-25983c6c4592 ```
This could have prettier formatting: ``` ANSIBLE_METADATA = { 'status': ['preview'], 'supported_by': 'community', 'version': '1.0' } ```
2.5 at this point but i'll fix after merge
Spaces ! ```suggestion choices: [ absent, present, query ] ```
```suggestion module.fail_json(msg="The following packages are absent in the currently booted rpm-ostree commit: %s" % ' '.join(pkgs)) ```
I think we should guard against an `IndexError`. Even if Linode guarantee us some value, given programming error and such, I'd like to guarantee users of this module error messages that lead them in the right direction.
why it's `yum` here, but `pip` in the previous error? be consistent and tell users to use what they have. which can be many more package manager options
Hello @resmo Thank you for your feedback. Unfortunately, the 1&1 python SDK is currently throwing a generic `Exception` in `modify_server_status` method, which is why we catch it here.
Format this like this: ``` response_add_content_server_group, info = get_response( add_content_server_group) ```
This needs removing ``` - This argument specifies to include passwords in the config when retrieving the running-config from the remote device. This includes passwords related to VPN endpoints. This argument is mutually exclusive with I(defaults). ```
`across` has broken into two separate lines.
A trailing comma is preferred.
seems gateway and netmask are only required in case of state=present, are they? In this case i would suggest to: ~~~diff argument_spec.update(dict( network=dict(type='str', required=True), zone=dict(type='str'), start_ip=dict(type='str', required=True), end_ip=dict(type='str'), - gateway=dict(type='str', required=True), - netmask=dict(type='str', required=True), + gateway=dict(type='str'), + netmask=dict(type='str'), start_ipv6=dict(type='str'), end_ipv6=dict(type='str'), gateway_ipv6=dict(type='str'), vlan=dict(type='str'), state=dict(choices=['present', 'absent'], default='present'), domain=dict(type='str'), account=dict(type='str'), project=dict(type='str'), for_virtual_network=dict(type='bool', default=False), for_systemvms=dict(type='bool', default=False), )) module = AnsibleModule( argument_spec=argument_spec, required_together=cs_required_together(), mutually_exclusive=( ['account', 'project'], ), + required_if=(("state", "present", ("gateway", "netmask")),), supports_check_mode=True, ) ~~~
Incorrect description; "If remote gateways can be used on this virtual network."
Not sure why you need all this complexity ? (And the complexity below) I would have expected this to be much more simple.
before continuing here, check that fields is actually populated as a list, or try/except the following code
I've updated `required` to `false`.
`No reason given` is fine
Nice! Thanks for remembering this :) Oh, I think you just copied this from below!
Commit if changed.
Default mentioned in description but not specified in argspec.
Would you please change this to type str with choices `[disable, enable]`? This would make bfd type consistent across all the modules.
Is there a reason to do deepcopies here (and at the top of a few other methods)? deepcopies are slow and it doesn't look like the data is being modified (for which you might want to have a pristine copy and a modified copy) so you can probably discard the deepcopy to improve your speed.
Should this be `response` since that is what is returned? I don't see `result` used within this function.
This should be a string: ```yaml version_added: '2.4' ```
`Host group` (copy/paste, i guess)
`get_config` is not implemented in the cliconf plugin. This function is not used and will only ever return `"None"` if tried.
You don't have to quote YAML strings. Quote only `yes` or `no` to prevent it to turn into `true` or `false`. Please also unify the quotes to either single or double quotes.
please add `version_added: 2.5` that's why the build fails
Actually... Even better: use a defaultdict instead of this. This is how defaultdicts work: ``` python from collections import defaultdict foo = defaultdict(list) foo[k].append(v) ```
When using format, you will need to specify the index `{0}` so this would still work with Python 2.6
This isn't needed anymore as it is part of the parent class value. **Note**: Default has been set to `False`, so the logique about self.changed needs to be updated in the rest of the code.
This could be `elif`.
```suggestion short_description: retrieve info regarding domain objects of all kinds ```
Default not set in argspec.
Same - please use `len`
This should probably be `if env_variables is not None` so that a user could pass an empty dictionary and wipe out the existing vars, but if they leave it blank the existing settings won't change.
I would also do `not host` as `''` is both a string and not None, but i would argue still an invalid host
Same as for the updated, I'd rather say `has been deleted`
Default value mentioned but not added in argspec.
Similarly, this option is highly `network_cli`-specific, so much that I'm pretty sure `netconf` doesn't even need it. This should go back to `network_cli`
```suggestion type: list elements: str ```
I think changed needs to be set to True here.
I'm not clear on what conditions would trigger this, or what the user's action should be if it did occur.
```suggestion - name: Test VMware Tools Connection Plugin for Linux ```
All our parameters that accept lists, accept single items too. But we never offer both the plural and singular version for parameter name. A one-item list, is still a list :-) So I wouldn't bother. IMO offering both is more confusing as people may assume that: ```yaml ssh_key: my-ssh-key ``` means there is only one SSH key to add. That is why I would only have the plural form and no aliases. It will end up to be more consistent between users/playbooks and it's clear the parameter accepts more than one value.
Sure, warnings are an option. But if it does work as non-root, I wouldn't add the warning.
Please use 'msg' for returned messages, this is a standardized return value.
Use `to_native` for wrapping error message.
```suggestion - The URLs to retrieve the public I(blob), I(queue), or I(table) object from the secondary location. ```
Instead of `namestr`, `name` would be more apt since it will match rest of the modules.
right now, this would need to be version_added: '2.6'
This code is pretty incomprehensible, I'd try and avoid map and lambda and use a list/dictionary comprenhension (or a for loop if it's still unreadable)
I like this simplification but I believe that it should done somewhere in the core (suggestion for another PR) and not on per-module bases.
If we can get away with it, I'd like to change this to same so that touch is idempotent by default. But probably need to run it by the other committers. It is backwards incompatible but more sensible API (If the other committers deem backwards compatibility to be that important, then jborean's proposal sounds best. If timestamp is None: use correct default for the state specified)
It would be a nice idea to have return dict. not blocker though.
Will fail if `self.manager_uri` is not set yet.
You don't return this one as well. Only specify things in `RETURN` which you actually return!
```suggestion - Threshold for defining a lossy connection by packets that time out and get retransmitted. - A connection between client and Avi is considered lossy when more than this percentage of packets are retransmitted due to timeout. ```
This code will traceback if the dirname component has non-ascii characters in it on Python2. ``` >>> os.path.dirname(os.path.abspath(b'/var/tmp/cafÃ©/test_ios.py')).encode('utf-8') Traceback (most recent call last): File "<stdin>", line 1, in <module> UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 12: ordinal not in range(128) ``` We also have the convdention of using a ```b_``` prefix on any variable which holds byte strings. So, use something like this instead: ``` python from ansible.module_utils._text import to_bytes b_FIXTURE_DIR = b'%s/fixtures/ios' % to_bytes(path.dirname(path.abspath(__file__)), errors='surrogate_or_strict') ```
I've also double checked what happens in the scenario you mentioned, and below is the result I receive. So I actually this this method is fine, and there is no need to change it Apart from ensuring the params are not None before checking if they are an existing file. ``` BotoServerError: 400 Bad Request\n<ErrorResponse xmlns=\"https://iam.amazonaws.com/doc/2010-05-08/\"> <Error> <Type>Sender</Type> <Code>MalformedCertificate</Code> <Message>Unable to parse certificate. Please ensure the certificate is in PEM format.</Message> </Error> ```
Not required with AnsibleAWSModule
You know you have a real problem when CI fails and people are discussing why that might be :-P
In order to improve readability (meaning the change described below isn't required): * `delete_cert`, `import_pkcs12_path`, `import_cert_path` and `import_cert_url` never return (either `exit_json` or ` fail_json` are called) * it's quite disturbing that `changed` isn't set (and it doesn't need to be set) when `delete_cert` is called then i would rather call `module.exit_json(changed=changed)` here (then keep `module.exit_json(changed=False)` unchanged at the end the file.
@ShachafGoldstein I think that you inverted the `name` and the `value` parameters here: It should be: ``` name: "1.1.1" ```
I think this needs to move out one indentation level to match `Field`
```suggestion the I(verification_method) will be updated and validation data (if applicable) will be returned. ```
```suggestion vmware_host_snmp: ```
If the file isn't open in binary mode, there is no reason to decode here. ```suggestion line = line.strip() ```
You're correctly using `type='list'` in the arg_spec, so probably better if at least one example used the native YAML format and showed multiple values as list elements. The arg validator will properly handle coercion of a single value to a list (as the current examples show).
Please format this like this: ```python repo = { "id": repo_id, "name": repo_name, "url": repo_url, "enabled": True if repo_enabled == '1' else False } ```
