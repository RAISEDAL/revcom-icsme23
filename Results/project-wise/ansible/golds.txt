```suggestion default: false ``` `"false"` is a string, not a boolean
Looks like values below in `DT` and `DT_UTC` are 124356, instead of 123456.
We typically convert return results to snake case. ECS must be weird, it returns dromedaryCase (most things return full CamelCase). Still, I see no reason why camel_dict_to_snake_dict shouldn't work
client() will handle any exceptions and call module.fail_json for you, so you can remove the try/except here.
"Password to authenticate the SSH session to..."
Also, if result should return the diff key with the diff in it to support calling `ansible-playbook` with the `--diff` option
Although it's cosmetic, nearly all of our modules use the following syntax since it uses fewer quotes: ```python argument_spec=dict( name=dict(type='str', required=True), ), ``` It also includes trailing commas to make adding additional lines later cleaner.
Add example of disable as well.
As this method is called get_network, we could expect that it return a network device object (or None if not found). Ortherwise we could also rename the method into something like network_exists_by_name.
Shouldn't this be Mapping? ``` python from ansible.module_utils.common._collections_compat import Mapping [...] if isinstance(other[key], Mapping): ``` How deeply nested are your dicts? If they're too deeply nested they'll run into the recursion limit. We can cross that bridge if you start to get bug reports about it though....
please replace `self._module.params.get('id')` by `self.param('id')`
could we just have managed_disk_id? seems like a structure with a single field...
`int` needs singles quotes, like the others, then this works great.
This `if` isn't needed anymore. Because of the previous loop, there cannot be more than two elements in `kwargs` anyway.
/me is confused as well :-)
These values are values the user supplies (with the exception of id), we should just return `id` on the root dict as the rest of the data is already known to the end user.
I'd suggest keeping the old lines 115-116. This section describes the return data, so knowing that it's a dict and having the sample would be useful. The user cannot format the tags in the return data.
This should be paginated: http://boto3.readthedocs.io/en/latest/reference/services/autoscaling.html#paginators
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
This change is correct and follows pep8 style guidelines. Indentation does not always have to be an increment of 4 if it aligns with the above structure.
Add some code below `module = AnsibleModule(...` which checks for `module.params['label'] is not None and module.params['type'] == 'luks1'`, and if that happens, calls `module.fail_json(msg='You cannot combine type luks1 with the label option.')`.
ah, ok, so this is 'load all found' ... the 'first found' usage threw me off. still there is a better way: ``` yaml - include_vars: "{{ item }}" when: lookup('pipe', '[ -f ' ~ item ~ ' ]; echo $?') == '0' loop: - "{{ ansible_os_family | lower }}.yml" - "{{ ansible_distribution | lower }}.yml" - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml" - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version.replace('.', '-') | lower }}.yml" ```
`""` is falsy, so this check just needs to be `if self.scheme:`
Note to myself: this is going to conflict with #72591.
you could do ```python for key, opt in (doc.get('options') or {}).items(): ... doc['options'][key] = to_boolean(opt) ... ```
Actually, better would be to move this to the toplevel as a regular function
i would move name param to the end, just for consistency. ALso we could call it **myVnetPeering**
if datastore already exists
No, I really don't know. Is there no unique reference inside the package metadata ? Something that can be used for making sure what you install is what it is, but also something that can be used to uniquely identify the flatpak for removal ? (e.g. win_package uses product_id, which is something that is inside the package, but gets registered inside the registry as well) In any case, I don't expect you to come up with a technical solution if the issue is in fact part of the technology. But you could bring it up to the developers so they may come up with a suitable solution. Just like it would be nice if the flatpak command was idempotent by itself, supported check-mode (dry-run) and/or has diff-output options :-) Maybe I am just dreaming of a perfect world...
Most modules use the `result` variable for storing the result information for fail_json() or exit_json(). Only one module is using `rekwargs`: netconf_config. 262 using `result`, 27 using `ret`. So up to you, but it's easier if people would use the same standard IMO.
Can you add here that patterns support full Python regex? I see that you straight `re.compile` them later.
`Copyright: (c) 2018, Bojan Vitnik <bvitnik@mainstream.rs>`
```suggestion if not isinstance(uuid_namespace, uuid.UUID): ```
Ideally, since `first_found` isn't really a loop, this entire example should be removed, or updated. Instead the value should be passed directly to `include_tasks`, and eliminate the loop completely.
```suggestion # solaris 11 does not support -H ``` i don't get it how solaris 11 does not support -H , being on my solaris 11.4 box: ``` root@deimos:sysadmin# uname -v 11.4.1.4.0 root@deimos:sysadmin# zpool get -H health amstank amstank health ONLINE - ```
```suggestion # options-router-templates, broadcast-address-offset, dhcp6.name-servers don't have any associated number ```
No, I mean that at line 60 we already do this: ```python if module.params['auth_key'] is None: module.fail_json(msg='Meraki API key not specified') else: ``` And at the very start of the module, we read it from the environment as fallback mechanism. So this is completely useless.
s/to false/to true/
I think it should be of type "path".
This won't work anymore. You have to move the file into `test/lib/ansible_test/_internal/cloud/` (right now it is in `test/runner/lib/cloud/sentry.py`). It's probably best to rebase with current `devel` and move the file to the new place. (Potentially there are other adjustments you have to make, from what I see in d651bda12390e46c85c4487859f030ed8851867a these were mostly changed imports.)
`if not self.argspec_cache:` allows you to have a single return, not blocker, just seems cleaner
How about: "playbooks will follow the trend of using M(command) unless the C(shell) modules is"
```suggestion from ansible.module_utils._text import to_text ``` And change instances of `to_native` to `to_text`. They all go through ansible functions, you don't need `to_native` here.
Please an alias allowing `password_reuse_prevention_days`
I remember having to add the to_bytes()... it could be that an old version of winrm returned text here. I do not remember for sure if that was fixed in the lowest winrm version that we support. Two other notes: 1) This needs to return bytes on python3 as well as python2 2) to_bytes() is a no-op (overhead of the function call and a couple conditionals but no encoding is done) if the string is already a byte string.
Importing the `to_text` function ```python from ansible.module_utils._text import to_text ``` and replacing ```python for key, value in options.items(): if value is not None: cmd.extend([key, value]) ``` with ```python for key, value in options.items(): if value is not None: cmd.extend([key, to_text(value)]) ``` did solve issue https://github.com/ansible/ansible/issues/59095 for me. I however don't know what the consequences are.
This is something that can be fixed/changed in another PR
It's a good question. On one hand, it's nice to have a clean list which isn't littered with extra 1000 fields you're not interested in. On the other hand, it's very annoying if you need something which is returned by docker but thrown away by the module, and you need to loop over the result and feed it into `docker_*_facts` just to get the value back. How about adding a `verbose_list_elements: yes|no` option which toggles between returning a subset and everything? Then one can enable full output if one needs it.
I think we need to check both `version` and `value`. Otherwise just catch the `AttributeError` in the below try/except and give this error there.
``` if self.new_name is not None and self.name != self.new_name ```
Should become parameter `username` (with a backward-compatible alias). (See #20160 and #25398)
`found_disk['os_type'] and not new_disk['os_type']` scenario not covered. Can use `if new_disk.get('os_type') != new_disk.get('os_type')` here
with `use_proxy` you use C(false), here you use C(no). It would look cleaner to use either C(false) everywhere or C(no).
actually, it should raise an AnsiblError exception (I have fixing the other cache plugins to do same on my list)
Shouldn't this be `state`, not `status`? ```suggestion sample: { "state":"Deleted" } ```
```suggestion elif state == 'present' and not cert_present: ```
please add the version added ~~~diff + version_added: "2.10" ~~~
This would need `results['changed'] = True` in the create scenario. We really need a way to checking if we need to update the database instead of doing the operation and checking if it changed there as well.
```suggestion from ansible.module_utils.six import PY3 ```
I am not sure the reason behind removing this default value.
Not really - tox.ini has max of 160 which I'm sure this is well under, I prefer 120, but basically, if I have to scroll right to read a pull request, the line is too long :). 160 is conservative, mostly for historic reasons (and there is *loads* of stuff that would fail if it were enforced), but new stuff should likely be 120. I might endeavour to add that to the development guidelines.
Why remove `action_group`? I think this is a very useful attribute.
How about "If `true`, stopping or restarting a service with dependent services will force the dependent services to stop or restart also. If `false`, stopping or restarting a service with dependent services may fail.
Current description is not very clear to me, I assume it was meant to be something like this: ```yaml - List of host inventory keys to display in result - Whole host inventory is retrieved if keys are not specified ```
Line is too long.
failed POST operation against ...
These docs should also include a `RETURNS` section so users can see examples of what the module outputs in different scenarios.
```suggestion - Will be C(none) if service does not exist. ``` That thing is called `none` in jinja2. (`xxx is none` works, while `xxx is None` does not -- at least when I last tested that.)
Please put this on a single line. Lines can be 159 characters wide.
You can force choices here by adding the choices key: `archive_format=dict(default='zip', choices=['zip', 'tar']` By doing this, AnsibleModule will handle the argument input for you (what default is, and to fail if a bad choice is given)
We recommend Ansible users to always add a `name:` to a task. So we should do the same for the examples. ```suggestion - name: Add NVIDIA repository for graphics drivers with additional arguments zypper_repository: ``` Please also improve the other examples.
Please remove this line, `override_luns` are part of `iscsi` dictinary
Does this not work? ``` python self._task.args.update(self._play_context.module_defaults[self._task.action]) ```
Can be replaced with: ```python def check_service_state(self, host, service_name): host_service_system = host.configManager.serviceSystem if host_service_system: services = host_service_system.serviceInfo.service for service in services: if service.key == service_name: return service.running msg = "Failed to find '%s' service on host system '%s'" % (service_name, host.name) cluster_name = self.params.get('cluster_name', None) if cluster_name: msg += " located on cluster '%s'" % cluster_name msg += ", please check if you have specified a valid ESXi service name." self.module.fail_json(msg=msg) ``` This way it stops looping through services as soon as it finds the correct one, and if it finds none, it fails
`auto_inflate_enabled` is in more ansible way. Use `type: bool` to avoid str choices
Due to this not being a valid parameter with `-Identity` we should remove the default
If the issue is corrected. There will be some cases triggering this branch, please also update the user cases of the `raw_cloud_env` variable.
We want role_version to be defined by the end of the function but this conditional leaves out some cases. What about something like: ``` python if not role_version: if scm: role_version = default_role_versions.get(scm, 'master') else: role_version = 'master' ```
```suggestion authfile = os.path.join(os.environ.get("HOME"), ".one", "one_auth") ```
This change is not valid. It is only updating a single word within the license, and not updating the full license header. Additionally, in order to do this, you will need to get approval from the following additional authors to relicense the code: kedarX ganeshrn
I still think we could do a little better, likely be extracting common functionality out of `ansible.cli.CLI.version_info` into `ansible.utils` The only reason we are passing the CLI is for that info, and the `VariableManager` doesn't need anything else. Decomposing the code more is what I would recommend here, to make it more flexible, and without creating as many inter-object dependencies where it isn't actually needed.
Hmmm, this is indeed somewhat ugly. I would simply put it into `main()`. Or at least get rid of the `if`s and simply write ``` kwargs['option_minimal_versions']['ipvX_address_supported'] = dict(docker_py_version='1.9.0', usage_msg='ipv4_address or ipv6_address in networks', detect_usage=detect_ipvX_address_usage) ``` After all, nobody else is using `AnsibleDockerClientContainer`. Alternatively, we could define `option_minimal_versions` here and pass it to the super-constructor. This will blow up the constructor a bit, but at least it will be a bit clearer :)
use a 'list' type instead, no need to do your own special parsing. The list type supports both actual list and 'comma separated string'.
Well, explicit is better than implicit so that it's not misleading ;)
@samccann Yes that's correct. It should be removed from the task example entirely. As we have deprecated top level spec we would not like to encourage user to use it.
Again, the else here is unneeded and unwanted.
```suggestion - (Deprecate) If a I(public_ip_address_name) is not provided, a default public IP address will be created. ```
```suggestion - Enable API GW caching of backend responses. Defaults to false. ```
I think we can use - `from ansible.module_utils.common.process import get_bin_path`
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` required_together ```
OK. We can add info module as separate PR
Use `to_native` from - https://github.com/ansible/ansible/blob/db304c27c75fd98b78dd0b2e23cb45a014ed6c17/lib/ansible/module_utils/_text.py#L260
I think better would be: ```python bios=( otypes.Bios(boot_menu=otypes.BootMenu(enabled=self.param('boot_menu'))) ) if self.param('boot_menu') is not None else None, ``` You already have check for `None`, so it can be only `True` or `False`.
we tend to use **use_ssl** for this. I know it's a bit outdated, but again, easier for users if we reuse existing parameters.
instead of the negative, make it `set_mask` or `mask` and default to 'yes', same functionality but doesn't require people inverting the feature to use it.
not a show stopper, but the code might be clearer if we just add the '-n' and '%s'/dir_arg in the `if/else` and just execute `run_command` at the end
+1 to Nitz's wording. Collection creators *should* be good with 2.9
Convert author as a list.,
Rather than running this test inside create_autoscaling_group I'd recommend running it in main() prior to any possible changes happening.
A list should be ordered, it's a dict that doesn't have a guaranteed order to the keys.
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
This sample misses the `kind` property for FileStorage.
When hitting an error you must exit with module.fail_json
This is using the ONTAP ZAPI default. We did not want to explicitly list the default value as it could change with ONTAP versions. And we did not want to list the choices for the same reason. If you think otherwise, please let us know. But this means we'll need to update the module each time a choice is added or removed.
Check mode should return the same output as an actual non-check mode. So it should return the same message as well. Ansible itselfs marks the output as 'check_mode', indicating a dry run
`C(40GE1/0/22), C(vlanif10).` will make it a little easier to read.
It would be better if AnsibleAWSModule was used instead of AnsibleModule because the exception handling is better (and cloudfront_distribution is using it). To import: `from ansible.module_utils.aws.core import AnsibleAWSModule` Instead of using e.response and str(e) yourself, you can call ``` except (ClientError, BotoCoreError) as e: module.fail_json_aws(e, msg="Unable to <thing that failed>") ``` and it formats the exception by using e.message if it exists or str(e) and uses e.response only if it exists.
Since the states behave in the same manner, IMO, its redundant to describe it in every single RM. I have opened a docs request to add the description of the network resource module states in one place and then add a link to this doc in every RM. https://github.com/ansible/ansible/issues/65598
How about this - ```suggestion msg = "No corresponding incident" if len(incidents) == 0: if state in ('acknowledged', 'resolved'): return msg, False return msg, True elif state != incidents[0]["status"]: return incidents[0], True return incidents[0], False ```
The braces aren't needed ```suggestion if not self.foreman_use_reports_api: ```
Same here, `enforce_policy` instead of `check_policy`
So I guess that this is where we need to set the fact in results. This is the only place where we know that we've had to run the facts module in order to retrieve the package manager.
You probably still want the validation that was done before for these values.
Please change this to `version_added: "2,8"`
I wonder if this was written as ``` - "Additional variables can be used in templates: - C(ansible_managed) (configurable via the C(defaults) section... - C(template_host) contains the... ``` would result in a more readable http://docs.ansible.com/ansible/template_module.html
both _discovery and _add_device can throw exceptions, gevent SHOULD push them to the join below, but that is not always the case and depends on timing (they solved this problem a while ago, but we are not specifying version requirement and would have to deal with least common denominator)
```suggestion sample: true ```
This should be a sentence (start with capital `W` and end with a dot).
It's an interesting one (never saw such style). Sure this probably works, but the common format is ```suggestion # -*- coding: utf-8 -*- ```
We can check if the string is a cert easily. Certs are always in ASCII format (AWS doesn't accept binary certificates) and PEM certs will always start with `-----BEGIN`. That would imply we can check for this as an identifier of a Cert (vs a file path)
``` if self.params.get('principal', None) is not None: ```
this check is not needed, the default is `False` if you should never get a `None` at this point
Can you check for `boto3` first, since it requires botocore? That way users who have neither will get both by installing `boto3`.
@bcoca - This is a much needed feature. I'm hoping you are safe and well and can look at this again sometime soon? -C
```suggestion many of its properties (group, state, etc). ```
Why not just ```suggestion raise ```
```suggestion content = to_text(response.read(), errors='surrogate_or_strict') ```
```suggestion - A list of key/value pairs, e.g. `key=val,key=val` type: list ```
Doesn't seem like it would be necessary, as container names aren't really known ahead of time. I'm envisioning pod and container names coming from an inventory script.
Should be added as `choices` instead. See `restart_policy` for an example. They also needs to be set as choices in the `argument_spec`.
<nod> Well. using this function with hostvars and recursive=True will traceback if this is all we do. So there needs to be more work done. I think that the right way to fix it probably means changing merge_hash to copy Mapping a into a MutableMapping instead of calling copy(). I'm not sure how much that will slow down critical code, though.... So maybe what we should do is handle the non-mutable case in this function. Maybe something like: ``` python def combine(*terms, **kwargs): recursive = kwargs.get('recursive', False) if len(kwargs) > 1 or (len(kwargs) == 1 and 'recursive' not in kwargs): raise AnsibleFilterError("'recursive' is the only valid keyword argument") dicts = [] for t in terms: if isinstance(t, Mapping): if recursive and not isinstance(t, MutableMapping): t = dict(t) dicts.append(t) elif isinstance(t, list): dicts.append(combine(*t, **kwargs)) else: raise AnsibleFilterError("|combine expects dictionaries, got " + repr(t)) if recursive: return reduce(merge_hash, dicts) else: return dict(itertools.chain(*map(iteritems, dicts))) ```
You can delete these empty lines.
string comparison vs version comparison: `LooseVersion` must be used (current test doesn't work with `2.10.0`) ```python from distutils.version import LooseVersion # [...] if module.params.get('ca_cert') and LooseVersion(psycopg2.__version__) < LooseVersion('2.4.3'): ```
backupdest isn't defined anywhere
Don't do this as you would need to pop all the results below. Just set `results['id'] = response....` for each value you want to return to make it simpler.
You should at least add real values for `datastore`, `source`, and `destination`.
these are for modules, handled by argspec, this change should not be part of this PR
This is not valid in Python 2.6. While I know the original is also invalid, I'd rather see `return '{0:02x}{sep}{1:02x}{sep}{2:02x}{sep}{3:02x}'.format(*numbers, sep=delimiter)`
I would default to api.meraki.com, so that people don't have to provide this information.
Also, there was some guideline where the next updated would add a separate line with themselves, but won't edit other lines. cc @abadger
```suggestion content = to_text(response.read(), errors='surrogate_or_strict') ```
Why not set this in `__init__`.
Use dict literals: ```suggestion return {} ```
Because this module is a drop-in replacement to the **vmware_dns_config** module we are deprecating. So rather than removing one module, and introducing a new module, we are replacing the old module with a compatible new module, but we are deprecating some of the original parameters instead. End goal is to not break existing playbooks and get rid of some parameters.
This gives precedence on selecting the profile to the environment over the command-line option. I'd prefer if this were the other way around so the precedence order (highest to lowest) would be: 1. Command-line flag 2. Environment variable 3. Config file
suggestion: return None more readable.
@Nitaco You have spaces in this blank line. I think that is the reason the CI tests are failing PEP8 rules :)
in case of `state: present` with a powered-off server it would be started here. I would remember the server state before force-stop it and also extend the condition with it: ~~~diff - if state != "stopped": + if (state == "present" and previous_state == Server.STATUS_RUNNING) or state == "started": self.start_server() ~~~
`shlex.quote` isn't available on Python 2.x.
In Postgres almost all integer parameters support units and they are almost always used. I don't ever remember seeing that anyone writes this in bytes, mostly it's a lot harder to read.
```suggestion return super(cls, new_cls).__new__(new_cls, *args, **kwargs) ```
Update this to yourself. :)
We mustn't have a sanity check for all plugins but we should have `version_added: '2.8'` for this new option.
By the way, we plan to also write and ship a module for OpenSSH certificates (https://blog.habets.se/2011/07/OpenSSH-certificates.html) and these are even worse concerning support in any established library. That means for that one we need `ssh-keygen` anyways, so having this module use it too is more consistent. I'm sure that patches would be welcome though if someone wants to rewrite this module to use `cryptography` (maybe optionally?), shouldn't be too hard to do.
```suggestion self.module.fail_json(msg="Failed to find DVS %s" % self.switch_name) ```
generally ansible doesn't want to be a thin wrapper around the backing API, so maybe break this into smaller options
Does this need doing now? Also what section of the program is this TODO about, it seems to be floating
Worth wrapping all these long fail_json calls at the comma before exception - otherwise it goes off the side at PR (I know there are lots of lines that are already too long but let's not add more)
If the length here is >1 and the user did not provide a folder, the module should fail immediately and tell the user to give a folder.
it is a consideration for the backport
```suggestion version_added: "2.8" ```
Need `version_added: "2.8"` here
According to the docs there is no default password value. If it is a required item, I would add `required=True` instead, but using a default here seems the wrong thing to do.
This does not need to be wrapped.
No need to set HAS_BOTO3 - the presence of boto3 and botocore are checked when constructing an AnsibleAWSModule object.
Small nit pick here - Do not remove `msg` attribute from `exc`, it is helpful in debugging. Rest LGTM
This example is not in YAML format.
For integers please: use `type='int` remove the `isdigit` check from `check_params`
Wrap all instances of `result['msg']` within `fail_json()` in `to_native()`.
```suggestion - You could use this before using M(vmware_host_datastore) to mount a new datastore to ensure your device/volume is ready. ```
what `_show_interface_dcb_ets(if_type, if_id)` fails: better to handle the case if the return value is None
Typo. "Space separated list of keys according to the hash type."
Also, it looks like you could stop relying on exception comparison and do smth like: ```python from ansible.module_utils import six """Do smth like this in module heading.""" ... error_msg = task.info.error try: error_msg = error_msg.msg except AttributeError: """Keep message as is if it doesn't have `msg` attribute.""" pass finally: """ six's `raise_from(exception1, exeption2)` does `raise exception1 from exeption2` under Python 3 where it's supported and will do `raise exception1`, where it's not. """ six.raise_from(TaskError(error_msg), task.info.error) ```
No fullstop on `short_description:`
We probably do not want to add new arguments into file_common_args unless they are about setting permissions.
Ok, this shortening of the record parameter is both broken and unnecessary. I assume it is to deal with the scenario of the record being in the form of `foo.example.com`? That is, full enough to allow for the zone lookup, but still a relative name. I think it would make much more sense to depend on that the full name is an absolute name in the form of `foo.example.com.`. Not only will that work out of the box without any shortening, it's also much more in line with how the nsupdate module works, as well as with general DNS conventions. Preferably there should be a separate previous check which ensure that when the zone parameter is None then the record parameter must be an absolute name. It could be something as simple as requiring that the record name ends in a dot. Also, the current shortening actually breaks absolute record names, turning `foo.example.com.` into `foo.`.
it is useful to also add the api exception info: module.fail_json(msg="Unable to connect to vCenter or ESXi API on TCP/443.", apierror=str(e))
Add + update default to: ```yaml type: bool default: 'no' ```
action plugin should have already taken care of this
There are four parts to the permissions: `actions`, `not_actions`, `data_actions`, and `not_data_actions`. The description of `actions` should be just `List of allowed actions.` ```suggestion - List of allowed actions. ```
I am still not clear why the delay is required here. Can't this just be ``` while True: if self._ssh_shell.recv_ready(): self._ssh_shell.recv(256) ``` The `persistent_command_timeout` timer triggered [here](https://github.com/ansible/ansible/blob/devel/bin/ansible-connection#L138) will handle breaking from loop if in case the response is not received within the time set by command timeout. Unless I am missing something the timeout handling is not required here.
CI failure due to PEP 8 indentation issue: ``` 2017-02-17 09:19:55 ERROR: PEP 8: contrib/inventory/ec2.py:792:35: E111 indentation is not a multiple of four (current) 2017-02-17 09:19:55 ERROR: PEP 8: contrib/inventory/ec2.py:793:35: E111 indentation is not a multiple of four (current) ``` You can run this test locally with `make pep8`.
```suggestion description: Length of the TX queue. ```
This should probably have something along the lines of ```suggestion break else: raise AnsibleError(missing_required_lib("collection ansible.netcommon")) ```
not a blocker: you could just make module and vdo_cmd globals, this is a short running script in it's own process, so globals are not that bad
just a suggestion, but it seems like all these would be easier to use if they were `nfsv3_enabled` with `type: bool`...
I don't see how this will ever evaluate to `True`. The `if` statement on line 730 should always populate `apt_cmd`.
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
trap ioerror/oserror and raise an AnsibleErorr if you want it to work the same as with dataloader
The changed needs to be moved to the left as well. ```suggestion changed = True ```
If it's not making use of the file then we shouldn't add a file here. Instead perform the check outside of the file loop altogether.
```suggestion route_table_ids=dict(default=[], type='list', elements='str'), ```
Recommend using `module_utils.aws.core.AnsibleAWSModule` to use `module.fail_json_aws(e, msg="friendly error message goes here")`
This is not required. What if user want to query the load_balancers under the subscription
I don't see why `default: false` should not be there. At least here :) Depends a bit on what kind of option it is... What definitely shouldn't be there is `required: false`, but that's another option...
You don't need this anymore, a deprecation warning will automatically be issued when someone uses this option.
I don't quite get why you do all of these checks...
This line seems to be copy-pasted from `openssl_privatekey` - but this module here doesn't have these parameters.
Wouldn't it be better to do the copy in the if statement. Not sure how expensive this operation is but I would have thought `task_vars` could be quite large if the host has a lot of vars/facts set on it.
warning on protocol mismatch might not be a bad idea (eg that protocol can't be changed on existing interface)
Missing period at end.
This can be a frozenset as well
All descriptions start with uppercase and end with a point. Please follow the used standards for consistency.
This should be replaced with `if not HAS_BOTO3:` which is being imported from module_utils.ec2.
It may be worthwhile to split and compare these. There's nothing stopping a collection from having ```NS.COLLECTN.plugins.modules.plugins.module_utils.MODULENAME``` for instance. If you split, then you can check that `n.split('.')[2:4] == ['plugins', 'module_utils']`
suggestion: `expected = disk[param]`
this should be `default: 'no'` with the quotes
```suggestion - Scott Buchanan (@scottsb) - Andrew Zenk (@azenk) - Sam Doran (@samdoran) ```
Is there a reason this is a warning instead of info or debug? Also, you probably need to use `u""` literal strings since you're using `.format()` ```suggestion display.warning(u"running adhoc inside collection {0}".format(default_collection)) ```
You don't need `required=False`, it's the default. And we tend to start with the parameter type.
I'm not sure if that makes sense. I want to look at this some more tomorrow. Today was hectic. ð¤¯
`if I(url) and I(api_token) arguments are not passed to the module directly.`
don't fail on missing 'stat', return None/N\A on the fact
this should be `distributed` according to code
```suggestion will try to move interface from namespace I(namespace) ```
logging and debug framework already exists for modules, it also takes care of many other options that affect this, do not roll out your own
`from ansible.module_utils.urls import (one of fetch_url, open_url)` requests is a great library ... that has not alway been great and mostly the installed versions are not great and many conflicts across versions why we tend to avoid it Also, if anyone wants to use, they should really specify version Developers often assume 'pip install requests' but most environments cannot do that
boolean tip: `if not (to_text(new_value) in choices or isinstance(new_value, int)):`
Just put this on one line (or two if needed for line lengths) ``` from a.b.c import x, y, z from a.b.c import u, v, w ```
Nice! Thanks for the clean up.
This will fail if the playbook task uses `delegate_to`. Consider instead of accepting the file contents instead of a source file name
`iscsi` does not belong in the minimal target, Hardware or Network are more appropriate
According to your code you pre-populate `msg` key, but there's no `dest` at all, which makes this return format example completely misleading.
this should be aggregate now, change it here , argspec and docstrings
```suggestion code, stdout, stderr = module.run_command([lbu_path] + list(args)) ```
```suggestion self.module.fail_json(msg="The specified user or group does not exist: %s" % to_native(user_not_found)) ```
FTR this specific part looks good to me. The confusion comes with `package_dir` and understanding the full picture and the mention of Git.
Description should be capitalized. ```suggestion - name: Gather facts on listening ports, and populate the tcp_listen_violations fact with processes listening on TCP ports that are not 22, 80, or 443. ```
```suggestion noprivate=dict(type='bool', required=False, default=False), ```
How about change the `get_mgmt_svc_client()` method as ```python def get_mgmt_svc_client(self, client_type, base_url, api_version): client_kwargs = dict(credentials=self.azure_credentials, subscription_id=self.subscription_id, base_url=base_url) if api_version: client_kwargs['api_version'] = api_version client = client_type(**client_kwargs) client.config.add_user_agent(ANSIBLE_USER_AGENT) return client ``` Since we want to construct the client instance in a single entry.
only `rc` from the last iteration will be kept, in case of success, `rc` could be omitted.
I would prefer this to be a configurable default. End users have a strong tendency to relocate packages without asking vendors first.
@dnuka - Yes, I like the approach that @tadeboro outlined.
It appears that `inventory.cache` doesn't exist if `cache==False`, so this blows up if caching isn't configured. Need to have a conditional around it, or check w/ bcoca on presence of `inventory.cache`.
Please remove `required: false`
botocore isn't used anywhere and you're importing ClientError below so I think you can remove this
Fun fact: when I run this as my user, it returns nothing. When I run it as root, it works. On the other hand, `blkid --uuid <UUID>` also works when I run it as my user. So why not use ```suggestion result = self._run_command([self._blkid_bin, '--uuid', query]) ``` instead? That seems to be simpler. Also, you don't need any postprocessing, since it returns only the device name and nothing else.
OK, I see what you're doing here :+1:, I think there is slightly better way. Just suggestions, your call. Just removing these is not perfect. Ideally, omitting say `associations` in module args would behave same as writing explicit `associations: {}`. But currently explicit `associations: {}` won't match what's left after you remove empty values from API, causing unnecessary request and changed=True. - Args side can be normalized for you if you make attributes & associations first-class options, or suboptions, defaulting to `{}`. - Note that only recently manageiq master started sending empty values; nulls were omitted before. Not sure that's relevant â do you get Nones or empty hashes here? Anyway :+1: to normalizing API results in one direction or another â don't *rely* on getting empty values. - A pattern that works & reads nicely is defining a normalizing function and applying it on both sides of comparison. `if normalize(current) == normalized(desired)`. - IMHO, splitting logic between `has_field` and here is harder to follow, and it could be simple enough to inline, perhaps something like this: ``` current_properties = dynamic_resource_definition.get('properties', {}) current_name = dynamic_resource_definition.get('name') if (current_name == name and current_properties.get('attributes', {}) == properties.get('attributes', {}) and current_properties.get('associations', {}) == properties.get('associations', {}): ```
```suggestion required: true type: str ```
The bus number should be an option one can specify for greater control.
I think these 3 lines can be replaced with `return True, group.get('id')` and the below return can change to `return False, ''`
Please remove this line
As above, `match-mac` is probably more appropriate because this is specifically used for match construction.
`self.env` will never be `None`, it will always be a `dict`
Formatting doesn't look right here. This can be a single line
Note, this would be better written as: ``` python VALID_INCLUDE_KEYWORDS = TaskInclude.VALID_INCLUDE_KEYWORDS.union(('listen',)) ```
add this line: ``` version_added: "2.7" ``` to fix this error lib/ansible/modules/files/xml.py:0:0: E309 version_added for new option (strip_cdata_tags) should be 2.7. Currently 0.0
```suggestion etc_hosts=dict(type='dict', default={}, aliases=['add_hosts']), ```
this is not a good way to detect initd systems, upstart, openrc, rc systems will all be confused into init
Why don't you allow fractions of a second? (Not that it makes too much sense, but after all, docker expects nanoseconds.)
I think you can use: ```python hosts_service = connection.system_service().hosts_service(search="storage=%s" % module.param['name']) ```
I think we could just ignore these parameters entirely, and assume we'll need to try both all the time. It would simplify this code, and let us list those params as deprecated.
Is there any relevance in having the URL in the module's description ? I would move it into the notes and make it a proper link. Use either U(https://developer.nulab-inc.com/docs/typetalk/) or L(Typetalk API,https://developer.nulab-inc.com/docs/typetalk/).
This appears to add, rather than delete
you appear to have gone SnakeCase from below here.
Please remove `no_log=True` from username
update description, remove dump
This should probably be moved to the top, it's just `from ansible.module_utils.basic import *` that is special since it gets replaced with the actual code before the python file is sent over the wire...
Add a task ```.yaml - debug: var: result.docker_host_facts ``` And similar tasks after the other examples.
I think this will come after `if not HAS_OVH` check
With the excellent refactor being undertaken here, I wonder if the purging shouldn't be moved into a function
It only makes sense to set this with `termios.ICANON`, so may as well put both inside the conditional.
okay thanks for the clarification.
Parenthesis are unnecessary when not specifying a type to inherit from.
Generally, staticmethod is a good indicator that this should be a function at the toplevel of the module_util, not a method of the class. This looks like a prime example of that.
These values should be listed under the RETURN section of the docs.
Indeed. Besides current code should not be updated: zero isn't a valid ([1](https://github.com/exoscale/cs/blob/master/cs/client.py#L136)) value ([2](https://github.com/requests/requests/blob/master/requests/adapters.py#L431)): ``` In [3]: from urllib3.util import Timeout In [4]: timeout = Timeout(connect=0, read=0) [...] ValueError: Attempted to set connect timeout to 0, but the timeout cannot be set to a value less than or equal to 0. ```
I have not looked at this in depth, but I believe this should be `msg` instead of `message`.
```suggestion assert wrap_var([None])[0] is None ```
The actual `max-line-length` is 160, so there's no need of a new lines here https://github.com/ansible/ansible/blob/379a7f4f5a0491964c7896834f3f326412888585/tox.ini#L31
Is this key for the purpose of renaming an existing block? Usually how this works is some key is global (maybe name) and then if other parameters are changed (like description) the module will detect that the resource description is out of date and change it, so users don't have to manually tell the module what fields to update.
```suggestion bad_states = {'list', 'info'} & set(data.get('choices', set())) ``` Potentially `get` could also be a bad state.
It looks like this hasn't been changed. Please don't do any unrelated changes. It's makes it hard do review PRs.
state can be optional with default value as 'present'. Also, default argument type is str so no need to specify explicitly.
change .get to .pop and you don't have to skip the group later
I am fine. It's just that it's `if` with too many and\or's are just too much for me :) I just preffer straighforward code with no complex if's, if they are not really needed.
ah, I thought this would already made by add_group().
Add a sample over here how this dict will look like.
As well as CredSSP or Kerb with delegation, it also will use the become user if running with become
I wonder if you should have `, choices=['0', '1']` here to protect from invalid values being passed in
I think this will fail in Python 3, instead of str try using `six.text_type`.
```suggestion - You can also optionally force refresh operation on the Storage System in vCenter/ESXi Web Client. ```
Please add more info here -- this can be a long description. Info about what kind of maintenance is supported, links to the SAML docs, etc would all be great.
Would be good to add an example of at least one of these in the EXAMPLES doc string above.
1) No need to inherit from object explicitly due to `__metaclass__ = type` set above 2) It's nice to properly support all stringifications ```suggestion @six.python_2_unicode_compatible class CollectionRequirement: ```
Would it be possible for you to work on https://github.com/ansible/ansible/pull/47271 which tries to deprecated `vmware_dns_config` and create a new module called `vmware_host_dns` ? Let me know ? Thanks.
Copyright (c) 2018, Ansible Project Copyright (c) 2018, Armin Ranjbar Daemi <randjbar@gmail.com>
In fact, it seems to be standardized already in *lib/ansible/module_utils/api.py* as **api_url**. cc @bcoca
@ushuz That's what I would prefer in the long term. If any of you want to work on that, feel free! (I currently don't have that much time.)
If it's not required, you can leave out `required: false`.
Empty string is usually not a good value to return as a sentinel. it's probably better return an empty dict (since the other case returns a dict) You could also catch this exception higher up if you don't actually know how to recover here. From my brief outsiders look at the code it seems like that might the case (empty string might be a sentinel value to represent an error rather than good data to be used by the calling functions. In python [and most languages that have exceptions] exceptions a re the way to represent error conditions, not sentinel values.) Handling the error higher up the call stack would also get rid of a style problem. it's usually a sign of poor code if a try: except spans more than a few lines (Yes, there are many places in Ansible where try: except blocks cover many lines... Those should be refactored at some point in the future when we have time). This is because you might anticipate catching TypeError being emitted from one function call but not realize that typeerror could be emitted by a different function call which your error handler cannot recover from.
```suggestion if u'repository not found' in to_text(e): ```
Please put above methods to ovirt.py
```suggestion elif isinstance(value, (datetime.datetime, datetime.date)): ```
```suggestion type: str required: yes ```
Standard YAML indentation is 2 spaces.
Can be simplified if you do `type='int'`.
since a single string or a list in the firm of string are a list themselves I think a list type is OK
```suggestion - Achintha Gunasekara (@achinthagunasekara) <contact@achinthagunasekara.com> ```
Add `cmd_verbosity` to the docstring.
Same thing - safe to skip the version check.
Nonblocking/doesn't matter: I like to use frozenset and tuples for immutables. Since these sets are never updated you can do: ``` python BASE = frozenset(('name', 'role')) FROM_ARGS = frozenset(('tasks_from', 'vars_from', 'defaults_from')) OTHER_ARGS = frozenset(('private', 'allow_duplicates')) VALID_ARGS = frozenset(BASE.union(FROM_ARGS.union(OTHER_ARGS)))
```suggestion enabled: yes ```
Use `Exception` instead of `BaseException`
We could update the bool evaluation on the result object in the client to fix this pretty easily
```suggestion @pytest.mark.parametrize('options, expected', ((o, e) for o, e in self.OPTIONS_DATA)) ``` shot in the dark
```suggestion client.module.deprecate("The email parameter is deprecated and presently does nothing", "2.13") ``` The Ansible deprecation cycle is always (at least) 4 versions, so if this is merged for 2.9, the option will be removed in 2.13.
Thanks @tpo for adding an example. I think this line should be `state: file` (not `status`). Could you update the new example? (Or if I'm wrong and it really should be `status`, could you update the other examples so they match?) Thanks!
just looks as a lot of duplication, seems simpler to set a flag return 255 or exception depending on the flag
My main problem is that whatever we ship now, is set in stone. We cannot improve this in the future easily (except if we return 2 variables, one for backward compatibility). So interfaces are very important once people depend on it.
Using format() will ensure it fails to work on older python versions. So I would suggest using the older syntax if there is no real need to do this.
```suggestion changed = True ```
This will need updating
```suggestion - Status of the secondary location of the storage account; either C(available) or C(unavailable). ```
`sha256` is reserved by docker, it's good enough to detect the usage of hash id.
When would this be needed? I assume (maybe incorrectly) that we are always talking to `https://api.digitalocean.com` which *should* have a valid cert.
```suggestion - An existing virtual network with which the VPN Gateway will be associated. - Required when creating a VPN Gateway. ```
```suggestion description: Archive software handler used to extract and decompress the archive. ```
IMO this needs to become: ```yaml requirements: [ libselinux-python, libsemanage-python ] ```
incorrect with default specified; remove
I would remove this blank line.
```suggestion while client.get('/ip/{0}/task'.format(urllib.parse.quote_plus(name)), ```
Can you change supported_by to community
With this simplification, the pythonic way of generating a list is to use list comprehension. You can replace the whole function body with: ```python return [parse_to_obj(r) for r in parse_to_logical_rows(vlan_out)] ```
Ok fair enough.
this trick still works, but on older versions of debian and derivatives, we should reflect that in description but not remove it
Um, this will fail IF the file exists, which doesn't match the message.
since C.DEFAULT_HOST_LIST is already a list ... not sure we need any of this just: ```python self.options.inventory = C.DEFAULT_HOST_LIST ```
This should probably be done with `required_if=[['state', 'present', ['role_arn']]]` in the `argument_spec`
I don't think this is really needed (and doesn't seem to be used)
Looking at this again, I would prefer even this: ```python if self.status != 200: self.fail_json(msg='Organization lookup failed') return response ``` So that the default flow returns the response, except if the status is not 200. I think that's more clear, exceptions go into if-blocks, default flow is to succeed.
Same: oneline this since the assignment is unneeded.
```suggestion self.routing = {} ``` This makes the other code simpler.
```suggestion - name: Test VMware Tools Connection Plugin for Windows ```
```suggestion action: add ```
That's true. The old behavior was wrong IMO though, and I would consider it a bug. Check mode should be as close as possible to the real behavior of the module, and if you know that the module will fail without check mode, it should also fail with check mode. (There are always situations where determining whether it fails is complicated, and it's not done because of that, but in this case it's very easy :) )
Or, even nicer without a comprehension: `set(tagdict) - set(tags)`
This key appears to be unused, and also a typo of `session`.
Or (additionally) allow a falsy value to evaluate to `MASTER_USE_GTID=no`, but that would require changing the type to "string or bool"
@Fred-sun I don't mind if it's capitalized or not, but whichever way we do it, the docs should be consistent - so if we capitalize Blob, we should always capitalize it (just like we always capitalize Azure).
Removing the signal from here won't entirely solve the issue as `persistent_command_timeout` timer signal is also triggered from `ansible-connection` which is common for all the connection plugins using the persistent framework (netconf/network_cli/httpapi). This mix of signal and sleep in `network_cli` is resulting in non-deterministic behavior, based on this I think we need to revert PR https://github.com/ansible/ansible/pull/47345 as the signal based timeout handling is in place since 2.3 and is working fine.
[PEP 257](https://www.python.org/dev/peps/pep-0257/#one-line-docstrings): Use a triple double-quote string after the start of a class, function or method instead of before. Applies to multiple lines, noting the first occurrence only.
pep8 warning: contrib/inventory/apstra_aos.py:268:1: E302 expected 2 blank lines, found 0
You can add traceback and ce.response to this. Helpful for future debugging. https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-2
My understanding is, which value can be updated is the logic handled by service side. So here show the difference, and let service to decide whether this is updatable.
These three lines can now be: ``` gather_subset = module_params['gather_subset'] ``` because the argument_spec for gather_subset ensures that we'll always have a value for this .
I think that having this class complicates this module, rather than helps it.
```suggestion from ansible.module_utils.vmware import PyVmomi, get_all_objs, vmware_argument_spec, find_datacenter_by_name, find_dvs_by_name, find_dvspg_by_name ```
this phrasing is implying you can use in places outside a `tasks:` directive, which might be more confusing to users. It can only be used where 'tasks' are allowed pre_tasks/tasks/post_tasks and inside a role not to be confused with `import_playbook` which is really 'only task outside of a task container' .. since it is not really a task.
If it's not required, you don't have to state it. There will be a future validation check to ensure people are not defining it.
I guess there's a typo here ' bring the configuration to it's desired'' -> 'bring the configuration to its desired'
Please also change it here: ```suggestion old_item['aliases'] = sorted(old_item['aliases'] or []) ```
``` "Unable to get hooks from repository %s: %s" % to_native(err) ``` to ``` Unable to get hooks from repository :%s" % to_native(err) ```
BTW, when I read this part I just thought about a new feature, which would also be useful for `docker_container`: `fail_instead_of_restart` (boolean, default `false`). If the module thinks it needs to recreate the service/container/..., fail the module instead of doing it. This setting can be used for important containers; then users will know when they accidentally changed something important and won't just kill the service/container. No idea if that's really useful, just wanted to write it down since it just came to my mind :)
Same here, don't we usually use byte strings for file operations.
Yes, it will break compatibility with older versions. However, it's also not compatible with newer versions right now, as `connect` doesn't accept an `api_version` kwarg. You could support both old and new versions if desired, you'd have to detect the version of `pypuppetdb` installed and adjust behavior accordingly. It's probably not a good idea to support only old versions though.
not idempotent as implemented
I think I would change the help message to 'List active _hosts_'
Is that error "the port is in use by something" or "port is already in the state you asked for"? If it's the former (as I suspect), it's arguably incorrect to silently succeed (as the port will not be in the requested state since it's a member of the wrong broadcast domain).
Failing because of: ```suggestion - C(matches), C(does not match), C(Yes) and C(No) condition operators work only with >= Zabbix 4.0 ```
```suggestion if not folder_obj: ```
This is also to deprecate parameter `domainname`.
I'd set this up above, just below `test_id = None`.
Please format this like this: ```python ANSIBLE_METADATA = { 'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community' } ```
Not required with AnsibleAWSModule
Better save it into a var rather then re-running function twice.
Thanks. This PR is assigned to the 2.12 milestone, which we'll be going through after creating the stable-2.11 branch (which will be done when 2.11 RC1 comes out).
Only on creation, I would expect that if it's not supplied on existing objects, it would not touch the value, but keep the way it was.
It would probably make more sense to use `.rstrip("\n")` (or similar), and do it when reading from the file or processing it in the Line class than doing it here.
Just as a heads up. We will not accept this change switching to `requests`. `requests` is a blacklisted import and we require use of `open_url`. I see the conversation below, but that is not sufficient. Requests has too many versions that may not be compatible, there are likely to be issues with fullfilling pinned dependencies, and this adds an extra non-necessary dependency.
```suggestion # Copyright: (c) 2018, IBM CORPORATION ```
Changing this to the following will give you a clickable URL `U(https://libcloud.readthedocs.io/en/latest/compute/drivers/dimensiondata.html)`
With `choices` you don't need this check.
Oh.. I swapped the logic in my mind. Yeah, no way w/o `else:`. (I still think that semantically `all()` reads more obvious)
Since project variables are uniques, a dictionary seems to be more appropriate than a list.
"Maintain IAM SAML federation configuration."
required=False is not needed here or the line below
Do we really want to catch any exception here and hide it from the user? It seems like we'd need to see the exception messages in order to debug problems rather than silently thinking that the module succeeded and did not have to make any changes.
Semicolon after statement not required
Can you please raise an issue for this so we can get the built in updated
Generally we put the `description:` first to make the file more readable.
Too long line.
I don't know if the query element is really needed. It seems superfluous as the API is already directed to this vserver. (But we found other cases where the request seems over qualified).
If `mode == 'persist'`, you want that *both* the global value currently set, and the value stored in the config file, are both equal to `value`. If you read both values, but overwrite one with the other, you cannot compare both to `value`.
All `description:` must be full sentences, e.g. capital letter and full stop. This applies to the other descriptions from this point down.
If you can't know valid values to pass the module without consulting external docs that may or may not be accessible to the person developing the content (as IIRC all the useful NetApp docs are behind a paywall that not everyone in the org may have access to), that kinda sucks.
There's an entry in six.moves for this. Probably better to use: ``` python from ansible.module_utils.six.moves import http_client OR from ansible.module_utils.six.moves import http_client as httplib ```
i sit corrected then, i should have looked closer at the switches
```suggestion - Anything added in I(headers_secret) will get in the headers but will not be displayed in the logs. ```
This should be fine; if and when you want to implement this, please have a look at the check_role_representation in #35558, it might be helpful :)
The `: ` is confusing the yaml parser, you can remove it or quote the whole line.
it would look cleaner this way: ```python for i in loop: ind, val = i if val == omit_token: continue if isinstance(val, (dict, list)): val = remove_omit(val, omit_token) try: new_args[ind] = val except IndexError: new_args.append(val) ```
```suggestion - C(sku), SKU of app service plan, allowed values listed on U(https://azure.microsoft.com/en-us/pricing/details/app-service/linux/). ```
I didn't see this function being called in the assertonly provider, but I might be mistaken.
Since we expect the name to start with 'http://' or 'https://' I would so this: ```python if name.startswith('http://') or name.startswith('https://'): ... ```
```suggestion EPOCH_TS = 1594449296.124356 ```
check_arg() call can be removed from all iosx module and utils and it is not longer used
Can we also add the ability to traverse a list of dicts? ``` def generate_final_config(self, cfg_dict): """ Generate final config dictionary :param cfg_dict: A dictionary parsed in the facts system :rtype: A dictionary :returns: A dictionary by eliminating keys that have null values """ final_cfg = {} if not cfg_dict: return final_cfg for key, val in iteritems(cfg_dict): dct = None if isinstance(val, dict): child_val = self.generate_final_config(val) if child_val: dct = {key: child_val} elif (isinstance(val, list) and val and all([isinstance(x, dict) for x in val])): child_val = [self.generate_final_config(x) for x in val] if child_val: dct = {key: child_val} elif val not in [None, [], {}, (), '']: dct = {key: val} if dct: final_cfg.update(dct) return final_cfg ``` something like this ^^^
The data has to be parsed, and the facts have to be sorted out. Like: * Number of files pending heal. * Number of files to be rebalanced etc based on the data thrown by the heal status. Just dumping the string as is, does not add any value to the facts module. The end user should be able to see particular keys and make any decision. This way, we are shifting the responsibility of parsing the data on the caller.
I may be mistaken but, I think `isinstance(ds, vim.Datastore)` is not necessary since you get the datastores list from `get_all_objs(self.content, [vim.Datastore])` (so all `ds` should be of type `vim.Datastore`).
```suggestion if not all([hostname, username, password]): ```
responded there, the python `locale` module does not give the info we need (locales present and compiled, ready for use)
for py2/3 and i18n issues we've created a to_text function to use for stringification of errors, avoid str()
I think this indicates GalaxyCLI is doing something odd with it's args. I would expect passing args to GalaxyCLI to pass the value of args to GalaxyCLI's self.parser.parse_args instead of of calling it as self.parser.parse_args() which defaults to looking at sys.argv. ie, change GalaxyCLI.parse to take args ``` python def parse(self, args=None): ``` and then have GalaxyCLI.parse call: ``` python self.options, self.args =self.parser.parse_args(args) ``` Then the test would just pass ['install', '-c'] as args instead of having to patch sys.argv so the testing is easier and less likely to cause odd side effects, especially if anything else is looking at sys.argv (like nosetest itself for example). If the top level app also passes in a copy of sys.argv instead of a reference (ie, GalaxyCLI(args=sys.argv[:])), it avoids problems potentially caused by app code manipulating sys.argv. That said, it's been doing that a long time, so doesn't need to be changed for this pr, but it is an example of a case where changing the code to be more testable is useful.
```suggestion network_mode=dict(required=False, default='bridge', choices=['default', 'bridge', 'host', 'none', 'awsvpc'], type='str'), ```
I'm curious why it's necessary to pass the loader in this case (and the others in thise PR)? I was under the impression that `shared_loader_obj` was no longer needed.
I would actually assume most of the users will not be using ID but name. Don't think it matters that much though.
i would rephrase a bit, 'roles names in collections are limited' .. standalone roles are not and collections always had this limitation.
Replace values with Jinja variable like other vmware_* modules do in example section. ``` hostname: '{{ vcenter_server }}' ```
Yeah, for spot instances I'd say 300 is a bit short, unless spotinst behaves *significantly* differently from the AWS spot instance market.
Move this down to 138
```suggestion result["'chassis_power"] = rf_utils.get_chassis_power() ```
This line is also not python 2.6 compatible. In general printf like formatting would be preferred over `.format()`
Use `with open(` instead of `open(`
Not sure if this is required or not in plugin. cc @bcoca
Follow pattern as above.
Could you do this on the same line? ```suggestion from __future__ import absolute_import, print_function ```
```suggestion version_added: "2.10" ``` (same below)
Don't use `.get()` method on things which are guaranteed to exist. ```suggestion self.name = self.module.params['name'] ```
@gundalow Thank you so much for the feedback. I made the changes you requested but the build failed. The modified file passed but the build failed because of "ImportError while importing test module" for the test_iap_token.py file. I did not modify the test file. The tests did pass the last time. Please let me know what needs to be changed. Thanks in advance. Its complaining about: ```01:31 ____ ERROR collecting test/units/modules/network/itential/test_iap_token.py ____ 01:31 ImportError while importing test module '/root/ansible/test/units/modules/network/itential/test_iap_token.py'. 01:31 Hint: make sure your test modules/packages have valid Python names. 01:31 Traceback: 01:31 /usr/local/lib/python2.7/dist-packages/six.py:709: in exec_ 01:31 exec("""exec _code_ in _globs_, _locs_""") 01:31 test/units/modules/network/itential/test_iap_token.py:28: in <module> ** > 01:31 from ansible.compat.tests import unittest > 01:31 E ImportError: No module named tests ** 01:31 --- generated xml file: /root/ansible/test/results/junit/python2.7-units.xml --- 01:31 =========================== short test summary info ============================ 01:31 ERROR test/units/modules/network/itential/test_iap_token.py```
`query` is unset when `ext_exists` returns `True`.
```suggestion short_description: Manages domains in IBM Spectrum Accelerate storage systems ```
Ah, yes, I miss read the code. Nothing to change here.
OK I am dismissing my all reviews. Thanks.
Please use different items in the description list for different paragraphs.
This is not strictly necessary, as lines can have 160 columns.
should be "type" or "types"? I think above in the doc there's C(type)
I cannot find the original reason, now it is mostly so I can do a regex to subsitute all of them for `to_native` which avoids unicode errors, or you can just use that and i'll skip this instance.
My bad. Could you please add this to vmware.py
Not a blocker, but do we want a purge_listeners option? To do any modification to the ELB all the listeners must be specified each time.
```suggestion - Enable or disable multicast for the interface. ```
```suggestion subnets=dict(type='list', elements='str'), ```
The only thing I want to do is to logout when the execution is complete or failed. I believe both __del__ and __exit__ are being called and to avoid having duplicate logout calls I just ended up doing it in __del__ (line 507)
Could you please add this message instead of false value - 'pyvmomi is required for this module'
```suggestion - The name of the object. Will be used to identify the entry. ```
No I mean this whole chunk of the diff. Unfortunately github is not really clever in displaying this. My opinion is that aligning the = makes the code much more readable than strict adherence to PEP8.
OK, I buy it. No other easy way to keep compatibility.
metadata.name, metadata.labels, and metadata.annotations will apply to just about every kubernetes object.
Make this a text string: ``` python self.user = u'Anonymous' ```
I would call `split()` once only. ``` entry = x.split() if len(entry) > 0: ldp = {} ldp['neighbor'] = entry[1] ldp['source'] = entry[3] ```
I think nicer than catching the exception would be to stick to `KeyError` or to use `.get()` on the dictionary and add a conditional for if UpdateConfig is undefined, instead of a generic Exception-catch.
```suggestion - Either I(template) or I(template_link) is required if I(state=present). ```
We could remove the default value of `autostart` option, then: - when `autostart` option isn't used, the value of `autostart` parameter will be `None` - when `autostart` option used, `Virt.autostart` need to be called only when the current configuration differs from the wanted configuration
the version_added should remain 2.3, and the cache param gets its own version_added.
I guess this is a dict right? often we like to see a sample reutrn. many use `type: complex` to get a more detailed return description, please see examples in existing modules
All your parameters need type-information if you want it to look good in the new module docs.
@adrianmoisey @Akasurde @andreparames @bincyber @dj-wasabi @djmattyg007 @dsummersl @pcgentry @yeukhon I believe you've worked on other GitHub modules, it would be good to get your views on this
Empty aliases is not needed. Keep it simple.
I heard you didn't like the ``` list(data.keys())``` idiom. Since you're really filtering a list here, you can do it with a list comprehension instead: ``` python for key in [k for k in data.keys() if key.startswith('_ansible_') or key in C.INTERNAL_RESULT_KEYS ]: display.warning([...]) del data[key] ``` With such a long conditional, I like to break the filtering over one or more statements like these examples: ``` python badkeys = [k for k in data.keys() if key.startswith('_ansible_') or key in C.INTERNAL_RESULT_KEYS ] for key in badkeys: [...] # Generator expression so we don't create an extra list (sometimes slower but always uses less memory) badkeys = (k for k in data.keys() if key.startswith('_ansible_')) # list comprehension so that we don't delete keys from the dict while a generator is still looping through them badkeys = [k for k in badkeys if key in C.INTERNAL_RESULT_KEYS] for key in badkeys: [...] ``` Choose whichever idiom is the most readable to you.
I think this should be hostname, since hostname defaults to dest ([line 825](https://github.com/ansible/ansible/pull/14246/files#diff-c2e371537339bbab5d9d0cc5d6cb7adcL825)) if it isn't defined. That way this maintains consistency with the surrounding code. Should hostname be defined, I think it might be confusing. That was my only feedback though, this looks good.
make note that latest is available since 2.7
This is not required.
I don't think `almost` is the intended meaning. I think they meant `at most`, and to clarify, I'd re-word: ```suggestion - Cannot exceed 5% of se memory. ```
This function doesn't appear to do anything.
`updates` should be `commands`
```suggestion - The DNS configuration of the default TCP/IP stack needs to be done with the M(vmware_host_dns) module. ```
If this is a standalone hypervisor, shouldn't the username be `root`? administrator@vsphere.local is not available on a standalone hypervisor
+1 for adding `name:` lines
`type: str` missing under each of the options
It doesn't make sense to turn a unicode string into a unicode string. It's just `str(str(''))`, which is probably not what you want. Maybe you wanted to turn bytes into text here? In such case check'd be against `binary_type` and the translation should use `to_text()` shim.
Why don't you use _check_rc_ of run_command? :kw check_rc: Whether to call fail_json in case of non zero RC. Default False
OK, so we can override the `uid` of the json with the uid provided in ansible tasks. Good ! LGTM
There needs to be a `version_added` here (after this line). Besides that, looks good!
Please let me know what do you think about this: ```suggestion if host['name'] != visible_name: ```
Probably it makes sense to also add `options=dict(...)` to `interface` in `argument_spec`. Since that can break existing playbooks/roles, it's probably better to do that in a follow-up PR (which should not be backported).
don't do this by default, set from cli `self._options` does not exist or is None
Sorry, I wasn't paying close attention to the context last time; this isn't an example of using this module, it's calling the `ec2` module so `instance_type` is correct. (It would probably be a good idea to rewrite this task to use the `ec2_instance` module; the `ec2` module has not been deprecated, but it relies on boto and is becoming increasingly obsolescent as that library ages.)
Please remove `required=False`.
Yeah, you'd need `return None, None` at the end of index_of_matching_route()
If module-level version_added is 2.5 this can be deleted
Let's do this in a more elegant way: ```suggestion default_locks = { "copy", "file", "setup", "slurp", "stat", } assert default_locks <= set(ACTION_WRITE_LOCKS) ```
you should note it will default to the current host, but dont use the default field
Exception message should be logged using `display`.
Bug. Should be `params[v] = module.params.get(k)`
I would use module.get_bin_path function instead of hardcoding path (future proof), same below
```suggestion - Name of the destination resource pool where the virtual machine should be running. ```
if we ever get different messages per host (I cannot see that currently happen) this should be a dict instead to record those messages individually
no, state was not added in 2.7
This is horrible formatting ;-) If you want to break this up, make logical divisions more like this: ``` python return [ pkg_to_dict(p) for p in sorted( is_installed(module, repoq, stuff, conf_file, qf=is_installed_qf, installroot=installroot) + is_available(module, repoq, stuff, conf_file, qf=qf, installroot=installroot)) if p.strip() ] ```
Shouldn't use a mutable container as default arg in python. If you ever add to the container you then find that you're sharing a single opy of that container everytime the function in python. You can do one of these two instead: ``` python # If you don't need to add to the container now. This just prevents doing something stupid when the code is changed in the future. def finish(module, tree, xpath, namespaces, changed=False, msg="", hitcount=0, matches=tuple()): # if matches needs to be a mutable container. This creates a fresh list everytime the function is called. def finish(module, tree, xpath, namespaces, changed=False, msg="", hitcount=0, matches=None): if matches is None: matches = [] ```
Please remove traling space at the beginning.
@felixfontein Good catch. Thanks for pointing out :) @hitsumabushi diff is added as part of result for most network platforms, somehow is was missed in vyos_config for earlier release. I added `diff` in vyos_config during the recent cliconf refactor work. Looking at this PR I assumed that it was present since earlier releases.
i would require one of id/name for normal operation and require ID if you want to change name, which now can be a 'check if i need to' making it safe to rerun the same task.
The link here does not get built - if it did, it would be self-referential (from the current page to the current page), so not very useful as a link. I'd suggest code syntax instead: ```suggestion description: Token that ensures this is a source file for the C(aws_ec2) plugin. ```
`short_description: Add/Edit/Delete and execute scripts on the FortiManager`
```suggestion - To remove all license type settings, set to the string C(None). ```
Currently, you just retry the same thing again if there's a `/` already. Maybe you should drop it? ```suggestion # Some archives contain directories that end with '/' if not dirname.endswith(os.path.sep): dirname += os.path.sep else: dirname = dirname[:-1] ```
you should use to_text() (also from ansible.module_utils._text) around response.read() here. Pretty sure that returns a byte string on both python2 and python3.
Please be careful what you commit.
for disk in disks:
Does qvm-run resolve the quotes around "cat in_path" itself? If it just needs to be a single argument, you should be able to remove the quotes and it will still work (because you're now passing a list to subprocess.Popen).
Please turn this into a `dict`. Strings are a really horrible format for complex data such as this. Also, is there precisely one mount available per container? If podman is really trying to be compatible to docker, I cannot believe that.
A space is good enough :)
Could you test authentication without changing anything ? It would be helpfull
Please update the generic function description
Why not use a `list` as `key, value` are all same? `for option in options` seems make later logic clearer.
Can you please add this logic to some method called `find_template` so you don't have to reimplenet the logic of update/create.
My understanding is exists will return true for a folder, isfile will not. So probably yes. isfile will be the best fit.
we dont normally give exact commands as user environments vary too much, normally giving the url and 'you need to install the avisdk library' should be enough.
Could attributes be a dict here? Might eliminate the need for the comma splitting logic. ``` yaml aix_devices: device: en1 attributes: mtu: 900 arp: off some_other_attr: blip alias4: 10.0.0.100,255.255.255.0 state: present ```
Ansible 2.8 only supports Python 2.6+ and 3.5+, so this line isn't needed ```suggestion ```
@mrdrogdrog could you make that change? If you can do that, I will find who needs to sign off so we can get this merged and released.
Plz move this import to stdlib modules above
```suggestion and minus (no dots allowed, VMware guest customization for Linux does not support receiving a FQDN name). Use "force=True" for old ```
formatting here is weird, i think you wanted to indent bullet points inside the paragraph of the previous list item? also this module might not be the best place for a full explanation on how the deb tools work, probably a link to the debian docs is a better option.
This doesn't need to be changed either, I think. Can stay as: ``` for sg in security_groups: vpc_security_groups.append(sg['SecurityGroupId']) ```
This else part could be removed
Break the line after the `(` to unify the style across the file.
i suggest a list of dicts, each one containing 'name, why, version, alternative' as we do for options
Thanks for educating me :)
required=False is not needed. You can remove that. `state=dict(type='str', choices=['absent', 'present'], default='present'),` should be good enough.
this line is unnecessary
You should allow for some of these env variables not being available (such as the TLS related ones). Maybe: ```suggestion matcher = re.search('{0}="([^"]+)"'.format(env_var_name), env_out) if matcher: env_var_value = matcher.group(1) self.inventory.set_variable(id, ... ```
Nice. Much better API usage than the previous code :-)
Need to add the original index to the end of this tuple, otherwise an out of bounds error will be thrown on line 608.
With this logic, the `docker_service`/`docker_compose` module will remove the orphans, but it will do so without setting `result['changed']` to `True`, so no change will be detected. This change will introduce another bug.
Don't check arg_type here. A module could do something silly like: ``` encryptor: passphrases_for_each_user: - foo - bar - baz ``` The arg_type in this case will be a list but we'd still want to catch it here.
IMO, there is no need to serialize the object if user choose a curated way. So we can only keep the tag filter here as ```python result = [x for x in response if self.has_tags(x.tags, self.tags)] if response else [] ```
Please import specific things rather than everything.
what we really need at this point is a 'dictionary lookup' of the action since not all of them have the same options
not something changed in this PR, but I think this would be better as default matching the named passed in (most fs follow same pattern) and only put in entries for what needs to be overriden
Could you rephrase this a bit to show users this feature is available since 2.4.
Please add spaces around the equal sign.
for consistency, please use a helper function to query the id from the API by the service offering name if possible.
Minor cosmetic tweak: ```suggestion from .. import types as t ```
Can you make this parameter `timeout_seconds` please? An alias would be ok
FYI, https://www.openssh.com/report.html, they use bugzilla.
There appears to be a problem here on Py2.6 in that it's turning the options into: ``` -\x00\x00\x00H\x00\x00\x00 ``` Example of `reflag`: ``` ['-\x00\x00\x00H\x00\x00\x00', '\x00\x00\x00-\x00\x00\x00S\x00\x00\x00', '\x00\x00\x00-\x00\x00\x00n\x00\x00\x00'] ```
sys seems not used later in the code
This conditional still looks wrong. It's always going to be false.
Too long line.
To me it is unclear why it is called `upgrade` here, but the description mentions `adminst`.
```suggestion ApplicationError, ```
It is more common in ansible modules to use: `domain=dict(required=True)`
You're not using NoCredentialsError which could be thrown here (botocore.exceptions.ProfileNotFound could happen too).
`ipaddress` doesn't exist in py2... need to wrap this in a try ... except
no shebang, this is for import not for execution
Okay... what about using `sys.stderr.write('%s\n' % ('\n'.join(errors)))` at the end of this function and then the calling function does sys.exit(1) afterwards? Almost the same result but it doesn't abuse the exception mechanism to make it happen :-) Probably should do something similar with the exception raised by the new connect method... maybe make the exception thrown there specific and then in this toplevel exception handler, print the exception message to stderr and sys.exit(1). The general rule is exceptions should be thrown and unhandled if there are programming errors. Error messages and sys.exit should be used when there are errors the user can correct without diving into the ansible code.
This needs a fallback with `DOCKER_API_VERSION`
This doesn't look correct, I don't seen an option called `module:`
this one is not really needed as there is no user data passed back in skip_result
So the syntax for copyright statements is: ```python # Copyright: (c) 2017, Abhijeet Kasurde <akasurde@redhat.com> ```
I think you didn't understand what I was suggesting. What you do : Add each of the property the user have asked for in new_vmconfig_spec.property, and if at least one of them modify the properties already attached to the VM â apply new_vmconfig_spec What I propose : Only add to new_vmconfig_spec.property the property the user have asked for that actually modify (add/remove/edit) the properties already attached to the VM. And then, if there is some properties in new_vmconfig_spec.property â apply new_vmconfig_spec.
This exception will never be raised. `args['password']` is always set; it has the value `None` if the user didn't specify `password`.
You are slightly changing semantics here, but I think this is ok. Before, `IOError`s were only caught when they were raised by `open()`. Now they are also caught when raised by `read()` or `close()`.
```suggestion if exp.response['Error']['Code'] not in ('NotImplemented', 'XNotImplemented') or requester_pays: ```
I don't think so... if we support doing this on hostvars at all, then there's no obvious reason to the user that doing it with recursive=True should fail. Making HostVars a MutableMapping but making __setitem__ throw an exception will still break with recursive=True. So I think the code I posted is probably the best way to do it as it obeys the semantics of the combine filter without slowing down the common case for merge_hash(). If it's okay to slow down merge_hash(), then we can implement the promotion from non-mutable to mutable inside of that function but I kinda doubt that's the case since we've survived this long without it.
instead of updating each command just set `run_command_environ_update`
Not sure why you'd ever do that, but sure, that would happen :)
use `self.MAX_FILES` instead of 999999
You mention that the default is listed as 3, however you set it as 5 here.
```suggestion disks_info[disk_index]['backing_diskmode'] = disk.backing.diskMode disks_info[disk_index]['backing_disk_mode'] = disk.backing.diskMode ``` For backward compatability.
I probably have this on the wrong line, your name for this task says `name: Invoke DSC with check mode`. If someone comes across this doc and wants to use the module in check mode they might get confused on how to do it. I'm wondering whether you had other intentions for this doc example or whether we should just update the name you have set currently.
I really wish we could deprecate that behaviour (at least turning it off by default) it's really confusing if you're not looking for it.
Looks like IP address information has been added
It also looks you you are missing the variable to be inserted for the `%s`.
1/2 is good, the other 1/2 should be more. 'If you want to have keywords applied to the contained tasks, consider using import_role instead or use the "apply" keyword'
```suggestion - Note that setting I(allow_downgrade=true) can make this module behave in a non-idempotent way. ```
Actually handled by AnsibleAWSModule
```suggestion - ZFS cache device or devices. ```
Why did remove you this? I think you have to pass it, because those are deafult options for bond modes 1-4.
It doesn't look like state is needed.
No, the default is None. If the value is set to False or True, this may trigger a modify if the current value is different. If the value is None, no action to taken for this parameter.
#66872 seems to think this would be 1.10.0, from experience I'd suspect it's actually a botocore version that's required...
This function checks whether input does not start with an operator, not that it's a package name at all. Let's invent a better name.
```suggestion RETURN = r''' ```
acceptance_level should be mandatory if state = present.
supporting snapmirror-label would affect this logic, are only one of the two could be present, or both of them.
Please leave this defaulting to `no` and let users opt-in to transmitting unencrypted keys to a remote machine instead. There's far too much risk of private keys ending up in logs etc. and there's very little you can do with raw private keys anyways (the more widely used thing would probably be the associated public key).
Why isn't this ```suggestion if self._connected: return self ``` The guard expression style having less indented blocks accommodating better readability
```suggestion - If I(tag_keys) is not provided , the module uses the argument tags instead. ```
This likely needs to be: ``` variables_args.extend(['-var-file', variables_file]) ```
You do not differentiate between dcim and VMs, so this would raise a similar bug as #53393.
Please move this above the `_get_collection_widths()` call to avoid running that code unnecessarily. It'd be basically the same as what's done in the else-branch that has a similar code below this snippet.
Also, use name quoting - in this case, as they're option names, it should be `I(name) and I(nacl_id)`
These declarations need to be new-style classes like `Target(object):`
be consistent with other connection plugins ```suggestion - name: ansible_password - name: ansible_vmware_tools_password ``` edit: default to `ansible_password`, otherwise, use connection-specific password
json is a subset of yaml so it is most likely to be loaded here even if it was json to begin with, but pyyaml parser can introduce some differences, you might want to reverse the order.
don't remove this `if`
might be better to have some kind of mapping here ``` convert_list = ['image_id', 'instance_type', 'instance_id', ...] camel_params = dict((k,v) for k, v in snake_dict_to_camel_dict(module.params).items() if v is not None and k is in convert_list) ``` and then special case any exceptions like IamInstanceProfile and InstanceMonitoring
```suggestion version_added: "2.8" ```
It's usually better to use verbs for method names because they represent some actions, not states.
Imports run before AnsibleAWSModule instantiation, so you still need this try.
also remove this line. you already have it at top level on L21. this is what causes the `'AnsibleUnicode' object has no attribute 'pop'` errors. here under `options:` ansible-doc assumes all entries will have a sub-hash as value... (ansible-doc is unhelpful when it crashes, but I run `bin/ansible-doc manageiq_dynamic_resource_definition -vvv` to get traceback, and added print statements from there...)
Please could you change the logic the way that this function returns the changed value and you exit at the end of the `main()` function? The same in for the `reduce_vg()` function.
We probably want to log the exception as a warning if possible and not just ignore it
If the organization being renamed doesn't exist yet, that should probably throw an error or a warning or something.
Not something that you have to change but I think this could be simplified to ```python for obj_func in self.obj_func_mapping.values(): obj_func() ```
If it is not required, you don't have to add `'required: False`.
For `action` try passing a single perm, like `s3:GetObject` and then rerun with same inputs. Try the same with an action `[ "s3:GetObject" ]` so it's a single-item list and rerun with same inputs. If this code is erroneous, then there will be a spurious `changed=true` in one of those cases.
`vmware_host_config_facts` â `vmware_host_config_manager`
```suggestion description: A list of all interfaces matching the I(group_id) (or a list with a single interface for I(name)). ```
```suggestion - The number of devices in a vdev. ```
Please change this check to if self.params['guest_id'] is None and self.should_deploy_from_template()
missing `version_added: '2.4'`
Really need to run `boto3_tag_list_to_ansible_dict` on `tag_array`, but best to do that *after* `camel_dict_to_snake_dict` (otherwise tag keys get converted to lower case which can be unexpected)
```suggestion description: List of all the files in the archive. ```
Follow pattern as above.
This function call is not required.
``` def create_storage_profile(self, profile_name=None, description="Sample Storage Profile", rules=None): ```
It's better to communicate error via rasing exception.
Originally, there was `124356` microseconds in unit tests, instead of `123456`. At least two tests are rely on this figure.
```# Copyright: (c) 2017,```
IMHO it would be simpler to set self.host as a HostSystem object. And add a self.host_parent_compute_resource variable for the parent ComputeResource (when self.folder). the host_parent_compute_resource would only be used for Destroy_Task as: https://www.vmware.com/support/developer/vc-sdk/visdk25pubs/ReferenceGuide/vim.HostSystem.html > Invoking destroy on a HostSystem of standalone type throws a NotSupported fault. A standalone HostSystem can be destroyed only by invoking destroy on its parent ComputeResource.
This will fail if `systems_uri` attribute is not set.
```suggestion codec_errors=dict(type='str', choices=['strict','replace']), ```
Here we already know the full ID, so there's no need to first list all networks to find it again.
@samdoran then, I'd say that there's something wrong with the setup and TZ should be adjusted somewhere.
```suggestion 'module': ('async_wrapper', ), 'cache': ('base', ), ```
Can we name `dest` better? I feel like `host_identifier` (or so) might be more readable.
`fetch_file` â `fetch`
```suggestion they stay untouched (I(purge) is C(false)) or will be deleted (I(purge) is C(true)). ```
Could you please use dict literals? ```suggestion fake_loader = DictDataLoader({}) ```
You are right! Fixed it in https://github.com/mheap/ansible/pull/3.
Plugins contributed to Ansible must be GPLv3+ licensed.
No, obviously **proxy** is not a boolean, but **use_proxy** is. So the standard behavior of Ansible modules is to use the system's configuration (**http_proxy**, **https_proxy**) but in order to disable this default behavior, there is the **use_proxy** option, that defaults to **yes**. And if you want to use a different proxy, you can set the **proxy** parameter. In you case there is no way to tell the module *not* to use the system-configured proxy server.
Create a new method on the `GitLabServices` class to do the creation + saving job
```suggestion - Local path to load certificate from. One of I(cert_url) or I(cert_path) or I(cert_content) is required to load certificate. ```
This will apply to the other classes as well.
The change to this module is the only one that I question. I'm leaning towards putting this on the allowed list. The reason is that the code presently in the module is the equivalent of a UNIX pipe. The decompressor is able to chunk the data from the file to the database program as it decompresses that portion of the file. The run_command() version has to store all of the data from the decompressor in memory before passing it to the database program. So the memory usage can balloon in this case.
```suggestion aliases: [ importer_ssl_ca_cert, ca_cert ] ```
You shouldn't do string comparison with `is`. https://stackoverflow.com/questions/1504717/why-does-comparing-strings-in-python-using-either-or-is-sometimes-produce
this looks like preexisting issue, the lookupfile's dirname should always be in searchpath
This seems a roundabout way of saying 'tags of the instances in the autoscaling group' (tags without propagate_at_launch won't be set on the instances, but that seems an unnecessary aside)
`str` is useless here (same for the two other `str(e)` below).
Only problem is that if `self.node_attrs['ManagerStatus']['Leader']` is `None`, the `if` condition will evaluate to `True`. In such situations, it's better to use `self.node_attrs['ManagerStatus'].get('Leader')`, as that will return `None` (which will evaluate to `False`) if `'Leader'` is not in `self.node_attrs['ManagerStatus']`.
Again, quote names and values: ```suggestion meraki.fail_json(msg="Parameters 'net_name' and 'net_id' are mutually exclusive") ```
Typically, you shouldn't just remove and replace an option with a new one, as this will break existing playbooks. Typically here, you would use aliases, to allow it to be addressed by multiple names. And maybe add deprecations before removing the old one. Additionally, due to this, `version_added` likely shouldn't be touched.
Move this line after 261. You won't need to deepcopy unless you are actually creating a request.
In the module index it doesn't look good if it starts with 'This creates'. Simply use `Manage firmware policies`.
Okay, looking further down, I see that you're just moving this around though...
Missing full stop.
Note: this isn't an interface change, but the docs incorrectly had this listed as `nacl` when it's always been `nacls`.
This might fail on python 3 and json.loads expects string and getvalue() will return bytes .
Unused, can be removed AFAICT
Please put this on a single line. Lines can be 159 characters wide.
Having a lookup module is a much better idea than the existing `skydive_query` module.
Since the `lineinfile` defaults to `-1` for the `lock_timeout`, this conditional is skipped but the next matches and an exception is raised. Since `0` is less than `-1` but `-1` is "truthy", the while loop is skipped, the lockfile is immediately closed, and an exception as raised. I believe setting the default for `lock_timeout` to 0 or possibly a small positive integer in the `argument_spec` would be the best solution. Then, this change would not be necessary.
This could have nicer formatting: ``` ANSIBLE_METADATA = { 'status': ['preview'], 'supported_by': 'community', 'version': '1.0' } ```
Just call deleted operation instead of repetition of code.
It looks like we could compare if version points to a commit hash or a tag, which are effectively immutable, unlike a branch name.
need spaces with multiple of 4
This needs to run on success and failure. It might be easier to simply wrap the existing command_integration_* calls in a try/finally block. Call the pre method just before the try and the post method inside the finally block. Perhaps something like this: ```python if pre_target: pre_target(target) try: if target.script_path: command_integration_script(args, target, test_dir) else: command_integration_role(args, target, start_at_task, test_dir) start_at_task = None finally: if post_target: post_target(target) ```
```suggestion author: Kushal Das (@kushaldas) ```
It is best to split each sentence up as a new list entry, e.g. ``` - The CIDR or source IP range. - Asterix ... - ... ``` When referring to values, enclosing them in `C()`, like `C(*)`, makes them highlighted in the actual docs so is a better choice than just quoting them. Not related to this but you can also use `I()` when referencing other options.
The check-mode test should come as late as possible. There are various failure-cases that you are skipping in check-mode.
This module will be rewritten into 'exos_lldp_interfaces' using Resource Module Builder.
Please provide an example of what the facts structure will be so that users know what to expect. [Example Here](https://github.com/ansible/ansible/commit/39edee7572c3e7b8d5734cbc8630f458604a2c11#diff-cde9e1ec47dc7cac17cd21c796e3da60R39)
Strictly, they should also be using AWSRetry as well, but that can be left to a followup PR.
nvmd, i misread
What are the plans for this class? Upon further inspection, I don't see it being used.
Python 2.6+ is required for Ansible 2.4 and newer, so no need for these checks.
+1 here, I was going to make sure we did something like this.
use `makedirs_safe()` `from ansible.utils.path` (not as in secure but avoids errors during concurrent access)
It's better to actually say that there's no file in place or it's inaccessible.
please add wait_for_vm_ip
task doesn't seem to be used here
I don't like the `: ` here
```suggestion required: false type: str ```
Put this in the test function that uses it, since it depends on `dateutil.tz`. If it needs to be shared across multiple test functions it can be put in a fixture instead.
You should add `type: path` here.
```suggestion - Set the namespace for an interface. ```
I would not add these here as the log itself can also fail due to OSError,IOError
We now have a one-line GPL stub for modules. See other modules in devel branch.
This method isn't necessary.
Having this check in each module will result in code duplication and an overhead for module writer. `module` param will be used if the check is moved to utils function
This line can be removed
`msg: "{{ lookup('rabbitmq', url='amqp://guest:guest@192.168.0.10:5672/%2F', channel='hello', count=2 ) }}"` could be used here instead of `var: messages`, no need to use `set_fact`.
I would, really helps people who are new to the concept. When adding a url you would enclose it in `U(https://....)`.
We don't have access to ansible.compat.six in modules (and thus we shouldn't use it in module_utils either.) Use this instead: ``` python from ansible.module_utils.six moves import reduce ```` We plan on merging the two together eventually, once we can remove module-side support for python-2.4 (Right now the python-2.4 requirement means that module_utils has an older version of six than in ansible.compat.)
I would also use 'ini' entries to allow the user to optionally configure this in ansible.cfg
This test/block could be moved at the beginning of the method, then subsequent tests would be: ``` if fw_offline: [...] else: [...] ```
Please remove line 53.
The same like above: ``` This option builds the section name of the repository in the repo file. ```
@ckotte, while i understand it can be frustrating to have your work reviewed, the feedback given is always in the best interest to improve the code quality. Sometimes it might come across as aggressive, but i hope that is never the intention of the reviewer (it definitely is not for me, if it does, i apologise).
Why the additional changes beyond switching the hash algorithm? This appears to change the behavior of the module. Before a non-existent `plugin_file` would result in the hash being `None`, but now it results in a module failure.
Instead of complicating logic here, I'd implement a class representing a package with its version constraints and `__str__()` method for rendering.
Why not change the if statement to be `if role is not None:` instead? There are technically more partitions than just `aws` and `aws-us-gov`.
I'd move these two into describe_subnets, makes a bit more sense there I think.
we already have this data and we should not keep additional cache, if the current config query is not working correctly we just need to fix that. also this only changes one of many paths to load a plugin, they all need to be consistent.
```suggestion aws_organization_units: ```
No, the correct name is `distributions`. In Python, packages are folders with python modules (`.py` files) and `__init__.py`, so that would be confusing terminology. OTOH `package distributions` is a known compromise term for those doesn't really know about how python packaging works and its terminology.
Remove as not needed (default)
seems the parameter uses dict is enough
You can remove this.
It would be good to have a try/except around this call.
move to common
Environment variables won't be available when delegation such as `--docker` is used. To guarantee settings are available after delegation, use `_set_cloud_config` to preserve them. Example: https://github.com/ansible/ansible/blob/690037876648e515fdf1e9d6dd82c760b9bd0f72/test/runner/lib/cloud/vcenter.py#L135 To retrieve values use `_get_cloud_config`. Example: https://github.com/ansible/ansible/blob/690037876648e515fdf1e9d6dd82c760b9bd0f72/test/runner/lib/cloud/vcenter.py#L153
I would not mention version specified here, but recommend to use them only in the name. "There should be one-- and preferably only one --obvious way to do it."
Hmm.... I see in the original bug that ansible-modules-validate is throwing an error for using requests and that was part of what prompted this doc update. That does make it a good idea to mention requests here.... What about something like: ``` The **urls** utils module offers a replacement for the urllib2 python library. urllib2 is the python stdlib way to retrieve files from the Internet but it lacks some security features (around verifying SSL certificates) that users should care about in most situations. using the functions in this module corrects deficiencies in the urllib2 module wherever possible. There are also third-party libraries (for instance, requests) which can be used to replace urllib2 with a more secure library. However, all third party libraries require that the library be installed on the managed machine. That is an extra step for users making use of a module. If possible, avoid third party libraries by using this code instead. ```
Please remove `description' from the aliases.
This is really inefficient, it creates a O(n) list at each step. Either have a list of paths in parallel to ret or fine a more efficient way to check the path is already included.
```suggestion - Required when I(state=present). ```
I would recommend to use `module.fail_json` instead of raising an exception here.
This check repeats 3 times and you've already done at least one typo in one of the instances. Please move it into a function.
FWIW this doesn't seem to be a problem anymore, nor is it a proper solution.
This one was here originally, but would you be able to also update this to use module.fail_json_aws(e)? The to_native() call that uses does a better job of handling py2/3 type conversions and is all-around preferred.
What if user provides `vm` as folder path, then path is created as `/DC0/vm/vm/` and Findinventorybypath will fail.
```suggestion ipproperties = client.get('/ip/{0}'.format(urllib.parse.quote_plus(name))) ```
Thank you for the review. I've updated authors to a list format.
(C(present) -> C(present) (C(absent) -> C(absent)
Alright, after a deep dive into what `__new__()` is actually doing, this change is correct. `__new__()` happens before `__init__()` and simply returns the instantiated but not initialized object. `args, kwargs` would be passed to `__new__()` in order to affect the object selection logic. They would not affect object initialization. Since they are not used by our `__new__()` method, they can be omitted from the `super().__new_()` call.
need a free/cheap thing here, or make this task/arg conditional with `omit`
No worries, was just making sure it wasn't done for incompatibility reasons. Changes look good and I was able to replicate/prove this fixes https://github.com/ansible/ansible/issues/40649 as part of my testing.
If parameters are not required, you don't have to add `required: false`. Only add `required: true` if they are required.
IMO, adding `.upper()` make the parse more robust. ```python if match.group(1).upper() == "T": ```
I'm talking about `ImportError`.
It''s desirable to call to_bytes with errors='surrogate_or_strict' so that it raises an exception instead of replacing undecodable bytes with a "?". Also, map() is more pythonically expressed as a list comprehension. ``` python local_cmd = [to_bytes(i, errors='surrogate_or_strict') for i in local_cmd] ```
please update to 2.9, we consider to merge
If you can share how are you testing it, I can also give it a try.
```suggestion - name: Install latest version of OpenGL.OpenGL_X.rte.soft from lpp_source lppsource_aix6109-06 and apply only ```
I believe this should go to the top of the module :)
@samdoran Was there a reason for not just catching `FileExistsError` here? The `OSError` superclass feels fairly broad since we only care about the case where the directory already exists (due to the race). I have slight concerns that this will mask a different kind of `OSError` and try to continue on in an unknown state when it should have failed out.
double interpolation is very hard to read. And this looks wrong. Should probably be: `'%s%s%s%s%s' % (prefix, sep, gname, sep, gval)` (rather than `gname, prefix, gval, prefix, sep` which would generate `EnvironmenttagDevtag_`)
You don't need to escape double quotes inside of single quotes.
```suggestion self.module.fail_json(msg="Invalid end VLAN ID %s." % vlan_id_end) ```
```suggestion 'M': 2 ** 20, ```
I prefer `if not module.check_mode`
```suggestion - Works only when I(file_type) is C(file). ```
@ryanpetrello Rather than using `.decode`, use `to_text()` which does the right thing depending on the Python version.
Please follow the docs.microsoft.com to use the Authentication
second one sounds better to me
The error message is now useless (or will generate a trace back) as self.account_id is now None. Maybe we could add input_account_id = str(self.account_id) before line 304. and change the error message to: self.module.fail_json(msg='Error: Specified account id %s does not exist ' % input_account_id)
```suggestion description: Destination file/path, equal to the value passed to I(path) ```
Move this outside the loop.
bot wants `['host_default_vnc_port_start', 'host_default_vnc_port_end']` LGTM otherwise :+1:
I think the `: ` may break the yaml parser,
I know this changed out from under you, but it would be good to import the TowerModule class as a base
This doesn't appear to support the use parameter but probably should.
Should be 2.4 now.
Please don't add new options in this PR, please remove this
Best to use a path like, `path: C:\temp` or something
Couple notes: You probably shouldn't pop from module.params.... I usually consider that to be a "constant" value. It's the record of what the user specified in the playbook for the module to look at but not to change. If you do want to pop it, you don't need to do it as two steps. This should be equivalent to what the present code does: ``` python module.params['binding:vnic_type'] = module.params.pop('vnic_type', None) ```
lgtm. there shouldn't be a concern having this merged before code freeze.
This should be monitoring for the task to be successful, and if not, exit with a failure and error message (wait_for_task with try/catch and exit in failure)
Yeah, I prefer having elapsed returned always, we do that for other modules too. https://github.com/ansible/ansible/pull/37969 (feel free to approve my work there ;-))
Please implement check-mode. In this case check-mode could either not send a notification, or better, sends a "fake" notification (so authentication is attempted). It depends on the API if this is feasible. It's always better that check-mode is performing more logic without actually doing something.
The use of `AnsibleOptionsError` is to make in consistent with other sub commands. It looks like the help and `{}` will be it stdout. The error message is in `stderr`.
the openstack plugin is not really the best example of standards to follow, you might be better off looking at aws_ec2 which also has 'pre existing configs' via boto
```suggestion short_description: Creates, updates or deletes GitLab webhook ```
I think this is wrong. Could you please check description of this again ? Thanks.
I guess it should be `2018`. * [X] Done
Remove `['api_url', 'url']` from `required_one_of` Remove `['login_user', 'login_password']` from `required_together`
please use here otypes.DiskFormat(self.param('disk_format'))
To be imported.
@zikalino was the choice to do that in the same module with a key to control it or in separate modules? I still think we should convert the camelCase to snake_case though for all outputs
No, no, the module name should definitely be singular. I would probably use internally the same name as the REST API, especially because it is not exposed to the user and the internal stuff is in itself more consistent. But again, a personal choice, not something that is written into stone. (I think the plurar in the REST interface does make sense and is a common thing even, because it does e.q. affect networks, but that is debatable).
Can you change this to just set `allowZip64=True` and not set the compression.
I prefer to work with sub options, examples: https://github.com/ansible/ansible/blob/5e6b2495c045961b73a11a31b71b971c16bea9c7/lib/ansible/modules/cloud/vmware/vmware_dvs_portgroup.py#L337-L364 https://github.com/ansible/ansible/blob/5e6b2495c045961b73a11a31b71b971c16bea9c7/lib/ansible/modules/network/nuage/nuage_vspk.py#L985-L1026 The last one also shows how you can define requirements on combinations
Thanks for the clarification, @resmo . I suspected there was a guideline for that.
nit: this is a leading quote, without an ending one.
Please break this out onto multiple lines. If additional arguments are added later or additional customizations are needed, this format will require more changes later.
CI failure due to: ``` 2017-02-14 15:00:18 ERROR: PEP 8: lib/ansible/modules/packaging/os/zypper_repository.py:465:161: E501 line too long (164 > 160 characters) (current) ```
you should make note on how the parameter changed (used to be boolean) and in which version
@gundalow this would be a good PR for the community review session - if there's interest, the `version_added` would need to be updated.
Can we make this configurable ? like `destination_resource_pool` so that even if the destination host has resource pool different than default 'Resources' it can be used.
Tests shouldn't be invoked directly, so this isn't needed.
this looks wrong to me, so the file is changed if it already exists? also you don't compare the contents
You did half of what I suggested :) `changed = False` should be at the top, and `changed = True` should follow host.ExitLockdownMode and ost.EnterLockdownMode.
The example I gave is a pretty good. I don't think we have any examples of using the lookup across multiple lines. There are quite a few examples that need to me updated to use YAML rather than `k=v`, which is confusing. You can look at [`consul_kv.py`](https://github.com/ansible/ansible/blob/3e96c99b074cd92788c307370d31a70049201574/lib/ansible/plugins/lookup/consul_kv.py#L55-L55) or [`onepassword.py`](https://github.com/ansible/ansible/blob/3e96c99b074cd92788c307370d31a70049201574/lib/ansible/plugins/lookup/onepassword.py#L52-L52) for examples.
You should emphasize that the module can and will not do any idempotence checking for this.
Might also be better to just `module.exit_json(**camel_dict_to_snake_dict(response))`
I was thinking` 'N/A'` .. but` None `seems good enough to test against, we don't currently have a clear rule and many facts do different things.
I know I need to change for the rest of them.
users and groups seem fine, but permissions ... the implementation leaves out octal and also seems to be very limited to what it supports when using symbolic mode. I would almost prefer to leave it out and let people reduce the output via jinja filters than push the implementation in this state.
And the last place where we'd change something if modify_module() does not need to return module_path.
In my opinion `centos_facts['distribution']` is correct since CentOS Stream _is_ the new name for the current CentOS distribution. https://centos.org/distro-faq/ "The future of the CentOS Project is CentOS Stream, and over the next year weâll be shifting focus from CentOS Linux, the rebuild of Red Hat Enterprise Linux (RHEL), to CentOS Stream, which tracks just ahead of a current RHEL release. CentOS Linux 8, as a rebuild of RHEL 8, will end at the end of 2021. CentOS Stream continues after that date, serving as the upstream (development) branch of Red Hat Enterprise Linux."
IMHO everybody should aim for PEP8 compliance unless it has some very negative impact like creating new variables only to be able to fit into the 80 chars limit.
Yep. Should be `v3 returns relative task urls, v2 returns full urls`
domain, account, project, are already in the result dict in version 2.4, e.g. https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/cloudstack.py#L501
This doesn't allow the caller to cancel downtime by scope. _get_downtime returns an empty dictionary when id is not specified. It'd be great if this was changed to require id or scope instead of just id.
I would proceed as in #60178 for `lambda_facts`: I deprecated `lambda_facts`, and created a new module `lambda_info`, which is essentially a copy of `lambda_facts`, except that the name of the return value changed.
```suggestion - Control whether to commit changed files. ```
We should add an example for state=absent
don't add methods after `main()`, it's very unexpected!
Quoting a path is not needed.
This is not needed, the default value is null, so it's implicit.
Maybe suggesting existing/available options in error message will be help to end user.
import of packet (from python-packet) could be checked, so perhaps sth like ```python try: import packet except ImportError as e: sys.exit("failed=True msg='`packet-python` library required for this script'") ```
It could be that I accidentally pressed the "suggestion" button. I only wanted to mention that I think `get` maybe also should be in this list.
```suggestion - When the list element is a dict with the keys I(value), I(masked) and I(protected), the user can ```
```suggestion - Returns basic facts about vSphere storage profiles. ```
```python $ python2.6 Python 2.6.9 (unknown, Apr 10 2018, 17:32:50) [GCC 7.3.0] on linux4 Type "help", "copyright", "credits" or "license" for more information. >>> import pkg_resources /home/wk/.pyenv/versions/2.6.9/lib/python2.6/site-packages/pkg_resources.py:17: DeprecationWarning: the sets module is deprecated from sets import ImmutableSet >>> stdst = pkg_resources.get_distribution('setuptools') >>> stdst setuptools 0.6b4dev-r0 (/home/wk/.pyenv/versions/2.6.9/lib/python2.6/site-packages) >>> stdst.as_requirement() Requirement.parse('setuptools==0.6b4dev-r0') >>> stdst.as_requirement().specs [('==', '0.6b4dev-r0')] ```
This doesn't make sense: you don't need if-clause if you're not going to do anything in the block.
Yes, it is.
Same here: ```suggestion - If not specified the default value will come from client_key. Which will ```
keeping it absent vs present you guarantee how the user is supposed to be, the return changed state informs the user if there was an action taken or not, mostly users should not care if this is a creation or an edit, just that the result is what they want it to be.
```suggestion - Introduction to Netplan U(https://github.com/CanonicalLtd/netplan/blob/master/doc/netplan.md) ```
Note: Our modules usually take credentials as parameters and fall back to files and environment variables if the credentials aren't present in the parameters. There's multiple ways to implement that, though, with processing the parameters first or the library function processing the parameters in addition to the config files and env vars. Not sure which way you'd want to fix this.
just have ```python @property def name(self): ... ```
In case check mode is enabled, you are making the same call to `db_exists` **twice** (in case the first one returns `False`). That's not exactly efficient. How about something like: ``` if module.check_mode: module.exit_json(changed=db_exists(cursor, db), db=db_name, db_list=db) ```
@devyanikota the summary command is added recently. For people running earlier versions of GlusterFS this module will fail. Use volume heal <volname> info and check if number of entries is 0.
tempted to just say, use hostvars ... as they would be the same as the cache + new combined vars already
This doesn't look right. This basically allows Python 3.0.1+, not 3.0.0+ as you probably intended. But even with that, it's best to just compare the major version and use "py2 or not py2" because py3+ also means py4+. OTOH we vendor `six` which contains proper constants already. So just import that: ```python from ansible.module_utils import six if six.PY2: ... else: ... ```
not a blocker, but please replace your mail with your github handle.
This should be paginated
needs , for this to be real tuple
Addresses statically assigned to the interface. They are used in addition to the autoconfigured ones, and are represented in CIDR notation.
```suggestion - "mas-cli (U(https://github.com/mas-cli/mas)) 1.5.0+ available as C(mas) in the bin path" ```
I explored what it would take to do this, and it's not as straight forward as I'd hoped it would be. Much of the validation actually happens in `parameters.py`, so being able to categorize errors into a json structure in the validator class in `arg_spec.py` would be difficult. It could be done, just would need some slight re-engineering. While I think that would be a more elegant and clean solution to this, I don't think time is going to allow for it and we should probably just stick with what Sam has here now. FWIW, I think it would be possible to implement the structured data solution later, while also keeping the current solution, so we could provide a better way forward for handling errors and at the same time not break anything currently using the templated message behavior.
Do not display vault_parameters to stdout or logs since it contains client_secret. This will lead to CVE.
```suggestion - How long to wait for the spot instance request to be fulfilled. Affects 'Request valid until' for setting spot request lifespan. ```
Maybe we could avoid relying a shared instance attribute? ```suggestion def login_database(): login_database.counter += 1 login_database.counter = 0 ```
`e` isn't used: remove it or use it.
```suggestion the C(assertonly) provider. ```
This doesn't need to handle NoCredentialsError but it should handle BotoCoreError. And this will have the same issue above with e.response.
This should not result in a warning, but simply result in `changed == False`.
You could update the generator to not add `required: false` lines as that's the default.
Setting default value here will trigger deprecation warning timeout. Please refer code here https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/junos.py#L52-L55 and https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/junos.py#L69-L74 to work around it.
Could use {} instead of dict - added other places too.
```suggestion module.deprecate("Alias \'{aliase}\' is deprecated".format(aliase=aliase), "2.10") ```
Unclear to me what the difference is between this entry and the previous. Also make the task names start with Capital letter. More uniform.
There should be 2 new lines behind this line.
You can import PY2 and PY3 (and PY34 if you need it) from `module_utils/six`
I think you could actually get rid of `HAS_IPADDRESS` completely and just use `IPADDRESS_IMP_ERR`. e.g ```python if IPADDRESS_IMP_ERR is not None: module.fail_json(msg=missing_required_lib('ipaddress'), exception=IPADDRESS_IMP_ERR) ``` rather than ```python if not HAS_IPADDRESS: module.fail_json(msg=missing_required_lib('ipaddress'), exception=IPADDRESS_IMP_ERR)
Just think about `ansible-galaxy collection list ns.name -o yaml`. Currently, your logic skips this case and falls back to the human-readable format.
i believe -o is supported on linux also, it relates openzfs more than a platform
You would have to remove the type if you donât want int32. We deal with unsigned ints that are 64 bits in length in win_regedit and have to rely on the manual parsing.
Thanks for correcting the typo. With the spelling correct, the grammar mistakes really stand out. Additional fix: ```suggestion - This option controls the netconf server action after an error occurs while editing the configuration. ```
```suggestion module.fail_json(msg="Cannot continue, no dbus session available and failed to create one", stdout=out, stderr=err, rc=rc) ```
`... information is provided ...` (
This can be replaced with modifying the regex in L279 to '^logging (\S+)', i.e., fetch lines that strictly start with 'logging'.
I think we should pythonize these names here for consistency
This would only be required when `state=present`. We don't need the source to remove a repository.
If we can't delete the publication for whatever reason, there will be no error and the module will be trapped in a endless recursive loop.
@getjack This should be your details here
Your indentation here is weird... the option names are indented with 3 spaces, then the next level is 6 spaces... please make it 4 everywhere
Manager attributes seem to be Dell specific, this needs to be checked against the Redfish standard.
a range of available values would be suitable in the description. Also, checking it in the code and then failing implicitly would be imho better than getting python error from zabbix-api module
Something else to consider. These statements should probably also check the value is not None, to avoid issues with isfile. TypeError: coercing to Unicode: need string or buffer, NoneType found ``` if cert_chain is not None and os.path.isfile(cert_chain): ```
shouldn't we do this on password input? as this is an issue with all passwrods
`aci_argument_spec` has been updated to be a function. This line should be updated as: ``` argument_spec = aci_argument_spec() ```
And exit with a proper failure message if it fails.
Are you able to state what that precedence is in terms of the ones at https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable (maybe just a link).
Nice, I like this pattern :+1:
please remove version added here
This might be wrong as you can change the vnic accidentally if there is empty network set.
I'm actually a little surprised pylint doesn't complain about the possibly undefined name here, but if it genuinely doesn't, we're basically getting the behavior we want for free the way the code is now (a `NameError` on `spec_from_loader` if someone calls `find_spec`, which is probably more useful to anyone that cares than the extra effort required for more explicit error handling. So I'd vote for "leave as is" if pylint's not complaining.
```suggestion - Facts representing the current state of the node. Matches the C(docker node inspect) output. ```
Remove the quotes from around `%r` as that may cause a something like `''foo''` to appear in the output.
Ah, I see what you are doing now. That is... a bit convoluted. It would seem simpler to `'show running-config aclmgr | section {0}',format(interface)`, and then match `'ip access-group {0} {1}'.format(name, in/out)` directly, unless there's some limitation on section that I'm not aware of.
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Missing space after comma.
We need to check this
Why do you wait to fail ? I think you must fail in "main"
typo - idemotent -> idempotent
The `mocker` fixture is available in our tests. You can use `mocker.MagicMock` instead of importing it. ```suggestion ```
for a future enhancement, you could check `workflow['summary_fields']['user_capabilities']['start']`, and then give them a custom error message if it returns False, meaning they don't have permission to launch.
`json.loads` unless it will fail with error `'bytes' object has no attribute 'read'`
The [module checklist](http://docs.ansible.com/ansible/developing_modules.html#module-checklist) (and I know this isn't a module) suggest using ``` try: import boto HAS_BOTO = True except ImportError: HAS_BOTO = False ``` With a similar block for `boto3`, you can just use `HAS_BOTO`/`HAS_BOTO3` rather than `try/except NameError`. But in this case it's a stylistic thing, and using common Ansible practices, not really a blocker.
YYYY-MM-DD isn't a module option, so I think you can remove the I and parentheses
I don't believe Object should be capitalised, might be better to change it to member object as well.
Default `false` is the default of the engine as well. So we can use here `None`, and don't send additional data via network, if it is not needed.
@Akasurde @alikins here is a ```return virtual_facts``` missing. Otherwise the facts are reset later to 'NA' later!
There should be new line behind this line.
```suggestion - When C(false), the behavior falls back to the global 'hash_behaviour' configuration. ```
please add `,no_log=True`
dont use play_context, add 'executable' option to docs and `self.get_option('executable')`
This doesn't make sense. You say it's required, and then say it will default to something if it's not set.
I would also default children list to `[]`
Aren't these normally uppercase? ```suggestion ACTIONGROUPS = r''' ```
`module_utils` files should be BSD licensed. Look in another `module_utils` file such as `basic.py` for a copy of the BSD license to be included.
Yeah. But at least you tried and I had the chance to chat to you ;o)
I do not think the proposed PR should be applied because of what @abadger explains.
```suggestion - Base URI of controller to use. ```
While I appreciate the effort, if you aren't going to use this var, there's no reason to add it.
`pause *= backoff`
Please write as: ``` if __name__ == "__main__": main() ```
There is a new compare_aws_tags function in module_utils.ec2 that should reduce the amount of work needed here
```suggestion return self.exists and self.info['State']['Running'] ```
Bool datatype does not require choices.
Default to None can be omitted
```suggestion - Whether or not to send session affinity cookies, which route client requests in the same session to the same instance. ```
set HAS_BOTO3 before here, so that you can test if you have it later on.
This is a good fix. Amazing we haven't hit this sooner. I'm wondering if we should also convert the `b_destpath` to text as well. ```suggestion module.fail_json(msg='Error creating %s Error description: %s' % (to_text(b_destpath), to_native(e))) ```
I think you can simply skip it if config file doesn't have `cache` section. I assume this is for backward compatibility.
the script does not work in some versions, there is a lot of overlap but i would keep both and let user figure out which one works for them
Should just be what was on the original `short_description` in the template_common file.
Descriptions must be in Sentence case and have a trailing dot. (Same for other descriptions) There's also no need to quote the whole line.
```suggestion - 'scope. Available valid values - local or fabric.' ```
Will need `version_added: "2.8"` for these two new options.
`display` should not be used in the module code. Please remove this import
Can we use `get_vm` method instead? Since find_vm_by_name finds vm based on VM only.
IMHO this check will always be True since the Cloudstack API will returns `providername` and not `provider`. Perhaps renaming `provider` to `providername` in args? ~~~ args['providername'] = args.pop('provider') ~~~
This line is causing the module to fail unconditionally on every create.
return values should be snake case, not camel case. Use `camel_dict_to_snake_dict` on the results
I think that the first branch of `if collection_name` should also emit JSON. Also, with Jordan's suggestion to use the `choices` kwarg in the CLI declaration, it'd be something like `output_format == 'json'`.
`sgr['dest_port_from']` is already a string no need to use `str` around.
```suggestion replace: ```
format and a user provided field is a bit of a security issue `%` notation is better here, but not a showstopper
```suggestion and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name). ```
Suggest this language be: Cannot have both the docker-py and docker Python packages installed together as they use the same namespace and cause a corrupt installation. Please uninstall both packages, and re-install only the docker-py or docker Python package. If it's possible to add a single quote without causing a parsing problem, it would be even better as: Cannot have both the 'docker-py' and 'docker' Python packages installed together as they use the same namespace and cause a corrupt installation. Please uninstall both packages, and re-install only the 'docker-py' or 'docker' Python package.
I just read the test. > Change facts about all hosts in given cluster You should change the `description` of `cluster_name`.'
connections can load their own become plugin, so it might be better to check on the connection itself
Might want to cast port_mapping['hostPort'] to an int just in case they passed a string. At some point we could probably update this module to use argspec suboptions so we could ensure the ports are integers before the module uses them.
errors should go to stderr, you can just use sys.exit('message") to do both in one statement
Since this is a credential `no_log=True` should be set here.
Again, the else here is unneeded and unwanted.
This doesn't need to be in the try/except. After it you should also do something like ``` if not region: module.fail_json(msg="region must be specified") ```
This can be configured using `choices` in the spec (sub options)
Please change to: `protocol=dict(type='str', removed_in_version='2.6'), # Deprecated in v2.6` So this matches https://github.com/ansible/ansible/pull/27070
I think the new version is much better! ```suggestion including nodes that left the swarm but haven't been removed from the cluster on swarm managers and nodes that ```
On the other hand, only pip can detect that, since it downloads dists, unless we do `pip download` ourselves and check what's inside.
I think this was the reason for the distinct `ec2` and `aws` docs fragments originally. We should probably move to one or the other.
```suggestion - This lookup requires the C(sops) executable to be available in the controller PATH. ```
this change breaks the pattern of other methods like down_connection (1/2 of the methods are constructors the other 1/2 executors) so i would change the caller instead.
This doesn't work as expected, unfortunately. ``` >>> test_dict = {'one': 1, 'two': None} >>> print(test_dict.get('two')) None >>> print(test_dict.get('two', 2)) None >>> print(test_dict.get('three', 3)) 3 ```
Mention that `namespace` requires hvac 0.7.0.
this should make a note that the default has changed making it backwards incompatible
Can we just call this argument `lambda_version` without the alias (just thinking about future proofing for other notification targets)
Instead of paginating over all the security groups, it would be better to restrict what AWS returns using the TagKeys/TagValues parameters on the [describe_cluster_security_groups](http://boto3.readthedocs.io/en/latest/reference/services/redshift.html#Redshift.Client.describe_cluster_security_groups) method.
That's up to you. There is no requirement to have a 1:1 mapping between the command and the Ansible interface. And I personally prefer to always have units (e.g. the AIX LV interface assumes no unit to mean MB, not MiB so...)
```suggestion - If a network interface is created when creating the VM, a security group will be created as well. ```
import specific functions, not *
`This module has a dependency on python-boto >= 2.5` should be listed in a requires section. See other modules for examples for this
I'd drop `_name`
You should always include `type`. The order should always be `description`, `type`, `required`, `choices`, `default`, `added_in_version`.
You can specify a path glob to configure search paths for plugins. Like the following contrived example: ``` ANSIBLE_CALLBACK_PLUGINS=`pwd`/*/ ansible localhost -m ping ``` Because we use `glob.glob` currently this allows for supplying plugin paths with glob chars, which people do use.
In order to work that properly in 4.2 where you don't have specify Filter header to user behave as user, we have to don't send anything if user didn't pass that. So I would suggest to have parameter `headers`, which is dictionary, rather then `Filter`.
This was a copy paste and still references Meraki
```suggestion - name: Ensure that /exports/nas key in auto.direct map is present ipa_automountkey: ```
@mikewiebe `get` takes care of NoneType when the data doesn't have the key `TABLE_role`. It returns None. The error appears to be because the NoneType looking for the `ROW_role` key. Checking for `TABLE_role` key when using `get` is not justified. So Maybe remove `get` from this line? `configured_roles = data['TABLE_role']['ROW_role']`
Yes, that would be the way to do it. Also, just for clarity, those are not blockers for merging this PR. The question of behaviour change is the only thing holding this up.
in any case, it should be in config with this as a default
I don't know, this seems too clever (and not hugely readable). Prefer `desired_state = 'Enabled' if enabled else 'Disabled'`
`if current_state == 'present' and not policy_equal(module, current_policy_statement):`
This is a bad API: you indicate failure/success by both raising exceptions and adding metadata via return value. It's common in C or Go to use return status codes, but in Python it's just fine to raise exceptions for failures and then return ready-to-use values for successful outcome. It's pointless to always return static `True` additionally to useful payload. I suggest you to simplify this by wiping out this boolean part and returning just useful result, not a tuple.
Use `self._display` instead of `display`, which will also allow you to get rid of the Display import.
no need to use a property here.
not a blocker: aside from environment variables, you can also use ini entries in ansible.cfg, it is a nice option for users to be able to configure in the way they prefer.
```suggestion new_item['aliases'] = sorted(new_item['aliases']) ```
```suggestion current_channels = get_current_channels(module, command) if state == 'present': ``` Since it is common to both `absent` and `present`
In my testing, I've found that if a cluster doesn't have any security groups assigned to it, this key will not exist. This `if` statement then returns an error complaining about this `NoneType` not being iterable. I did something like this to get around it. This probably isn't the best way to do it but it works for me: ``` # data structure of returned security groups from describe_cache_clusters is # different to that expected by modify_replication_group if 'SecurityGroups' in cache_cluster: if set(module.params['security_group_ids']) != set([sg['SecurityGroupId'] for sg in cache_cluster['SecurityGroups']]): params['SecurityGroupIds'] = module.params['security_group_ids'] if 'SecurityGroups' not in cache_cluster: if module.params['security_group_ids']: params['SecurityGroupIds'] = module.params['security_group_ids'] ```
```suggestion from zabbix_api import ZabbixAPI ``` Unused import
Ah, fair enough.
at least not needed. :)
The ```suggestion uuid = self._module.params['uuid'] ``` you had here before is also fine. `AnsibleModule` makes sure that all options will be there; if the user didn't specify them, you'll get `None`.
```suggestion - The service-object configuration protocol, direction, range or port. ```
We should try and use single-quotes. There're some inconsistencies in this module but the majority of strings are single-quoted.
This should not be quoted.
```suggestion msg: "{{ lookup('first_found', findme, errors='ignore') }}" ```
Almost ;) ```suggestion - "wipefs (when I(state) is C(absent))" ```
You can use `C()` for constant width which doesn't require escaping, which also gives better formatting.
Period at end.
It doesn't look like `grpc` is actually configurable.
We return values in snail-casen so this would be: disable_remote_status_page I personally hate negative variables, I think it's easier to have a `remote_status_page_enabled: no` rather than `disable_remote_status_page: yes`.
Should not have a trailing dot.
This does not need to be wrapped.
Why `IOError` or `AttributeError` can happen? I can see only `ValueError` occuring.
You can remove the else. AnsibleModule will handle this since state has a list of allowed choices.
Please create shallow copies to avoid the original data to be modified: ```suggestion new_item = dict(new_item) old_item = dict(old_item) # Sort the aliases ```
Combine these two methods together with argument.
For the get('organization') request response? I'm assuming the list of 'organizations' and 'users' will always have a single item? (at least as used with a oauth token as used here). Will that depend on the type of api_token? (ie, if there is something like a organization or group level api_key, would the results be different? If so, could be useful to explain in the docs)
```suggestion - State of the vm extension. Use C(present) to create or update a vm extension and C(absent) to delete a vm extension. ```
Could this cause a problem in a nested loop (ie, deleting the outer loop var)? I'm assuming each task has its own deepcopy of variables, but not sure from context.
Lines 56-58 are already done in HttpApiBase, no need to redo them here.
I would also attach stdout/stderr
s/This parameter defaults to an empty list./This parameter defaults to None. The line below should be edited too since to drain all targets it must be set to an empty list to use in conjunction with purge_targets.
you should not do it this way, as this will break if arguments need quoting, also know that passing a single string as a command can be problematic as the whole thing is interpreted as the command. If you really need this, set `use_unsafe_shell=true` on run_command and it will properly stringify everything and execute it via `/bin/sh`.
```suggestion - name: Add an LDAP user stanza ```
CI failure due to missing module metadata: ``` 2017-02-04 11:59:25 ============================================================================ 2017-02-04 11:59:25 lib/ansible/modules/utilities/logic/set_extra_var.py 2017-02-04 11:59:25 ============================================================================ 2017-02-04 11:59:25 ERROR: No ANSIBLE_METADATA provided ```
Change to `mgmt` or similar. CGNAT is not the correct docstring here
ternary isn't available in python-2.4 If the freeipa module works on python2.4 then this will need to be expanded into a regular if-else.
It is needed, since doc fragments for plugins can also contain option deprecations.
again, code not needed as this is already 'required'
Remove the quotes from around `%r` as that may cause a something like `''foo''` to appear in the output.
No, the default is None. If the value is set to False or True, this may trigger a modify if the current value is different. If the value is None, no action to taken for this parameter.
```suggestion author: - Sandeep Kasargod (@vexata) ```
`, must be located in conn_params dict` can be removed here, and in the following lines. the `suboptions:` dictionary will create a nested table with the options, e.g. http://docs.ansible.com/ansible/latest/vyos_config_module.html#options
Only for consistency. Not sure it's a good enough reason.
Linking another PR depending on this decision: https://github.com/ansible/ansible/pull/28513#discussion_r139060330
This should be ```suggestion if self.serial_number is not None: ```
update_ntp_settings â update_ntp_servers (or re-change the update_ntp_servers method name)
Why not keep `send_request()` as a convenient wrapper around `NetconfConnection.exec_rpc` like `exec_command()` in connection? There's a lot of churn related to replacing `send_request` calls to the same `conn = get_connection(); conn.execute_rpc(tostring(element), ignore_warning=False)` that could be handled here for every platform at once
This should be `011`.
```suggestion - name: ansible_aws_ssm_timeout ```
Remove redundant imports.
Why are you ignoring `IOError`s? The original code did not do that!
For compatibility we ask folks to use `.items()` since it works in Python 2.4 up to Python 3.x. If you _must_ use iteritems please use `six.iteritems()`.
I would change this to: `PVE_MAJOR_VERSION = int(proxmox.version.get()['version'].split('.', 1)[0])`
In fact, @ganeshrn, you added it a couple of weeks ago ;)
Add a `choices` key with `present` and `absent`.
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
No longer required now you're using AnsibleAWSModule
Add alias of `password` shown in argspec.
Please do not remove this trailing comma, this is our preference with dicts and lists to minimize future diffs when lines are changed.
not sure if we should remove this, it is still nice for modules to return `changed=False`, the task executor side just ensures that even 'non basic.py using modules' also do
I suspect it doesn't matter much in practice, given I suspect any useful sleep would be 5 or 10 sec or more. Just curiosity on my part ;->
Probably needs to be changed to 2.9 now.
the `is_sequence` function would be preferred, to make sure it isn't picking up strings too.
~~~diff + required_one_of=[['id', 'name']], ~~~
`return name in [v['VaultName'] for v in self.list()]` will almost certainly work in all cases (if not, use `get` to avoid a KeyError or catch the KeyError)
Mutually exclusive with `I(template)`.
s/SQL server/VMSS extension/
That one's ok. Just using `return` is not, though :)
Match name exactly. ```suggestion return [int(p.info['pid']) for p in psutil.process_iter(attrs=['pid', 'name']) if name == p.info['name']] ``` This will also fix the CI failure, since it's failing when `p.info['name']` is `None`.
Fair enough, I stand corrected :)
You can add this^ line before `if` statement, and remove the exactly same code from line 135.
s/setup and the port/configured and enabled, and port/
Please import only what you need, rather than `*`
I tend to do something like: ``` instance_profile_result = iam.create_instance_profile( name, path=path ).create_instance_profile_response.create_instance_profile_result.instance_profile ``` Just an FYI, figured I'd chime in.
Use the `fake_xenapi` fixture on tests that need to reference it and this import won't be needed. ```suggestion ```
I would rephrase this as 'to assign the variables to a different host than inventory_hostname you need to use both delegate_to and set delegate_facts: True'
*sigh* Good catch.
If you'll have a class for distribution, you'll be able to encapsulate lot's of implementation details there and even keep a normalized package name there internally.
Just noticed.... These assignments need to be here (but modified) otherwise the following if statements will fail. I would also move the cert_chain assignment into if state == 'present' block. So along these lines.... ``` state = module.params.get('state') name = module.params.get('name') path = module.params.get('path') new_name = module.params.get('new_name') new_path = module.params.get('new_path') dup_ok = module.params.get('dup_ok') if state == 'present': cert = module.params.get('cert') if cert is not None: if os.path.isfile(cert): cert = open(cert, 'r').read().rstrip() else: cert = to_text(cert.rstrip()) key = module.params.get('key') if key is not None: if os.path.isfile(key): key = open(key, 'r').read().rstrip() else: key = to_text(key.rstrip()) cert_chain = module.params.get('cert_chain') if cert_chain is not None: if os.path.isfile(cert_chain): cert_chain = open(cert_chain, 'r').read() else: cert_chain = to_text(cert_chain.rstrip()) else: cert=key=cert_chain=None ```
I would make it a second item in that list. Since this is a proposal through the Github interface I will make that change myself, but leave it up to the Docker people whether this is correct.
In case a module was never loaded (`launchctl load <path-to-plist>`) than start/stop does not work. So better to use load/unload instead
`choices:` no longer required
No, I mean if someone set port=foo , the module will show a traceback, and I think it would a better UX to show a message or something.
Probably prefer `enforce_expiration` as a module option. Check seems to indicate whether Ansible will check something not set something.
i was wondering, perhaps we could normalize location before, e.g.: self.location = normalize_location_name(self.location) but just a suggestion. not sure perhaps that would have some disadvantages...
var might be unused but it is consuming an iteration
I'd rename this and the associated CLI option to `artifacts`, since not all artifacts are coverage artifacts.
```suggestion return json.loads(to_text(body, errors='surrogate_or_strict')) ```
```suggestion msg += " must omit fourth value or it must be type bool; got %r" % (check[3], ) ```
hehe, ok, I just wanted to keep the same in examples and return value, but ok
I don't think this can work because this is not an interactive step. So you cannot pass the key passphrase to `ssh-keygen` and the process will just stay stuck.
If default behavior changes, it definitely needs an entry there!
`rollback` method won't be called when `CommandExecutionException` is raised.
This is a bad change. self is not used inside of this method at all. I'm not sure which pylint warning you're seeing but the answer for it is probably to make this a toplevel function, private to this python module, not a regular method.
Needs to be `run_commands(module, ['show vlan brief'])[0]`.
`required: false` is the default, it reads more easy if only the parameters that are required have `required: true`.
Rename DO to DigitalOcean to avoid acronyms
i would probably rewrite this to ``` virtual_facts['container'] = bool(virtual_facts['virtualization_role'] == 'guest' and virtual_facts['virtualization_type'] in ('podman', 'container', 'docker', ....) ``` inserted right before we return values.
```suggestion result['stdout'] += to_native(stdout_data) ```
This isn't compatible with Python 2.4, which is causing it to fail the py24 tests: ``` 2016-08-11 20:25:51 + python2.4 -m compileall -fq -x 'module_utils/(a10|rax|openstack|ec2|gce|docker_common|azure_rm_common|vca|vmware|gcp|gcdns).py' lib/ansible/module_utils 2016-08-11 20:25:51 Compiling lib/ansible/module_utils/cloud.py ... 2016-08-11 20:25:51 File "lib/ansible/module_utils/cloud.py", line 86 2016-08-11 20:25:51 except Exception as e: 2016-08-11 20:25:51 ^ 2016-08-11 20:25:51 SyntaxError: invalid syntax ``` You can use this instead: ``` python except Exception: e = get_exception() ```
just use `client = module.client('apigateway')`
```suggestion description: The boot device name which will be used for the next boot (and beyond if persistent). ```
please add `type: bool`
I dont think this change is needed, it would just return NonSystemd by default, no need to search for the other commands, that happens later already in NonSystemdTimezone class
Quoting a path is not needed.
replace "chroot connection" in messages with "nspawn connection".
Use quotes: ` - "The plugin returns ..."`
So, looking at our existing list of modules, **api_url** is more popular than **server_url**. I guess we need to make sure we are making the right changes wrt. parameter naming. ``` [dag@moria ansible.git]$ grep -rl 'api_url' lib/ansible/modules | grep '\.py$' | wc -l 77 [dag@moria ansible.git]$ grep -rl 'server_url' lib/ansible/modules | grep '\.py$' | wc -l 21 ```
This should use `AnsibleModule.digest_from_file()` which is more robust since it checks to see if the hashing algorithm is available and fails gracefully if not.
Add `data` to the type hints in the docstring.
thinking about this more, this should be a totally diff path i.e: ``` 'dev': device 'alias': original ``` instead of duplicating the data since we should already be providing the same device data .. or just append an 'alias' to the original devices (caller code might need changes)
```suggestion - 'If C(state) is set to C(reboot-guest) or C(rebootguest) and virtual machine exists, then the virtual machine is rebooted.' ```
nothing. The point is to make collision between nonce and key as unlikely as possible. Using static nonce doesn't give you that. Cryptography is hard enough to get right _without_ going against recommended best practice.
```suggestion def _get_file_hash(b_path, filename): # type: (bytes, str) -> str ```
this should be using `to_native`, not `str` also doing: ``` if to_native(e.code) in ['16034', '16043']``` is less code
Should just be `ipv6_enabled`
This probably should be `self.extendedKeyUsage`
`VPN instance, the length of vrf name is 1 - 31, i.e. "test",but can not be C(_public_).`
```suggestion except FileNotFoundError: ... except Exception as e: ... ``` Don't use BaseException
maybe we can drop state. it was my idea in the beginning, but i think it's not really necessary now as always the same.
> FYI, I'm moving the nest func out to a private class method. Awesome! The complexity of `_create_role_list()` is now 4. That's what winning looks like. ð
```suggestion v = randint(68719476736, 1099511627775) ```
Seems fine to log the user.
Same duplication of functionality as with `post_request` function.
This looks good except that we should use an errors strategy other than replace here. How about this? ```suggestion return ':' in to_text(host, errors='surrogate_or_strict') ```
The URL path should be customizable (or the API version), I guess `v1beta1` won't stay forever (meaning: the path will change without implying a new behavior).
Right. I can see now what's happening. You previous fix changed this: ```diff -attrs[name] = value +attrs[name] = [map(to_bytes, value)] ``` Which is wrong as it creates list of list. So this PR is fixing that which is good but I would rather use this syntax than the `for` loop: ```python attrs[name] = map(to_bytes, value) ```
This does not add any information, maybe do something like: ```yaml short_description: Manage disks, partitions and file systems ```
Yup, I'm happy to accept a follow up bulk PR to update existing modules
using loader allows for the ini file to be vaulted
```suggestion ``` Don't add `required: false`.
If there's no reason not to, I don't mind. But a dictionary with the name as key is easier to use it in Ansible.
@bcoca I have cloned the devel branche and the issue still exists: ``` ansible 2.9.0.dev0 config file = /etc/ansible/ansible.cfg configured module search path = [u'/home/spolat/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules'] ansible python module location = /home/spolat/python/ansible/local/lib/python2.7/site-packages/ansible executable location = /home/spolat/python/ansible/bin/ansible python version = 2.7.15+ (default, Nov 27 2018, 23:36:35) [GCC 7.3.0] ``` ``` TypeError: argument of type 'int' is not iterable ``` @marcin-sucharski: Applying current changes in the PR fixes the issue.
you can move it to before `if` as just `docs = {}` line, this should read better.
You do not need to import HAS_BOTO3 when using AnsibleAWSModule; it checks it for you.
```suggestion if value.startswith(beacon): return beacon + unfrackpath(value[1:]) return value ```
This isn't true, is it? The "For safety" sentence- because it's basically "alias is required.. unless not, which is okay".
This 'default_chains' doesn't seem to be used anywhere.
Please move these two lines (without the new part) into the `if` below which updates `config_mapping`.
```suggestion host=to_text(host), err=to_text(err), url=to_text(self.foreman_url))) ```
Should this be `response` since that is what is returned? I don't see `result` used within this function.
This is the 4th `if` level, it probably means you can re-factorize your code a bit, e.g: with a function, of smaller if/else block. This being said, the code is short enough to be comprehensible, I don't mind merging it like it is today.
Syntax error, `delegate_to:` should be at the task-level, not module-level.
(Or move that condition into the first branch.)
is_template might be a better name
why remove 'variables from a' ? that seems the important part of the phrase. 'all files' is not always true, as files are filtered by extension and/or the ignore option.
In `argspec` you could use `required_if` to enforce this. Assuming you want to throw an error if `location` is set and `approve` isn't
If that is a bug, first fix it in devel and then cherry-pick the additional commit to this PR so that the correct code can be merged as one unit to the stable-2.7 branch.
```suggestion version_added: "2.8" ```
Ah, you're right, the email isn't sent. I misremembered that apparently. I guess Docker originally thought it might be used, but then dropped that... Then it should be OK to remove it.
Could this be moved to the common fragment? I don't think it's a must-fix for this PR.
This doesn't work anymore, since `result['changed']` is no longer set to `True`.
this would ignore missing inventory files
I'm on the fence here with `_kind` and `_name`. I think I'd much rather the caller be responsible for this. But there are tradeoffs. A possible solution would be to use `{{ kind }}` and `{{ name }}` in the string formatting in here: ``` self._add_error("Unsupported parameters for ({{name}}) {{kind}}: {0}. Supported parameters include: {1}." ``` and then allow the caller to do something like: ``` self.fail_json(msg=self.validator.error_messages[0].format(kind='module', name=self._name)) ```
```suggestion elif paramname == 'SubnetIds': ```
With `connection=local` the modules run locally on control node and connect to the remote device (managed node) based on the transport. So for example in case of [eos_conifg](https://docs.ansible.com/ansible/eos_config_module.html) if `connection=local` and `transport=eapi` the module runs locally on control node and connects to managed device over `http`. So in this case module is not copied to managed host and again delegated back to control node. However, if you think `delegate_to` is the right option I am ok with it.
Hmm, that is twisted IMO. I would prefer e.g. state=info over an unset state, because most modules default state to present. I think we need to proper discussion on how to tackle this, not just for this module but for all modules. A lot of modules have a _facts variant that returns information and I think we are moving slowly to a new concept of facts_plugins that would be used for returning state information.
With the last round of changes I suppose not. I will remove it.
Maybe a little more information about what password manager pro would be worthwhile to have here.
Please remove this line.
there's no point in assigning a result var which is (1) never assigned and (2) never used. ```suggestion templar.template("{{ missing }}") ```
You should only do this if `self.check_mode` is `False`. Also, this should better be done in `self.generate` right before it is regenerated.
Would be good for an example to show how to use the returned data.
```suggestion pn_admin_session_timeout: ```
And then this needs to be even with if dest instead of elif dest
You can use `env_fallback` like ```python from ansible.module_utils.basic import env_fallback ... token=dict(type='str', fallback=(env_fallback, ['SPOTINST_TOKEN'])),
Please replace this line with `type: bool`
I'd calculate this path relative to `__file__` instead of assuming the cwd (in case someone runs it without using ansible-test for example).
From a style standpoint, this should be done a different way (it mutates an input rather than making the change in a scoped variable) but if we need to get this in quickly (for the 2.5.0 and 2.4.4 releases) then I won't block on it. Just something to remember to fix later.
`Create tags for DAG's on PAN-OS devices`
I really don't see the point of using a class if you're just going to create the client inside methods! I'd create the ec2 and elbv2 clients at `__init__` time and just use self.ec2 in the methods
No longer need timeout, I think because we'll use timeouts from multiprocessing.
Heads up, I think `safe_tag_name` is undefined here
Please add `"` to each end of this line, the colon at the end is making YAML interpret this as an object, so the docs build fails.
Two things standout to me about this code: (1) merge it into the above if state == "present" block. (2) you should have a check after the ansible module is created that errors if schema is set and state==absent
For booleans, you also need to add: ```yaml type: bool ```
Not sure why the error starts with a whitespace here.
So if you follow @bcoca's advice here, then the code will look something like this: ``` FACT_SUBSETS = dict( min=Facts, hardware=Hardware, network=Network, virtual=Virtual, ) [...] if 'all' in gather_subset: gather_subset = FACT_SUBSETS.keys() for subset in gather_subset: if subset not in FACT_SUBSETS.keys(): [...] facts = {} for subset in gather_subset: FACT_SUBSET[subset]().populate() [...] ```
Shouldn't the edit operation only be set if we want to make the actual change (inside the `if disk['size'] != disk_spec.device.capacityInKB` part)
please use `id_` instead of masking builtin
we should not be using dict nor list as it is easy to sneak in comparable things like set() or tuple(), Mapping and Sequence (sans strings) should be used instead
@tomvachon you could move this change to azure_rm_routetable module. if you don't make changes in common code CI is much faster and simpler, as only your module is tested, and you will also avoid any conflicts with other prs
If `display.verbosity` is falsy, this results in `python anisble_connection '' <pid> <uuid>` and the extra parameter isn't understood to be intended as a flag. I think this (and the above change to verbosity) should fix the issue? ```suggestion [python, ansible_connection, *verbosity, to_text(os.getppid()), to_text(task_uuid)], ```
required: false is the default and doesn't need to be specified.
Set same default timeout here: ```suggestion def set_lock(self, path, lock_timeout=15): ```
Period at end of the sentence
It doesn't work if pkg_provides contain a version: ``` max@mde-oxalide % pacman -Qqei perl | grep Provide Provides : perl-archive-tar=2.30 perl-attribute-handlers=1.01 perl-autodie=2.29 perl-autoloader=5.74 perl-autouse=1.11 perl-b-debug=1.26 perl-base=2.27 perl-bignum=0.49 perl-carp=1.50 perl-compress-raw-bzip2=2.074 perl-compress-raw-zlib=2.076 perl-config-perl-v=0.29 perl-constant=1.33 perl-cpan-meta-requirements=2.140 perl-cpan-meta-yaml=0.018 perl-cpan-meta=2.150010 perl-cpan=2.20 perl-data-dumper=2.170 perl-db_file=1.840 perl-devel-ppport=3.40 perl-devel-selfstubber=1.06 perl-digest-md5=2.55 perl-digest-sha=6.01 perl-digest=1.17_01 perl-dumpvalue=1.18 perl-encode=2.97 perl-encoding-warnings=0.13 perl-env=1.04 perl-experimental=0.019 perl-exporter=5.73 perl-extutils-cbuilder=0.280230 perl-extutils-constant=0.25 perl-extutils-install=2.14 perl-extutils-makemaker=7.34 perl-extutils-manifest=1.70 perl-extutils-parsexs=3.39 perl-file-fetch=0.56 perl-file-path=2.15 perl-file-temp=0.2304 perl-filter-simple=0.95 perl-filter-util-call=1.58 perl-getopt-long=2.5 perl-http-tiny=0.070 perl-i18n-collate=1.02 perl-i18n-langtags=0.43 perl-if=0.0608 perl-io-compress=2.074 perl-io-socket-ip=0.39 perl-io-zlib=1.10 perl-io=1.39 perl-ipc-cmd=1.00 perl-ipc-sysv=2.07 perl-json-pp=2.97001 perl-lib=0.64 perl-libnet=3.11 perl-locale-codes=3.56 perl-locale-maketext-simple=0.21_01 perl-locale-maketext=1.29 perl-math-bigint-fastcalc=0.5006 perl-math-bigint=1.999811 perl-math-bigrat=0.2613 perl-math-complex=1.5901 perl-memoize=1.03_01 perl-mime-base64=3.15 perl-module-corelist=5.20180622 perl-module-load-conditional=0.68 perl-module-load=0.32 perl-module-loaded=0.08 perl-module-metadata=1.000033 perl-net-ping=2.62 perl-params-check=0.38 perl-parent=0.236 perl-pathtools=3.74 perl-perl-ostype=1.010 perl-perlfaq=5.021011 perl-perlio-via-quotedprint=0.08 perl-pod-checker=1.73 perl-pod-escapes=1.07 perl-pod-parser=1.63 perl-pod-perldoc=3.2801 perl-pod-simple=3.35 perl-pod-usage=1.69 perl-podlators=5.006 perl-safe=2.40 perl-scalar-list-utils=1.50 perl-search-dict=1.07 perl-selfloader=1.25 perl-socket=2.027 perl-storable=3.08 perl-sys-syslog=0.35 perl-term-ansicolor=4.06 perl-term-cap=1.17 perl-term-complete=1.403 perl-term-readline=1.17 perl-test-harness=3.42 perl-test-simple=1.302133 perl-test=1.31 perl-text-abbrev=1.02 perl-text-balanced=2.03 perl-text-parsewords=3.30 perl-text-tabs=2013.0523 perl-thread-queue=3.12 perl-thread-semaphore=2.13 perl-threads-shared=1.58 perl-threads=2.22 perl-tie-file=1.02 perl-tie-refhash=1.39 perl-time-hires=1.9759 perl-time-local=1.25 perl-time-piece=1.3204 perl-unicode-collate=1.25 perl-unicode-normalize=1.26 perl-version=0.9923 perl-xsloader=0.30 ```
Maybe ```suggestion if msg and msg[-1] not in ['!', '?', '.']: ``` to avoid crashes if `msg` is empty.
You don't need use `self.role_name` after in the module, you don't need to define it as an attribute.
Might want to move this function to `module_utils` so that other FortiOS modules can use it.
Ok, so we updated the dev guide to reflect the rewrite. Now, this is not a deal-breaker, if you don't like or want it, I don't care :-)
Name of the Azure Container Services(ACS) instance.
I would recommend to create a new module rather than modifying this. New module will support CRUD operations on given monitors, whereas this module will only manage state of monitors.
Same thing here, having an option that just passes values into the cmdlet is a glorified API wrapper which is not what Ansible tries to do. Honestly I don't think this should be part of the module, it's not idempotent and someone can easily do the same thing with ``` - win_data_deduplication: .. register: data_dedup - win_shell: Start-DedupJob -Type ... when: data_debug is changed ```
same here, this will cause exception on load, not on parse
```suggestion "no valid session and an unexpected error was discovered. \n Error: " + to_text(err)) ```
not blocker: `paused` is more declarative, `pause` is imperative, we prefer the former
Join this and the line below
just an idea: While I know this isn't module, you could get around this requirement by using [IPAClient](https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/ipa.py#L43) and pull the same information from the IPA Web API.
The description looks wrong...
I don't think the `instance` is always a `dict` cc/ @s-hertel
not a blocker, but the parens here seems useless
exit, not exist.
All modules have the same format because it was added automatically only recently. Nothings can stop you to improve that formatting.
BlockingIOError is not available in Python2. Probably need to use OSError and check that it's the particular OSErrors that we care about.
```suggestion - The status of the secondary location of the storage account. Possible values are C(available) or C(unavailable). ```
Use to_bytes instead of encode() ``` python auth = to_text(base64.b64encode(to_bytes('{0}:{1}'.format(user, passwd), errors='surrogate_or_strict'))) ```
do we have any 'valid' keys that would cause this? at this point i think we SHOULD error out and inform user that the plugin author did something wrong.
period at end of statement.
But this step is not skipped. And all users from the group is removed each time when we run playbook. Because `current_group_members_list` has a list of users from aws. And `users` is an empty list. And `current_group_members_list` - empty list = `current_group_members_list`.
Not sure why we would return the provided information. The user provided it, so it already knows the values.
We tried to use to_text, but the feedback I got from our engineer is that codecs was more appropriate here as we are dealing with hexadecimal.
In the future, if we have more than 3-4 schemes, maybe we can have a `scheme` class attribute instead, however I think it is fine by now.
please use here self.param('version').get('name')
I like to give split a second parameter to control the maximum number of times it will split. So something like: `hostname.split(':', 1)` it may also be appropriate to use rsplit() instead of split() here (although the ipv6 address might be the only case where rsplit() vs split() would be valid and you're already taking care of that above.)
The no_log should be set to true here, as it is not a best practice to be printing the user password on every execution
Perhaps a little messier... ```` if float(".".join(hpilo.__version__.split(".")[0:2])) >= 4: ````
``` from ansible.module_utils.ec2 import HAS_BOTO3 try: import botocore except ImportError: pass # will be caught by imported HAS_BOTO3 ```
This should probably mention that the queue_type can only be selected at creation time and is *ignored* when making other changes
```suggestion def deprecated(self, msg, version=None, removed=False, date=None, collection_name=None, warn_change=False): ```
This also gives an error. The cause is that the `opaqueNetworkId` key does not exist when the portgroup or dvportgroup is assigned to the vNIC. The following conditions are necessary. ```suggestion elif network_object and isinstance(network_object, vim.OpaqueNetwork) and hasattr(nic_spec.device.backing, 'opaqueNetworkId'): ``` tested on vCenter/ESXi 6.7 and NSX-T 2.5
a better description, 'this module allows configuring block device partition using the C(parted) command line tool
Please keep 0 return code. This is a way of communicating success to an OS
I'd go for `try/except IOError` in order to make a point that variable initialized above is in fact a fallback.
Do we need a default case for this, e.g what happens if there is no `db`, `database` or `login_db` set, should we fail? Something like ```suggestion else: module.fail_json(msg="No database parameter set, need one of 'db', 'database' or 'login_db'") ```
Redundant if. You can call `if key` before ``` if key: key_file = write_key_file(key) module.add_cleanup_file(path=key_file) if key_file or ssh_opt: ...```
not sure that we want to deprecate this
There are a couple of cases when we need to use ordinary calling format- if the bucket name has a . in it and if fakes3 or rgw are being used. But we don't need to call it in Line531 if we'll be using it later for fakes3 or rgw, because then we'd be passing the connection calling_format twice, which breaks it. Why is that line at fundamental odds with get_s3_connection? It appears it was overlooked that rgw or fakes3 could have a . in the bucket name.
Please remove `required=False`.
Eek, having this list hardcoded in the task_executor feels wrong... I'm trying to think of a sane way to do it that wouldn't require actually loading all the action plugins to have them register an intent like this (and that also wouldn't open up the potential for "catchall" action plugins that could hijack things).
should use get_versioned_doclink as 'latest' will not apply in the future
The short_description should not have a trailing dot. Keep the index clean and consistent.
This can be an `elif` instead.
This is implicit and can be left out.
Does this work â is it 'token' or 'api_token' at this point? Why is this needed? I guess it's so a playbook specifying user&pwd wins over ansible var specifying token? IINM, doing this after the merge it can have other effects eg. ansible var specifying user&pwd wins over playbook specifying a token... * Idea: Do we have to merge at all? What if we simplify the behavior to "whole `manageiq_connection` param, if unset, defaults to `manageiq_connection` ansible var"? If someone really needs to specify some params and inherit others from a var, they can do it themselves with {{...}} templating, with full control.
If this module is going to be compatible with python-2.4 then we also need to fallback to simplejson here: ``` python try: import json except ImportError: import simplejson as json ``` Since ansible itself needs either json of simplejson to work correctly, that should be good enough.
You can replace this with `pass`.
Another nitpick, the various items do not have to be quoted in YAML/JSON. They have to be quoted for "yes" and "no" because these would otherwise be considered booleans. Yes, YAML is tricky in many ways :-P
This sample doesn't match the doc
```suggestion - C(resource_group), resource group of the app service plan. ```
not a blocker (IMHO) but having 2 params for input chain: `input_chain_src` and `input_chain` is not necessary (I know acme_certificate has also 2 but this has historical reasons). I would use only `input_chain`, because reading from a file could be done with a lookup plugin: `input_chain: "{{ lookup('file', '/path/filename' )}". Also remember, lookup plugins can also "read" from all kinds of things, like DBs, Vaults, kv stores.
This class is already defined.
I am not really sure if we shuld have guid returned. I think there's no real use for the user
Follow pattern as above.
Create the symlink to this script at runtime in the test. Depending on how the source was obtained, the symlink may have been converted to a regular file.
@Qalthos rc, out and err aren't collected the way it was done earlier? this will always send rc = 0. Bunch of utilities have built logic around these variables (same for line 138)
AnsibleAWSModule checks this for you. You can remove the import too.
this is incorrect, apt-get has higher precedence than pkg
Is this just simply no longer needed? Doesn't seem related the the "None aware" change above so I wanted to make sure I wasn't missing something.
'floopy' is also valid parameter here.
```suggestion type: bool version_added: "2.10" ```
```suggestion inside the container and is writable by Ansible. ```
ERROR rather than BLAH :)
CI failure due to python 3.5 syntax error: ``` 2017-02-21 23:00:20 *** Error compiling './contrib/inventory/netbox.py'... 2017-02-21 23:00:20 File "./contrib/inventory/netbox.py", line 47 2017-02-21 23:00:20 except KeyError, key_name: 2017-02-21 23:00:20 ^ 2017-02-21 23:00:20 SyntaxError: invalid syntax ```
> instead of <
I wouldn't hold up this backport for this, personally.
I checked again, `json()` can return `None`, you're right, this check is useful. You might want to add a `try/except ValueError` around `resp.json()` (requests [doc](http://docs.python-requests.org/en/master/api/#requests.Response.json)).
```suggestion - Set to C(true) with I(state=present) to start the machine. Set to C(false) to have the machine be 'stopped'. ```
Could you please rewrite to just import what you need.
I would still leave one example without the implicit `state: present`
```suggestion - Support for masked values requires GitLab >= 11.10. ```
I think we should leave the cipher_name as mandatory. The cipher is associated with the ciphertext and should become mandatory at the same time. (You don't want a plaintext to be enciphered with Algorithm Foo but the cipher_name to be "Algorithm Bar"). AFAICS, your change to set the version in the parameter list is fine, though.
I'd use the following instead: ```python if data is None or isinstance(data, bytes): data_bytes = data else: data_bytes = data.encode(encoding, 'surrogateescape') ```
Indentation error. If there's no `ip:` in the definition, but there is a `domain:` definition, this will fail because `guest_map` and `guest_map.adapter` are not defined.
Python (capital letter when referring go the software)
Another option would be to change the default of `lock_timeout` to `0` in the method signature.
you need to do camel_dict_to_snake_dict before you do the tag conversion (otherwise tag names get converted to lower case which is unexpected)
I think the ValueError should continue rather than break. The logic below is what I think is correct (and I also took the opportunity to get rid of the conditional: ``` python for exe in ('apt', 'apt-get', 'aptitude'): try: get_bin_path(exe) module.warn('Found "%s" but %s' % (exe, missing_required_lib('apt'))) break except ValueError: continue ``` I'm not sure if removing the conditional altogether reads clearer than the original. I might do it this way as a compromise: ``` python for exe in ('apt', 'apt-get', 'aptitude'): try: get_bin_path(exe) except ValueError: continue else: module.warn('Found "%s" but %s' % (exe, missing_required_lib('apt'))) break ```
You can remove the if condition.
```suggestion for _iteration in range(1, iterations): ```
Referring to other options would be better formatted as I(mac) and I(etherstub) to be consistent with some of the other SmartOS modules.
should you make flexvol required, or check it is present under certain conditions? Otherwise, somebody would need to check this works (somehow) with a None value.
I know this is a small one, but I can imagine % formatting will be decommissioned at some point, I would change this to .format() method if it's not too much of a hassle. To back-up this up, ansible is undergoing an effort to be Python3 compatible, as per Python docs the recommendation is to prefer string.format() method against string % formatting operator. [1][2] Also keep in mind that % might have undesired effects [3] [1] https://docs.python.org/2/library/stdtypes.html#str.format [2] https://www.python.org/dev/peps/pep-3101/ [3] http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format
Missing conditional on execution of `main`: ```python if __name__ == '__main__': main() ```
Move it down the stack.
How about `default=None`? Otherwise it might override `EMERGE_DEFAULT_OPTS` values, which would be weird.
the correct fix here is changing super to `CallbackModule_default` instead of `CallbackModule`, then the `self.diff` and any future changes in the init will be inherited
`pexpect<4` does not support `codec_errors`. If you make it here, and `codec_errors` was explicitly provided, an error needs to be raised explaining that `codec_errors` isn't supported. As is, it would end up giving an error that may be misleading.
Not added in module definition, (required_one_of)
this is not really informative, it would also help to know the 'type' of this field
@jedelman8, we can change the module to check mode not supported for now
I'd also make this a toplevel function rather than a method because self is unused inside of the function.
No need to specify `type='str'` and `required=False` as that's the default. The same bellow.
And remove this afterwards.
Probably just want an `elif users:` clause around the for loop then
Having the type be `bool` but defaulting the value to a string seems like a mismatch. ```suggestion default=False))) ```
Use module.warn() instead.
Ansible coding guidelines allow up to 160 chars (which is enforced by CI) Please revert these line-length changes it as 1) It's not needed 2) It makes the diff "noisy"
A trailing comma is preferred.
This should be configurable, because this isn't enough for the work I do with auto scale groups.
`metadata_version` should be `1.1` instead of `0.1`.
Couldn't this just be `filename = filename.replace('2/1', '')`? Or, as I expect you might actually want, just `filename = filename.replace('/', '')`
Please format it like this: ```python # Check if we found the correct line # (swap is a special case because it always uses 'none' as its name) if ( ld['name'] != escaped_args['name'] or ( ld['src'] != escaped_args['src'] and escaped_args['fstype'] == 'swap')): ```
please sort this list from least severe to most severe
"webinterface" should be "web interface"
Imported but unsed
Please add choices=['cli', 'netconf'] here
add a note in description stating that 'bhyve' is supported from 2.10 on-wards.
Same - this class seems more like a snapshot -> facts dict function than its own class.
To match the code in aggregate(): ```suggestion if 'entries' in inventory: entries.append(({'systems_uri': systems_uri}, inventory['entries'])) ```
In the notes section, you can point to the icx platform guide https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/network/user_guide/platform_icx.rst Refer: https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/network/junos/junos_interfaces.py#L107 Applicable for other icx modules as well.
Since these docs are YAML, you can remove all the `\'` around the doc values.
as standard as the 'ini' format ... it looks the same but its not!
missing a `,` after `'--name=%s'`
Please don't use `\`, there are better ways Also use proper indent
I think the stray `=` was probably a typo . . . or a cat on your keyboard.
Do the same for all other descriptions.
I guess I was seeing things? You are correct. It is indeed not plural and takes a string as opposed to list. ð
Sorry, I think the current logic will only fall back to module if environment variable has not been specified: https://github.com/ansible/ansible/pull/17604/files/6c412fbeefa07e4296b33ec7544c5b1a69a6dcd8..85164a272274514877a6369877e851461a5acf0b#diff-0b1c579a3ccbeed5e582e7693e046cb6R112 I'll change the order, though, to put module first. Give me 5 mins.
This can be replaced with `module.botocore_at_least('1.8.4')` and the distutils call on line 316 can be removed. AnsibleAWSModule now has convenience functions for checking the boto3/botocore versions [here](https://github.com/ansible/ansible/blob/6c654b6947cd8726991612897f794bfaadb5490a/lib/ansible/module_utils/aws/core.py#L212)
```suggestion - The name of the object. Will be used to identify the entry. ```
Would it be possible to add a verbose message? E.g. `"msg": File 'abc' already uploaded` or `"msg": File 'abc' uploaded`
```suggestion - A list of the connection states to match in the conntrack module. ```
`This module takes a script and a hash of values...`
It seems the value is in days at least in win10 / server 16 and the defautl is 1 day. in hex it is saved in milliseconds so 1 day = 80510100
2.9 at this point
Exact error should be stored here, since debugging any potential issues in the future will be next to impossible without having the error. Something like `"Unknown error: %s" % str(e)` should be enough.
```suggestion content_library_info: ``` or `library_info` would be more apt.
This is a relatively new feature. Do you know if a specific version of botocore is required for it? Things like RHEL often have pretty old versions of boto3/botocore knocking about and it's nice to give them a clean 'You need version X of botocore' error message rather than some random exception.
Please remove the raising of an exception and properly fail the module.
No spaces. s/new disk name/new_pool_name
This is not necessary when required is False (IIRC)
BotoCoreError should also be handled.
This method should be renamed `def verify_file(self, path)`. Right now verify_file gets called by inventory manager and below on line 80. verify_file also should return a boolean. `return True` instead of `return self._read_config_data(path)` and instead of AnsibleParserError, `return False`. Set config_data directly to _read_config_data(path) in parse() instead of calling this method (as the inventory manager will call it).
Minor thing, though since you are in these PRs anyway: ```suggestion version_added: '2.8' ```
Right, that too. Recently, pip moved all of "seemingly public" modules under explicit "_internal" package to make it clear that users ain't supposed to abuse those.
i would assert that if config diff isn't supported just return None and raise an ansible warning if module diff was asked for and the platform doesnt support it
not really an 'import', 'uses tower as inventory source'
```suggestion - Username in guest operating system. ```
+ `Only one of I(name), I(id) or I(content) can be set.`
I would change it in a way to toggle either`--use_srv_records` or --no-use_srv_records` whether this value is true or false ~~~ no_use_srv_records=dict(type='bool'),
I guess this is `seconds` but unit must be added. When `state` is `active` and `wait_for_public_IPv` is set, then value of `wait_timeout` is used twice (hence max waiting time is 2*`wait_timeout`): it should be specified.
Please don't use `str()` because it has the same problems as not using it. `to_bytes` is specifically designed to properly deal with corner cases. And we don't just use `str()` exactly because in certain corner cases which are hard to reproduce if you don't know what they are.
Showing tracebacks to users is considered to be a bug. Use `fail_json` instead.
~~ use the shared open_url function, it takes care of many issues with python's ssl ~~
Rather than using a parameter name, use a generic term the indicate a valid `get` ref. ```suggestion - Clone only the history leading to the tip of the specified revision. ```
```suggestion raise AnsibleError('Unable to use "%s" as a search parameter: %s' % (term, to_native(e))) ```
This is a bit confusing if you're not familiar with the E-Series systems. This option will enable/disable telnet or ssh, depending on the age/model of the E-Series system that's being managed. Perhaps it's worded poorly.
Why remove the default here? It's still in the arg spec
So, PEP8 prefers a trailing comma when using newline list items. Mostly because it keeps the diff's concise and mergable.
```suggestion # Create a temporary file in the new directory ```
```suggestion - For tracking function statistics the PostgreSQL C(track_functions) parameter must be enabled. ```
`choices` should likely come before `default`
this is not module version but 'metadata format version'
Could you instead reuse the version from botocore?: https://github.com/boto/botocore/blob/develop/botocore/credentials.py#L182-L224
All `description:` fields should be full sentences, capital letters and full stops.
pycharm reports 120 chars not 80
```suggestion - Whether to automatically try to install the Python apt library or not, if it is not already installed. ```
Please remove this line. As this is a new module the top-level version_added is the only one needed.
<nod> So this should work: ``` python cmd_args_list = ["qvm-run", "--pass-io", self._remote_vmname, "cat {0}".format(in_path)] ``` (The qubes doc example is being parsed by a shell so quotes are needed to make sure the "cat filename" is a single argument. We're passing a list of arguments directly to the platform's C library so we do not need the quotes. We simply make sure that the "cat filename" is a single entry in the argument list.)
I would actually return, per host: * current_host_power_policy.name * current_host_power_policy.short_name * current_host_power_policy.description * changed (true/false, to indicate if a change was made for the host specifically)
A simpler fix would be to do `join(to_install + to_upgrade)`
sorry - missed this one - and I was slow. Can you change this to 2.8 and then I think we can merge this
Please don't change the default value, otherwise it will break current behaviors
You should probably expect unicode strings
Should be set as the default explicitly
I missed this one in my last review: ```suggestion raise SystemExit('ERROR: Ansible requires the filesystem encoding to be UTF-8; Detected %s.' % fs_enc) ```
I think you should at least provide update volume functionality to provide idempotency.
As above, use `module.fail_json` to properly indicate failure.
better name: `is_authentication_restrictions_supported`
Not sure what the rules for this are. 2.9 for now, then change to 2.8.2 if a backport does get merged would be my guess.
Note that it might also be easier to just include this logic with the existing fetch_rpm_from_url() function rather than using a context-manager. I could see doing it either way.
So, in aci_rest we actually allow both JSON as well as YAML, and YAML support, especially inline, is very useful to make this module appear more pure-Ansible.
As `to_bytes` is not used in module it can be removed
```suggestion mount_dir=dict() ``` default=False is default so no need to add.
You can disregard the above - I've seen the discussion in your elb_application_lb_facts PR and it makes sense why you've done this.
Period at end.
you can leave here just: ```self.param('kernel_params')``` without the `if`
Capital letter at the beginning and period at the end.
This one is also correct.
This seems to be a pure helper method so should prefix it with an underscore: ``` python def _read_from_pipes(self, rpipes, rfds, file_descriptor): ``` We also generally follow the convention of callers being defined after the things they call. So this method belongs above run_command() in the file.
There a missing space here. Are you sure `environ` is defined here ? I don't see it. Perhaps this would work too, if you **do** want `OVIRT_URL=` to override `kwargs['url']`: ``` kwargs['url'] = environ.get('OVIRT_URL', kwargs['url']) ``` Example: ``` $ A= python -c 'import os; print os.environ.get("A", "X")' ``` (we get an empty string) If you **do not** want `OVIRT_URL=` to override `kwargs['url']`, then you can use `or`: ``` kwargs['url'] = os.environ.get('OVIRT_URL') or kwargs['url'] ``` Example: ``` $ A= python -c 'import os; print os.environ.get("A") or "X"' X ``` (we get the value that's at the right of `or`) Hope this helps
Please explain this in doc.
Not catching non-20x responses.
2.8.2 will be released Thursday, next week. Last day to merge backports for it is on Monday when I go home for the day. Yeah, please fix this code as I mentioned above. You may be fixing the regression but you're doing it by re-introducing the obfuscation that was gotten rid of. You won't need to maintain three versions. Fix the code in devel so that the loop is a part of merge_dicts() as I specified and then add that commit to this backport. That will be the only one until merge_hash() is available.
```suggestion NO_LOG_REGEX = re.compile(r'(?:pass(?!ive)|secret|token|key)', re.I) ``` That part wasn't used anymore anyway...
- I(remote_src) supports recursive copying as of version 2.8.
```suggestion - 'If C(state) is set to C(shutdown-guest) or C(shutdownguest) and virtual machine exists, then the virtual machine is shutdown.' ```
connect_to_api and wait_for_task is not being used.
This one is `not_actions`, so no `data` here either. ```suggestion - List of denied actions. ```
I suggest handling the response failure would yield better error messages. ``.json()`` will always raise a ``JSONDecodeError`` Example: ```python r = requests.get(...) r.raise_for_status() # if 404, 401, 500 etc ... hosts_list = r.json() ```
I think it would help if you could move all these "cleanup" parts of this PR which aren't part of the feature into a separate PR. That allows to backport that PR to stable-2.7; if these changes are part of a New Feature PR, they cannot be backported that easily (feature backports are prohibited in general) and that could make it harder to backport later bugfixes which touch something in the refactored parts.
This block is repeated in two methods, it deserves to be put into a separate helper method.
should inherit from ImportError to keep same functionality
How about multylining it for readability? ```suggestion self.default_inventory_hostname = ( '_'.join(( vm_model['name'], hashlib.sha1(to_bytes(vm_model['id'])).hexdigest()[0:4], )) ) ```
If the exception is not raised, the two asserts won't be evaluated and the test won't raise any error. You can instead use assertRaises() like in the other test: (untested) ```python with self.assertRaises(AnsibleFailJson) as e: iptables.main() self.assertTrue(e.exception.args[0]['failed']) self.assertEqual(e.exception.args[0]['msg'], 'jump is TEE but all of the following are missing: gateway') ```
Instead of autoreplace/autoexpand, you should consider adding properties as a general mechanism to pass in settings or create an option for every ZFS property.
this module relies on LInux and a modern version (that mount /sys/), requirements should reflect that
Need to update example with respect to new list parameter.
i don't think the run_command API should do that bu the calling code can like this: ``` python rc, out, err = self.module.run_command(fn, encoding=None) out = to_native(errors='surrogate_or_strict') err = to_native(errors='surrogate_or_replace') ```
```suggestion debug: ```
```suggestion rc, dev_size, err = module.run_command(pvdiplay_cmd_device_options + ["-o", "dev_size"]) ```
Replace this with: ```python if result.get('failed'): module.fail_json(**result) module.exit_json(**result) ``` Reads a lot easier.
```suggestion user must use Ansible structure of the parameters not the Kubernetes API structure. For more information ```
would it be safer to do `.pop('state', None)`? I feel skeptical that the source of the parameter will consistently be there.
Same as above mentioned boilerplate.
```suggestion sriov_on: ```
provider: assertonly isn't idempotent. It returns change = True when nothing actually changed.
the original was bad, this is slightly better, but a really good error message would include 'what i was trying to do': `msg: 'Failed GET operation against Redfish API server: %s' % to_text(e)`
man page says that .. but not all programs obey that, though i think all the ones related to services do.
Just as a note, getting rid of `block.block` also means that, if specified, all sections `block: rescue: always:` will be executed instead of being ignored.
```suggestion if vm.summary.runtime.powerState.lower() in ['poweredon', 'powered-on']: ```
Okay. I was just thinking whether it'd be possible to better isolate this with pytest-forked. But not sure if that'd work well.
If this is needed by other modules it may be useful to move this into `module_utils`.
Well, "for" handles StopIteration exception and Next internally, so you can just have for loop
Do we know what the other possible values here are? Can we generalize and assume any '^9000.*' ansible_architecture should use ioscan? Could we invert the if/elif check for ia64 and else use ioscan? roughly... ``` python if collected.facts.get('ansible_architecture') == 'ia64': # < ia64 stuff here > else: # < 9000 ioscan stuff here> ``` or check for '9000' in arch? ``` python if collected_facts.get('ansible_architecture') == 'ia64': # < do ia64 stuff > elif collected_facts.get('ansible_architecture', '').startswith('9000/'): # < do 9000 ioscan stuff > ```
When exiting, the current module returns keys such as: ``` "instance": { "arn": "arn:aws:lightsail:us-east-1:509803855674:Instance/b35a930e-bf27-43bc-9e16-82032254baab", "blueprintId": "ubuntu_16_04", "blueprintName": "Ubuntu", "bundleId": "nano_1_0", "createdAt": "2017-01-20T14:59:15.745000-05:00", "hardware": { "cpuCount": 1, "ramSizeInGb": 0.5 }, "isStaticIp": false, "location": { "availabilityZone": "us-east-1a", "regionName": "us-east-1" }, "name": "fromansible", "networking": { ..... ``` This return needs to be run through the `camel_dict_to_snake_dict` utility so that values like `isStaticIp` are returned as `is_static_ip` instead.
Please check if this is still valid for `icx` modules.
Please only import what you need, rather than `*`
These don't need to be quoted. We tend to quote only when it is is necessary in YAML. Also, we tend to sort options in a list (if the order has no meaning). So: ```yaml choices: [ absent, present ] default: present ```
If @mrmagooey is not opposed to it, it's ok.
I think this suffers from the same problem that we had discussed about 59394 This would allow someone to potentially pre-create the job dir, and using a pre-existing job dir could be considered a security vulnerability. I think we might need to further nest the dirs, and create the parent, and use the `jid` as a subdir that we create and we ensure doesn't already exist.
we should have 2 kinds of meta tasks, the 'implicit' or internally generated should not give user much feedback, the 'explicit' or user generated in playbook, should.
Hey, it is expected that the 2 maintainers doing the shipit are actually reviewing the code and are being a PITA during review just like me. If this is about doing favors, it's not going to help the cause :-)
```suggestion from ansible.utils.path import unfrackpath ... self.src = unfrackpath(src or name) ```
While you're here, mind improving the style a bit? ```suggestion expected_error = ( r'^sshpass error: Invalid/incorrect password\. ' r'Permission denied, please try again\.$' ) with pytest.raises(AnsibleConnectionFailure, match=expected_error) as exception_info: self.conn.exec_command('sshpass', 'some data') ```
This `find_plugin` should just be nuked, and `_find_plugin` renamed to `find_plugin`
This should probably no-op in the `if self._redirect_module:` case, otherwise, depending on what code we find laying around, we're potentially re-initializing an existing module or trashing it with empty/wrong code.
Should this be 'uid' instead of 'gid'? Assuming that was gid in keycloak_group.
Please add check-mode support (and if possible also diff support).
not sure this is good phrasing, not sure why `allows ansible to fall back` is not clear enough
new versions still support --check for backwards compatibility
you should also include the separator '>='
@TimoKramer you should see a button for accepting @felixfontein's suggestion on your PR - if you accept the suggestion, I can merge this PR. Thanks!
im not sure we should activate the service if it was already 'activating'
```suggestion fcntl.fcntl(fd, fcntl.F_SETFL, flag | os.O_NONBLOCK) ```
Hmm, in order to not break backward compatibility we need to set force_migrate to false if not specified: ``` vm_service.migrate( host=otypes.Host(name=vm_host), force=self.param('force_migrate') if self.param('force_migrate') is not None else False, ) ```
I would move this above `def main():` to match with standard practice
``` url = params.get('url') or os.environ.get('OVIRT_URL') if not url: module.fail_json('url is a required parameter[..]') ``` Some of these parameters were checked in `required_if` but now also allow environment variables, so if neither one yields a result, you need to fail out with a message telling them what was missing.
They are not part of `NonInheritableFieldAttribute` but that _should not_ happen in `_get_parent_attribute` so yes `getattr` is likely not needed.
this is a setting 'resolved' not the definition, you are mixing the concepts here.
Maybe wrapping mac comparison with try/except/pass will work on nonexistent attribute? Just to avoid additional iteration, though I still not fully understand how often are there cases when device with certain device type won't have macAddress attribute.
After taking a look at the new function, I could see leaving the stub function in so that it can establish default values for arg_spec and params.
required is by-default is 'False', so no need to add explicitly.
You can grab some descriptions for these options from https://github.com/ansible/ansible/blob/devel/contrib/inventory/foreman.ini
```suggestion module.deprecate("Alias \'{aliase}\' is deprecated".format(aliase=aliase), "2.10") ```
```suggestion from ansible.release import __version__ expected_version_line = 'ansible {ver!s}{scm_info!s}'.format(ver=__version__, scm_info=mocked_version) assert expected_version_line == version_lines[0], 'Incorrect ansible version line in "ansible --version" output' ```
Even better: ```python for i in loop: ind, val = i if val == omit_token: continue if isinstance(val, (dict, list)): val = remove_omit(val, omit_token) new_args = [val] + new_args[1:] ```
Please provide a default for autoexpand.
@nitzmahone and I talked about this last night and the timeout is an expectation of how long fact gathering as a whole will take, not how long any specific piece of fact gathering will take. We thought that probably the best place to enforce that sort of fact gathering would be in the action plugin being worked on in a separate PR. However, for this PR, it would make more sense to at least try to replicate the status quo as much as possible, ie: take a time at the start of this function. Then every time we check the time to see if it's time to exit due to timeout, we compare time.time() > function_start_time + timeout to see if it's time to exit.
Hm. Since this module is for application load balancers, using it to make a network load balancer might be confusing/overload the module. Would a new elb_network_lb module make sense? A possibility would be to make a load balancer directory in module_utils/aws/ and move common code into that.
```suggestion expected_type = dict if six.PY2 else DictProxy assert type(ACTION_WRITE_LOCKS) == expected_type ```
Would you be interested in adding support for 'MX' record as well ? You can find feature request here - https://github.com/ansible/ansible/issues/41842
Specify what's the default value.
do not dual license files
since the is "new" the status should be "preview"
Ensure that it's the exact right exception (by some mechanism, eg, error code as mentioned above) before we trigger the retry.
Generally updated isn't a state we use, because that implies that "present" would *not* update the config to converge on what the module specifies.
You can add this directly into `acs_common_argument_spec` Eg `'username': dict(fallback=(env_fallback, ['ANSIBLE_NET_USERNAME'])),`
Please write as ``` - name: Install Logstash beats input plugin logstash_plugin: ```
That was my first thought upon looking at this as well, but if I remember right the problem is we don't pass the variables down below the level of the action plugin anymore, so this was the workaround for that.
Oops, sorry, you are correct.
This should also be `to_text` from ` ansible.module_utils._text` instead of `str` for python3 compatibility.
Not necessary now but to bear in mind for the future we're going to need to go through and change these to `except Exception as exc:`... that syntax will be compatible with python2.6+ (I saw that this module needs python-2.7) and python3 which will be the big push starting with ansible 2.2. (Tangential information -- for code that has to also be compatible with python < 2.6 we have a helper function: `module_utils.basic.get_exception` that can be used to get exception info.)
Why don't you use f-string for both injected vars? ```suggestion f"Invalid version found for the collection '{first_req}'. {version_req}" ```
This is not a short description. In fact, it is longer than the real description.
It would really please me, if in the future, all of these unrelated changes could be kept out of PRs like this. It exceedingly complicates reviewing.
Semantically, it's better to use a set here: ```suggestion if output_format in {'yaml', 'json'}: ```
This might be auto generated, but if pushing into this repo, you must accept changes done directly to these files. PRs that override local changes w/o a specific reason are unacceptable.
This looks like a clean way to do this, however, recursively changing the types may be slow. If i understand why this is needed correctly, we probably could do this only in python2 and avoid paying the cost on python3. We should also use the errors argument in these (surrogate_or_strict) so that we get an error with bad bytes instead of omitting those from the output
I like the alias idea. May make sense to most AIX admins I would think.
this should be `region_level` according to code
For debugging purposes it would help if `out` would be dumped. Example: ``` msg = "Unable to find the service %s among active services." % service if module._verbosity >= 1: msg += "\r\nRunning services:\r\n%s" % out module.fail_json(msg=msg) ```
```suggestion - Repository type of deployment source, for example C(LocalGit), C(GitHub). ```
take N tempdirs into account and this failing in x < N, so N-x tempdirs will be left 'unattempted'
`secure` isn't defined as a module param
`... this is VMware's BIOS UUID by default.`
Please don't use leading double underscores. It's dangerous.
Not required with AnsibleAWSModule
I think you need to change cmd into a list and then pass that into module.run_command instead of trying to quote arguments here. module.run_command() doesn't use a shell unless use_unsafe_shell=True is passed in.
+1 to using classmethods.
this is already done by argspec when param is defined as boolean, all redundant
cluster_name or esxi_hostname any one of them should be required.
```suggestion ``` nit, but please remove this extra line break.
should be true rather than yes
Add your github handle as well, please
Same here (and further below).
New unit tests should be written using pytest style instead of unittest. The biggest difference being the use of functions and fixtures instead of classes.
If you set both cluster_name and resource_pool, resource_pool seems to be ignored and the guest is created at the top level of the cluster. If I leave cluster_name off, and just set resource_pool, the guest creates in the right place.
Add a note saying that - `cdrom` accepts a list of CD-ROM configurations from version 2.6
A 'credentials' file might be a more appropriate name, also note that the file MUST be on the machine executing the module. Also I recommend adding authentication fields to be used directly in the module in case users don't want to use a tower credentials file and keep the info in a vault, for example.
It looked weird, but if this is as intended, no issues here.
We don't really want the response metadata in the returned facts, so this should probably have `['Buckets']` at the end. Edit for clarity: ``` buckets = camel_dict_to_snake_dict(self.connection.list_buckets()['Buckets']) ```
`json.load` -> `json.loads` with a `s`
But I am wondering if these options are supposed to be mutual-exclusive, or rather that these are flags tou can enable/disable (it looks more like the latter).
You will likely have to make modifications in every location that outputs the value. In the case of `ansible-doc`, the change would be required in `lib/ansible/cli/doc.py::DocCLI.add_fields`. A new helper function might be required to avoid duplication. The change likely needs to happen for the default value, as well as choices. Something like: ``` default = "[Default: %s" % to_text(_coerce_bool_to_yaml(opt.pop('default', '(null)'))) + "]" ```
if secure_boot can't be enabled with boot_firmware = bios you should set the examples accordingly.
> @thomwiggers with root, do you mean the current user used by Ansible? Yes
You could extend this condition and avoid having to indent a bunch of code: ```suggestion display_path_warning = collection_path_warnings and len([p for p in collections_path if p.startswith(path)]) if display_path_warning: ```
```suggestion raise AnsibleError('This inventory plugin requires the gevent Python library. Please install using pip or respective package manager.') ```
Splitting this block (273-286) into it's own method would make it easier for sub classes of the default CallbackModule (like debug, skippy, actionable, dense) to extend this behavior.
It could be possible, that `nic` is `None` and in this case, this check will fail ~~~ ââFile "/tmp/ansible_WEMKC_/ansible_module_ovirt_host_networks.py", line 311, in main ââââif host_nic.bonding and nic.id in [slave.id for slave in host_nic.bonding.slaves]: AttributeError: 'NoneType' object has no attribute 'id' ~~~
```suggestion - The plugin sets standard host variables C(ansible_host), C(ansible_port), C(ansible_user) and C(ansible_ssh_private_key). ``` ... and also for variables.
```suggestion pkg_name = line.partition(':')[-1].strip() ``` idem, no need to lower.
```suggestion build a dict with the list requested configs ```
Don't put a newline in the middle of a work, put the newline before the work actually starts. There are a few examples of that in the module.
Is there a reason we are `pop`ing these? In fact, looking at it, these should be legit keywords in method, rather than just doing `**kwargs`. It could still be: ``` def __init__(self, appid=None, query=None, output=None, **kwargs): ```
As @sivel pointed out, we could just use the entire line as the key.
We don't need the len here either. An empty list is Falsey.
```suggestion short_description: Create/update/delete Zabbix users ``` Just to be compatible with other ZBX modules
return AnsibleParserError so other inventory sources can continue
I'm pretty sure that @abadger advised against loading JSON from unicode text because it's faulty under Python 2.
Personally, I'd keep it all. But I don't care enough to argue :)
```suggestion def setvariable(cursor, mysqlvar, value, mode='global'): ```
Although you have to implement a little more, use MutableMapping as the base class instead of dict. (There's supposedly corner cases with dict)
Please use `type: bool` instead of `choices`
Yeah, I see that you kept the behavior specified by default in the ini. I just meant that before, if the group_by option was not provided those by-default Falses would default-default to True by omission (as opposed to now, when it is always False by omission) on the deleted line 462. Just a weird corner case.
i would do both `in ('absent', None)` as there are cases in which 'absent' would be a correct return.
I resolved this with my rebase and force push.
Another map that can be a list comprehension: ``` content = [x.strip() for x in m.group(3).split(" and ")] ```
add github handle too.
required is by-default 'false' so no need to specify explicitly.
bjolivot wrote: > I don't know what to do. do you have exemple ? `re.compile` should not be called with the same parameters more than once. There is an example [here](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/files/unarchive.py#L155), another [example](https://pymotw.com/2/re/#compiling-expressions).
For consistency with the other docker message below, use "under docker" instead of "under --docker".
I would rewrite this as : ```python if result != 0: module.fail_json(msg=output, changed=changed) module.exit_json(changed=changed) ```
Ah, I didn't know that. That actually makes sense.
Please use `assertRaisesRegexp` instead.
I think you can use: ```python from ansible.module_utils.ovirt import equal return equal(item.get('id'), entity.id) or equal(item.get('name'), entity.name) ```
Should be changed to new style module imports nearer the top of the file: ``` from ansible.module_utils.basic import AnsibleModule from ansible.module_utils.ec2 import ec2_argument_spec, get_aws_connection_info, boto3_conn ```
What concerns me is the implication (not directly stated in the docs, at least that I can find) that you can't add/modify a Lightsail instance's keypair after creation (short of ssh'ing to the instance with an existing key and editing auth keys by hand). **If** this is correct, I feel like we should anticipate users having a problem here and make keypair a required option for create actions. It may not be boto-y, but it's still something we can easily anticipate and make nicer for our users. If that's not correct and I'm just missing something about Lightsail key management, then maybe keypair management or a lightsail_key module would be good future improvements (but outside the scope of this PR).
A couple of things: - you are assuming item is a list, it can be any type - str() is not a good function across versions of python, that is why we have to_text and to_native
I feel like my preference here would be to not overwrite the same variable, it can cause confusion. Instead maybe don't do this at all, and instead use `*string_types` everywhere instead.
This doesn't need `required: true` since it has a default. `required: false` would be accurate here.
Please do :-)
Both indentation styles are correct.
Well, but seems check_compatibility cannot be used even with the localhost exception...so no solution.
I would use the key of the common return `msg` instead of `result`, as it is basically a message https://docs.ansible.com/ansible/2.7/reference_appendices/common_return_values.html#msg
This should be `to_text` from ` ansible.module_utils._text` instead of `str` for python3 compatibility.
You probably want to compare this to None specifically instead of just doing a check of whether ```item[ignored_key]``` is a false value. Otherwise you'll also catch 0, False, and empty containers here. Comparing to None would look like this: ``` if ignored_key in item and item[ignored_key] is None: ```
s/virtual network/route table/
typo, should be 'storage0'
It could be just plain `return not ...startswith...`
non-blocker, remove `default` when the param is required.
Should not be quoted. It might confuse people to think this is needed. It is not.
Since typical use sets something several levels deep anyway, consider not treating top level specially. E.g. instead of: ``` name: foo value: bar: baz: 42 ``` it could be more uniform to have user write: ``` settings: # or `values:` or whatever. need something to separate from non-setting params like vmdb_path. foo: bar: baz: 42 ``` This would also allow touching several top-level trees at once. The drawback I see is this would inflate the return value & diff from a single subtree (which can already be big) to whole settings tree, which would be cumbersomely large :-( So I'm not sure it's worth it, just an idea, your call...
We should also indicate 1.1.8 here, or wait on merging until we have 1.2.x online.
Isn't `'; '.join(exception.args)` sufficient ? * [X] Done
It's not `does_image_exist()`. It's `ensure_`. Meaning that it shouldn't return boolean or anything. And it already interrupts the module execution internally. So return value check is unnecessary. ```suggestion ensure_image_exists(self.module, self.image) self.results['actions'].append('pulled image %s' % self.image) ```
just for consistency, we always put "state" at the end
Make this a list, and drop the quotes :-)
Lookup plugins run on the controller. The minimum python version for the controller is python 2.6. So str.format() can't use "{}". The easy workaround is to use "{0}" and "{1}" instead.
Suggestion to make it clearer that `status` is an attribute `ANSIBLE_METADATA.status must be exactly one of "deprecated" or "removed"'`
```suggestion ``` This is already specified in `HttpApiBase.__init__()`
Network is not mandatory. Is mandatory only if you set ip param. Furthermore for me network field is useless. This is not the vmware_guest job to check if you set wrong ip (not in good subnet) on your interface but it's not realy a problem.
This should be flattened to {'name': 'myAwesomeCluster} like other AWS modules. You can use boto3_tag_list_to_ansible_dict to make the transformation.
Minor nit (and definitely non-blocker), but would this make more sense as a `@classmethod` on `CLI` to cut down on the import boilerplate and offer self-contained customization, should it be necessary? Then the main invocations are just: ``` def main(args=None): WhateverCLI.cli_entrypoint(args) ```
Missing `-` before `name:`
Improve Python 3 compatibility: use [`six`](http://docs.ansible.com/ansible/devel/dev_guide/developing_python3.html#bundled-six) for `quote_plus`.
This appears to be a deprecated module. If all the functionality is in `qnos5_config` then you can delete this file.
nit: I'd also narrow this down with a module name where this is allowed to happen + exception type
```suggestion path=path, ``` This is a recommendation for dictionaries (and explained in PEP8)
Please remove and add the suggested line in the arg spec
If you update this to use AnsibleAWSModule you will be able to simplify quite a few things, like exception handling and boto3 connection creation.
Hi Abhijeet, Checking Error stack provided in issue https://github.com/ansible/ansible/issues/58326 `[LocalizableMessage(default_message='MYDOMAIN.COM\\\\service_account does not have attach or detach privilege on urn:vmomi:InventoryServiceTag:bcf7a240-1dda-43ed-a98e-dfb9806d1849:GLOBAL` Error message looks obvious and it is very clear to the user, what is the issue. it is clearly credentials privilege issue. I believe change is not really required. Please correct me if I am wrong.
`alternative: Use M(panos_security_rule) instead.` `why: This module depended on outdated and old SDK.`
`short_description: Create, update, or destroy custom Ansible Tower credential type`
You don't need `detect_usage` and `usage_msg` here.
```suggestion maybe = '{fn}.{suffix}'.format(fn=self.NAME, suffix=suffix) ```
How about ordering the arguments alphabetically? :)
`C(~/.aws/config) and C(~/.aws/credentials)`, really
Changed to `skip_final_snapshot`
I think this should be done regardless of create/update. Scenario being I want to update/replace a dashboard, I provide uid in the ansible task and expect the corresponding dashboard with that uid to be updated but for whatever reason my dashboard JSON has a different uid.
missing version_added for new options
This try-except block should be reduce to the actual calls made.
@gundalow while there is (for obvious reasons) pretty limited experience or best practice here, I believe it will be a very common scenario.
Please modify the generic function description statement.
In chroot, the output is rc=0, out=Running in chroot, ignoring request.
The problem is that you start the connection before we know the connection details for sure, so getting the data earlier will make it even worse. In some cases (when all is known before task templating) you should have no issues as play_context carries the correct info, but if you need info to change at the task, or worse, loop/delegation levels you'll run into trouble much sooner. Most of the time this problem can be ignored as plays tend to reuse the same information w/o changing it, specially networking ones. As you note, since we are passing the connection information and using set_options/get_option on them, we should be able to ignore most of the play_context data, but this requires all connection plugins to correctly source the data (all those in core do, but many of those in collections do not). Why I was planning to add deprecation notices to play_context soon.
Instead of `choices`, use: ``` type: bool default: 'no' ```
Don't render the whole output into a message. Use separate keys for those. ```suggestion msg="Can't %s container %s" % (action, self.name), stdout=out, stderr=err, ) ``` These will automatically generate a few extra return keys (`stdout_lines` and `stderr_lines`).
```The id of the AMI (Image) in source region that should be copied from.```
```suggestion raise AnsibleParserError("the field '%s' should be a list, but is a %s" % (value, type(value))) ```
```suggestion version_added: '2.10' ```
FTR since `all()` accepts a generator expression it breaks early :)
`(Get-WmiObject Win32_OperatingSystem).LastBootUpTime` is *probably* cheaper since you won't have to create a dynamic type on each invocation... All we really care about is if the value changed, I think, so we can probably treat it as opaque (ie, no need to parse it).
we cannot do this before rescue on original failed host is attempted as it breaks the normal flow of hosts: any_errors_fatal: true - hostA fails => go to rescue if it exists, otherwise proceed as if rescue failed - if rescue, hosts[b-n] should wait for rescue result (meta: noop filters?) - hostA fails rescue/no rescue existed => fail hosts[b-n], always/nested rescue/always still need to be executed - hostA succeeds rescue => hsots[b-n] proceed from hosta failed task as normal
It would be nice to have other information about library like description and type etc.
This code should not change it working or not, but it is more light weight and efficient.
normally we use `validate_certs` and `client_cert` as names for these options
I believe we still need this `info.update` here. There are cases where `r.info()` is more than just headers iirc. And I had completely forgotten that my `normalize_headers` didn't do anything with lowercasing. So we'll need to add lowercasing back in. Although I'd recommend not doing the lowercasing in `normalize_headers`. I'd still do that on `info`, since it is a specific implementation detail of `fetch_url`.
Okay, I've checked docs and it seems fine here.
as with requriements, changes in defaults should also be noted in the description with versions - As of 2.3 the default is 'default', in prior versions it was 'null'.
state: present installed is only an alias and should not be used in examples
since there's a facts module, returning the routes here (especially without detail) is probably redundant
we might need both unless file_name is always absolute
This is not the only reason we can fail at this point, so I would not force the update. Check if the task was set to update (don't set it) and examine the error message, then if it matches ignore the error and let the update continue, otherwise re-raise and continue as it did before.
```suggestion version_added: "2.8" ```
```suggestion </body> ```
Use `required_if` `required_if = [('action', 'create_release', ['tag'])]`
No worries :)
I don't think this is a good idea. This prevents the valid value `""`. ```suggestion else: ```
For readability please include a blank line between tasks ```suggestion - name: Retrieve credential from CyberArk Vault using PAS Web Services SDK via Central Credential Provider ```
```suggestion subnet_ids: ``` Snake casing would help with readability of this option.
Honestly, I'd change it to some `class CustomTestException(Exception): ...` to avoid any weird corner cases.
use `default` and `choices`, ditch inline text for that
But the major problem with `$?` is that is is only the status of the last executed command as per [the docs for $?](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-6#section-1) > Contains the execution status of the last command. It contains True if the last command succeeded and False if it failed. I was finding during testing that the PUT operations for sending a file to the remote was failing but `$?` was returning true so the error was just ignored and then it subsequently failed at a further task. Using the `_encode_script` with `preserve_rc=True` meant that the failed PUT operation was able to detect the actual failure. In any case wrapping the command means * You now longer have to worry about escaping quotes now and in the future * You can simplify the error check by just looking at $LASTEXITCODE * If for some reason the default shell changes to PowerShell Core this forces the module code to run with the tested Windows PowerShell as we invoke `powershell.exe`. This could potentially be user configurable in the future once we support PowerShell Core
So, any way to not expose that as a argument ? Cause ansible-doc do show it with wrong value.
end_id -> eni_id
```suggestion from ansible.module_utils import six urlparse = six.moves.urllib.parse.urlparse ```
okay, that makes sense. Typically we utilize the host, task, and result from the result object, but seeing as how the 3rd does not exist in this case I see what you are doing.
So apparently I never submitted this review :-/
how about - https://github.com/ansible/ansible/blob/a2eb227970b5f53a648af3daf58d745d2f33067e/lib/ansible/modules/cloud/vmware/vmware_vm_shell.py#L303
@sieben yes, this is what we do in the Vultr modules. https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/vultr.py Basically, there is a base class located in utils and all the modules extends it and bring only the module specifics in it. #43762 is only for documenation. I haven't worked on a base class, but I can start working on it.
Use proper keyword args here instead of passing in an opaque dict. That way python can verify that the proper arguments are being passed in: ``` python def __init__(self, token="", host="", port="", use_proxy=False, validate_certs=True) self.data = {'TOKEN': token, 'HOST': host, 'PORT': port} self.use_proxy = use_proxy self.validate_certs = validate_certs ```
i mean: from msrestazure.tools import parse_resource_id, resource_id, is_valid_resource_id
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` mutually_exclusive required_together required_one_of require_if ```
It's not a problem for devel (or stable-2.13) since we dropped support for Python 2.6 in those branches.
The canonical place to get binary_type from is: ``` python from ansible.module_utils.six import binary_type ```
Why don't you do `concated.append(string)`? That's more efficient and easier to read.
```suggestion if VROUTER_EXISTS is False: module.fail_json( failed=True, msg='vRouter %s does not exist' % vrouter_name ) if NIC_EXISTS is False: module.fail_json( failed=True, msg='vRouter with nic %s does not exist' % nic ) ```
You are heavily changing semantics here! Previously, the next lines were executed always. Now, they are only executed if `not os.path.isfile(self.HOSTNAME_FILE)` is `True`!
Yes it is. (Answering the review)
Is the default false, if so needs adding here and in the docs
I htink you need ImportError here. ModuleNotFoundError isn't a standard exception on Python-3.5
Please add spaces around the equal sign.
For exceptions, include `exception=traceback.format_exc()` so the full error is preserved.
Should arguably be `window_style`...
I'll check, but i believe callbacks already get a copy, just need to check that it is not linked to registered vars, we should be able to censor at that point.
Let's remove the `if` and set default `None`.
Never raise an exception, fail the module instead
We probably need to use normalize_interfaces method in this module.
With `groups` below changing to just be a list of strings, this should be changed ```suggestion found_files = loader.find_vars_files(path, group, allow_dir=False) ```
Should clarify that ".fifo" will only be added if it is a fifo queue.
Since it's just boto calls in this try/except you can get rid of this one.
I think should be "ignore"
```suggestion default: 0 type: int ```
Won't this just get the contents of the first page? I think you need to flatten this out by extending all `contents` to one list.
Typo? ```suggestion files = info.get('files', {}) ```
It still does not default to an empty list, it defaults to None. It will appear null in the invocation.
Add a message here (such as "Failed to modify volume") to help people figure out where the issue is and use traceback here too to help give some debugging clues, please.
instead of keeping track manually, we should just query 'block' class for allowed keywords.
We are changing facts keys here, we should add older values as well as new values. Because, removing old values will break playbooks and roles which are already written by user of this modules. Ideally we should 1. Add a note in notes section stating these values will be deprecated after 4 versions. 2. Add a [porting guide](https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/porting_guides/porting_guide_2.8.rst) Let me know if it makes sense.
Well, by `check_mode` I personally understand that it doesn't support `--check` parameter passed to `ansible-playbook` command and not that the module will always return `changed=True`. Anyway I am OK with this module, but it doesn't really bring the Ansible power(mainly idempotency), as user can use `gluster` command with `command` module to have same results.
Same here, default parameter is **validate_certs**, the aliases should be removed. We also simplify this by *not* adding `required=False`, and always starting with the type. Since every parameter has a type, starting with this adds consistency.
``` from ansible.module_utils._text import to_native ... alu, to_native(e)), ```
It would be nice if this module supported check-mode.
This doesn't need to be quoted.
All descriptions (also parameter descriptions) must end with a trailing dot, except the short_description.
you should specify 'docker python library'
At a higher level... why is this being triggered? (Does it get triggered?) jinja2 returns strings always. If templar is returning non-strings, it's because we take a string from jinja2 and turn it into something else in our code. In either of those cases, debug should still be able to output a sensible value so we shouldn't be raising an exception for it.
Oh yes, 2.6 didn't have dict comprehensions. Do we still need to care about that? setup.py indicates only 2.7 should be supported.
this logic would a lot simpler (ie nonexistent) if using `type: bool` as args
Hmm... I saw Alan's note that the API supports changing a setting to it's default value below. If that's the case you might want to think about whether that's a useful thing to expose to the user here as well (it feels like it is but I'm not entirely sure). If so, you should consider how it fits into these parameters. None might be the best value to mean reset to default. In which case the way to specify "show me the current value" would need to be something different.
you can do this but I prefer to just split into multiple import lines ``` from a.b.c import x,y,z from a.b.c import u,v,w ```
```suggestion from ansible.module_utils.aws.core import AnsibleAWSModule ```
Usernames are generally public
The python library should go into `requirements:`. The Google account is actually related to a parameter, so that information should go with the required parameter.
If you choose to make `sanitize_params` and `check_compatibility` separate methods, `sanitize_params` can be called even before the `for loop` above
```suggestion description: If ARP is enabled. ```
[PEP 8](https://www.python.org/dev/peps/pep-0008/#indentation): Indentation should be 4 spaces instead of 8.
This was merged so fast I didn't put in my $0.02: 'docker' and 'docker-py' are not 'python modules'. They are 'python packages' and should be called that to avoid confusion with Ansible's 'docker modules'.
List comprehensions and generator expressions are more pythonic than using filter. This one can be rewritten as a single listcomprehension or a combination of as two steps: ``` python # One combined list comprehension regions = [r[3:] for r in all_regions if r.startswith('dd-')] # two steps, using a generator expression region_list = (r for r in all_regions if r.startswith('dd-')) regions = [r[3:] for r in region_list] ```
looks like this is what ansibot doesn't like; one too many spaces
```suggestion default: None version_added: "2.8" ```
What happens if you have something like `a=b=c`? Then you will init the dictionary with the tuple `(a, b, c)`, which will fail. Usually you want to interpret `a=b=c` as key `a` with value `b=c`; for that, you need `metric.split("=", maxsplit=1)`.
We don't need the imports at this point, as we know the imports have succeeded if `HAS_BOTO3` is true.
Woopsie. I got those triple backticks into the text by mistake. ```suggestion - Do NOT add a colon (:) to your custom entries. Ansible adds a colon at the end of each prompt; ```
CI failure due to: ``` 2017-01-31 18:43:10 ERROR: PEP 8: lib/ansible/module_utils/netapp.py:150:31: W292 no newline at end of file (current) ```
We can also write a single line return statement. Please see if it makes sense. ```suggestion return (uid is not None and path_stat.st_uid == uid) or (gid is not None and path_stat.st_gid == gid) or (uid is None and gid is None) ```
This should be an isinstance check
Preference would be for a unit test to be mocked sufficiently that a cleanup like this is not required. However, in this case if that involves a large amount of fragile mocking, I wouldn't worry about it now as having test coverage is better than not having it, even if it is a little messy.
As sivel pointed out on IRC, it would be good if all of the string literals here were defined as unicode strings. Like this: ``` python results = u"VARIABLE IS NOT DEFINED" if self._display.verbosity > 0: results += u": %s" % to_text(e) ```
Rather than manually split here, you should define this as a list in the argument_spec: ``` python name=dict(aliases=["pkg"], required=True, type='list'), ``` An argument_spec list can either be handed a yaml list or it can receive a comma separated string (which it will automatically split into a list)
I'd like to discuss this with a wider group- rather than requiring per-value override methods, I'd rather have a generic way to set (and possibly query) connection args for situations like this.
Guess so, if this make sense for people that would use this, it is fine by me though.
Could be: ```python json.dump(host, sys.stdout, indent=2) ```
There shouldn't be any spacing between a function name and a docstring.
Shouldn't `changed` only be set to `True` if something is actually deleted? Otherwise, calling the module twice with `state == absent` will result in the module reporting a change twice (i.e. idempotency is violated).
`ForcedCommit` isn't used (neither by this module, nor by pyFG library).
Not a real issue, but we recommend to sort the order of lists if the order is not of importance.
I do not believe this change is correct. The main config file is different than the location of the policy files. The policy directory will exist in `/etc/selinux/[policy name]`. We would need a separate parameter, `policy_path`, in order to check that the policy exists.
- This seems like it would be generally useful. Probably better to put it into basic.py:AnsibleModule(). - Short docstring that explains this is for checking for a parameter when we can't check via the argspec (because we need more information than is simply given in the argspec.)
replace these 3 lines with self.agent_verify_certificate = os.getenv('ANSIBLE_CONSUL_INSECURE_CERT') is None
```suggestion author: - Tyler Gates (@tgates81) <tgates81@gmail.com> ```
Fully quoted is accurate. This line can be double of single quoted.
Any reason you have the primary name as `chain_dest` and an alias of `chain`, then use the alias in the examples
I then found that the vms wouldnt start. This is because even with the above changes, the nat interface is still getting attached. Manually removing that network device solves the issue. i'm looking into how you would address this
Code should utilize `ansible.module_utils._text.to_native` here instead.
s/Constant name here/C(Constant Name) value from/
Since this parameter is deprecated and additional functionality is available to achieve the result, I would suggest to remove this parameter and related code.
```suggestion - The single port for port-object. ```
Should this be `response` since that is what is returned? I don't see `result` used within this function.
I am getting error on Mac - ``` openssl list -cipher-algorithms openssl:Error: 'list' is an invalid command. ``` whereas, `openssl list-cipher-algorithms` works.
enabley -> enables
Ah, mild issue: since this is also going to be a backport, we shouldn't remove the kwarg usage entirely, just ignore the parameters for same effect.
if boto3 will take a lag_id of None, then you could get rid of this if/else and make this line `lagId=lag_id or None`
Support for `api_version` [was removed](https://github.com/voxpupuli/pypuppetdb/releases/tag/v0.2.0) a little over a year ago.
Hmmn... I think we are going to want the env var here and in the ansible package to match. Otherwise users will have to set both if they want to override. If you prefer your name, just open a pr against ansible-community/antsibull to change that one
LUNs 1-4095 for private or shared connections
dont add `version_added: historical`
Why not keep `attributes` in `IGNORE`? The way it is now, attributes will be shown in text output, but not included in JSON output, which might be confusing. In any case, I'm happy with the PR both in it's current state and with `attributes` added back to `IGNORE`. :)
The validator should be updated to include validation of of `required_by`.
Sure, why not :)
I like this
You don't need this `if len(ide_devices)` here, if ide_devices is empty, the loop will just do nothing.
I'd keep a port (even if `:80`) for example purposes.
We should update `test/sanity/code-smell/package-data.py` to ensure things get installed. That `package_data` looks like we could end up with missing files easily if nesting depth changes.
Also please say it's not idempotent.
```suggestion version_added: '2.8' ```
```suggestion hostname: '{{ vcenter_hostname }}' ```
Think you need to transform to text here as well.
you don't need to say `testcase failed`, it's obvious from testrunner's indication
Also, this error message is now wrong.
If the service is not found it does not necessarily mean that this is an error. It might be that a user has uploaded a plist file in a previous task (eg. via template/copy). So in my opinion this condition should be removed as otherwise you are not able to start newly created services
This could be: ```python return all( op_dict[op](version_to_test, LooseVersion(ver)) for op, ver in self._requirement.specs ) ```
```suggestion def wait(self, iterations=90): # type: (t.Optional[int]) -> None ```
Multiple query API versions are [no longer supported](https://github.com/voxpupuli/pypuppetdb/releases/tag/v0.2.0).
If this data is returned as a dict, we should change this line as well: ```suggestion - Management groups connected to the workspace. ```
these are not 'states', they are actions
use an args list here instead of a string to avoid problems if the first field if lsdev output is unexpected. for ex: ``` python device_name = field[0] lsattr_cmd_args = [lsattr_cmd, '-E', '-l', device_name] rc, out_lsattr, err = self.module.run_command(lsattr_cmd_args) ```
Yes, you are right. I didn't notice that we want to match partial string as well.
So let me propose this, if just using the 'name' (no inventory source file) or the file contains a tower_config_file entry, use that first if they exist (in parse method): ```python super(InventoryModule, self).parse(inventory, loader, path) if self.read_all_configs_from_env_var: # I would change name to 'no config file supplied' or similar if os.path.exists('~/.tower_cli.cfg'): # pick up options from the file self._set_options_from_tower_cli('~/.tower_cli.ccfg') self.set_options() # this will update with env vars to override file or pick up others else: self._read_config_data(path) if self.get_option('tower_cli_config'): # check for user defined self._set_options_from_tower_cli(self.get_option('tower_cli_config') ... ```
Might need to filter `instance_data` for things that are JSON serializable (or have the manager or `ansible-inventory` do it)- calling `ansible-inventory --list` bombs because of embedded datetimes, which won't JSON serialize.
Use https://github.com/ansible/ansible/blob/cd988f645aaf774c55a98a90e3ef42cc5b1a1563/lib/ansible/module_utils/urls.py#L1147 instead of requests.get
This probably makes sense. Code is already duplicated across the _facts modules anyway.
naming nit: singular `endpoint` is one of `raw_endpoints` from playbook, plural `endpoints` is in "connection_configurations" format. can you find less confusing names? perhaps rename `endpoints` list to `configurations`? (also consider s/build_endpoints/build_configurations/)
pass here just description, as it's the only parameter you need.
Why not have direct checks instead of cross-validation? Like: ```suggestion if params['direction'] not in ['outgoing', 'incoming', 'routed']: ```
<nod> But it seems like it's vulnerable to both symlink attacks and denial of service attacks unless it's randomized. (if it is randomized, it is resistant to but not immune to DOS. Using mkstemp should solve symlink attacks.)
Can you add something about the default targetting all tables (e.g., if not set, then it do for all tables) ? I suspect this might be obvious for someone knowing postgresql, but not everybody know
This whole block could've been done with a nested list comprehension without any need for temporary variable introduction: ```python names = [ name for name_list in names for name in name_list.split(',') ] ``` Alternative FP approach would look like: ```python from itertools import partial, reduce ... names = reduce( lambda l, e: l + e, map( partial(str.split, sep=','), names ), [], ) ``` (but Pythonistas don't like such style in general)
No need if there aren't any aliases
```suggestion from zabbix_api import ZabbixAPI ``` unused import
Just verifying `is_install` means that we are running from an Ansible install not a collection? If so it might be better with a different property like `is_ansible` or the inverse, `is_collection`.
this is not used and should be deleted
the `if` isn't needed here
You missed to remove this line We already talk about it but what is the goal of this part ? (vm_obj is None or self.should_deploy_from_template())
Missing closing parenthesis.
I'd like to see a trailing comma here, just to keep future changes smaller
```suggestion - The FQDN of the known host. ```
```suggestion if name in ('PRIORITY',): ```
I'm going to leave this in needs_revision. My requirements for considering this change have been outlined above.
Though that would violate "fail early", so meh.
Maybe write it as `Installation failure for MSI packages`
CloudEngine Singular: `Run an arbitrary netconf command on CloudEngine devices.` Plural: `Run arbitrary netconf commands on CloudEngine devices.`
```suggestion - When the list element is a dict with the keys "value", "masked" and "protected", user can have full control about if a value should be masked, protected or both. ```
rename to pod
return dict((key, self.get(key)) for key in self.keys())
Shouldn't this be ```suggestion debug: msg="{{ lookup('varnames', '^qz_.+')}}" ``` ? Otherwise, it should also find a variable called `pqz_1`.
Here's the use case: - enable cloudtrail, set log file validation=true - set log file validation=false Given the conditional in 488, validation would still be enabled.
And this should be either removed or turned into smth you expect.
Without all those connection arguments, this goes away, too
This should be at top level, and not be a class method. (Here, `response` will be `self`.)
```suggestion Pattern = re.Pattern ```
This change doesn't appear to be needed.
Probably better to write this as ``` python if self.args.refresh_cache or not self.is_cache_valid(): self.update_cache() ```
This `return` isn't needed.
Can you please use ? -https://github.com/ansible/ansible/blob/f21f3219b2a925a87e0c8aa54eb8ceca2cb55dc5/lib/ansible/module_utils/digital_ocean.py#L114
No need to repeat the module name `A free form command to run...`
As this is a new module you don't have to worry about backwards compatibility. If you remove it remember to also remove from docs and examples.
```suggestion choices: [ present, absent, powered-on, powered-off, poweredon, poweredoff, restarted, suspended, shutdown-guest, reboot-guest, shutdownguest, rebootguest ] ```
You don't need quotes here. We tend to only add quotes to YAML when it is required. Also make this shorter, you don't have to mention the SDK used in the short_description, leave that for the normal description and/or the notes.
you could still make it conditional, just call get_bin_path again instead of assuming that the binary exists
It might make sense to create an extra function for parsing public keys: ``` def parse_public_key(public_key): parts = public_key.split(' ', 2) return parts[0], parts[1], '' if len(parts) <= 2 else parts[2] ```
```suggestion version_added: "2.9" ``` No new features are accepted for Ansible 2.8.
Not your cause, but we tend to remove the following from parameter docs: ``` required: false default: none ``` As they are implicit.
We should probably use native strings here: ```suggestion host=host, err=to_native(err), url=self.FOREMAN_URL)) ``` cc @abadger
The user may have several hosts and only one with the datastore mounted RO. In this case, the datastore will never be picked. Could you add a not to make clear this is not the best approach.
```suggestion 'public_ip', ```
@jose-delarosa - No, I asked Mike R. about this and he said that for Storage Controllers it should just look at `Storage`.
Don't convert an argument list into a string if it is not necessary. ```suggestion rc, _, err = module.run_command([pvresize_cmd, device]) ```
hostname, username, password and validate_certs are already defined in `vmware_argument_spec`
make note of the version this changes
I suggest removing the conversion to str otherwise, the ids in the playbook needs to be str as well.
You don't need start with this code as it will be virtually the same for all the things launched by apply_async in your loop. You can just use a single scalar local variable to hold the value. (It also is the end time or max time (and maxtime is really max_timeout), not start). Adding that together with the note that we should probably process statvfs information separate from the uuid info: ``` python results[mount] = {'info': mount_info, 'statvfs': pool.apply_async(get_mount_size, (mount_info['mount'],)), 'uuid': uuids.get(mount_info['device']) or pool.apply_async(self._udevadm_uuid, (mount_info['device'],)),} max_time = time.time() + max_timeout ```
I am not sure why we are not using `module.run_command` instead of `Popen`
nit: I think this should be wrapped. 121 line length is longer than it should be. While Ansible has a lot of code which doesn't adhere to pep8 we should strive to be better, so lets try and keep the line length to 80 or 120.
Up to your decision. But I would rename `updated` to `present` and would make it the default.
Again string comparison with `is`.
Providing a folder name would mean that the module support providing path like "first_dir/sub_dir" and would find the id of "sub_dir". As stated by @till, a folder name can be repeated in several sub directories.
Is this requirement no longer true? The old logic doesn't match the error message, but you haven't replaced it with anything at all.
the result has nothing of value at this point, i would just remove 'supports check mode' and have this module be skipped
We wait for task at [line 341](https://github.com/ansible/ansible/blob/135d34325495b38cb91ec03ba55b3b1c56c06b72/lib/ansible/modules/cloud/vmware/vmware_guest_snapshot.py#L341)
May be worth adding "From Ansible 2.5 this can also be..."
please add the `version_added: '2.10'`here as well
should be `customer_gateways`
Sad to see some of the parameters originally supported disappear such as snapshot hour
umm... This doesn't seem like a majority use case of this option because ideally people wouldn't put in ansible and six as part of this option but they'd put it in name. How about "pip2 install --require-hashes"
Use a context manager with this read operation to ensure the file handler is closed as soon as it is no longer needed rather than relying on successful program termination. ```suggestion with open(self.LOGIN_DEFS, 'r') as f: for line in f.readlines(): ```
You don't need quotes here. We tend to only add quotes to YAML when it is required. Also we prefer this to be a list (as there could be more than one author). So: ```yaml author: - Edward Nunez (@enunez-cyberark) ```
Options like `cloud_environment`, `auth_source` are derived from `AzureRMModuleBase` and don't need to be listed under the module arg spec.
We need to run `get_bin_path()` on `hostnamectl`
I think it may be cleaner to check this right away ```suggestion actual_versions = api.get_collection_versions('namespace', 'collection') assert actual_versions == [u'1.0.0', u'1.0.1', u'1.0.2', u'1.0.3', u'1.0.4', u'1.0.5'] ``` and this would simplify the check at the end of this test.
Creating paths by concatenating them together is a no-go with Redfish. Paths should always come from the Redfish responses itself (`redfish/v1` being exception here).
You also want to check the option's aliases.
not a blocker: i would use the internal url functions in `lib/ansilbe/module_utils/urls.py` as that is always present and has less issues with different versions than requests does
```suggestion version_added: "2.10" ```
Please remove the empty line.
I guess this can be removed. You import sha1 locally below.
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` required_if ```
It's a statement, not a function. ```suggestion assert ansible_json_encoder.default(test_input) == expected ```
Funny thing is, this variable is never used anyway... So not that ugly ;)
When `password` is not specified (this is a requirement for MIQ external auth) what get's passed to the MIQ API? Seem like it should test `password is not None` before building the json.
LANG should not be involved as we are making a system call, so answers should always be in POSIX/C locale, even if we were using the command line tools we do have the ability to force the locale/lang setting to enable parsing the output.
```suggestion - This lookup can perform an initial login by providing C(subdomain), C(username), C(secret_key) and C(master_password). ```
When moving to boto3, we usually try to minimize the amount of code change to just altering the API calls/parameter names that are different between boto/boto3. Moving code into a class makes it very hard to review while also checking the boto3 compatibility.
"Wholesale" exceptions are bad. Please never use those. Only catch ones which are expected to happen.
```suggestion assert ansible_json_encoder.default(test_input) == {'__ansible_vault': expected} ```
though .. conditionals can get 'iffy' since `when: []` is kindof valid
add a `ignore_on_check_mode=False/true` option so the caller can decide, as it should know if it is needed or not
This doesn't actually exist. And won't ever be thrown. The only error you'll get here is botocore.exceptions.ProfileNotFound
Honestly, I don't understand why you'd want to change this env var at all. If the repo already has a separate git dir it will figure it out automatically. The only step git looks at this var is clone/init phase, for which there's an appropriate `--separate-git-dir` CLI argument, which is preferable over env var.
Should import os.path here as well (it's an implementation detail that os.path works after only importing os.)
a leftover here which can be removed
At first I thought this might be overkill, but all hosts need to rebuild their groups vars to remove this host from them. Making note in case someone else goes down same road.
This is totally unacceptable. It's a bad smell to perform logic inside of an object initializer. Initializer should only initialize an instance for future use. Create a separate entry point (maybe a classmethod) to invoke the logic.
Please update the year.
This `if`-clause must go before dict merging, otherwise it will override `use_default_subnetpool` value if someone submits it as extra spec
Secondary is uppercase
Doesn't this mean you still return an error if the connection does not exists but write to stdout? For my understanding if a connection does not exists and `state=absent` is requested the module is done. No reason to raise an error if something is absent that is supposed to be absent anyhow.
Hi a strange corner case in `validate-modules` which are trying to work out how to fix.
nitpicks: ONTAP create
I wasn't sure if manipulating module.params directly was "the done thing". I have no problem with this approach rather than the approach I took.
Do note that this does not take `self.principal` into account, neither is that being checked. So you might return with `changed=False` if there's a tgt for a totally different principal.
Since the parameters were strictly typed to be of type "bool", we don't have to run module.boolean on the values.
I guess it is a bit late now, but in general, avoid composing commands as strings. Use a list instead with every part of the command in one element. That way, you won't have problems with escaping stuff or having spaces or other crazy things in filenames.
When you switch the callback to use the `get_option` API. This function can go away, as the ansible config system can already handle this.
This isn't needed because of the ```__metaclass__ = type``` boilerplate
Again: `default: 'yes'`
```suggestion grants the user access to an existing database or tables. ``` to match the tense of "adds or removes"
Maybe the solution ils to give a folder name instead of an id. And create it if not exists ? Unless, you can add "the dashboard import ils skipped" un the output message
Try importing specific.
Please add spaces around the `+=`.
Or just a random 16bit IV.
I'd rephrase: `Parameter is usable with oVirt 4.3 and lower, but it's going to be removed in oVirt 4.4`
`U(https://www.conjur.org/)` to get a URL
`choices: [ "ACCEPT_DECISIVELY", "DROP" ]`
`rc`is a common return, please remove it.
Gotcha. I'm glad you've thought it through. There's a slight advantage to the last suggestion you gave- if the describe_stacks wrapper init was kept inside `some_method`, it's very clear what was wrapped and reduces the chance of "hey, my Ansible module method doesn't retry even though other parts of the module do". Up to you though, since it's a bigger issue than the few modules I try to own.
This conditional is never going to evaluate properly, since `('us-east-1' or None)` evaluates to `True`, so the only way this evaluates as wrong is if location == True. I think what you mean is `location not in ('us-east-1', None):`
Test if domain_type is one of the two is easier to read.
Complement the docstring adding the parameters, might be useful (to the other functions as well)
Rather than remove this entirely, I would leave this in as a fallback and warn (do not fail) that this behavior will be changed in the future.
No need for this, this branch should always result in a change as `Actions.Update` will only occur after you have deleted the existing database.
Import only what you need and not `*`
Since only `ImportError` is being handled here, use this instead: ```python try: ec2 = pytest.importorskip("ec2") finally: # rest of code here ``` That way the tests will be properly skipped if the import isn't available.
No. On the controller (callback plugins run on the controller), always use text strings. But that does mean you should mark the format string with a u"". There's some information about when that is important here: https://anonbadger.wordpress.com/2016/01/05/python2-string-format-and-unicode/
You are missing the PID
You should update this to 2.7, as 2.6 has already been released.
I'd call append as item_present, args_present, or value_present. Likewise for subtract item_absent. To be declarative.
You already check for `image` in `main()`
Non-ASCII characters in Python 3 pass tests: ``` 0.1s test_bytes: data_from_yaml=b'some byt\xc3\xa9s', type(data_from_yaml)=<class 'bytes'> 0.1s test_native_text: data_from_yaml='some nativÃ© text', type(data_from_yaml)=<class 'ansible.parsing.yaml.objects.AnsibleUnicode'> 0.1s test_unicode: data_from_yaml='some unicodÃ©', type(data_from_yaml)=<class 'ansible.parsing.yaml.objects.AnsibleUnicode'> ``` Python 2 fails with non-ASCII characters: ``` # pytest output self = <units.parsing.yaml.test_dumper.TestAnsibleDumper testMethod=test_bytes> > self.assertEqual(b_text, data_from_yaml) E AssertionError: 'some byt\xc3\xa9s' != u'some byt\xe9s' self = <units.parsing.yaml.test_dumper.TestAnsibleDumper testMethod=test_native_text> > f = AnsibleUnsafeText(n_text) E UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 10: ordinal not in range(128) # some q output 0.1s test_bytes: data_from_yaml=u'some byt\xe9s', type(data_from_yaml)=<class 'ansible.parsing.yaml.objects.AnsibleUnicode'> 0.1s test_unicode: data_from_yaml=u'some unicod\xe9', type(data_from_yaml)=<class 'ansible.parsing.yaml.objects.AnsibleUnicode'> ```
You're welcome. I found two more, btw ;-)
Another `iter()` that serves no purpose IMO.
Looks like we just need this line removed and we should be good to merge.
We prefer to use `yes` and `no` over `true` and `false` for booleans in YAML.
Missing full stop.
This example should be part of `host_devices` PR
Do we want to reduce the number of environment variables? Would be nice to get to one common variable and parameter for the oauth token.
No, `pkgutil` is the OpenCSW package manager. These are typically the only packages that it manages.
What would be required for this to be idempotent, e.g. support check mode. http://docs.ansible.com/ansible/playbooks_checkmode.html
looks like it checks that the first element is empty, but not that there is a single element...
Not a necessary change but since the code just went through the trouble of retrieving that into the vmnet variable, might as well use it here: ``` python for device in vmnet: ``` Looks slightly better to make use of it since you've retrieved it and a tiny bit faster (since python doesn't have to walk to the object's hierarchy to get the data structure that's being iterated over).
Please add trailing dot for description items.
@jamescassell I think we should remove this as makedirs_safe is not safe. We should not create any directory as user should ensure creation of directory rather than creating them silently.
No need to quote string.
We haven't enforced this via CI yet, though we are moving to str, rather than floats for `version_added`. ```suggestion version_added: "2.8" ```
rather than use `type='str'`, for a "comma separate list" i would turn this option to a `type='list'` in the arg spec and make it comma separated by `','.join(re_modifiers)` it. This allows to use it (due to ansible magic) like `re_modifiers=one,tow,three` as well as `re_modifiers: [ one, two, three ]`
Manage an Azure Container Service(ACS) instance.
Same here, please leave as `if`s.
CI failure due to missing conditional when calling main: ```python if __name__ == '__main__': main() ```
```suggestion result = super(Cliconf, self).get_capabilities() ```
Seems like this is better to be; ``` description: - Required unless I(create_mode) is C(default) or C(restore_long_term_retention_backup). - Specifies the resource ID of the source database ``` The point around non_readable_secondary and online_secondary, why must you set the value when you can source it yourself if it is the same as `name`. Also if this is only enacted when the database is created, why would the ID be the same as the new database being created.
you could just use `get_elb_listeners` for this section of code, it seems to be identical.
use ```from ansible.module_utils.vmware import get_all_objs```
IMHO, this will go in different PR.
This will not work: in the case of exception, the control flow will not reach this line because the block execution will be interrupted one line above. ```suggestion assert "Cannot json serialize" in str(excinfo.value) ```
From the user point of view, I would suggest to not mention dictionary and say the file is not-properly formed ```Galaxy token file %s malformed, unable to read it```
this changed from a list to a string. Perhaps this is related to the "h" message in the error.
if min_count <=
```list_streaming_distributions(self, keyed=True)``` function seems to be returning dict. Shouldn't returning `list` be the erorr.
Maybe instead of hardcoding the name, we'd randomize it? Or at least assert that it doesn't exist before the assignment? ```suggestion assert "test" not in ACTION_WRITE_LOCKS ACTION_WRITE_LOCKS["test"] = ACTION_LOCK() ```
Right, but the order in which you're doing things would at a glance result in the not-uncommon case of, eg `foo (cr)(lf)` not being properly treated, since the break `sub` wouldn't see that, but the char drop would remove the (cr), leaving a line ending that wouldn't format the right way.
```suggestion - Set to C(false) if you do not want a public IP address automatically created. ```
The `","` is actually a value which should be decorated by `C(,)`. The same applies to further bellow.
This is what `urlencode()` is already doing for you., so the function would be: ```python def encode_url_params(self, params): """Encodes key value pairs for URL""" return '?' + urlencode(params.items())
Add facility to support uuid as well.
so is it possible to update webapp and app settings at once? seems like UpdateAppSettings overrides CreateOrUpdate, so if user wants to update both, only settings will be updated
I am not sure if exit is an accepted command.
This line is too long to pass the lint test
Yes it should!
That was true until surrogateescape was added: ``` python >>> a = b'\xff'.decode('utf8', errors='surrogateescape') >>> a '\udcff' >>> '\udcff'.encode('utf-8') Traceback (most recent call last): File "<stdin>", line 1, in <module> UnicodeEncodeError: 'utf-8' codec can't encode character '\udcff' in position 0: surrogates not allowed >>> '\udcff'.encode('utf-8', errors='surrogateescape') b'\xff' >>> '\udcff'.encode('utf-8', errors='replace') b'?' ```
Tests ara failing because of this. Please move it back to the top of the file.
Please don't assume DHCP if there's no IP information configured. We should have a flag for enabling DHCP explicitly.
How about this style of list? This module can be used to: - create new virtual machines from templates or other virtual machines. - manage power state of virtual machines . . . . etc. Removing the repeated phrase makes the list easier to scan.
If wanted_elbs is A and B, and has_elbs is B and C, has_elbs is not a superset, but C should be detached. ``` if has_elbs - wanted_elbs and change_load_balancers: ``` Or ``` if change_load_balancers: changed = True connection.detach_load_balancers(AutoScalingGroupName=group_name, LoadBalancerNames=list(has_elbs - wanted_elbs)) ```
This is a suggestion, not a blocker.
Rather than defining these options in every modules argspec the should be defined once in `module_utils/gcp_utils.py` http://docs.ansible.com/ansible/devel/dev_guide/developing_modules_in_groups.html#your-first-pull-request
The contents of this needs to be added to the RETURN doc.
Best thing to me is to update all the modules to comply with this, so every module is implicitly an example of how to do it.
or even just `if not self.serial_number:`
Make pep8 happy ```suggestion priv, append_privs, module) ```
if this is common to the rabbitmq modules, i would use a doc fragment instead
Can we detect if this is not a json and fallback to print it directly
This line is not needed.
Not sure, but it is not expected to provide a sample of all possible values.
We should avoid lambdas and filters most of the time. Use list comprehensions and generator expressions instead. It's both faster and more pythonic to use those idioms.
Just leave it, it is in line with other modules...
You can also add the `choices` here. Then Ansible will complain if the user specifies something different.
```suggestion - Set transmit queue length of the interface. ```
This restricts items like the source script and the source project to be under the same organization as the inventory. But it is possible to use resources from different organizations as well.
Need to specify that this is required if name is set.
one thing that does bother me is that this isn't called `tower_inventory_id`, and likewise for the environment variable. If there is to be any sense of parity with the tower modules, then we would expect specification by inventory and organization names. Thus, we will add `tower_inventory_name` and probably `tower_inventory_organization`. In the syntax of the modules, either `tower_inventory` or `tower_inventory_organization` would implicitly refer to the name. Also, it seems that there would be no problem for implementing this other env name as far as AWX server changes are involved.
Since `children`, `properties` and other's are defined as module args, the key will be present in `params` and initialized to is a default value. Hence the `if` check here and above is not required. `self.children = module.params['children']` is sufficient
Does this raise an exception if it can't connect? You should catch that and call `module.fail_json()` with an appropriate message.
Not necessary to modify this, right? It can still be: ``` for sg in self.data['CacheSecurityGroups']: cache_security_groups.append(sg['CacheSecurityGroupName']) ```
default: None is the default, so you can remove this line.
```suggestion - When the list element is a simple key-value pair, masked and protected will be set to false. ```
In most modules, `state` is optional and defaults to `present`. It would be easier for users if this module stuck to that convention.
Worth wrapping this line
please add the `version_added: '2.10'`here as well
This class should be moved to `module_utils/scaleway.py` and reused by `scaleway_sshkey` module.
I would avoid the `closer to replace` phrasing, it can do pruning but is still sending a `PATCH` (just an intelligently computed `PATCH` instead of the hail mary we're currently sending). If possible I'd try to match our phrasing to the [official docs](https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#kubectl-apply) as much as possible
Python 3.5 does not have `unicode`. Take a look at the [ansible text helper methods](https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/_text.py) for alternatives. Only noting the first occurrence.
that is why we have a 'diff' facility for modules
@Andersson007 it's [a premature optimization](https://stackify.com/premature-optimization-evil/). Currently, the class is unnecessary.
Add ``` required_one_of=[['principal', 'group'],], ```
I think we should be using `d2` instead of `data` here. Or move this before `found = None` even. I have no idea what the performance hit is of `Environment.preprocess`.
Better to do this like this: ``` python return list(merged_items.values()) ``` Using list there will make sure that it is a list on python 3 (rather than a DictView).
When reading files, please use a `with` block so the file will always be closed. This code will never close the filehandle.
I see - I do prefer having a `true` default, but had it in my head that the default was `false` most places. Since this module doesn't have backwards compatibility requirements, I'm ok with defaulting to `true` as in the guidelines.
nit: it's not a regex and there's no escaped symbols so there's really no need to make use of raw-strings
We'll need to change this to raise an IOError if the file does not exist. With the previous code, this was okay because we were opening and locking a temporary file but now that we're operating on the real file we need to ensure that we don't end up creating a nonexistent file in check mode.
not needed when `required=True` is specified
we might want to rephrase, as we will create the file The file will be created if needed but the rest of the path must exist prior to running the module.
might want to wrap `wait_for_task` with try except block to handle exception.
Add a note that we are talking about Python library and not the command line utility.
Can you change this to ``` if config.has_option('ec2', 'route53_hostnames'): self.route53_hostnames = config.get('ec2', 'route53_hostnames') else: self.route53_hostnames = None ```
This empty line can be removed.
botocore.exceptions.BotoCoreError has been added to the AWS guidelines for the exceptions that should be caught. https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-1
corrected this example and added another for those using ansible_connection in inventory
Ah, yes, you're right. I got confused :)
```suggestion # The following 3 lines are the same as the current PyOpenSSL code for cert.has_expired(). ``` Otherwise it's not clear which PyOpenSSL code you're talking about :)
I am sorry, I was not aware of this thing in pipeline.
The reason it's very niche is that it is specially adapted to only return values which we can remove from output for no_log. ie: if there was a parameter like secure=[True|False] and that was marked no_log in the argument_spec for some reason, we don't want to hide True or False in all of our output (that could actually tell an attacker what the value of secure was as they could see whether True or False was being hidden in other parameters)
Do we need to return module_path? I don't see that we modify it anywhere and the calling code already has it.
```suggestion type: str required: True ```
ignore it then, I stopped reading at import ssl, did not realize it is an encrypted tcp socket connection and assumed http/s
You could collapse these lines w/o having to create a variable for it.
Can you add another call of this after `send_signed_request`'s `fetch_url` call? (The `fetch_url` in `get_nonce` does not need one.)
this line confused me: ` exclusive = self.parser.add_mutually_exclusive_group()` but now i remember the conversation around that PR
My point is, that I don't want to update the modules every time new API version is released, if it don't break _our_ backward compatibility. So it would be really nice to have the possibility to work with modules even with `v1beta3` again if it don't break _our_ compatibility. So either we should have this parameter here, as we can't add it after 2.8 is released or we should change the logic in `find_supported_resource` method.
Look's good. great work
python-hpilo.__version__ is a string, resulting in an error. The cast doesn't work, since the second decimal point renders it as an invalid floating point number: ``` if float(hpilo.__version__) >= 4: ValueError: invalid literal for float(): 4.2.1 ``` FWIW... ``` Python 2.7.14 (default, Dec 28 2017, 13:06:26) [GCC 4.8.4] on linux2 Type "help", "copyright", "credits" or "license" for more information. >>> import hpilo >>> hpilo.__version__ '4.2.1' >>> type(hpilo.__version__) <type 'str'> >>> float(hpilo.__version__) Traceback (most recent call last): File "<stdin>", line 1, in <module> ValueError: invalid literal for float(): 4.2.1 ```
`UUID of the virtual machine`? needs to mention host, i guess
Should have a trailing dot. (Only the short_description must not have one)
Any reason you're changing this in particular? Most (all?) of the "Is this module installed" markers are named `HAS_[modulename]` for consistency
It's a bit more flexible use `MutableMapping` for instance tests. We have this in `ansible.module_utils.common._collections_compat` since it moved between PY2/3. ```suggestion if not isinstance(dict1, MutableMapping) or not isinstance(dict2, MutableMapping): ```
Remove this line. By default parameters are not required, unless stated so.
```suggestion - "C(no-user-rc): Disable execution of C(~/.ssh/rc) by sshd (permitted by default)." ```
To me is "leave empty" is not clear, I would guess some users would understand dns_ptr=""`. Suggestion: `Leave off to reset ...` or even `Omit the param to reset...`
Is C() appropriate in this case? I had struggled to find the correct quoting for this as it does not specifically relate to ansible options or values thereof, but rather a reference to what the option is called in the REST API (which could potentially be different from what the module refers to, though right now every such option should have an equally-named alias).
"for working with retry limiting"
```suggestion - Chart repository URL where to locate the requested chart ```
```suggestion - Either I(parameters) or I(parameters_links) is required if I(state=present). ```
This blank line is not necessary here.
missing version_added, same for rest
I would say keep the generic exception rather than removing them altogether,
No fullstop on the short_description
Is that behavior consistent with 2.9? At first blush, I'd expect a totally bogus group name to be a fatal error- if it's not, maybe it should be...
```suggestion - Threshold for defining a lossy connection by packets received out of order. - A connection between client and Avi is considered lossy when more than this percentage of out of order packets are received. ```
This exception handling is not required here as it is already done in enos_config action plugin https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/action/enos_config.py#L102
i would prefer `role_id` here
seems not used later in code
Most of these examples use quoted strings where it is not required. We tend to only quote strings that requires quoting (i.e. integers as string, colon-space combo, date formats, etc...) If we expect people to pick up how YAML works it helps to only quote when it is required.
```suggestion This is a connection plugin for podman. It uses podman binary to interact with the containers ```
Should be true for configuration in `src` option.
hmm the key should correspond to the key you return on line https://github.com/ansible/ansible/pull/32892/files#diff-2bcb1f907ba628a71186846aee8852bdR342 IMHO 'profiles' IMHO or did I miss anything? ~~~yaml profiles: description: - List current policy_profile and policies for a provider in ManageIQ returned: state=list type: list sample: '[ { "policies": [ { "active": true, "description": "OpenSCAP", "name": "openscap policy" }, { "active": true, "description": "Analyse incoming container images", "name": "analyse incoming container images" }, { "active": true, "description": "Schedule compliance after smart state analysis", "name": "schedule compliance after smart state analysis" } ], "profile_description": "OpenSCAP profile", "profile_name": "openscap profile" } ]' ~~~
If the goal is to make this reusable in other persistent connections, that sounds fine, but `persistent_connect_timeout` doesn't need to be in every plugin (`httpapi` in particular has no independent connect step to time out from) and should probably be returned to `network_cli`
``` ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'} ```
Should add `validate_certs` option as per `ansible.module_utils.urls.open_url`
The first line of PEP257-compliant docstrings should end with a dot, because it's a sentence. ```suggestion """Creates list of arguments for podman CLI command. ```
If there's no default, `None' is implicit. (It means parameter undefined) So this is not needed.
Backports, generally speaking, shouldn't include new options
You can make each sentence as new array element.
I would do: ```python # Ensure we have a trailing slash dcpath = os.path.join(dcpath, '') ```
Can you describe the usecase a bit more here? i had to read your PR to understand why i'd use this.
https://github.com/ansible/ansible/pull/38759 <= related to use a unified json encode/decode that can handle unsafe AND vault
```suggestion self.module.fail_json(msg='One of vm_obj or host_name must be set when calling host_version_at_least.') ```
I wonder if it might be worth saying `Run OpenStack Tempest` to make it a little easier for people to find via a search engine.
This check doesn't make sense. You already do this in `main()`
we shoudl actually mention this in the RETURN docs, noting that it is available since version 2.4
```suggestion return ['%s=%s' % (k, v if v is not None else "") for k, v in options.items()] if options else [] ```
I don't mean to keep asking for changes, but the `line` is effectively meaningless for us in the end. It seems a dict was the wrong choice initially. Why not make `checksum_map` a `list` of `tuple` instead? ``` checksum_map = [] [...] checksum_map.append((parts[0], parts[1])) [...] for cksum in (s for (s, f) in checksum_map if f.strip('./') == filename): ```
```suggestion description: The name of the process you want to get PID for. ```
Since you're not modifying the data, you can just do: ``` for key in resource: ``` here.
The example could use a different option than one already covered above as you wrote , like `Compression=yes`. This part could also clarify if the module honors the content of ssh config file.
This will fail if `_find_system_resource` has not been called yet.
It is fine to add the two options here right now, but the correct way is to fix the base class. I will propose another pr to fix that.
I would put each phrase on a line item
nit: capital List at start of sentence
should this be False by default (it's False by default in the ini file, but if someone uses an old ini file with the updated script, odd things might happen)
You could create a helper method: ```python def _test_ipsubnet(self, ipsubnet_args, expected_result): self.assertEqual(ipsubnet(*ipsubnet_args), expected_result) # and then reuse it by looping over test data: def test_ipsubnet(self): test_cases = ( (('1.1.1.1/25', ), '0'), ... (('192.168.144.5', '18', '-5'), '192.168.144.0/27'), ) for args, res in test_cases: self._test_ipsubnet(args, res) ```
You could append the `name` parameter here (using something like `in module.params['member'] + [module.params['name']]`).
qvm-run just require this to be a single argument, no extra quotes are needed
No, these are fine, because the code in plugins is executed on the control node. However, code in module_utils and module are typically executed on a remote (except for local action). So the code must be transfered to the remote target. The module and module_utils are transfered, that is why module_utils.six must be used with in modules and module_utils
Interesting, would expect this to be 2.8 on `devel`, perhaps it isn't used by anything.
Please don't add quotes when they're not necessary. People may have te impression quoting is required here, but it's not.
the default should be `None` (remove the default, also in doc) because otherwise the setting would be updated to false if a user doesn't specify it. A extend test case would be ```yaml - name: test update Network delete protection idempotency hcloud_network: name: "{{hcloud_network_name}}" ip_range: "10.0.0.0/8" delete_protection: true register: network - name: verify test update Network delete protection idempotency assert: that: - network is not changed - network.hcloud_network.delete_protection is sameas true - name: test Network without delete protection set to be idempotent hcloud_network: name: "{{hcloud_network_name}}" ip_range: "10.0.0.0/8" register: network - name: verify test Network without delete protection set to be idempotent assert: that: - network is not changed - network.hcloud_network.delete_protection is sameas true ```
Hmm, I would not use default [], because if you update only description for example of the role it would remove all pertmis I ithink
I would suggest renaming this to `user` with choices `["currentUser", "anyUser"]` and `default: currentUser` for better consistency with host.
default: null doesn't need to be set and can be omitted
Where does the RHS decrypt come from? It appears to be undefined here. Needs to be passed to _assemble_from_fragments as an kwarg I assume.
We'll need a standard 4 release deprecation cycle to change the output, we always want to be sure we give people a fair chance to update their playbooks that may depend on return values or any other functionality. I haven't tested, but I would expect you should be able to set result.route_tables.associations.id to result.route_tables.associations.route_table_association_id before returning the result. Then we would need the module RETURN docs and a porting guide entry to state that the return value is being deprecated. #52518 has a good example of the needed docs.
Short_descriptions need to be meaningful without knowing what category (directory structure) the module is is, how about something like: Create security rule policy on PanOS devices
should note any example using this only works on 2.3 and above
not sure, I'm not too familiar with the weird formatting language.
Well, the built-in Python warnings mechanism is probably better in this case because the emitted warnings can be automatically identified by pytest and are controlled by `python -W`. That `module_utils.common.warnings` only collects lists of strings to print out, external systems have no way of knowing that those strings are in fact warnings which is mostly fine for the remote execution because we control it.
``` python if PY3: to_str = to_unicode else: to_str = to_bytes ```
I don't think this is supposed to be here.
It may be worth clarifying here that `changes=/path/to/file` in check mode will always report `changed=True` even if the command would not result in changes during normal execution. There is no way around this. ```suggestion - Check mode is supported when passing C(creates), C(removes) or C(changes). If running in check mode and any of these are specified, the module will ```
I think you can copy paste what's already in `ovirt_disks` module: ``` - Specify format of the disk. - If (cow) format is used, disk will by created as sparse, so space will be allocated for the volume as needed, also known as I(thin provision). - If (raw) format is used, disk storage will be allocated right away, also known as I(preallocated). - Note that this option isn't idempotent as it's not currently possible to change format of the disk via API. ```
I would add here (right after `- Default value is set by oVirt/RHV engine.` ): ``` - I(high_performance) is supported since Ansible 2.5 and oVirt/RHV 4.2. ```
No need to re-fetch the template, you can just write: ```python disk_attachments = self._connection.follow_link(template.disk_attachments) ```
I'll come back to this after we've sorted out the other issues you've noted :)
I would remove this function and use only `otypes.BiosType`
`Size` is not required for `delete_volume` so would force user to specify while deleting volume even if it is not required.
This will not run the assertonly checks in check_mode, even though they are not destructive or changing any state other than atime.
I don't think this will work correctly on python2. Pretty sure you need parenthesis there: ``` python except (ConfigParser.NoSectionError, ConfigParser.NoOptionError): ```
Read https://github.com/ansible/ansible/blob/devel/CODING_GUIDELINES.md#regexes. So you can ignore :)
you can add multiple authors as a list here :-)
this should come from the standard library: ``` python from collections import defaultdict ```
```suggestion - LDAP id to add to the domain. ```
you might want 'exists' in case of symlinks
@felixfontein sounds good to me, just wanted to check. :-)
Can you use the waiter for this instead? http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.Waiter.SubnetAvailable
No, it was the standard used when the module was first created but we are changing it to single underscore when delivering to ansible core. This indeed should be changed to single underscore format.
While you are editing this can you update: `deprecated: Deprecated in 2.2. Use M(eos_config) instead`
no need to split if you define the type as 'list', user can then supply a list, comma separated string or single element, you always get a list
Also here (and in all other option docs): always specify `type`.
Tags is compatible with ec2_asg module and now takes a **list**, so this should be updated.
you have an option 'scheme' .. but the user has no way to set/change the option .. not via env var ini config .. anything
Could collections examples be added in? I know https://github.com/ansible/ansible/pull/25210 hasn't been merged yet, though if you know that structure that would have us from having to come back to this
check results before split and getting first item
```suggestion - The list of choices varies depending on the subscription and location. Check your subscription for available choices. - Required when creating a VM. ```
Ah, I see you've just moved the code to satisfy CI, rather than these been new imports. If you could fix this it would be great.
I think that should be changed=True, since check mode is used to determine if a change will occur if run without check mode.
Would be nice to know the minimum version.
The locale should be set to C if we do string matching.
```suggestion # type: (str, bytes, Optional[str], bool, GalaxyToken, int) -> bytes ``` This fix was already applied in devel: https://github.com/ansible/ansible/pull/77147
Add support if VMM domain parameters: "vmmDomainProperties": { "microSegVlan": { "vlanType": {}, "vlan": 0 }, "portEncapVlan": { "vlanType": {}, "vlan": 0 }, "vlanEncapMode": {}, "allowMicroSegmentation": 0, "switchType": {}, "switchingMode": {}, "epgLagPol": { "enhancedLagPol": { "name": "string", "dn": "string" } }
This looks odd - shouldn't each parameter be separated by a `,` and have its own `'` around it? I can't test this, but I would guess it should be: ```suggestion msg: "{{ lookup('consul_kv', 'my/key', host='10.10.10.10', token='a20f2009-a1cf-4e19-8286-0632ea3bcad6', recurse='yes', port='2000') }}" ```
I'm curious if this should be a `BaseException` so that it'd work on `Ctrl+C` (`SIGINT`) or `SystemExit` (`SIGTERM`).
It is usually a good idea to prepend some text so that it is easier to find out where an error was raised (in case it's not clear from the error message).
Default not set in argspec.
"must be done before calling self._update_module_args()"
Need gplv3+ license header
This `else` statement _may_ not be necessary. The difference is subtle, but would behave the same if `rc` is always `!= 0` when an `AnsibleAuthenticationFailure` is raised.
we can't have the same key
It should be possible to do this in Python I think... But that may be more complicated. I know PyCrypto can create RSA and P256 keys, but I don't think it supports ed25519. If you choose to stick to calling `ssh-keygen`, that's fine, but just so you're aware.
```suggestion - Setting I(network_mode=default) for a Linux container will use bridge mode. ```
Or do you plan to backport this to 2.8? In that case, it should be more precise; the next 2.8.x version will be 2.8.6, though it might already be too late for it; @abadger until when will backports for 2.8.6 be merged? In case you plan to backport it: what about backwards compatibility? Does this break existing playbooks/roles which were using the old v2 approach from the samples below? If yes, this can't be backported, and you also need a [2.10 porting guide](https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/porting_guides/porting_guide_2.10.rst) entry.
we should not be adding a python dependency on ordereddict here, as python2.7 can also use ordereddict from collections: https://docs.python.org/2/library/collections.html#collections.OrderedDict This also means, that python2.7 users now need an additional python dependency installed.
since all new options are the same as 'directory' when it comes to the subsequent filter matching, just change it into one elif entry with `file_type in ('directory', 'char' ...)`
```suggestion version_added: "2.10" ```
I have a test case or two that fails somewhere in here, if the template string includes a '{%something%}'. Not sure what the expected behavior is for that. ``` __________________________________________________________________________ TestTemplarIsTemplate.test_is_template_block ___________________________________________________________________________ self = <units.template.test_templar.TestTemplarIsTemplate testMethod=test_is_template_block> def test_is_template_block(self): res = self.templar.is_template(u'1 2 {%what%} 3 4 {{ some_var }} 5 6 7') > self.assertTrue(res) E AssertionError: False is not true test/units/template/test_templar.py:276: AssertionError _____________________________________________________________________ TestTemplarIsTemplate.test_is_template_block_undefined ______________________________________________________________________ self = <units.template.test_templar.TestTemplarIsTemplate testMethod=test_is_template_block_undefined> def test_is_template_block_undefined(self): res = self.templar.is_template(u'1 2 {%what%} 3 4 {{ foo }} 5 6 7') > self.assertTrue(res) E AssertionError: False is not true test/units/template/test_templar.py:272: AssertionError ```
It Python, you should use a proper camel case for classes: ```suggestion class TestJsonEncodeFallback: ```
e.message unfortunately doesn't exist at all on Python3. What you had before looked right. You could either break up ``` try: boto_call except ClientError as e: < things with e.response and fail_json_aws > except BotoCoreError as e: < just fail_json_aws > ``` Or you could wrap the e.response in a `try`/`except AttributError`
Do we not need this? It looks like it's still used below
Can remove this line.
Not catching non-20x responses.
I'd rather not try to implement cert validation, in case AWS changes what they accept.
`changed` should be the same value, no matter if in check mode or not. It says "this ressource will change in checkmode" and "this ressource changed" in live mode.
There are two reasons why we opted for `username` instead of `user` for these modules: 1. Bitbucket (like Github) uses `username` in the API & GUI to denote an account 2. An account (username) might be either a _team_ or a _user_, so `user` has a different meaning We thought that following this pattern would cause least confusion; what we want to achieve is that one specifies the two parts identifying the repository: `{username}/{repository}`, where `username` might be a team name. We can change it to `user`, but have a preference for `username`; let us know if you don't think that our arguments are strong enough and we should change it anyways.
What's the plan for this, since it's connection local only
Can you update this the exception handling in the guidelines, please? https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-2
Small typo: **its** instead of **it's**.
```suggestion - List of specific vpc peer IDs to get details for. ```
There's a few things that I'd change about this function. But I think the toplevel concern is that it's doing too much. It doesn't need to take req. It should just decide whether we're using the pycrypto or cryptography backend, format and return that one dependency. The calling code can then substitute the value.
```suggestion return False, 'Command "%s" found no files in archive. Empty archive files are not supported' % self.cmd_path ```
I have the same problem, but this workaround doesn't helps me.
Sorry, I should have mentioned this in my original feedback. Import `patch` using: ```python from ansible.compat.tests.mock import patch ```
You can remove the `required: false` lines, it's implicit
this should use the config system instead
```suggestion from ansible.module_utils.basic import AnsibleModule, missing_required_lib ```
Could also add a check in ensure_listeners_default action_has_arn() before trying to iterate.
I'd remove both sentences, i.e. one more than currently. Noone cares about 1.8.3 nowadays.
Use `missing_required_lib` from `ansible.module_utils.basic`
You don't need to add this extra call ```dict()``` call. (Nor is it needed in the devel version either). The current version of merge_dicts in both branches returns a new dictionary so there's no need to turn it into a dictionary in the caller. Since this 2.8 branch didn't have a dict() call to begin with, I woiuldn't add it now (and you should try to merge removal of the extraneous dict() call to devel too): ```suggestion definition = KubeVirtRawModule.merge_dicts(definition, self.resource_definitions[0]) ``` ```
please sort according to severity
```suggestion version_added: "2.8" ```
Here's another one: ```suggestion service_key=dict(required=False), ```
remove `local_action` and call directly `module`
Please give some examples
I *believe* this try/except is redundant and handled within boto3_conn (inside the module.client call) @jillr or @s-hertel may know the code better...
use the `flatten_dict` method from module_utils.network.nxos.utils.utils.py
not a blocker but we started to add a `type: (bool|str|dict|int)` for each option as well, this would look like ~~~diff default: 'present' + type: str ~~~
> scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum You missed the parentheses.
This needs to be handled better. This import should be at the top of the file and wrapped in a try/except so that boto isn't a hard requirement on ansible-galaxy. Also, this should support both boto and boto3, as both are still in common usage.
some of the magic vars rely on post_validate already being run to have the correct value
so, that means, we should change this condition to the following, right? ~~~python root_disk_size_changed = root_disk_size < size ~~~
This can be simplified to `if self.vlan_id == 0`, as the other two will be `None` automatically because of the exclusivity check
Maybe `purge` with the description is enough to be understandable.
vms -> VMs
This looks like we should now call _clean_data(variable) unconditionally, no need for the if isinstance check anymore.
I don't think these parameters should have choices either unless I'm missing an example module that already does include them.
We used to allow a "dump" state in the past but this should functionality should go into an info e.g. `zabbix_user_group_info` module. Please remove this functionality from this module.
`C(pip install f5-sdk)`
This might be nicer as `if current_vpc_attachments[0]['VpcId'] != params['VpcId'] or current_vpc_attachments[0]['State'] != 'attached':`
```suggestion import traceback REQUESTS_IMP_ERR = None try: import requests HAS_REQUESTS = True except ImportError: REQUESTS_IMP_ERR = traceback.format_exc() HAS_REQUESTS = False ```
This is wrong, you are making a single-list entry. If you want an empty list, it's either ```yaml allowed_urls: ``` (Will become None though, so would need special handling) or JSON syntax (recommended) ```yaml allowed_urls: [] ```
```suggestion - "Will only be used when I(device) and I(label) are not specified." ```
255 is the way ssh notifies that the error was on the command being executed, not the connection
The input values for tags can be integers but they need to be converted to a string before using e.g. `compare_aws_tags` because they're always strings when returned by boto. I definitely think we should be able to do this in a better way (which is likely just forcing conversion to string, rather than declaring non-string things invalid)
From the examples is seems like `content` can also be a key when uses with `state: absent`.
This is not unicode frienly, see `INVALID_VARIABLE_NAMES` in `lib/ansible/constants.py` , we had to update to allow for unicode chars .. also you should be able to reuse
This should exit in failure
Ah, I think this ought to be `local_size == remote_size`, since this conditional causes the file to be skipped for this strategy. That explains the odd behavior I saw with `date_size`
IMHO it's an antipattern when you catch everything wholesale. You mask future bugs this way.
I know you asked me about this but it might be a good idea to explain that PowerShell unpacks arrays if there's only a single entry so this is a defensive check on that.
Please remove this example, since I would consider this usage as not recommended.
Please don't use `\`, there are better ways Also use proper indent
Indeed `hash_host_key` method will fail if `key` is an empty string. The previous test should be modified too.
The result of this: `- apt: clean=yes package=whatever state=installed` would be that 'whatever' is ignored and user gets told 'all ok and changed', this is misleading. while 'upgrade' goes through many hoops to ensure compatibility with others states/info (too many IMHO, i would simplify this a lot)
Might want to link to the enum that already have some names they can use as a guide.
Listing `choices` for a boolean type is no longer necessary https://docs.ansible.com/ansible/latest/dev_guide/developing_modules_checklist.html Otherwise this looks good :+1:
Yes, you are correct. One day I'll master that distinction. ð
if we add ` | termios.ISIG` here, it makes the `^C` respond immediately, though that's aborting the program and not raising our `KeyboardInterrput`. That's the closest thing I can find and still keep the ability to interactively edit the input.
The same pattern is used on lines 1022 and 1093, you might want to fix them too. Also, I would put it on one line at this point: ```python failure_response['failures'].append(" ".join((module, to_native(e)))) ```
Specifically, you'll want to catch botocore.exceptions.BotocoreError here
real sample value
```suggestion - The module can be used to gather a hierarchical view of the folders that exists in a datacenter. ```
Values we return are in bytes.
I think `result` isn't initialized when `module.check_mode` is `True`
In a follow up PR could you please add `type:` details for all the options. This makes the online docs clearer. It's something we've been working in during Ansible 2.8 development. A single PR which updates all you modules would be great, thanks in advance!
@willthames - you might be interested in https://github.com/ansible/ansible/pull/18445/ which is mentioned in https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/roadmap/ROADMAP_2_4.rst#facts
From 2.5 we are transitioning to use cliconf plugin and is currently work in progress. Please have a look at the ASA modules as they are the only ones (as of 2.4) converted to using cliconf.
Ah, I didn't knew there was a template :) Well, in that case, keep it. It doesn't really hurt.
Unless you just want to aim for 2.9? we are still accepting changes, but you'll need 'ship it' from maintainers and we are close to freeze.
nit: the example could be a more generic, but it's ok to me!
The example here is incorrect as the `1.2.30` will not be interpreted as `1.2.3`. Please use the example from the description of the issue where `1.20` is interpreted as `1.2`. Please change the text to this: ``` - Quote the version to prevent the value to be interpreted as float. For example if C(1.20) would be unquoted, it would become C(1.2). ```
Is conversion to `to_bytes` required while passing parameters to `send_command()` Command conversion to bytes is handled here in [network_cli.py file at L288](https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/connection/network_cli.py#L288) and for prompt and answer it is done at [L305 in network_cli.py](https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/connection/network_cli.py#L305)
according to arg spec the default is `present` and as it has a default, it is not required.
Thank you for confirming.
Generally, modules go: module, short_description, description, options,...
```suggestion EXAMPLES = r''' ```
redundant parens `% (names)`
Please use `to_text` instead of `str` ``` out = to_text(out, errors='surrogate_then_replace').strip() ```
I think we are actually leaning toward not "fixing" this, and just having `ansible-galaxy login` error, and give instructions for manually getting the token from the galaxy UI.
I think we should have warning instead of fail here, but i think it can be done later. no need to hold this pr.
Remove the PY3 conditional below and just do `cmd = b"\nexit\n"`. There's no variable substitution so just create the byte string itself.
Good catch, I would prefer that this gets implemented rather than setting `supports_check_mode` to `False`, but either way, it must be fixed.
Does this not being required mean that you will grab the log from the first container? Maybe you could specify the behavior when it's not included.
Needs to be wrapped in a try to avoid early module termination and a traceback when the library is unavailable. ```suggestion try: from botocore.exceptions import BotoCoreError, ClientError except ImportError: pass # Handled by AnsibleAWSModule ```
do we actually need state here? just move to the top
This won't work from module code because we aren't guaranteed that ansible is installed on the remote machine. Only things inside of ```ansible.module_utils``` are transparently included in what we send over the wire with the module. You could use ```from ansible.module_utils.six import PY3``` but there is a better way. In the imports, use: ``` python from ansible.module_utils._text import to_native ```
Better to use `.get()` Rest all LGTM
Should not `port` be an integer ? Note that the module accepts `None` value (no error encountered)
This isn't really a new rule so much as a new suggestion. Constructors were the preference in the early days of Ansible and hence they have become prevalent. Literals are less confusing to those who are not familiar with constructors and they are usually faster (though that's not as much an issue in module code). For new modules, I suggest using literals rather than sticking with the (less than ideal) convention found in most modules.
```suggestion changed, msg = user_mod(cursor, user, host, host_all, password, encrypted, plugin, plugin_hash_string, plugin_auth_string, ```
Just in case it's probably a good idea to use `.get()` instead of dict access syntax in case the key is unset.
I think either name should be mandatory or this should take a label selector.
For consistency why not just keep this as `if not self._connection.become`? The next change below this one effectively uses that. We should try to be consistent.
This function is quite big, and it does a lot of things. Might be better to split to to smaller functions, like we do in our other modules.
Yes, it is. Some modules contain both raw and curated because of the compatible issue
Please do `from ansible.module_utils.network.mlnxos.mlnxos import show_cmd` in the next line instead.
It would be nice to add a note - From where this module will gather information about PIDs viz., Ansible Controller or Managed nodes or remote machines.
Again, reboot is async operation that is only stared by POSTing data to proper endpoint. Function should probably wait for the operation to terminate.
Should be: ```python elif state == 'absent': ``` state is always defined, and can only be "present" or "absent".
This should be Ansible 2.6
You are right, as is it creates a file directly under the datastore which is similar to the issue you pointed out. I don't think that just the datastore can be used as a valid path in the same manner though. I believe the authors intent is to create unique vmdk names using the information from diskspec. I did have to make this change to make it work though. vmdk_file_name = path_on_ds + '/' + vm_name + '/' + vm_name + '_' + disk_file_name + '.vmdk'
```suggestion - Maximum spot price to bid. If not set, a regular on-demand instance is requested. ```
please use here `self.param('version').get('base_template')`
Yep, we need to keep mode and add options.
In order to allow zero value for `timeout` key, should not that be like this ? ``` 'timeout': self.module.params.get('api_timeout', config.get('timeout', 10)), ```
```suggestion encoding: latin1 ```
~~~diff - state=dict(type='str', required=True, choices=['absent', 'present']), + state=dict(type='str', default='present', choices=['absent', 'present']), ~~~
`if device and isinstance(device, vim.vm.device.VirtualDisk):`
Since you use requests, why don't you let that handle the escaping for you? You would need fiddle with the params dict but I think it would lead to cleaner code.
This method should be called `verify_file` and is not a private method since it is called from the inventory manager here https://github.com/ansible/ansible/blob/1cf07028d400cd3cef5699c37cadfefb7bbb9532/lib/ansible/inventory/manager.py#L262 You do not need to call it in parse().
All plugins should implement their own `verify_file` so that the auto plugin knows whether or not a file is valid for the individual plugin.
Please use multi-line yaml ``` - name: Test Enos Facts enos_facts: provider: "{{ cli }}" ... ```
Just want to verify - will it be possible to apply these environment variables per host in the inventory file? The idea is that you may have multiple firewalls, some of which need proxy (or even different proxies) to be managed and others don't.
It seems like I'm being overly cautious. I've checked with @pradyunsg and he confirmed that pip isn't calling `sdist` command and it suppresses output anyway so users wouldn't see it unless in case of failure...
We prefer if the first entry of the description is the summary of what the parameter is for. Subsequent entries can clarify how it is used. So I would do: ```yaml session: description: - Specifies the session ID to use. - This parameter works in conjunction with parameter C(interactive). - It has no effect when C(interactive) is set to C(no). type: int version_added: '2.7' ```
Adding `command_spec` as part of top-level spec is not the right way to use of `ComplexList
recommend renaming to `save` with alias to `save_config` for consistency
+1 to stating this. I wonder if an example would be useful
This is not required if you use `required=True` in `get_bin_path` API.
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
It's now handle by the "service_policy" option.
i spent too much time debating this in my head, it should be obvious .. .but my soul darkens a bit realizing I WILL inevitably have to point to this doc when someone w/o connectivity complains about it not working ...
no need for module here now
MoveInto raises lot of exception. It would be good to handle those error as it will be helpful to end-user.
Could you please add an example for this new option. Thanks
I would rephrase since its not just `until` 'There are several keywords ignored by this action, like `until` and `retries`.
This can be moved to different PR.
Trying to create an instance with check mode fails with: ``` The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_6vt6E9/ansible_module_rds.py", line 1406, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_6vt6E9/ansible_module_rds.py", line 1399, in main invocations[module.params.get('command')](module, conn) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_6vt6E9/ansible_module_rds.py", line 985, in create_db_instance resource = await_resource(conn, result, 'available', module) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_6vt6E9/ansible_module_rds.py", line 929, in await_resource while wait_timeout > time.time() and resource.status != status: AttributeError: 'NoneType' object has no attribute 'status' fatal: [localhost]: FAILED! => { "changed": false, "failed": true, "module_stderr": "Traceback (most recent call last):\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_6vt6E9/ansible_module_rds.py\", line 1406, in <module>\n main()\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_6vt6E9/ansible_module_rds.py\", line 1399, in main\n invocations[module.params.get('command')](module, conn)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_6vt6E9/ansible_module_rds.py\", line 985, in create_db_instance\n resource = await_resource(conn, result, 'available', module)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_6vt6E9/ansible_module_rds.py\", line 929, in await_resource\n while wait_timeout > time.time() and resource.status != status:\nAttributeError: 'NoneType' object has no attribute 'status'\n", "module_stdout": "", "msg": "MODULE FAILURE", "rc": 0 } PLAY RECAP ******************************************************************************* localhost : ok=0 changed=0 unreachable=0 failed=1 ``` because await_resource is still being called below regardless of check mode.
My bad, I've missed it !
I read the docs page, but it's not at all clear what this usage_element is for, nor do the examples provided below give me a good idea.
Please add a new line before `dict(` so that flake8 doesn't complain
probably? ```suggestion - Time to wait before changing from hello to work state (5 - 300 sec). ```
Hmm this might be part of the problem. new_args is never a `str` at this point in the code because in the module spec it is defined as a list. So if you have in the task: `module_arguments: 'use_authtok,remember=6,retry=3'` Then `new_args` at this point looks like: `['use_authtok remember=6 retry=3']` which is a list with a single item. We should either deprecate the form: `module_arguments: 'use_authtok,remember=6,retry=3'` and remove it from the examples section as a potential option OR we should handle parsing it into a list. Not sure how other Ansible modules handle this.
Use `dict.get(key[, default])`to assign default values --maybe `get('operation', None)`. and do `if operation is not None:`
I don't think the default is string. The default is to use whatever YAML makes of it IMO (that's the only backward compatible way to add type-support when we did). This also makes it possible to have a parameter that accepts both e.g. a list or dict and let the module figure it out (like it used to be in the old days ;-)) There are modules that use YAML as input, so in this case it doesn't matter whether it is a string, dict or list. (e.g. the xml module) and there is no type-indication for those parameters.
why aren't you just using want? I haven't seen anything that would prevent you from it
Why don't you assign string here? Your further loops assume it's a string and convert it for you anyway.
It seems that standard style in Ansible is "rb" rather than "br" (primary mode first, modifiers afterwards) but it's just style, not a blocker.
You shouldn't need to double up on `\` in the docs. The Python doc string is prefixed with `r` so no escaping necessary.
You may want to change it here as well - https://github.com/ansible/ansible/blob/3ea8e0a14417168be7ada4ed73e6dbc7bb3e4782/.github/BOTMETA.yml#L1583
This will cause the `overwrite=always` setting to never work, since the module exits before checking the value of `overwrite`. Please delete this line.
Should not `close` method called in an `finally` block ? Note that `close` raises exceptions when one of `connection.is_closed`/`connection.is_closing` is `True`.
the module returns, `name` and `data` but there are no docs about that.
I find lines 121 and 122 a bit confusing - even the os.path-generated path is processed by expandvars and expanduser. Something like this would be more readable IMO: ```python _ini_path_raw = os.environ.get('PACKET_NET_INI_PATH') if _ini_path_raw: packet_ini_path = os.path.expanduser(os.path.expandvars(_ini_path_raw)) else: packet_ini_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'packet_net.ini') ```
```suggestion - Label operations in this module apply to the docker swarm node specified by I(hostname). ```
All of the other `v2_runner_on` methods just pass `self, result` for arguments. When host is needed it does `host = result._host.get_name()` Is there any reason to do this differently? I'm concerned about the stability of the API when it's starkly different like this.
I have a PR (#54439) that adds macOS support but no one seems interested in it. `Â¯\_(ã)_/Â¯` ```suggestion - Windows, macOS, HP-UX and AIX are not currently supported. ```
Keep this as GitHub handle as this is used by Ansibot.
```suggestion pvdisplay_ops = ["--units", "b", "--columns", "--noheadings", "--nosuffix"] ```
The descriptions should be a bot more informative. Now they do not add any value. - ```The short hostname to be used for the target``` (is it short, or fqdn here ?) - The FQDN domain name. - A list of DNS servers to be use. - The order of the DNS servers is important as they are used consecutively in order. - A list of domains to be searched through by the resolver.
```suggestion installed_name = get_name(module, lstdout) ```
This one is a bit more complicated it seems with the py2 branches, but I think we can still manage combine them.
This check is redundant since we have `if 'name'...` on previous line.
module.params['letsencrypt_challenge_path'] is meant here
If any existing modules do this, it's a backward compatible thing.
I see - if possible I'd like this in a separate PR because it's not related to IPv6, and has its own bug open already.
We discussed this and @chrisvanheuveln won.
We should be adding type-information to all parameters starting with Ansible v2.8. Also, no need to quote the description, we tend to only quote when it is required by YAML. ```suggestion - The firewalld iptables direct rule you would like to enable/disable. type: str ```
you can output warnings immediately (they dedupe) and that should not interrupt the other output that happens later
Syntax error, `delegate_to:` should be at the task-level, not module-level.
```suggestion version_added: '2.9' ```
remove dump state
Make cmd as single list ``` cmd = [self.nmcli_bin, 'con', 'add', 'type', 'bridge-slave', 'con-name'] ```
I'm not sure they could actually publish to Galaxy. It would reject that version as not being semver.
Minor: if the test fails, the value of `basic.has_journal` won't be restored. This probably doesn't matter.
This parameter is required according to the docs. But I see that either cert_url or cert_path is required. Maybe the docs should make this more clear. I would add it to the description of both options, and maybe add a separate note as well.
Any reason for callingÂ this 'cmd' in the return but the corresponding module param is 'command'? I'd be tempted to make them the same, probably going with 'command', just because whole words communicate better than the terse, vowel-free versions we are all so used to from the command line.
When users list is empty this step is skipped
and this shows problem with such generic module, user MUST know api to know what is returned
I made an attempt at implementing this suggestion in https://github.com/ansible/ansible/pull/34280/commits/0fda2b504ad831e49b66fe45421006a23420838c, let me know if that's moving in the right direction.
There are many examples through the unit test dir. I see that `test/units/executor/module_common/test_modify_module.py` uses pytest style tests.
I'm not sure whether this is a good idea. Maybe you should allow the user to choose between `yes`, `no`, `ask` and `accept-new` (with the default being `accept-new` or `ask`).
Would this not gather facts when `gather_facts: no`, the `implied` is for when the default is to gather facts and/or it is specified by the play explicitly.
When hitting an error you must exit with module.fail_json
The `failed=True` argument isn't needed here.
Here also `required=False` is not needed for parameters that are not required. Guideline dictates to leave it out.
I don't see `vca_argument_spec` and `vca_login` being used anywhere.
> This doesn't account for invalid values. Yeah, I realized that when suggested `notify_per_item` below, too ;-) I was wondering if we had anything like `choices` for `FieldAttribute` so we didn't have to check for invalid types here in the code but not that I could find.
I don't have a problem with _check_type_bytes simply calling the toplevel string_to_bytes(); no need for this method. (Wish we could do the same with pretty_bytes() but backwards compat... )
I think this is failing in shippable because the error message has changed at some point: ``` >>> 'str' > ('test', 'tsr') Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: '>' not supported between instances of 'str' and 'tuple' ``` I recommend checking the types of a and b like this: ``` python if isinstance(a, string_types) and isinstance(b, tuple): return -1 elif isinstance(a, tuple) and isinstance(b, string_types): return 1 raise ```
```suggestion - Path to the stanza file. type: path ```
```suggestion - This module does not work with vSphere version older than 67U2. ```
This need to be or'd with the existing value of changed
In case you changed this, you still need to push the change to GitHub. (This also has to be done for the `delete()` call.)
Should `connection` property not be named differently than the `connection` attribute ? It seems the property will be overridden by the `_connection` `FieldAttribute` defined in `Base` and never used/called.
this should use the new API without hardcoded id now
There is no need to specify the version here.
Not sure why we are removing alias and adding new parameter here.
`Path to the file that contains userdata for the ec2 instances. Multualive exclusive with I(user_data).` And similar on the user_data `description:` block The `I(...)` means italics, so it's clearer we are referring to a parameter.
I might go for a simpler expression: ```python limit = getattr(self.options, 'subset', None) if limit is not None and not limit and limit != C.DEFAULT_SUBSET: ```
I am merging and creating a PR for you to review. :)
```suggestion if ci: ```
This will always return changed even if there is failure in deleting hook.
Done (`pvs` is used now).
This import is not used.
```suggestion required: False aliases: ['datastore'] ```
`urls` are not checked for presence, but always passed along to zypper. See the rest of this function.
```suggestion content = to_text(response.read(), errors='surrogate_or_strict') ```
Have better examples would be nice instead of just the name of the option.
I think we need _remote_tmp here. So we should either make sure we're always passing in a _remote_tmp or we should set a default here. (Since we're already setting a default in action/__init__.py:_update_module_args, it feels like we should set this there as well).
Should also have trailing dot :-/
Same here, make this a regular function
Isn't it the alternate syntax for the next if-block? `or ` part is only evaluated if the first expression in the chain is falsy. Am I missing something? I'm just suggesting an alternate/shorter conditional syntax...
```suggestion (the I(group) and I(group_id) options are mutually exclusive). ```
You shouldn't need this.
These are specific env vars created for ansible? I assume there's a spec that covers this - we have explicitly not added them to Kube for reasons, but they seem fine to use from ansible.
Moving the definition of `min_size` et al. from line 664 would be a lot more elegant: ``` min_size = module.params.get('min_size', as_group['MinSize']) etc... ```
When using the general PyVmomi class from the VMware utils, you don't need this.
after_group does not exist at this point, this will stacktrace
@ragupta-git So I feel I have to repeat myself over and over again. Please use the **use_proxy** variable for disabling proxy support. This is how most (if not all) other modules are doing it.
Change these to ~`default: False`~ `default: false`.
Why? Doesn't it go to stdout while help goes to stderr? With typical piping, it'd be alright and the tools down the chain would be able to consume and empty "there's nothing installed" `{}`...
Your module is correct
ditto `s/client/realm` :wink:
Failing since you need a `:` at the end of this line!
Flag `required=False` is not needed, the is implied if it is not `required=True`
Please add `version_added` to each one of the new options.
Since the default is `None` we can just omit this. ```suggestion ```
It's already stripped: ```suggestion (PODMAN_OUTPUT, ''), ```
I would like to see `cdrom` as separate spec as it is now. Like @pdellaert said, it will complicated if we move it under hardware.
I would catch all exceptions here, so that the output is clean JSON. Please use this common code: ```python except: e = get_exception() module.fail_json(msg=str(e)) ```
The error is already handled by `azure_rm_common`
I don't understand. With your change we attempt to customize a vm created from scratch ? I think we can't deploy VM from template without use customization with this.
The order is wrong. The classifier comes after the version part.
The integration tests need to be changed as well.
Make these snake case, `azure_endpoints`, `external_endpoints`, `nested_endpoints`. There's a module_util you can use to convert it back to this form.
I think `healthcheck: None` and `comparisons: heathcheck: strict` is enough for this? Well, I prefer using existing functions.
Me thinks this was added to the wrong place(s).
Please revert this change
I would do something like local.py does here: ``` python if not self._connected: self._display.vvv("ESTABLISH DOCKER CONNECTION FOR USER: {0}".format(self._play_context.remote_user, host=self._play_context.remote_addr)) self._connected = True return self ``` It adds logging which is a good thing to have when things go wrong. Setting self._connected is unnecessary for docker but it is nice if someone later decides to cargo-cult from the docker module and their connection plugin does need to set the _connected attribute.
```suggestion msg: "{{ lookup('azure_keyvault', 'secret_name=someSecretName secret_version=169591fb vault_uri=https://anothervault.vault.azure.net/') }}" ```
Actually, there's a bug in the description here, this option does *enable* cert checking (and TLS): ```suggestion description: Connect using TLS and verify the authenticity of the Docker host server. ``` The TLS options are named the same as the options for the docker daemon (whose names are similar to the names used when configuring Docker CLI/Python SDK). So let's stick to `tls_verify` for now, but fix the description.
this warning should not be default, iirc there are several paths that use fail_on_undefined and should not warn
Please complete the `RETURN` section with the appropriate attributes
Ok. It would be nice if there's some way to tell PyCharm that fail never returns, that would be more elegant.
This appears to be implemented for Alpine Linux only, this should be moved to the base class.
What about to simplify this like this: ```python if not module.check_mode: rc, out, err = run_subscription_manager(module, rhsm_arguments) results = out.split('\n') module.exit_json(results=results, changed=changed, repositories=updated_repo_list, diff=diff) ```
Would be good change this line to explain a bit about what this is done. No need to detail the supported operations, that's what `choices:` is for, so the following line can be removed.
I don't have strong feelings about this really but I guess my concern was that with this we could end up with having error messages in both `msg` and `error` at the same time which seems little confusing to me.
Remove as not needed (default)
This check is redundant with the one performed by `run_command`. ```suggestion ``` Also, checking it here requires `pwsh` even when no PowerShell sources are present.
The lack of `-WhatIf` shouldn't stop you from implementing check mode. Just knowing whether Ansible will report a change when in check mode is great, we don't need `-WhatIf` on the set cmdlets to know that.
here you can set 'changed' status in `else`
arguments pointing to a file should use `type='path'`.
Any reason you're not using `format()`? This works, but is kind of "old style" for new code.
`is` tests identity in python so if statement always produces a change. We need to use `!=` here to compare equality instead of identity.
```suggestion - The SNMP community string, - Required if version is v2/v2c. ```
@getjack @MatrixCrawler I'd welcome your thoughts on this.
Shouldn't we keep this line assuming Peter is the original author of this module ? I don't think that multiple copyright lines is a problem.
You could use traceback here. You'll need to import it too. https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#exception-handling
actually caught by AnsibleAWSModule
These should be handled in the arg_spec using `aliases`.
this is an unsafe way to update the file, it can lead to data corruption and other processes reading incorrect/incomplete data. write to a tmp file and use atomic_move from basic.py
```suggestion instance_types=dict(type='list', elements='str'), ``` It's good to also tell people that you're expecting a list of "what". (Hmm the sanity tests really should have caught this)
not quite, only `executable` without `php_` prefix, similar as in the other modules, please. Thanks :)
```suggestion where timespec can be an integer C(+ [w | d | h | m | s]) (e.g. C(+32w1d2h)). ```
Add a `required_together` section
~None/ is used here in Ansible 2.5.3 and other people saw this, too: #40483
Does this really need to be a global? Can it not be a property on the `VarsModule` instead>
~~strip line before matching?~~ nvmd, already in code higher up
```suggestion default: {'type': 'org.graylog2.indexer.rotation.strategies.TimeBasedRotationStrategyConfig', 'rotation_period': 'P1D'} type: dict ```
Same - please use `len`
```python if match: current_config['format_welf_host'] = match.group(1) continue ``` no need to proceed to other checks when you find a match do it for all match check
I would expect the arg name here to be 'failed_conditional' based on the names in FailedConditionsError and the 'self.failed_conditional = conditional' line. But I don't really understand how it's used, so that may not make sense.
most of these should not be states but individual toggles.
"read mails" and do what with them? Here again, I would like to see use cases.
```suggestion return AGENT_INFO_API_MAP.get(info_key, info_key) ```
typo: exists -> exist
What do you think about changing this option name from `key` to `key_path`? If it is just `key`, I would expect to be able to put the key itself in here, and not a path to the keyfile.
Not sure this part is complete, you may want to be checking for `if 'not found' in e.message: ....` or similar instead of just re-raising.
This is doing the right thing but I think it can be consolidated a bit. First, it should be able to be indented so it falls under the conditional from line 3156. I see no reason why these commands should be run if the user account does not exist or the state is set to `absent`. Once indented, these two chunks of code can be streamlined. ```python # deal with password expiration for attr in 'min', 'max': if getattr(user, 'password_expire_%s' % attr) is not None: (rc, out, err) = getattr(user, 'set_password_expire_%s' % attr)() if rc is not None: if rc != 0: module.fail_json(name=user.name, msg=err, rc=rc) else: result['changed'] = True ```
Instead of nesting, use `valold != valnew and realrepo['name'] != repocmp['name']` clause here.
```suggestion binary_path = module.get_bin_path('virsh', required=True) ```
`network` variable is extraneous, simply `return n` (`network` could be used instead of `n`) when the condition is true: ```python def get_existing_network(self): for network in self.client.networks(): if n['Name'] == self.parameters.network_name or n['Id'] == self.parameters.network_name: return network ```
No need to repeat the module name: `Sends notifications to U(http://your.mattermost.url) via the Incoming WebHook integration`
> bcoca> alikins: in most cases we don't add keys when they are not detected, not just virtualization (which we also need to change into lists instead of fixed values) > <bcoca> ^ we either change the behaviour to always populate all keys or keep as is, we should not change just for one set of keys > <bcoca> it would be nice to be consistent one way or the other Going by that, I'd suggest the base get_virtual_facts is ``` python def get_virtual_facts(self): pass ``` But as you mention, that would change behavior. So pr as is LGTM to me, we can change the behavior later.
I question whether this should be an arg for `Templar`. Just a thought, not a requirement. Although that could make it harder to use.
I just realized this can be simplified, although I can also see why you might want to keep it as-is: ```suggestion if sys.version_info < (3, 7): ```
Trailing dot required. I know, quite pedantic rules and all.
typo: exists -> exist
@cazorla19 It seems like you still need to remove this line.
maybe just one warning line? ``` python varname_conflicts = varnames.intersection(_RESERVED_NAMES) if varname_conflicts: display.warning('Found variables using reserved names: %s' % ','.join(sorted(varname_conflicts))) ``` Or is the one warning per var so that the warning duplicate detector catches them? If it is for warning de-duping, should each play get a fresh set of warnings or just one globally for each varname? (ie, include the play info in the warning msg...)
Using e.message causes exception handling failure on python3. I deleted my cluster mid-call to get an example of this: ``` The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_4fesqkxe/ansible_module_elasticache_facts.py", line 286, in get_elasticache_clusters tags = get_elasticache_tags_with_backoff(client, arn) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_4fesqkxe/ansible_modlib.zip/ansible/module_utils/cloud.py", line 154, in retry_func File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_4fesqkxe/ansible_module_elasticache_facts.py", line 252, in get_elasticache_tags_with_backoff return client.list_tags_for_resource(ResourceName=cluster_id)['TagList'] File "/Users/shertel/Workspace/ansible/venv/python3.5.2/lib/python3.5/site-packages/botocore/client.py", line 312, in _api_call return self._make_api_call(operation_name, kwargs) File "/Users/shertel/Workspace/ansible/venv/python3.5.2/lib/python3.5/site-packages/botocore/client.py", line 601, in _make_api_call raise error_class(parsed_response, operation_name) botocore.errorfactory.CacheClusterNotFoundFault: An error occurred (CacheClusterNotFound) when calling the ListTagsForResource operation: shertel-ec-0001-001 is either not present or not available During handling of the above exception, another exception occurred: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_4fesqkxe/ansible_module_elasticache_facts.py", line 319, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_4fesqkxe/ansible_module_elasticache_facts.py", line 315, in main module.exit_json(elasticache_clusters=get_elasticache_clusters(client, module, region)) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_4fesqkxe/ansible_module_elasticache_facts.py", line 288, in get_elasticache_clusters module.fail_json(msg="Couldn't get tags for cluster %s: %s" % (cluster['cache_cluster_id'], e.message), AttributeError: 'CacheClusterNotFoundFault' object has no attribute 'message' ``` Another reason to use AnsibleAWSModule and move toward [smart exception handling](https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/aws/core.py#L124-L127).
1. I think it would make sense to pass the error message on. This can help a lot debugging when it doesn't work. 2. There might be other errors, for example when docker is not in swarm mode. In general, `client.nodes.list()` raises exceptions of type `docker.errors.APIError`.
```suggestion self._module.fail_json(msg=("An error occurred trying to get the ADOM Lock Info. Error: " + to_text(resp_obj))) ```
I think, it is better to be imperative and ask the user to fix this in a certain way. Like adding "Please set it to non-empty string" or so. It is good UX to be user-friendly and announce the expectations.
Not sure what exceptions could happen, but it may be easier for the end-user to debug if the exception is being reported to. ```python except: e = get_exception() module.fail_json(msg='Error connecting device. %s' % e) ```
Are you sure it's still working when there's no passphrase ? In other words I don't think we should add the command line option `-passin` if there's no passphrase.
There is no need for the `else:` and indentation since the previous block returns. Will make for a better diff as well.
I'd avoid reformatting the code in a pr like this, formatting is pretty subjective and this is not related to your change. If you're adamant about the formatting please submit a separate pr.
Looks like defining args is missing in the fetch_file method.
For integers please: use `type='int` remove the `isdigit` check from `check_params`
IMHO this statement is hard to read. Woul rewrite to simple if else and for loop.
Add `no_log=True` in argspec for password related options
If both team and organization is specified, then I would think we would filter the team by both, and remove the organization from params. This is for uniqueness (not sure if we've really dealt with that in other cases). Note: team is only valid on creation.
blank line before this line
This still has Peters name on it
```suggestion - List of IP configurations. ```
Oops.... When you were talking about this yesterday, I thought you were going to change the return value to be a dict rather than passing in a dict. Mea culpa. I just read what you said you were planning to do wrong. I don't think operating by side effect, is the best way to write this, especially when we have a side effect and returning a value from the function. Since we're under time pressure I could see doing it this way for 2.9.x but I think it should get changed to being the return value in devel. (Unless it's simple to take what @mattclay did to identify the locations that need to be updated and then use a dist instead of a tuple for all of those).
```suggestion - "C(permit-user-rc): Allows execution of C(~/.ssh/rc) by sshd." ```
This file is not required
Rather than just use boto3 for tagging, might just be worth moving to boto3 as a whole, particularly as that avoids the need for the boto3 sts connection (as boto3's create_table returns a TableArn field)
Why are we naming this `winlicense`? I would rather go for `ansible_os_license_edition`, `ansible_os_license_channel` and `ansible_os_license_status`.
No need to repeat the module name `Runs one or more commands on remote devices running VyOS.`
we rand into this previously, look at the history of `facts/timeout.py`
Since this `int()` call is no longer inside a `try` `except`, we now get a stack trace if the checksum is an invalid base 16 value. ``` ValueError: invalid literal for int() with base 16: '541a1ef5373be3dc49fc542fd9a65177b664aec01c8d8608f99e6ec95577d8ci' ``` ```suggestion try: int(checksum, 16) except ValueError: module.fail_json(msg='The checksum format is invalid', **result) ```
add aliases like ``` aliases: ['repo'] ```
Is it worth snake_casing the return results to be more ansiblish (not sure if snake_case copes with DBCluster or converts it to d_b_cluster!)
Wrap `no`, `yes`, `^`, and `contains` in `C()` so they are code formatted in the HTML docs.
I would put the `supports_check_mode=True,` on the next line.
I think that `enable` indicates that this option can only enable the repoview and not delete it, but it looks like all of the code will still work to remove it as well (and it should). Looking at other modules, the phrasing is more often along the lines of `Whether to generate repoview files` or `Manage distributor repoview property`
lib/ansible/modules/packaging/os/yum.py:47:161: E501 line too long (221 > 160 characters)
you should handle the cases where it is a list/dict/other and return an error.
added check mode and check for empty banner as this is unexpected --> use case state=absent ~~~python if not module.params['banner']: module.fail_json(msg='Invalid MOTD banner given') if not module.check_mode: array.set(banner=module.params['banner']) changed = True ~~~
I made i mistake in the original code here already. Line must be ``` python self._fail('login', info['msg']) ```
ð to not needing this
```suggestion deps = {name: {'version': version} for name, version in dependencies.items()} ```
`distutils.version.LooseVersion` [is only broken](https://bugs.python.org/issue14894) when tested version contains a letter. `firewalld` Python module version never used a letter (I checked with `git log -G'^Version: *' -p firewalld.spec |grep 'Version:'`). ``` $ python3.7 Python 3.7.0b3 (default, Mar 30 2018, 04:35:22) >>> from distutils.version import LooseVersion >>> LooseVersion("10.1.1") > LooseVersion("2.1.1") True >>> "10.1.1" > "2.1.1" False ```
I would not add .service to all examples
Does this one need to be quoted? (not sure, but don't think so)
No need to quote most of these valuev in the examples unless they are needed. We try to avoid doing this for the examples.
```suggestion version_added: 2.10 ``` 2.9 was frozen and branched this week.
Unfortunately the ansible 2.8 train left the station.
`required=False` is not required
When using pytest, create top-level functions without using a class.
Blame my `black` settings.
Should we classify all `*.md` and `*.rst` files at the root as needing only `minimal` instead of specific ones? That's what we do for ansible-base: https://github.com/ansible/ansible/blob/a51a6f4a259b45593c3f803737c6d5d847258a83/test/lib/ansible_test/_internal/classification.py#L891-L892
The interface of __present and __bulk_present work differently. One is passing the result dict, the other is setting it as a global variable. I think you should stick to one way of working to make it easier to understand what's going on.
If you want to have this as a new paragraph, you should add `-` at the beginning. The same for the formatting of the description of the `size` option bellow.
We could cut down on the iterations by using sets to determine if an option is not in the choices. ``` invalid = set(param[k]).difference(choices) if invalid: # create message using results of invalid ``` ``` >>> set(['alpha', 'omega']).difference([ 'alpha', 'beta', 'gamma' ]) set(['omega']) ```
same for these 2, though in diff from
@bcoca those are 2 different things. `role` deduplication, vs `IncludedFile` deduplication. We "dedupe" `IncludedFile` due to many hosts including the same file, so we squash them into 1 object. So it's a different mechanism. And the means in which we dedupe or squash `IncludedFile` depends on `args` on in this case `include_args`. So if we `.pop` them, then those args cannot be used for deduping. Consider the example of individual hosts using a different `vars_from`. Right now we would squash all of those hosts onto a single `IncludedFile` that didn't account for `vars_from`. This seems like the right change to me.
Two things to change here: * Use ansible.module_utils._text.to_text() instead of .decode(). * Catch the UnicodeError and give a better error message. Maybe something like this: ``` python from ansible.module_utils._text import to_native, to_text [...] try: remote_md5 = to_text(self._getContent(remote_url + '.md5', "Failed to retrieve MD5", False), errors='strict') except UnicodeError as e: return "Cannot retrieve a valid md5 from %s: %s" % (remote_url, to_native(e)) ```
Please update this to your name
@sivel's example looks correct. I have a config.rst floating around in my ansible tree (I guess built by some part of the docs build), which contains: ```.rst .. _FACTS_MODULES: FACTS_MODULES ------------- ```
I'd like to see here something like a `ResourceWarning` reported using the default Python warnings infra.
If we make bind_mounts a set, then this becomes: ``` python bind_mounts.add(fields[0]) ```
```suggestion - The Jinja2 expressions are calculated and assigned to the variables. ```
```suggestion - Number of max dms. ```
last loaded wins, but iirc, we reverse search on handlers list
the issue I see and you try to solve is not empty but handle a none value. IMHO this could be simplified with: ~~~python for role_req in file_requirements.get('roles') or []: ~~~ to handle any falsy case: None and empty
I'm... surprised sanity doesn't yell at you for this? I would rather have the line break anywhere except in the middle of one of the tests. I think sanity has opinions on whether the `and` should be at the end or the beginning, but whichever is the right one, I'd prefer to see that.
There is existing bug in this code. iosxr netconf connection plugin's 'get' method does not have any non-keyword argument. so here probably passing a keyword arg might not work. 'conn.get(filter=filter, remove_ns=True)'
In this case quotes are not required, but it is not a sin ;-)
Could you make the choices match this more up-to-date list: https://github.com/ansible/awx/blob/devel/awx/main/models/inventory.py#L971 Namely, let's *add* `rhv` and `tower`? `azure` support was recently removed from awx, but let's leave it in for backwards compatibility with older Towers.
suggestion: return None (more readable)
In [Java-land](https://docs.oracle.com/javase/7/docs/technotes/tools/windows/keytool.html) `password` would be known as `storepass`, the password to access the actual keystore. `in_password` would be called `keypass` which is the pass for the individual cert _inside_ the keystore. Just in case you wanted to follow Java convention for this addition
Just a small hint of "ansible magic": I would add an alisas e.g `aliases=['id']`. Ansible allows to use a single item for a list type: ~~~yaml - one_image_facts: ids: 124 ~~~ with an alias `id` it makes perfect sense: ~~~yaml - one_image_facts: id: 124 ~~~ also update the docs accordenly: ~~~diff ids: description: - A list of images ids whose facts you want to gather + aliases: [ id ] ~~~
nit: capital List at start of sentence
Please modify these generic description statements.
```suggestion - The module must be called from within the Azure VM instance itself. - This module fetches data from the instance metadata endpoint in Azure as per U(https://azure.microsoft.com/en-us/blog/announcing-general-availability-of-azure-instance-metadata-service/). ```
Ah, that makes sense! I forgot about `self.project.up()` also removing them...
There should be a copyright line in here. It can be as simple as ``` # Copyright 2017 Ansible Project ``` if you want. For any legal questions, we would have to use the git log to find out the real copyright holders so a catchall like above is okay.
I didn't know if it was intentional to output an empty dict. I don't think it will cause issues, just seems like it shouldn't be doing that.
These are the values suggested by docker-machine to be used to contact the VMs / machines via SSH, so in general I don't think it makes sense to use other values.
I don't think you ever return this.
Most of the time if you want a list and you're using map() you can convert to a list comprehension for a more pythonic (and faster, although that's almost never an issue) implementation: ``` python current_rules = [(x['priority'], x['rule_name']) for x in get_rules(api, name)] ```
Note: Most of the time, isinstance should use something from collections instead of the type. In this instance, that should be: ``` if isinstance(value, Mapping): ``` https://docs.python.org/2/library/collections.html#collections-abstract-base-classes
Parameters that are not required, don't need a `required: False`, also `default: null` is not needed here. This is implied.
```suggestion description: List of retrieved objects, the object is a dictionary containing the `I(properties)` specified. ```
This should have a type of 'json'
As far as I see `GIT_SSH_COMMAND` was only introduced in git 2.3, so this change will not fix the issue on many systems, including rhel7.
needs to be b_basedir + /collections, but the -P option should already handle this case
should probably have `choices` specified if possible
```suggestion - name: Remove fileset OpenGL.OpenGL_X.rte.soft ```
yeah, it makes sense now, i was just being dumb, modules doing right thing, async_wrapper is acting as proxy but not intelligently so it is passing the final artifact, which we have to reprocess again
Just checked, ec2_asg_facts is the only other module that references 'ar_ns', and that has code that copes either way.
Note, on another issue, other members of the core team recently talked about wanting retries to be user settable (so in this case, probably a parameter to the action plugin). I'm not sure if they would consider this something to do in this case or not but you probably should ask for guidance. Since this was already retrying without user control over the number of times, I'm going to merge this backport, though.
no, the exception is around this code: `os.rename(b_src, b_dest)` as the original exception on this 'downward path', checking if we are improperly resetting b_src between that and this line
undefined var 'variable' s/variable/data
This should be your name
```suggestion params=dict(length=password.DEFAULT_LENGTH, encrypt=None, chars=DEFAULT_CHARS, seed='1'), ```
VyOS -> EdgeOS
FYI when you accept the suggested changes using GitHub UI, it preserves the authorship of the patch.
This condition is no need here
we can remove these 2 lines, by now no one remembers it used to be hardcoded and it is whitelisted by default (also docs explain this in main page).
Please add `type="str"`
this block is already in module_utils i don't think it is necessary to duplicate code. 86..91 take a look on module_utils/influxdb.py
```suggestion required: true type: str choices: [ absent, defined, present ] ```
Any specific reason for this change? I would prefer `os.path.join` instead.
I meant `from ansible.module_utils.vmware import find_cluster_by_name`
You should catch the error twice to produce an error message suitable for each query
`get_depends` try to read `other-requirements.txt` too.
In fact, the good question is: with your contrib, do older versions still work or will it break compatibility ? (ie. Ansible 2.8 + Flatpak < 1.2.0) If so, we need to be able to handle the situation (like you did in #51482)
Too bad we can't just leverage [findByInventoryPath ](https://www.vmware.com/support/orchestrator/doc/vro-vsphere60-api/html/VcSearchIndex.html#findByInventoryPath) here instead of rolling our own.
Update the metadata too.
Remove this line.
Maybe I should have used ```suggestion for option in self.module.argument_spec: ``` :-)
```suggestion fileh = open(self.b_cron_file, 'wb') ```
I see, I missed this in 577427b1c20dd27bdcd42e417d9ffccfb669b374 that the origin key is also going to be returned as we do not delete the key after "renaming" it. This is going to be done with all the current modules, so every module would have a new return My intention was, to just rename the key to something "simple": *id*. Let's delete the previous key in resource in module_utils/vultr.py once renamed, ok? ~~~patch diff --git a/lib/ansible/module_utils/vultr.py b/lib/ansible/module_utils/vultr.py index 0dd185c73c..f52052502c 100644 --- a/lib/ansible/module_utils/vultr.py +++ b/lib/ansible/module_utils/vultr.py @@ -238,6 +238,7 @@ class Vultr: if 'key' in config: resource[config['key']] = resource[search_key] + del resource[search_key] return resource ~~~
I think you should only do this whole `if` if `mode == 'persist_only'`.
New modules only go into `devel`, so this will only be available in Ansible 2.4
Combine line 99 with this line: ```suggestion - May not be used with C(backrefs) or C(insertafter). ```
As it should be handled as string, I would quote the version e.g. `version_added: "2.3"`
I think so too. Such as the `state: show` on line 105.
`mtu` should be `int`
shouldn't this just be `module.params['command']`? (without the second `.`)
should probably have `requires: [ psexec ]`
Why do you have a different code path here? The non-check line does the same but provides a bit more info, so just using that in the check case should be fine I'd say.
I don't think this works correctly. I think you also need to remove the double quotes inside of the format string.
`If the value is C(all), apply configuration to all interfaces.`
Ah, my bad. This doesn't work on fixtures.
While you are at it, maybe fix that TODO as well. I have no environment to test that properly.
```suggestion except Exception: ```
this is not really correct, the ansbile.cfg entry ONLY affects `setup` when it is automatically called as part of `gather_facts`. When using it directly, that setting is ignored.
s/'file_manifest'/'file_manifest_file' https://github.com/ansible/galaxy/blob/devel/galaxy/importer/models.py#L301 https://github.com/ansible/mazer/blob/devel/ansible_galaxy/models/collection_artifact_manifest.py#L21
The description is not clear, I'd rephrase: "This parameter can be used only when removing a data center. If I(True) data center will be forcibly removed, even though it contains some clusters. Default value is I(False), which means that only empty data center can be removed."
Looks like this was missed in the recent commit, should be `test_parameters`.
Causes unhelpful error if get() returns None ``` $ cat nmap_inv.yml plugin: nmap $ ansible-inventory -i nmap_inv.yml --graph ERROR! Invalid settings supplied for address: argument of type 'NoneType' is not iterable ```
```suggestion if device_type and device_type in list(self.nic_device_type.keys()): ```
So `systems_uri` can be a scalar or a list. Is that necessary to preserve backward compatibility? If we could have `systems_uri` always being a list, that would let us also reduce these two loops (L137 & L 143) into a single loop (or perhaps better list comprehension).
```suggestion - Windows web apps support C(java), C(net_framework), C(php), C(python), and C(node). ```
```suggestion version_added: '2.10' ```
I see you added del_meta to this function to be more similar to delete_user(), but since it is never used anywhere (delete_user() doesn't seem to do anything with it either), I feel like we shouldn't add it. It will also make your diff small and tidy. :)
missing space between `,` and `and`
ssh is for ssh/paramiko connection plugins, you might want to use kubernetes here
User should be deleted by sending a DELETE request (reference: http://redfish.dmtf.org/schemas/DSP0266_1.5.0.html#delete-delete-a-id-delete-delete-a-).
As per the discussed Netconf proposal https://github.com/ansible/proposals/issues/104 The name of the operation is added as part of `rpc` option and the XML payload as `content` option. In this case, the entire XML is added as part of `request` option. IMO adding XML payload as part of `content` options makes it reusable across operations using Ansible variables and operation as part of `rpc` option is more readable in the playbook
@rbywater that would be perfect, thanks!
I suspect there is a subtle bug lurking here. If I generate a dhparam file, and then later changes permissions, the return will prevent the permission to be applied, since that's done at the end of the function and only if we did generate a param.
This is plain weird. You would expect that the content of the parameter works for present and absent.
`time.monotonic` could be used when [available](https://docs.python.org/3/library/time.html#time.monotonic).
What about to separate the `if` blocks here as well as you did above? The same bellow.
```suggestion required: false type: str ```
This was due to an environment issue on my end, so disregard.
``` ...type='int', default=1), ```
`Undefined variable 'warnings'`
```suggestion disk_result = {} ```
don't raise any exception, use `self.module.fail_json()`
Why not just make this one call? e.g.: ``` cmds = [{'command': <...>}, {'command': <...>}] default_data = run_commands(module, cmds) ```
You don't need to state default=None as this is the default value.
Imported but unused
Note: I was thinking more along the lines of: ``` python # Note: strings are Sequences and all sorts of things (including dictionaries and strings) are iterables. # So if differentiating between these, it may make a big difference the order that the code checks it in. # To differentiate those mentioned types, check in this order: [string_types, Sequences, Mappings, Iterables] try: from collections import iterable, Sequence, Mapping except ImportError: # python2.5 Sequence = (list, tuple) Mapping = (dict,) Iterable = (list, tuple, map) ``` Thinking about this even more, I think you can probably get rid of SEQUENCETYPE altogether as long as the places where it should accept a KeyView should be taking Iterable instead (KeyView is actually an iterable but not a Sequence. I think the current code is abusing that.)
I wouldn't do this, why no just write **module.params** below. It seems an needless abstraction with little merit, and more confusion.
That does make sense. Thanks.
Dict can be defined outside try block
please add spaces around '=='
```suggestion choices: ["absent", "present"] ```
Please put this on a single line. Lines can be 159 characters wide.
if you want to skip the first item (why? please explain in the code) ```python for peer_server in peers_servers_config[1:]: ```
mandatory msg is missing
reading the docs, I don't quite understand how slurp avoids the problem of looking up on the managed node vs. the control node, whereas lookup doesn't.
There's no need to do `to_text` here, `re.sub` takes `str` as argument, bytes or text
It looks like realm_params is a dict here but above it's a list
Please add `requirements:` for `cfn_flip` Example: https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/consul_kv.py#L20-L21
Needs a period at end of the description
Not sure why we've wrapped here and 1118, decreasing readability, while not wrapping longer lines.
ansible.compat.six has gone away in devel. Now you can use ansible.module_utils.six everywhere.
Other than this, looks good.
I would like this hunk in a separate PR.
Please keep this as it was before. Also, please get rid of the next line.
It'd also be good to verify the response code is 201 (which I assume it actually returns). If the plugin is not installed, it will still return a 404.
This won't cover `UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS` since it's checking that the string ends with "ROLLBACK_COMPLETE" which is intentional. The cleanup in progress state isn't an end condition.
While we're at it: ```suggestion - "wipefs (when I(state) is C(absent))" ```
Although it probably works passing `None` instead of "nothing" for the no force case makes me a bit nervous :)
I think this should instead be `is not None`, since there are optional parameters that are neither true or false, such as `iops`, `size`, and `license_model`.
each call to the AWS API should be wrapped in a `try...except`, such as ```python try: subnets_by_id = describe_subnets_with_backoff(connection, SubnetIds=subnet_ids, Filters=filters) except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e: module.fail_json_aws(e, msg="Couldn't find subnet with id %s" % subnet_ids) ```
If you're going to make furhter changes, I'd also change this to 'rb' for potential forward compat.
There is a `requirements:` docs key where you can list these as well, and optionally include a specific version https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/aws_s3_bucket_facts.py#L17
Limiting this to ecdsa means the next key type that has different sub types will require code changes in Ansible. I could see going the other way: blacklist the current ones that we know don't need the subtype. If there are others later they can be blacklisted to save space in hostvars, assuming that's the reason to limit it.
Might be more likely for code to stay in sync if we derive this from ALLOWED_FACT_SUBSET. Maybe like this: ``` python if 'all' in gather_subset: gather_subset = ALLOWED_FACT_SUBSET.difference(('all',)) ```
@acozine Check now
we should do the same here
Please have an empty line between the first line and the long description. You'll also want to dedent the paragraph part.
You really need to update the paragraph as well. While the beginning is identical, the ending is not.
This does not need to be wrapped.
also, this script is on it's way out, use the foreman inventory plugin instead
No, it should be `True` Edit: this option should default to true to be consistent with current behavior and good security practice.
To follow the conventions of `shell` and `command`, this should instead be `executable`
``` deprecated: removed_in: 2.9 why: Uses deprecated API calls alternative: Use M(panos_security_rule) instead. ``
This should not be set.
https://api.ovh.com/console/#/ip/%7Bip%7D/task#GET status may be in: - cancelled - customerError - doing - **done** - init - ovhError - todo When a task has the status _done_, the task is completed on the ovh backend. I use this when I write deployment scripts and the task status from the api reflects the real ip state. This should be handled by this module : the module exit only when we are 100% sure the ip has moved to its new location. I am sorry I insist, and thanks for your work
typo: acomputer -> a computer
Seems the description is not align with the code
Add code to check for this and do `fail_json` if needed just after `argument_spec`
Just to nitpick, I would have indented this one as the others, and have a trailing dot. But those are not showstoppers.
Are location/version/type/auto-upgrade things that should be checked for changes? Not sure which (if any) are updateable...
This looks right to me. I ran a `git grep -i user_agent` and found a few different conventions, but this seems to be the most popular in Ansible. ``` lib/ansible/module_utils/ec2.py: config.user_agent_extra = 'Ansible/{0}'.format(__version__) lib/ansible/plugins/inventory/azure_rm.py: self.add_user_agent('ansible-dynamic-inventory/{0}'.format(release.__version__)) ``` ... ``` Ansible-gcdns/%s Ansible-gce_inventory_plugin/%s ansible-healthcheck/%s ansible-target_proxy/%s ``` etc.. Sometimes the module provider name is included, sometimes it is not. Sometimes it just focuses on the feature of Ansible being provided.
This is wrong. `is` operator is an identity comparison. Under the hood it's `id(len(terms)) == id(0)`, which effectively compares the addresses of two integers in memory in this case. It only works here because cpython caches some amount of integers for later reuse. Proper use of it would be `len(terms) == 0`, which loosely corresponds to `len(terms).__eq__(0)`. Or you could do `if not len(terms)`, which would work because `not 0` is `True` (because `bool(0) is False`). So the rule of thumb is to always use `is` for comparison with `None`, `True` or `False`. In other cases use numeric comparisons (`==`, `!=`, `>`, `<=` etc.), unless specifically needed. https://docs.python.org/3/reference/datamodel.html https://stackoverflow.com/a/133024/595220
We are moving to the use of lists, because changes to the author list only affects the new line. The same reason we prefer trailing comma's in multi-line lists or dicts in python. For new modules it's better to start off with lists.
Change to `class Ec2EcsInstance(object):`
```suggestion - 'TODO: Add caching support.' ```
Not consistent with other modules **hostname**, but also not consistent with the implementation.
If something on the managed machine messes up, this could be in some other encoding. Also, there's always the chance that the way the client machine handles non-utf-8 bytes will lead to those bytes coming through unescaped. Basically, the connection plugin is a boundary between Ansible and another system. So we need to be a little more paranoid in sanitizing our data in this area.
I ran this PR against multiple platforms and image versions and the results look good.
Use ``` from ansible.module_utils.ipa import ipa_argument_spec ``` for common parameters like ipa_host, ipa_prot etc.,
no need to specify 'string'
Declaring a variable in only one of the code branches is dangerous because it's hard to maintain accessing it under the same conditions in other places which can become a real bug during refactoring. ```suggestion collections_in_paths = {} ```
I don't know anything about this file or this part of the docs build but Ansible 2.2 seems really old
The library can make use of it (and reports deprecation warnings), but you are right, we shouldn't be introducing this in new modules. The older module had some legacy where we didn't want to break playbooks written before we upstreamed those modules.
```suggestion author: - "Nate Kingsley (@nate-kingsley)" - "Ninjiner (@Ninjiner)" ```
215-216 can be changed into `elif self.state == 'present':`
or you can update the 'command warnings' setting in config to do so globally
These environment variable names should probably be `RAX_TOKEN` and `RAX_TENANT_NAME` to match the existing `RAX_` prefixed environment variables used by this module_util. Also note the change from `PROJECT` to `TENANT` to match the terminology used in the API docs.
_match() checks for a match only at the beginning of the string_: you could remove `^` from the pattern.
Typo, should be email
No we can not simulate faults on simulator. Real ESXi is source of this error replication.
Remove this altogether please
Another test that I would move into version specific classes with pytest skipifs
Make author a list, and drop the quotes.
+1 for using `AnsibleUndefined`.
Technically, it's not a stack data structure, so it's better to pick other name, which also reflects the purpose of it. Something like `single_package` or `package_parts` might be better.
Probably copy/paste, but don't see DHCPd relation :)
Here's something wrong. If you want to continue a line, you shouldn't start it with a dash.
I would prefer to test for falsy: ~~~python if not fwgroups_list: return [] ~~~
I'm sad you have to have this try-except here, but it seems necessary since shade isn't currently normalizing recordset return structures, which makes me even sadder.
Does Fortigate support different levels of user privileges? If so please state what privileges this user needs to have. e.g "Specifies username for Fortigate connection with admin privileges"
Formatting doesn't look right here
```suggestion - Role Definition ID. ```
s/write target file {0}/put_file to {0}/
I know the other options don't have them but a description entry should always be a sentence and end with `.`
Please follow the guidance of PEP257 to write nice docstrings
I think only personal accounts have been used for placebo recordings thus far.
Import specific things which are required rather than *
With AnsibleAWSModule everything up to here can be replaced by `client = module.client('lightsail')`
Use shlex_quote when available as I've done here: https://github.com/ansible/ansible/pull/22162/files#diff-b7a7806779d4620266b7d9bb4c4b9862R300
`e` is not used
+1 So it seems that we must just load `Templar` at the right places, that it doesn't make a difference.
I was always surprised to see this `yes/true` flag value that could cause some sort of confusion in how to set boolean flag. Happy to see that it's moving to a clearer definition.
I would rephrase this as "Only set this to yes when you want private information about this key to leave the remote machine", the way it's written now I read "don't" instead of "do want"
Just ```suggestion else: ```
Missing full stop.
Sure, that sounds sensible.
Also say, if not specified C(INFINIBOX_PASSWORD) will be used, or C(~/.infinidat/infinisdk.ini).
Perhaps setting the expiration needs to be in its own method since the output of setting both min and max should be aggregated. Something like this may work: ```patch diff --git lib/ansible/modules/user.py lib/ansible/modules/user.py index f8cd675bbf..775bc9a244 100644 --- lib/ansible/modules/user.py +++ lib/ansible/modules/user.py @@ -1046,6 +1046,30 @@ class User(object): else: return self.execute_command(cmd) + def set_password_expiration(self): + rc, out, err = (None, '', '') + + if self.password_expire_max is not None: + _rc, _out, _err = self.set_password_expire_max() + if _rc is not None: + rc = _rc + + out += _out + err += _err + + if self.password_expire_min is not None: + _rc, _out, _err = self.set_password_expire_min() + if _rc is not None: + rc = _rc + + out += _out + err += _err + + if rc not in [None, 0]: + self.module.fail_json(name=self.name, msg=err, rc=rc) + + return rc, out, err + def user_password(self): passwd = '' expires = '' @@ -3192,20 +3216,9 @@ def main(): result['ssh_key_file'] = user.get_ssh_key_path() result['ssh_public_key'] = user.get_ssh_public_key() - def _handle_set_password_expire_return(command_return): - (rc, out, err) = command_return - if rc is None: - pass # target state reached, nothing to do - else: - if rc != 0: - module.fail_json(name=user.name, msg=err, rc=rc) - else: - result['changed'] = True - - if user.password_expire_max is not None: - _handle_set_password_expire_return(user.set_password_expire_max()) - if user.password_expire_min is not None: - _handle_set_password_expire_return(user.set_password_expire_min()) + rc, out, err = user.set_password_expiration() + if rc is not None: + result['changed'] = True module.exit_json(**result) ```
[PEP 8](https://www.python.org/dev/peps/pep-0008/#pet-peeves): Missing space after comma.
instead of `os.getenv` use ``` fallback=(env_fallback, ['DO_ACCESS_KEY_ID']) ``` You will need to import as `from ansible.module_utils.basic import env_fallback`
It would better to catch botocore.exceptions.ClientError instead of Exception.
```suggestion self._lsblk_bin = self._module.get_bin_path('lsblk', True) ```
```suggestion - This module can be used to configure, enable/disable SR-IOV functions on ESXi host. ```
can remove this `else:`
```suggestion # The module should fail if a symbolic link is specified as a 'path' value. ```
This could be `elif`.
This is not how it is used, the option used is `--diff`.
```suggestion version_added: 2.10 ```
```suggestion except (AttributeError, KeyError): ```
What is the reason for adding keys here? The keys needed could be chosen after using the filter.
...this line and the next four should be gone. These lines are from the old version.
Please remove `force:` as the message says `match: none` is the correct way of doing this
Since we already have a `prefix_filter`, it may be better to use `instance_filters` as a general search term: ``` for instance_filter in instance_filters: if instance_filter in vm.name: ```
more 'note to self' is that compose options should be in an doc fragment
No need for this.
```suggestion except Exception as err: ```
I'd probably prefer a single assignment with a conditional only for the argument. It would probably look cleaner this way: ```suggestion is_openbsd = u"OpenBSD" == to_text(platform.system(), errors='surrogate_or_strict') bcrypt_crypt_id = '2b' if is_openbsd else '2a' algorithms['bcrypt'] = algo(crypt_id=bcrypt_crypt_id, salt_size=22, implicit_rounds=None) ```
so reread what $SHELL means .. seems i made a mistake, i assumed it was 'current shell' but it is the 'default shell', probably removing these 2 lines will fix most issues, the `else: shell = True` below should stay.
Instead of replacing `command`, why not extend it? This way it is very hard to extend this code.
This function is too complex. Could you please factor and avoid: - more than 2 level of condition - inner loop. You can probably break down the function in several small functions.
I'm wondering if the default should be https.
There was also some discussion about whether we could somehow hang the cache off the play object instead of adding the new optional args everywhere. Left as an exercise for the reader, but the new plumbing for this is the "ickiest" part of this change IMO.
Please use particular import from these modules.
Since the existing voluptuous schema defines `None` as a valid option, we should probably make the `author` function adhere to that as well. However the schema is tricky. `author: null` is allowed, however `author: [null]` is not. I think we might need something like this: ```diff diff --git a/test/lib/ansible_test/_data/sanity/validate-modules/validate_modules/schema.py b/test/lib/ansible_test/_data/sanity/validate-modules/validate_modules/schema.py index 22b1a53d11..9587b29c98 100644 --- a/test/lib/ansible_test/_data/sanity/validate-modules/validate_modules/schema.py +++ b/test/lib/ansible_test/_data/sanity/validate-modules/validate_modules/schema.py @@ -412,15 +412,21 @@ def deprecation_schema(for_collection): def author(value): + if value is None: + return value if not is_iterable(value): value = [value] for line in value: + if not isinstance(line, string_types): + continue m = author_line.search(line) if not m: raise Invalid("Invalid author") + return value + def doc_schema(module_name, for_collection=False, deprecated_module=False): ```
you could narrow this down to oserror/ioerror
if tmp is supplied we should use that, not ignore it
Usually, copyrights are listed in reverse order
I think it would be helpful to give docstrings for these functions. I just spent several minutes jumping back and forth between here and where they were being used to figure out why there were 3 now
@abadger I just checked locally and cannot reproduce your error. Besides, it's recommended to run `twine check` and not `setup.py check`.
```suggestion 'Certificate %s and private key %s do not match' % (self.path, self.privatekey_path) ```
Actually the condition should be: ```python # Convert to bytes: if len(param) > 3 and param[-3].lower() in ['k', 'm', 'g', 't', 'p']: return int(param[:-3]) * BYTES_MAP.get(param[-3:].lower(), 1) elif param.isdigit(): return int(param) * 2**10 else: raise ValueError( "Unsupported value(IEC supported): '{value}'".format(value=param) ) ```
~take no_log from task~ nvmd, task failed to template ...
```suggestion - Returns whether the node exists in docker swarm cluster. ``` I don't think it is necessary to mention `Module will fail if executed on a non-manager node` here, since you already mention `Must be executed on a host running as Swarm Manager.` in the module's description.
```suggestion - Name of stanza. ```
Yes I think you might confuse something here. This is just creating a group with one host.
```suggestion response, info = fetch_url(module=module, url=base_url, headers=json.loads(headers), method='POST', data=module.jsonify(payload)) ```
nit: it will be hard to keep these arguments up-to-date- with those from `AnsibleModule` if they ever change. Perhaps we could just have `*args, **kwargs` here and pass it to the `AnsibleModule` init call. If unsupported params are passed through, the `AnsibleModule` will fail to initialize.
That would be ideal, as long as you maintain the log entry you already have to indicate the mapping between the two. You'll need to update the `Jail` plugin so there's a separate `self.jail_friendly_name` or something similar which is used for the `host` passed to `display.vvv`, so you're able to show the iocage jail name on all the messages from the underlying `Jail` plugin.
Since we're moving imports, we might as well put the version check right after the `sys` import, since that's the only one it needs.
I see now. Quite complex.. If we want to say user he can't stop/start non-existing VM, wouldn't it be simpler to just say that(one simple condition) and instead of saying that he sent empty parameters tell him, which parameters are required(returned from backend) this would very simplify all of this and I don't think we really need this. But if you insist this is better I am ok.
```suggestion - enabled - disabled ``` Otherwise it is an action, not a state.
Same here: ```suggestion cmd.append(to_native(calendar.timegm(self.expires))) ```
Instead of calling `get_capabilities` twice in the module, maybe make it an attribute for `FactsBase` class in the `__init__` method and reuse? `self._capabilities = get_capabilities(self._module)`
```suggestion from ansible import constants as C ```
yeah, as long as you are capturing the specific exception
+1 good addition to the module_utils thank you!
IMO no need to. Each step is idempotent, we failed to reach desired state but we got closer. But mostly, it's just easier ;-)
How about adding this - ``` diff --git a/lib/ansible/modules/cloud/vmware/vmware_guest.py b/lib/ansible/modules/cloud/vmware/vmware_guest.py index 6985ca5497..f4fec7eec5 100644 --- a/lib/ansible/modules/cloud/vmware/vmware_guest.py +++ b/lib/ansible/modules/cloud/vmware/vmware_guest.py @@ -992,8 +992,24 @@ class PyVmomiHelper(PyVmomi): self.module.fail_json(msg="Please specify at least a network name or" " a VLAN name under VM network list.") - if 'name' in network and find_obj(self.content, [vim.Network], network['name']) is None: - self.module.fail_json(msg="Network '%(name)s' does not exist." % network) + if 'name' in network: + if find_obj(self.content, [vim.Network], network['name']) is None: + self.module.fail_json(msg="Network '%(name)s' does not exist." % network) + else: + if self.params.get('esxi_hostname', None): + esxi_hostname = self.select_host() + if network['name'] not in [nw.name for nw in esxi_hostname.network]: + self.module.fail_json(msg="Specified network '%s' is not associated " + "with the given ESXi hostname '%s'" % (network['name'], + self.params['esxi_hostname'])) + elif self.params.get('cluster', None): + cluster = self.cache.get_cluster(self.params['cluster']) + if network['name'] not in [nw.name for nw in cluster.network]: + self.module.fail_json(msg="Specified network '%s' is not associated" + " with the given cluster '%s'" % (network['name'], + self.params['cluster'])) ```
I think the problem with doing this on an account with no password set is that it will result in an account with _no_ password. So blindly unlocking the account is probably not a good idea. What we probably need to do is set the password to `*` if one is not provided since that effectively creates an unlocked account with no password, which is what is expected.
You don't need to have spaces at the start and the end, but you need to have a trailing comma.
Redundant since we're already in a `if not self.collection:` conditional from above. ```suggestion if not self.collection: ```
Sure, though the issue is you are supporting both present and enabled. What's the difference? Just pick one pair and use that
```suggestion disable_suffix = "If you need to use '{cmd}' because the {mod} module is insufficient you can add" \ ```
In that case, you should also remove the `sys.exit()` call around `main(sys.argv[:])` (in `docs/bin/plugin_formatter.py`, there's also no `sys.exit()` around `main()`).
Ah, that'll do it. :+1:
ð to making this an instance attribute.
For the output, would it be possible to also return these in a dictionary by ARN and name? So you'd have output along the lines of: ``` {"load_balancers": [a list like you have now], "load_balancers_by_arn": {"arn:aws:alb:....": {ALB object}}, "load_balancers_by_name": {"fooBarBalancer": {ALB object}} } ``` That would make it easier to get a particular ALB instead of users having to do list indexing and such.
This should become: ```yaml version_added: '2.4' ```
```suggestion iterator.host_not_in_inventory(host_name) ```
I hacked this up using `to_bytes` generously. I dropped the `result` list and instead appended bytes to a `b_result` bytes object. Thus, I could merely append the data to the `b_result` without any additional processing. My hack was very ugly. I can share it if you like, but it is not clean enough to be merged :P
Please add: `version_added: "2.3"`
It would be nice to see return values of the module since it will help users to plan their playbooks in advance. Not a blocker though.
it can just be else: as the type is bool. Though I would rather do: asup_details.add_new_child('is-node-in-subject', 'true' if modify.get('hostname_subject') else 'false' )
we already have that logic for warnings in core ... probably should live there
Don't add `required: false`. It is implicit.
Be sure that this fails in shippable on error. For a while we were pinned on a version of pytest where match did not work.
Since this isn't making any changes to resources, supports_check_mode is true.
An exception is raised when a value contains a non ascii caracters: ``` "msg": "'ascii' codec can't encode characters in position 64-65: ordinal not in range(128)" WARNING: The below traceback may *not* be related to the actual failure. File "/tmp/ansible_scaleway_user_data_payload_6C22vo/ansible_scaleway_user_data_payload.zip/ansible/module_utils/urls.py", line 1259, in fetch_url client_key=client_key, cookies=cookies) File "/tmp/ansible_scaleway_user_data_payload_6C22vo/ansible_scaleway_user_data_payload.zip/ansible/module_utils/urls.py", line 1162, in open_url client_cert=client_cert, client_key=client_key, cookies=cookies) File "/tmp/ansible_scaleway_user_data_payload_6C22vo/ansible_scaleway_user_data_payload.zip/ansible/module_utils/urls.py", line 1070, in open r = urllib_request.urlopen(*urlopen_args) File "/usr/lib/python2.7/urllib2.py", line 154, in urlopen return opener.open(url, data, timeout) File "/usr/lib/python2.7/urllib2.py", line 429, in open response = self._open(req, data) File "/usr/lib/python2.7/urllib2.py", line 447, in _open '_open', req) File "/usr/lib/python2.7/urllib2.py", line 407, in _call_chain result = func(*args) File "/tmp/ansible_scaleway_user_data_payload_6C22vo/ansible_scaleway_user_data_payload.zip/ansible/module_utils/urls.py", line 341, in https_open return self.do_open(CustomHTTPSConnection, req) File "/usr/lib/python2.7/urllib2.py", line 1195, in do_open h.request(req.get_method(), req.get_selector(), req.data, headers) File "/usr/lib/python2.7/httplib.py", line 1042, in request self._send_request(method, url, body, headers) File "/usr/lib/python2.7/httplib.py", line 1082, in _send_request self.endheaders(body) File "/usr/lib/python2.7/httplib.py", line 1038, in endheaders self._send_output(message_body) File "/usr/lib/python2.7/httplib.py", line 882, in _send_output self.send(msg) File "/usr/lib/python2.7/httplib.py", line 858, in send self.sock.sendall(data) File "/usr/lib/python2.7/ssl.py", line 759, in sendall v = self.send(data[count:]) File "/usr/lib/python2.7/ssl.py", line 725, in send v = self._sslobj.write(data) ```
If it's not required, you can leave out `required: false`.
(This is not a blocker; especially if this is common for AWS modules, I'm fine with keeping it as-is.)
You can remove this.
I think this can be simplified to `return current_values_categories.values()`.
unsure of why this is happening, since you are adding to ship with ansible, callbackbase should always be available
Maybe these functions should go into `module_utils/crypto`? Seem useful for CSRs and certificates (maybe even SSH keys?) too.
I'm sure this can be on one line.
this needs to be guarded and return an ansible error in the init (see consul_kv lookup and HAS_CONSUL)
@rnsc sorry for the delay, I would prefer not to implement a change then change the UI for those options in the future. The freeze isn't until the end of August, if you think you won't be able to make it let me know and I'll try to pick up where you've left off and see if we can get it in before that timeframe.
Exception too broad, use: `except ImportError:`
`Can be configured form the CLI via the C(--become) or C(-b) options`
well, the whole error block should `self.fail_with_error` - that is why it is not nested in the IF originally - by placing it in the IF here, setting the error code on L590 does not make it back to the user
Is this something we still need to specify? We dropped support for python < 2.6 several releases ago now.
Add `version_added: 2.6` to this option.
This could be simplified by by using the following when constructing `illegal_chars`: ```python ] + [struct.pack("b", i) for i in range(32)] ```
Can be removed
I don't think printing an informational message is that useful. Just `pass` here instead
why not just use the actual task? since it is already a templated version of the original task
<nod>. Yeah, so if you're going to expose that in this module (which makes sense) then you need to decide on the UI for doing that now. You don't have to implement it but you have to decide what it will be so that you don't do something now that prevents you from using it for what you want later. For instance, if you want to use value=None for seeing the default in the future, you should make it so that specifying value=None right now is an error. If you make value=None mean, "don't make any changes, just return the current value of the seeing" now then you'll need a different UI for seeing to default.
Shouldn't it be `return {}` though? Otherwise the line below will return `None`, and line 224 will fail since None is not iterable.
This needs to be a list of 2 dictionaries. ``` [{'ndmpd-authtypes': 'plaintext'}, {'ndmpd-authtypes': 'challenge'}] ```
`transform(to_list(commands))` already does this, with the bonus of not breaking if `output` is not specified in the dictionary. You should not have to change this file for this to work.
This is the version the module was added - that doesn't change.
As far as i know, you correct in those assumptions. Just worried what will happen if there is actually a subfolder with name 'Datacenters' (for instance: Datacenters/DC01/vm/IT-loads/Datacenters/London/) Still approving, as it is a corner case
yes i think it should be pulled outside but the fix will break module idempotency :( please just fix either the test or push the new module (not needed there)
could reverse the update ordering and update templar._get_filters() (or a copy...) with e.filters so that the e.filters 'wins'
Not sure if this should have changed
Trailing dots required here :)
Having a couple of commands here would be good.
I consider folding to 80 columns a bug
the value of this property is "Disabled", "Once" or "Continuous".. Maybe no need to check its value for the output
`pylxca` could be quoted or add that 'pylxca' is a Python package. ```suggestion PYLXCA_REQUIRED = "Lenovo xClarity Administrator Python Client (Python package: 'pylxca') is required for this module." ``` * [X] Done
```suggestion - "Name of rule to create or remove." ```
I'd call it `normalized_name` and would probably add some caching, so it would not be evaluated every time you access it.
Just looking at this, it could be simplified by using something like this: ``` # Create shortcuts for key in module.params.keys(): setattr(self, key, module.params[key]) ```
s/, make sure/; ensure/
urlparse will return bytes if passed bytes, text strings if passed a text string: ``` python >>> from urllib.parse import urlparse >>> urlparse('ftp://ftp.sunsite.unc.edu/')[0] 'ftp' >>> urlparse(b'ftp://ftp.sunsite.unc.edu/')[0] b'ftp' ``` So we probably want to find out what's calling this and why it is passing in a byte string on python3.
I'm a fan of keeping the similar naming convention that are used in Redis, but then I would call this parameter `config_rewrite` like the Redis command. I would also suggest adding two additional notes in the description of this parameter: * This parameter is only valid with the `command: config` * It will overwrite the whole config, which means it will flush all the current config settings of Redis, not the just the parameter being changed. I know that `CONFIG REWRITE` does that, but it's still good to mention it.
Why does this not use the `with open(...) as pkcs12_file` syntax? Should be available since Python 2.5
Since we are defaulting to `15` we can remove this `is None` check unless you think it's good to keep for sanity reasons. ```suggestion if lock_timeout < 0: ```
More than a docs change.
Only needed if true, otherwise it is assumed to be false.
@lmprice Reminder that this may need moving to common code
Default not set in argspec.
Could you keep `'MANIFEST.json'` in a var? I was hoping to extract https://github.com/ansible/ansible/blob/4a82e2c/lib/ansible/galaxy/dependency_resolution/dataclasses.py#L44 into a publicly exposed constant at some point...
Type of `src` should be `path` (advantage: `os.path.expanduser` and `os.path.expandvars` will be called automatically).
```suggestion display.warning("You specified a null environment variable value, but your shell plugin does not support unsetting environment variables.") ```
we might want to be more specific 'all characters returned by the module'
So while it's been said that this would only be python-centric code, as I suspected it is now trickling into the Jinja filter. Sequence, list, strings, the mess is even messier now :-/ Both in Ansible python and Jinja.
```suggestion pkg_version = line.partition(':')[-1].strip() ```
`cf` could be quoted (if you are willing to perform this change, first `%s` could be replaced by `%r`)
Probably better to be a more specific exception. For the rest of the module too.
I correctly encountered this error testing with `ansible-inventory` while the `linode_api4` was not installed. It was only visible with `-v`
You don't need this `if` block here, since the AnsibleModule arg handling will do it for you.
Do you need to check `rc`? If you want to simply check whether `rc == 0` (and call `module.fail_json` otherwise), add `check_rc=True` to the `module.run_command` call.
I feel like the masking behavior should be to unmask the service if it is to be started or enabled. Since `systmed` cannot start or enable a masked service, the conditional in line 437 can be removed and the masking/unmasking should always happen.
Please convert this to just a list comprehension: ```suggestion groups = [e.name for e in entities if isinstance(e, Group)] ``` Additionally, just convert to a list of names here, since you only ever need that, and not the object later.
Is this a typo? if not, `network_os` should be replaced by `Network_os` at other places as well.
Missing full stop at the end of the sentence.
the handler is still usable, ~specially if 'listen' is present or~ if they use the 'untemplated string' to call it
I would use `Python` instead of the `python`.
I would re-write to something like this: ```python def _attached_sd_service(self, storage_domain): dc_name = self._module.params['data_center'] # Find the DC, where the storage we want to remove reside: if not dc_name and self._module.params['state'] == 'absent': dcs_service = self._connection.system_service().data_centers_service() dc = search_by_attributes(dcs_service, storage=self.param('name'), status='up') if dc is None: raise Exception("Can't remove storage, because dataceneter bla bla') dc_name = dc.name attached_sds_service = self._attached_sds_service(dc_name) attached_sd_service = attached_sds_service.storage_domain_service(storage_domain.id) return attached_sd_service ```
```python if self.zone: disk_params['zones'] = [self.zone] ```
use `to_native` instead of `str` ```python from ansible.module_utils._text import to_native ... msg=to_native(e)) ```
Make this the `name:` field of the task, we like to give every example a proper name as we consider this good practice we should do it ourselves too ;-)
Sorry for the slow response, I am concerned both with pythonic implementations, speed and obfuscation combined. Creating a function named the same as the original method, by which it is hard to tell in the calling location which is happening will often lead to confusion. hasattr can also sometimes work in strange ways such as what is described in https://hynek.me/articles/hasattr/ Additionally, with hasattr you are performing the lookup multiple times, instead of just trying to use it and handle the exception. In the majority of cases, just trying to use it and handling the exception will be the faster way.
It looks like the return on this is shown as a single item (`{allowed: .... }`) when it should be `{items: [{allowed: .....}, ...]}`
Imo this makes the docs more confusing. Stating that `name` is required and the examples make the usage clear.
```suggestion - Tested on AIX 6.1 and 7.1. ```
Python 2.4/2.5 already do not work with Ansible >= 2.4
You may need to include this into https://github.com/ansible/ansible/blob/devel/MANIFEST.in
nah, just inherit lazyness ... less code means less typing and less reading
```suggestion default: True type: bool ```
Maybe it'd be worth to add FortiOS (FOS) as it's referenced later.
```suggestion - State the action to perform. Use C(update) to modify the admin-service. ```
As a user, if `mode == 'persist'`, I expect the module to make sure that it is both globally set, and written to disk. If the module sees it is globally set and won't persist it (and it hasn't been persisted before), that would be a bug for me.
plugins now require docs, as modules have for a time. See any of the other callbacks in 2.4/2.5 to use as a guide
Please move the space to the preceding line, instead of starting the new line with a space.
```suggestion state=dict(type="str", default="present", choices=["present", "absent"])) ```
This seems to only happen on second-paragraph and beyond rendering, if that helps you track it down.
You can use ```required_if``` which is built into AnsibleModule instead of having your own code. Look at https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/cloudstack/cs_storage_pool.py#L489 as a random example of using that.
The `>` is not required. You can continue a multiline string as a list-item just by doing it.
```suggestion sample: <!DOCTYPE html> ```
This doesn't seem to be py2.4 compliant ``` 2017-01-27 04:09:40 Compiling ./lib/ansible/module_utils/netconf.py ... 2017-01-27 04:09:40 File "./lib/ansible/module_utils/netconf.py", line 79 2017-01-27 04:09:40 yield 2017-01-27 04:09:40 ^ 2017-01-27 04:09:40 SyntaxError: invalid syntax ```
lib/ansible/modules/network/aos/aos_ip_pool.py:191:1: M511 - mutable default arg of type List There is only one caller of create_new_ip_pool() and it provides all three args, so subnets doesnt need to be keyword arg or optional.
Missing period at the end.
Might be worth moving the module to AnsibleAWSModule and using `fail_json_aws`
I talked with some of the team about this -- eventually I'm going to pull out the `OS_FAMILY_MAP` from `module_utils/facts/system/distribution.py` into something that we can use in situations like this (otherwise -- if we hardcode everywhere like this, we miss things like scientific linux and amazon linux which are also "RHEL-ish"). So this is fine for now, I want to get this merged, but can we add a TODO to abstract this more later? ```suggestion # TODO: Abstract OS_FAMILY_MAP from distribution facts and use the appropriate family instead. if distro in ['centos', 'rhel', 'redhat']: ```
You should use self.switch_name instead of self.module.params['switch_name']
this is not a correct fix, it fails for ```hosts: [ None, host1, host2]```
this is already inherited from super class
`content` rather than `path_content` would make more sense to me as an argument name.
"ssl" is kind of passe these days- maybe: `protocol` with `choices: [http, https]` and `vars: ansible_psrp_protocol`? Also future-proofs the config for a hypothetical "ssh" on the same connection plugin in the future...
Add a note to use a lookup in order to maintain the previous behavior.
```suggestion - If set to C(absent) and library exists, then library is deleted. ```
Rather than str you can do `type='bool'` and remove the `choices` that will allow the module to accept yes/Yes/true/True/etc Looks like that should work with your code, though you will need to check
You could of course also add it to the other path options :-)
Indentation error. Spacing is _very_ important. And while we're at it, you can move that whole block to the start of the line.
auth_login_methods should be an array (length 1 to 4)
this does not default to no/false, the 'default' default is `None`, but it is actually what we want, so correct the docs and code as i mentioned above
```suggestion # ensure we always have ansible_collections ```
I don't think this will be executed if `state` is `try-restarted`.
Please never separate open/close of file descriptors. Always use a context manager (`with`). In case of exception before `.close()` line, you'll leave a hanging file descriptor unclosed.
This doesn't seem to handle filters. Then again, filters are a hard problem because they could change the type of the variable intentionally.
No need to wrap.
This and `tmpfs_mode` should be indented two more spaces.
There is a problem when `clear_host_errors` wouldn't be found even if it existed. Consider following play: ```yaml - hosts: h1, h2 gather_facts: no tasks: - debug: - fail: when: inventory_hostname == 'h1' - block: - fail: rescue: - meta: clear_host_errors - debug: ``` `clear_host_errors` is executed in the rescue section on host `h2` so the last `debug` task should execute on both hosts but it is actually executed only on `h2`. It is because only way `PlayIterator` gets into `rescue` state is by the host being marked as `failed` which is done in the strategy. Here we only iterate through the tasks without the context strategies provide. So when `PlayIterator` gets to the `fail` task in the `block..rescue` it does not know the task fails and so it skips the `rescue` section and does not find the `clear_hosts_errors`, iterating through until it reaches the end of the play. Obviously if you replace `rescue` by `always` in the above play, it works correctly because `PlayIterator` would iterate through `always` section. Ugh, hopefully it makes sense.
this assumes that there are no other parts of the input that might require parsing, i would correct the data inserted into output. begin is wrong as it is 0, that expression seems to make more sense in the 'else'
IMHO the readability improves if all text is wrapped at the same line width. You can use tool called `flake8` for better style guidance.
Please fill in the return part as well
wouldn't \w regex be more efficient here? also unicode 'friendlier'
It doesn't state in what format.
```suggestion from ansible.module_utils.basic import AnsibleModule ``` This is not allowed.
Don't use automatic field numbering!
I also don't see why the import is needed, it's not used by the changes.
You should add real values: https://github.com/ansible/ansible/pull/47271#discussion_r226405450
Since you're rewriting the arg spec, do you mind removing the cases of `default=None`, `required=False`, and `type='str'`? Not necessary, but those are the defaults and keeping it minimal makes it easier to read.
Note that the same addition is also needed in the [keycloak_client](https://github.com/ansible/ansible/blob/6264a55cdc1ef8672b5184376d47621e5b394411/lib/ansible/modules/identity/keycloak/keycloak_client.py#L718) module.
It will also fail in case of non-existing *sub*dir
Is there any purpose in returning the state that the user already supplied ? We try to avoid this generally.
@Rahul-CSI Hi, Thanks for writing `gce_facts` module. I used this PR for my task. and found 1 error related to this line. I think you can get the disk name from `deviceName`. I had no issue with following code block. please check it out ```python if 'disks' in inst.extra: disk_names = [disk_info['deviceName'] for disk_info in sorted(inst.extra['disks'], key=lambda disk_info: disk_info['index'])] ``` Thank you.
Example is using the wrong module name, should be "vcenter_license"
```suggestion assert isinstance(wrap_var(dict(foo='bar')), dict) ```
Put the name of the feature as shown by `Get-WindowsFeature`
redundant info, suggestion to remove it here
Please add a message like: `module.fail_json('Failed while connecting to the lightsail service: %s' % e, exception=traceback.format_exc())` That way, a prettified traceback can be displayed to the user as well.
Setting default value for folder has create a lot of confusion in vmware_guest_* module, so I would recommend you to drop default value '/vm'.
Why is this `if` here? Filtering based on the id of the firmware makes little sense (it may be Dell/iDRAC specific). I checked the Lenovo system recording that I made some time ago and the filtering would remove all entries.
* I don't think we'll ever want to import setup.py as a script but if we do, we shouldn't execute any code so the guard should include more of setup.py * Explicit is better than implicit so if we do this we should use ```if``` rather than ```and```. With those two thoughts in mind, if we do put a guard in, we probably want to put the code that "does things immediately" (and is not involved in the import process) into a function and use the traditional ```if __name__ == '__main__': main_function()``` idiom to call it. (So from line 133)
Please create dicts immediately with the values you already have.
@nitzmahone no need, makedirs_safe already does that
committer should be change to community
Please add: ``` notes: - Check mode is not currently supported ```
I was happy to see that pylint also disliked this formatting for conditional statements. I know this is more a matter of taste, but we tend to do this for multiline conditional statements: ```python if self.module.params.get("location") is None and self.module.params.get("datacenter") is None: # When not given, the API will choose the location. params["location"] = None params["datacenter"] = None ``` or leave it on a single line (we accept lines up to 160 characters): ```python if self.module.params.get("location") is None and self.module.params.get("datacenter") is None: ``` And IMO this is more readable and readability is what we crave for ;-)
If both of these operations fail, it's going to be unclear what actually happened.
The question is, has this interface ever existed? if yes, then I would suggest: ~~~diff - self.connection.passwd_set(self.dn, None, self.passwd) + try: + self.connection.passwd_set(self.dn, None, self.passwd) + except AttributeError: + self.connection.passwd(self.dn, None, self.passwd) ~~~
You seem to be missing a `returncode = 255` here. As such, this PR contains a SyntaxError.
`for key, value in (doc.get('options') or {}).items():`
Curious what the behavior would be if the name/namespace/apiversion/kind were provided at the top level and here and did not match.
I think you'd have to extract the value, titlecase it and only then do the replacement. If I'm reading the docs right, this should work: ```suggestion def replace_admonition_title_cased(match_obj): return match_obj.group(0).title() + ':' t = cls._RST_ADMONITION.sub(replace_admonition_title_cased, t) # .. note:: to Note: and others ```
modules already get a debug from how main ansible was called, you should not need to add the option here
It's a good practice to also implement "check mode", which is basically putting `if not module.check_mode:` in front of any "side effects" or "target mutations" but I think this might be a separate improvement in a separate PR.
```suggestion - Whether to commit the fileset during install or not. ```
Right, so a rpm package name can *not* contain a space, but groups can. I guess you can just add a `and '@' not in name` to your conditional and that should handle it.
```suggestion 'name': {'type': 'list', 'elements': 'str'}, ```
Now you are using subboptionsn you only need `no_log` on password, & api key.
What is the point of both adding this and keeping `interface_table = None` in the `except` block? By the time we get to `if interface_table`, it will have been set to something else, and it isn't used elsewhere
same note about not needing to crate another set here with the additional note that you have to reverse the args (since my_arg_names is a set but IncludeRole.FROM_ARGS is not): ``` python for key in my_arg_names.intersection(IncludeRole.FROM_ARGS): ```
remove this file from the PR altogether please
Will's new hit song, "99 problems and I *thought* I committed a fix to some of them". Thanks!
I think it is a good idea to show that you can have multiple paragraphs (not lines).
```suggestion result.update(changed=changed) ```
`module.params['vm_id_type'] == 'vm_name'` â `module.params['vm_id_type'] == 'inventory_path'`
```suggestion - The protocol for object-group service with port-object. ```
```suggestion with open(outputfile, "a") as file: ``` It is a less intrusive change if you keep the original handle's name.
Just a thought, you could leverage get_config from [constants.py](https://github.com/ansible/ansible/blob/a0344acd78c422457b5a018b9de59e213f39dc87/lib/ansible/constants.py#L58) to allow end users to use env variables or ansible.cfg as they prefer instead of relying on a different config file. Example usage in ARA: https://github.com/openstack/ara/blob/master/ara/config.py
Please do not split that copyright line. We have 159 columns to work with !
```suggestion returned: Ansible verbosity is -vvv or greater ```
jimi-c said on slack that this is fine. We have added a new feature in 2.4 that allows specifying the structure of objects inside of a list if you want to do that. It could also be done as an update to the module. (I'm not entirely sure how to use it yet, knowledge of usage is still percolating out).
Would be nice if you accepted ARNs too ;)
```suggestion - C(is_linux), whether or not the app service plan is Linux, defaults to C(False). ```
Also, look out for netaddr docs for the cases when it'll raise the exception.
The leading underscore in the '_meta' key is missing here.
This line can be `pass # handled by AnsibleAWSModule`
The output looks like: Number of entries: 0 And you are matching with number with lower case n. This will not work. Also you are comparing a string with an int. line[-2:].strip() returns a string you have to cast it to int. line[-2:] gives last two numbers, let us say the output was '... entries: 100' this logic would return 00. Which will not work. Do a regex match for the number of entries, split everything beyond : to get the actual number of entries remaining.
```suggestion ``` Unnecessary whitespace change; this boilerplate is not supposed to have a newline between those two lines.
Correct on both counts. Please close this PR and reopen against the devel branch.
```suggestion - "A human-readable description of the secret's purpose." ```
Read https://github.com/ansible/ansible/blob/devel/CODING_GUIDELINES.md#regexes. So you can ignore `regex`
No need for this, it is extended from oneview
Ah, this is why Shippable is failing, it thinks it's a `key: value` string
In the previous version, the second comparison has had `<=` as an operator, except for the first case (just `<`). You probably need to adjust dict to keep the same operator across the whole loop and not have to do another exceptional case.
This module may have been created before we had sub-option support in Ansible. While there are a number of options in this module that do accept a dictionary without any type of validation, it would be nice if the new `ipconfig` used sub-options as a model for how the other options should be implemented. The module UI would look the same, but you would get built-in validation. The data essentially exists in the docs, you would just be enforcing it with code as well. ```python ipconfig=dict(type='dict', options=dict( gw=dict(type='string'), gw6=dict(type='string'), ip=dict(type='string'), ip6=dict(type='string') ), ``` Feel free to correct me if I'm not fully understanding why this won't work.
It's not Meraki dashboard, but Meraki API that didn't return JSON compatible data. We have to get rid of any relation to Dashboard IMO. Dashboard is the GUI.
If I want to know a single machine's detail, I want to add a new option `name` and only call the `get_vm()` to get information of the single machine.
Would be nice to have an alias for the parameter to be backwards compatible with the original implementation which used _uid_.
Can you replace str with to_native ? ``` msg="Cannot connect to database %s on %s : %s" % (database_name, hostname, to_native(e)) ```
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific version_added when the options have been added in a newer release.
We try to avoid defining ```_``` in case we ever decide to i18n the code. gettext traditionally uses ```_()``` to mark strings for translation and we wouldn't want to overwrite that.
"replace all instances with an old launch configuration" is confusing (it was confusing before this change) Might be better as "replace all instances from an old launch configuration"
```suggestion - "zabbix-api >= 0.5.4" ``` as `zbx.logout()` wasn't present in `0.5.3`.
`default: null/None` is the default, it can be omitted
hmm using the key 'password' is not a good idea for a msg to the user, ansible would think this might be sensible data. (the return password would also be missing in the return docs) however, I would suggest to use the common return key `msg`
'+' is redundant here.
@bcoca good idea. I think we can merge this one for now and I'll add this to my docs-checklist-for-new-releases.
Display is a singleton now, so just import and instantiate, then use. See docs/docsite/rst/dev_guide/testing/sanity/no-main-display.rst
In list, space after ,
(Still first impressions stuff) guess output_options() etc are actually modifying self.parse by side effect and accumulating the options. Related, could the options data be built up first instead of output_options()/connect_options() etc incrementally modifying the passed in self.parser? (Thats not entirely related to the singleton stuff, but it could make it more clear when the parser instance is finalized and immutable-ish) ``` python def vault_options(parser): parser.add_option('--vault-password-file', default=[], dest='vault_password_files', help="vault password file", action="callback", callback=CLI.unfrack_paths, type='string') parser.add_option('--vault-id', default=[], dest='vault_ids', action='append', type='string', help='the vault identity to use') self.parser = vault_options(self.parser) ``` to: ``` python option_data = [{'options': ['--vault-password-file'], 'default': [], 'dest': 'vault_password_files', 'help':"vault password file", 'action': 'callback', 'callback_id': 'UNFRACK_PATHS', 'type': 'string'}, {'options': ['--vault-id'], 'default': [], 'dest': 'vault_ids', 'action':'append', 'type': 'string', 'help': ''the vault identity to use'}] ... parser = init_parser() # or whatever constructs it for option in option_data: # or likely, some helper method to setup the args and resolve callback_id to a callable parser.add_option(option) ``` ie, pass all the data to the parser constructor instead of incrementally modifying it. If there is nothing dynamic in the options data, it could be copied around and each cli could build it's own parser instance. Could potentially make it easier to build cli docs as well.
Hmm, maybe we should move that function to docker_common.py, now that two modules are using it.
sorry, for single value use `get_validated_value` which is the 'specific' version of post_validate
```suggestion choices: ["ff", "merge", "rebase_merge"] ```
```suggestion - Maximum number of parallel processes (1 - 300, default = 1). ```
``` - If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates. ``` + set the default to be True (that way user have to force into an insecure setup, that's how other modules work)
Actually i've figured out and code need to be refactored in next way ```#from ansible.module_utils.influxdb import InfluxDb from ansible.module_utils.influxdb import * ``` so you can use exceptions.InfluxDBClientError but it's not really nice way of import it's another way ```import ansible.module_utils.influxdb as influxdb``` so it will bring next changes: ```argument_spec = influxdb.InfluxDb.influxdb_argument_spec()``` ```influxdb = inflxudb.InfluxDb(module) ``` ``` except inflxudb.exceptions.InfluxDBClientError``` such refactoring reduce reimport but bring some hard to understand call.
tempted to make this a 'hard' syntax error, skipping the task seems wrong since it can never execute at this point
i think the value check is incorrect, it should check 'any 2 values are not default' instead of thruthyness
please remove () around if
`AnsibleModule()` has an argument `add_file_common_args`, which will add common parameters such as `mode` to the argspec. The parametes which are added are the ones in `FILE_COMMON_ARGUMENTS` defined in `module_utils/basic.py`, which includes [this change](https://github.com/ansible/ansible/pull/50035/files#diff-90085fdcec6ed8b273ba885eaee60328R235).
You should catch the error twice to produce an error message suitable for each query
I may not be allowed to write to current directory. Maybe log path should be passed as parameter.
Typo: a reboot
This is the only change required.
please wrap in block ``` if __name__ == '__main__': main() ```
I think it's okay to not validate bad get. But yes, it could be even some invalid non-iterable data struct which would explode.
Good catch. Yes, it should be at the same level as applications. Here is some output from a live query. Will one of you update or should I? ``` { "applicationCategories": [ { "id": "meraki:layer7/category/1", "name": "Email", "applications": [ { "id": "meraki:layer7/application/4", "name": "Gmail" }, { "id": "meraki:layer7/application/2", "name": "Host-based email (POP3/IMAP/SMTP)" }, ```
```suggestion description: AWS response from the API deploy call ```
ok, ``` 'Tags': boto3_tag_list_to_ansible_dict(dhcp_option.get('Tags', {'Value': '', 'Key': 'Name'})) ``` would be a simpler change.
Set default value of `transport_type` to `HTTPS`
I stand corrected, uploading certs/keys in the AWS GUI without the PEM headers does not work. Perhaps we could use their regex pattern as per the [API reference](https://docs.aws.amazon.com/IAM/latest/APIReference/API_UploadServerCertificate.html) or simply check for the headers? eg -----BEGIN
While this is true when `docker_container` creates a new container, it is not true in case it doesn't. In the latter case, the container will keep its current value (whatever it is). I've been thinking a bit on how to formulate it; I'm currently leaning towards simply not mentioning the case when it's not specified (i.e. leave this new sentence away, but also drop the `default: 0`).
terms can be a list, not sure if this is being handled correctly
should be `state: absent`
not needed. setting `required=True` in the argument_spec will automatically generate an failed message if the argument is not specified.
Ok, I understand, that's fine :)
Listing the aliases in the description is unneeded, we have `aliases:` for that.
Perhaps it could be SPACEWALK_CONFIG, and be consistent with other variables such as ANSIBLE_CONFIG, [COLINS_CONFIG](https://github.com/ansible/ansible/blob/devel/contrib/inventory/collins.py#L38). Note that gce uses [GCE_INI_PATH](https://github.com/ansible/ansible/blob/devel/contrib/inventory/gce.py#L134), docker uses DOCKER_CONFIG_FILE, nsot uses NSOT_INVENTORY_CONFIG. Not sure what the core devs would prefer here, but perhaps it would make sense to be consistent with ANSIBLE_CONFIG.
its due to the hostvars object, which inherits from mapping .. i doubt we want it to be mutable.
roles_path is not from roles, it is an Ansible configuration that defines the directories in which Ansible will look for roles (aside from roles/ adjacent to play). Not to be confused with `role_path` which returns the path to the current role.
```suggestion - This is checked before I(removes) is checked. ```
Quotes should be consistent, though. Single or double, whatever the Ansible standard is.
Ahah. Okay, looking at https://github.com/ansible/ansible/pull/39515/files#diff-73a1f8320d09ef0190fcf41558d5ad90R727, I'm going to take that to mean that protocolMappers are not sorted.
sorted ```suggestion import os import pkgutil ```
Also, I find this notation with `/` hard to read. I would rather write `resp.` instead of `/`.
```suggestion - Virtual machine scale set name. ```
fwiw we have `ansible.utils.collection_loader.resource_from_fqcr` that does this.
Unfortunately, this '.../Attributes' URI is not part of the standard. That URI is an OEM extension.
Closing does not need `keyfile`. (Tested it with the module, works fine without `keyfile` option.)
please use `get_id_by_name` here
Here we already assign the current host's properties to the `ansible_facts`, and the module is running on the azure vm, `ansible_azure_vm` sounds like one of the azure vms' properties, `ansible_host` is enough
Does this return anything, such as where there are validation errors? An of how to access that could be useful (see `register:` and `debug`)
Modules are not required to import json themselves.
I would leave a note in here about why we still have this if the function has been fixed upstream. ```suggestion """Test whether a path is a mount point This is a copy of the upstream version of ismount(). Originally this was copied here as a workaround until Python issue 2466 was fixed. Now it is here so this will work on older versions of Python that may not have the upstream fix. https://github.com/ansible/ansible-modules-core/issues/2186 http://bugs.python.org/issue2466 """ ```
`skeleton` requires `createhome` but this isn't enforced. `required_if` should be used with `AnsibleModule`.
Given the dangers of localization (and that, at least in my testing, the RC matches the number in the text), I think I'd rather just check the explicit RC value 1190 here rather than parsing the output...
Is there an easy way to configure it? These string is too long and complicate (space/character case) to be a parameter choice.
I'm not sure the word `discourage` is the right thing to use here. It's probably a better idea to try explaining the limitations of using `package` over using an explicit packaging module such as `apt` with a `when` statement. Some limitations: 1. Package names often differ 1. The underlying package managers support different options, which makes effective use of these options limited
```suggestion self.fail("Parameter error: storage account with {0} kind requires account type is Premium_LRS".format(self.kind)) ```
Bare excepts scare me. Also, there are resource names which appear in both openshift and kubernetes, and I think we need to provide a way for the user to determine which project's API they want to use. This approach could be a sane default though.
Although for some reason `I(state=present)` isn't being correctly rendered. Could just change that to when state is present. I won't block on this, it seems more like a doc generation bug
This should be a lot shorter, although I didn't know how to summarize best.
Lookups should always return "text". As such, you should make use of `ansible.module_utils._text.to_text` to handle enforce the type. ``` output = to_text(output, errors='surrogate_or_strict') ```
just bikeshedding but 'persistent' seems a better name.
I believe this could be ```suggestion assert False, "Should not execute" ```
```suggestion ``` That's not true. Better remove this, or write something like "This module replaces the C(digital_ocean_sshkey_facts) module."
```suggestion - Time in seconds to sleep between execution of command. ```
Too many blank lines here.
As the link you shared, use `2018-10-01` api version for all regions.
If I understand correctly now it will wait always, but we want only to wait to be created , not for running.
not a blocker, but it looks better in the docs if you use (yes/no) for type bool.
Probably don't want the ">" here. (>" introduces a string but the "-" on the next line introduces a list entry.
yes, it should, lists preserve order in Python
Same here as `create` method
Yea, so we could go for changing naming
I think user can specify specific host from cluster. Cluster and host both arguments should be allowed
is -> are
We really should get rid of the `login_unix_socket` parameter. This parameter is useless, `host` must be used instead ([doc](https://www.postgresql.org/docs/10/static/libpq-connect.html#LIBPQ-CONNECT-HOST)).
Same as above, description is not very clear: ```yaml - name: Reduce host inventory information to provided keys ```
Would be more helpful to link to english version https://docs.microsoft.com/en-gb/outlook/actionable-messages/message-card-reference
Add condition to check like, because we don't want resource pool which is different than the user specified name. ``` if resource_pool.name != resource_pool_name: continue ```
```suggestion - This modules is used to add IPs associated with access list ```
The `changed = True` must be outside the `if`, otherwise checkmode doesn't work.
need to indent to match 'name:' also quote it , needs to be string, not float
You've not passed module in here.
just remove the previous line and drop '_all' from the variable
`client.nodes.get()` can also raise `APIError`s on failure.
should be zabbix_host_facts
Nice, I was a bit worried the output might change but I see you've thought about that with this.
Haven't dug into the details of the PR yet, but at first glance, this section raised both eyebrows. First impression is that I have no idea what to expect this code to do. I can only assume that either: a) there is some unusual magic going on somewhere, or b) this code is wrong. Gut reaction is this is too much magic, but I haven't dive into the requirement or the rest of the implementation yet. But figured I should mention it before I acclimate.
No, `set_fs_attributes_if_different` respects `module.check`.
And you should then mark the literal string as a u"" literal: ``` display.display(u'Unable to remove temporary file {0}'.format(to_text(e))) ```
This is unnecessary. Unless you pass it `default_args=False`, AnsibleAWSModule automatically merges the `argument_spec` into `ec2_argument_spec()`
Instead of a static sleep here, can you make it conditional on there being a change that should be waited for? Otherwise the happy path of this module (where no changes were needed) will take longer.
We have been removing these from the notes, because we have this line at the very top in the description, and a reference to the **win_shell** module in the **seealso:** section. So three times is one to many. We have been removing those from the notes for all Windows modules, and vice versa.
I would prefer to avoid the try/except block. Because it can potentially hide a problem and it reduces the readability. This being said, it was already here, so it's up to you.
More pythonic to combine this unpacking with the for loop: ``` python for device, mount, fstype, options in mtab_entries: ```
catch the exceptions at the point of calling the API
I would prefer to move that into a separate PR. Feature removal should also have a changelog (`removed_features:`) and potentially also a porting guide entry (no idea where though).
Thank you for making this a warning
Might be good to add, this is required if you wish to run the task without the user being logged in.
This is formatted like this: ```python # Copyright: (c) 2017, Kairo Araujo <kairo@kairo.eti.br> ```
I suggest adding `choices: ["anyHost", "currentHost"]` with `default: anyHost`
I consider that a violation of least surprise. if you have your ec2_inventory set to get elasticache or rds instances and it returns none due to error when in fact there are instances, that is surprising.
I know you're doing this because you need to convert to KinesisStreamARN, but these should be just handled as special cases, perhaps after converting to camel case.
I prefer the second one. If you want to use customization (others than network customization) you need to set customization params.
not all versions of FreeBSD have the 'service' command, we should fallback to the rc script itself
With this update, it would manipulate links, so this line should change.
```suggestion return info['status'], info['msg'], content, base_url ```
Above, you wrote that `ov_eligible` is returned when `success and I(domain_status) is C(APPROVED), C(RE_VERIFICATION) or C(EXPIRING).`. But here, you only return it if it has value `True`.
`Runner has been created`
Leave this line as is, the function works fine for all snaps, no need to have an if statement.
Please delete this section
The indenting of this line and the next is off a space.
to_text and u prefix on string.
that would probably be an issue if include_role is in the mix, but not otherwise
Sorry for being neat-picky, but plural of child is children. Can you change this please? :)
I think this needs to be updated to: ``` python vmnet = _get_vm_prop(vm, ('guest', 'net')) ```
Only ClientError has a .response so this will raise an AttributeError for BotoCoreError. A nice pattern to manage this is using the is_boto3_error_code() util like I suggested above.
deprecated module, no need to change
as noted in docs, there are a bunch of 'binary choices fields' which should just be booleans.
```suggestion Second element is a dictionary of valuemap object if it exists. ```
Also, line 525 (the `remove_node()` call) needs to be adjusted as well.
I like this approach! :)
this is the long description, it does not say what Pool or from where
`required=False` is the default, so these can just be empty `dict()` parameters
I think that would make sense, but it's up to you, of course :).
Make this a proper list: ```yaml author: - Aymeric Bringard (@diadzine) ```
``` flp_path = self.params["floppy"]["flp_path"] if "flp_path" in self.params["floppy"] else None ``` to ``` flp_path = self.params.["floppy"].get('flp_path', None) ```
Could potentially be moved to the module_utils? (same for lines 112 -> 122)
Make `verify` configurable via parameter.
cc @abadger @thaumos
Add a trailing dot.
By this we mean the ``` if not CREDSTASH_INSTALLED: raise AnsibleError([...]) ``` If importring credstash takes a long time it might be good to move that to inside the lookup module as well but that's an unrelated issue.
When catching a generic exception, not knowing why it failed; you should include the stacktrace. It's also safer to manually transform the exception into a strig usig to_native. So this code will look like this: ``` python import traceback from ansible.module_utils._text import to_native [...] module.fail_json(msg='failed to set machine state %s, error: %s' % (state, to_native(e)), exception=traceback.format_exc())
Just a style note... If you could use block_dict instead of b_dict that would be good. We use the "b_" prefix as a convention to tell when we're dealing with byte strings as opposed to text strings.
All modules and plugins should use the same style; the problem is that not all of them do so (yet). The `docker_swarm` inventory plugin is pretty new and might not yet be perfect (while looking over it right now, I found a few problematic ones and just created a PR for that: #54952).
Yes, I think it isn't needed. You can remove it and see if it still works if you limit to `all` :)
Let's change this to 0.12 to match our min.
Looks like you have already done this TODO
Is this actually a required option? 1) Are `password` and `token` mutually exclusive. 2) can you use this without auth? There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` mutually_exclusive required_one_of ```
Since listeners defaults to None and ensure_listeners_default_action_has_arn() will be iterated over we might either want to change the default to an empty list or have a check in ensure_listeners_default_action_has_arn() or have the last argument here be `module.params.get("listeners") or []`
```suggestion - A dict of tags to apply to the resources. - Required when the state is present. ``` Descriptions should be full sentences: 1. Start with a capital letter. 2. End with a full stop.
I think the most we could probably do here is validate authentication... most of what could fail requires information about permissions that might not be available or shouldn't be encoded in the module itself due to shifting requirements on Tower itself.
Note, the advice to use to_text() here was incorrect. to_text should be used if the msg is not text where the msg enters the system as a whole. It should not be used where msg is used (unless it is a non-string type until then. But with a name like msg, it should be a string type when passed in here)
Not a blocker but I think this import is no longer needed.
You can spot a KVM guest by looking for `Bochs` or `QEMU` (depending on the options passed to KVM, I think). There's some duplication here with the equivalent method in class `LinuxVirtual`; the identifying strings are the same, they're just pulled from different places.
lookups have a toggle now to deal with errors, this is something we want to remove, they should not be hard coded into task executor.
```suggestion qa_1: "I won't show" ```
If you can't parse it, you should fail instead of returning `None`.
Please use a dict literal instead of a constructor. ```suggestion return { ```
I would formulate it a bit different (and don't add the value, the key should be fine): ```suggestion "Ambiguous env options must be wrapped in quotes to avoid YAML parsing. Key: %s" % (name, )) ```
spelling of ansible twice here.
A try/except ImportError block is needed around all imports that are not from the Python standard library. Take a look at other callback plugins to see how that is handled.
This still needs to be tidied up, the following would need to change * Remove all `\n` from the text and move the next sentence after a newline on a new list entry * Make sure all the option choices actually reflect the choice expected, e.g. change OnlineSecondary to C(online_secondary). * Enclose all references to other module options/parameters in `I()` * Enclose all references to the option values in `C()` ``` create_mode: description: - Specifies the mode of database creation. - The default choice is C(default) which is a regular database creation - C(copy) will create a database as a copy of an existing database. I(source_database_id) must be specified as the resource ID of the source. - C(online_secondary) and C(non_readable_secondary) will create a database as a (readable or non-readable) secondary replica of an existing database. I(source_database_id) must be specified... - .... Repeat for all the choices ``` This is going to be the same advice for the options below this as well.
We talked this over on slack and the new commits look good now.
Remove `required: False` as required is set to false by-default.
```suggestion - If the C(state) is set to C(shutdown-guest) or C(shutdownguest), by default the module will return immediately after sending the shutdown signal. ```
ie: if self.stickiness['expiration'] is the string "10", the change being made does the comparison of self.stickiness['expiration'] as the int 10, but the variable expiration is set to the string "10".
Thinking about this a bit more, should this be moved to `lib/ansible/constants.py`
Thank you @machacekondra!
This might do weird things for module parameters set `False` - this should probably be `if module_param is not None`
Please format this like this: ```python skip_lines = [ '+----------------------------------------------------------+', ' Available Repositories in /etc/yum.repos.d/redhat.repo' ] ```
disks or None
Ok I will leave it to the contributor. Rather not debate over stylish stuff that is moot. I am good either way, long as it works. Thanks!
```suggestion - Name of the DNS zone. ```
You can use the following docs key to specify what choices are valid: ``` choices: - hostname - public_ip - private_ip ```
Another test that I would move into version specific classes with pytest skipifs
"ssl" is a legacy, deprecated term for TLS. Other modules use "validate_certs" which might be better here.
This check is now fairly pointless. If we're going to just `try`/`except`, no point checking it first.
Same: just catch associated botocore errors.
@tzurE Single PR for all modules added in Ansible 2.8 would be great, and hopefully easiest for you as well.
What about `~username/dir` that resolves into `/home/username/dir`? It looks like you need ```suggestion if n_part != '..' and not n_part.startswith('~') and '$' not in n_part: ``` Also, I'm not sure if you need to check this in all the parts or only the first one.
```suggestion changes = 0 for current_rule in rules_to_find: if new_type: if(current_rule.rule_type != new_type): changes = 1 current_rule.rule_type = new_type if new_control: if(current_rule.rule_control != new_control): changes = 1 current_rule.rule_control = new_control if new_path: if(current_rule.rule_path != new_path): changes = 1 current_rule.rule_path = new_path if new_args: for i, new_arg in enumerate(new_args): new_args[i] = new_arg.replace(" = ", "=") if(current_rule.rule_args != new_args): changes = 1 current_rule.rule_args = new_args return changes ```
@cmrd-senya I've got concerns about modifying globally accessible env vars, so after talking to a colleague he brought up that whenever you change the env var value you should revert it to its initial state after using it. So I strongly recommend moving to CLI arg instead of messing with env vars.
We probably should validate if this is provided for other l3out protocols and give a warning.
The required_if checks are absent.
IMHO the wording should be "TLS/SSL"
This description reads as if setting `purge_rules` to `yes` would keep the existing load balancer rules in place. Perhaps just prefix it with 'When set to no, keep the existing...'
something like `allow_to_remove_last_key` (default false) sounds good.
There is a waiter for this too: http://boto3.readthedocs.io/en/latest/reference/services/emr.html#EMR.Waiter.ClusterRunning
I wish this were a Dataclass or namedtuple, but doesn't need to hold up the works.
`delegate_to` is required.
> it does not happen under normal conditions or during regular network activity and it has a very long delay `persistent_command_timeout` default timeout value triggered from `ansible-connection` is 10 secs, not sure how you concluded it is a 'very long delay'. > With the recv_ready calls every 1ms, it is a certainty. But in the end, using something such violent as signaling to just manage a small network timeout under normal circonstances does not sound like good design One of the resaon to add a signal to check if comeplete response is reecevied or not is because the signal handler for `persistent_command_timeout` trigerred from `ansible-connection` was not invoked in case of sleep().
get_resource_group is available from the base class, so there's no need to have local function here.
it should be None, to allow taking a really default from the system, and not override it
just return changed=True when deleting things.
why the json load + dump? this is effectively a noop, you can just use yaml.dump directly
I think it's not available in V3 API
It appears that the exceptions are being handled differently depending on where this function is called, so I added a docstring.
This should probably have some real examples to clearly articulate what to expect form the module.
Can we rename this parameter to `state` in order to match other modules ? ``` present == enable absent == disable ```
So the fact that the help is in the `stdout` could cause issues. If the help went to `stderr`, that would be better in this case, but I don't think we should change that.
This function doesn't have any side effects, you should be able to just kill the whole else block.
not related to your contribution but is it just me or shouldn't this look like ~~~diff - 'no_plugins': 'no_plugins', + 'no_plugins': 'no-plugins', ~~~
Shouldn't this better be: ```suggestion {% if no_proxy| ipaddr is not none %} ``` ? (Similar for the next line.)
2.4 is alreay released. Use 2.5
These need `version_added: "2.6"` values.
Minor cosmetic tweak: ```suggestion ```
Just change this to `==` since it's a single-layer dictionary of hashable types.
```suggestion - Determines whether a network filters for all URLs in a category or only the list of top blocked sites. ```
This sentence sounds weird to me, though most of the alternatives I've tried sound almost as weird. How about: ```suggestion to be deleted. Set the time to wait with I(wait_timeout). ```
```suggestion enable_key_rotation=(dict(type='bool')) ```
This code does not account for check mode.
This call on connection object can raise ConnectionError exception which needs to handled here else it will result in stack trace in output. I have raised a https://github.com/ansible/ansible/pull/43353 to fix it for other supported platforms
@wltjr consider that most users of this plugin deal with pre built binaries, it is rare to handle any number of Gentoo machines and have them all rebuild packages themselves (distcc cluster aside). I'm a Gentoo user also, so for my workstation, what you say makes all the sense in the world, i'm trying to balance the other perspective, of those that manage a fleet that install pre-built binaries. That said, I do lean towards your point of this being a bug. To clarify, I had not read your original post on my first response, I was trying to clarify what the previous poster meant by 'breaking'.
This is only mildly concerning in that prior to py3, users could have the libcloud `secrets.py` anywhere in their PYTHONPATH. In practice, I doubt that Ansible users are using the libcloud file for their credentials.
Please remove the space at the end of the message.
update in docs that fail_msg is 'new in 2.7'
i would not change the default ... either have a flag to change the behaviour or 'chroot' detection
Just for consistency, please move the import statements before from. E.g., [this](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/network/asa/asa_command.py#L112).
Having an import in a test function is not the best idea since it mutates the whole test runtime process. You'd probably need to do the whole test in a subprocess to properly isolate it.
does this make it `default: 'no'` now
Should we just call this the `ansible_playbook_path`? Since we're stripping the line, technically I guess it makes sense to just refer to it as the playbook.
Please create a [changelog fragment](https://docs.ansible.com/ansible/latest/community/development_process.html#creating-a-changelog-fragment) and rebase.
Ever considered doing this: ```yaml - name: Add Pester module action: module_name: "{{ 'win_psmodule' if ansible_powershell_version >= 5 else 'win_chocolatey' }}" name: Pester state: present ```
I see the problem, the PR as-is disables the mangling completely. So it does the other opposite of not respecting the `TRANSFORM_INVALID_GROUP_CHARS` configuration.
I am concerned here that if subexpr is empty, it may cause an exception. For that reason I prefer to do: ```python if subexpr.endswith(')'): ```
i would push this to the top of the loop, probably first thing after 'if'
@gundalow I think that could be an option yes... either running NSO on the local machine where you are running ansible or actually executing it on the NSO machine...
normalize_interface import is unnecessary here
For people following at home, we had a talk with privateip, qalthos, bcoca, jimi-c, and myself about this on slack, decided for now to have parameters overriding env vars. We'll discuss this more next week and see if we can push the values somewhere else (perhaps into inventory variables that are set on the connection plugin).
Missing from docs
to_native(e) is the best replacement here.
```suggestion # Copyright: (c) 2019, F5 Networks Inc. ```
You want to move that to module_utils once at least one of this and #59641 is merged.
```suggestion - This module works on ALT based distros. - Does NOT support checkmode, due to a limitation in apt-repo tool. ```
A bit implicit for my taste, but the module is small and relatively self-contained. Still, I'd prefer returning at least a boolean.
Include an example please
This should be coming from extending oneview.factsparams in line 47
s/You can use this/This can be used/
use AnsibleAWSModule from module_utils.aws.core, and then use fail_json_aws(e, msg="description of what was attempted")
Descriptions need to start with a Uppercase character. And should be a full English sentence (or description). So something like: The identifier of the key. ... I would add the remark about when it is required on a separate bulle, at the end. - This parameter is required when C(state) is set to C(absent).
If these are already integers, we don't need to caste them here: ```suggestion cpu_facts['processor_vcpus'] = cpu_facts['processor_count'] * cpu_facts['processor_cores'] * cpu_facts['processor_threads_per_core'] ```
Please make the sleep and retry limits configurable by parameters.
Rather than splitting on spaces, split on the colon, then clean up the spaces: ```suggestion data = line.split(':', 1) data[1] = data[1].lstrip() ```
This should be in the `except` above.
Why can't you just utilize `hostvars[inventory_hostname]` instead of running `setup`+`register` and using that var? Using `register` with modules that return `ansible_facts` should be considered an anti-pattern, and not something that is recommended.
in any case the in_data/picker seems to be more appropriate of creating a new module that handles the data in these structures vs the current module which is specific to per rule invocation.
It's not super common for AWS to support local implementations - S3 is by far the most used since many vendors implement the S3 API themselves. As far as boto3, it would actually be fine to refactor this module to boto3 only now that boto3 is so commonly available, and users on modern ansible installs are likely to be using at least one boto3-only module already.
Do we need to specify `human` as an option? That could just the default and `yaml` or `json` are specified.
Exception handling is done in module code. This way we can keep the handling of the error specific to the module using the shared code.
This is the default, so can be removed ```suggestion ```
```suggestion # Copyright: (c) 2018, CloudGenix Inc. ```
Default not set in argspec.
```suggestion returned: success and I(ov_eligible) is C(true) and I(domain_status) is C(APPROVED), C(RE_VERIFICATION) or C(EXPIRING). ```
```suggestion cli += ' vrouter-bgp-network-show vrouter-name %s network %s format network no-show-headers' % (name, network) ```
I am not sure we have such deprecation policy, need to check.
It may be more obvious to name this parameter something like `public` as a boolean, but I'd be worried about AWS adding some third scheme meaning we have to obsolete the boolean and use their new value. No change required here, but would like your thoughts.
I would prefer to move this earlier in the module, so it fails early on. But I also have concerns about type-checking.
Sometimes you have a trailing dot (here), sometimes not (previous one). I guess you should pick one style and stick to it :)
cmd = [self.nmcli_bin, 'con', 'mod', self.conn_name]
```suggestion - Required if I(chart_repo_password) is specified ```
Although to mention that it will `verify()` the privatekey it has been generated with.
there is an ansible specific dumper we create, not sure if pertinent to this plugin, but worth looking into as i think it can save you work
I think adding a timestamp field would be nice.
No, it's been here since 2.3, just not usable as a connection on its own.
Can we prepend `ERROR: ` here? ```suggestion raise SystemExit('ERROR: Ansible requires blocking IO on stdin/stdout/stderr. Non-blocking file handles detected: %s' % ', '.join(_io for _io in handles)) ```
```suggestion - This boolean converts the variable into an actual 'fact' which will also be added to the fact cache. It does not enable fact caching across runs, it just means it will work with it if already enabled. ```
You could unindent this and remove the one in `if state == 'present'`
Prefix it with `is_` to indicate a boolean check.
Values that are not required, don't need this. Also default null values are obsolete.
Please switch back to just using `%r` here instead of `'%s'` as that assists in providing more information about the original type.
```python description: description: - Description of the user macro. type: str required: false ```
I think that may be a result of running the module in the way you are. But it shouldn't be. Imagine you aren't running the module "locally" but running it on a remote machine.
Can you match the elif-y style here as: ``` elif boto.config.get('Credentials', 'aws_access_key_id'): # set it elif boto.config.get('default', 'aws_access_key_id'): # set it else: access_key = None ``` Functionally it's the same, but since we've got this big long elif already, it's preferable to match it.
For python 2.6 compatibility, this and the following four strings have to look like `cmd = "ping {0} {1}".format(vrf, dest)`
```suggestion module.fail_json(msg='The following volume names were not found: ' ```
Also change this one, please.
Also need to add `version_added: '2.8` to the keys here.
```suggestion - Possible values are C(merge), C(rebase_merge) (Merge commit with semi-linear history), C(ff) (fast-forward merges only) ```
```suggestion - Valid options are C(full), C(read-only), or C(none). ```
We could remove text_type here if we wanted.... binary_type is the important one to keep. subprocess deals in byte strings internally. Passing in text strings can yield tracebacks in both python2 and python3 in some circumstances (more often in pyhon2 than python3 but try this: so we try always to give bytes to subprocess. Not sure if we want to remove text_type or not... it could work for many customers who are using just ascii or have good locales set if we leave it in. OTOH, if we take it out, it could be an early warning for us that we have to adjust our code somewhere. Example of subprocess failure on python3 with text type: ``` LC_ALL=C python3 >>> import subprocess >>> subprocess.Popen('printf \u304f\u3089\u3068\u307f', shell=True) Traceback (most recent call last): File "<stdin>", line 1, in <module> File "/usr/lib64/python3.4/subprocess.py", line 859, in __init__ restore_signals, start_new_session) File "/usr/lib64/python3.4/subprocess.py", line 1401, in _execute_child restore_signals, start_new_session, preexec_fn) UnicodeEncodeError: 'ascii' codec can't encode characters in position 7-10: ordinal not in range(128) ```
Perfect. Just wanted to make sure nothing got forgotten :)
Maybe rebrand this to `with_extra_spaces`? Otherwise it's double negation by default `no_extra_spaces: no`, which is confusing.
No need for get(key, None) as None is the default fix also for following get()
you can use split() without the " "
Overall, I think this change fixes the problem well. I'm just not sure about the pros/cons of having a custom exception inherit from multiple exceptions, one custom and one built it. It may be ok, I'm just not sure.
pass `port` and `validate_certs` as well. Since these details can be different for destination datacenter.
BTW, currently the `_check_pkey_passphrase()` will only be called if friendly name is not set for both the PKCS12 file and in the module options. I guess this should better be ```suggestion if self.pkcs12.get_friendlyname() != pkcs12_friendly_name: return False ```
this should import from because module_utils will be transfered to remote target `from ansible.module_utils.six import iteritems`
I would make sure we clarify the handler docs to make sure its clear: a) handlers are play scoped b) handlers with same name are overwritten, last one defined wins If we were deduping i would have added a vvv('handler x is being overwritten') msg but since we are keeping the lists, just changing read order ... don't think we can do that.
pytest.mark.skip Though I'm surprised we did not see any bot error.
I don't see a reason to keep all, they were kept in the past since new modules were created without changing previous ones.Since there are a few modules being updated / refactored and because this is part of the module_utils now, maybe we can change this *behaviour* in the next Ansbile release to not break things in minor releases.
From 2.5 onwards provider arguments are added as suboption spec for all Network platform that uses persistent connection framework. Please refer [here](https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/ios.py#L45) for example implementation.
The default of to_text and to_bytes is utf-8 so we can use None as the default value here if we want.
Technically, you could remove this line, and just use: ``` alias_results, self._legal_inputs = handle_aliases(spec, param) ```
Delete "required: false" in every case; it is the default so you don't need to state it.
A lot of Python code typically has a blank line after imports.
Should be L3, yeah
This line fails for me trying to run Ansible under Python3 - `response.headers` is there, but there is no `getheader` method. I don't know the internals of what is returned from `open_url` but I can call `get` on it and it works for both Python2 and Python3: ``` fatal: [127.0.0.1]: FAILED! => { "msg": "An unhandled exception occurred while running the lookup plugin 'manifold'. Error was a <class 'ansible.errors.AnsibleError'>, original message: ['Traceback (most recent call last):\\n', ' File \"/Users/dave/work/src/ansible-test/ansible/lib/ansible/plugins/lookup/manifold.py\", line 226, in run\\n team_data = client.get_teams(team)\\n', ' File \"/Users/dave/work/src/ansible-test/ansible/lib/ansible/plugins/lookup/manifold.py\", line 166, in get_teams\\n data = self.request(api, endpoint)\\n', ' File \"/Users/dave/work/src/ansible-test/ansible/lib/ansible/plugins/lookup/manifold.py\", line 113, in request\\n if response.headers.getheader(\\'content-type\\') == \\'application/json\\':\\n', \"AttributeError: 'HTTPMessage' object has no attribute 'getheader'\\n\"]" } ```
also the new plugin config framework allows for ini entries in ansible.cfg
This is never evaluated. The same reason like I mentioned above.
This file needs an `ANSIBLE_METADATA` indicating that it is community supported.
```suggestion object_type: DistributedVirtualSwitch ```
Do we want to increase the default to 40? The images endpoint contains 78 objects so two requests would handle pulling all possible objects. The distro endpoint currently only contains a total of 28 objects, single request would capture everything. I ran a number of tests on the API and it looks like our average response would be around 600ms.
I don't remember why the options to the inner to_text() here different or if it is significant. ``` python vaulttext, encoding='ascii', errors='strict' ``` vs ``` python data, encoding='ascii', errors='strict', nonstring='strict' ```
A couple of concerns here. 1. Somehow we accepted this file without a license header. This should be remedied immediately. `module_utils` are typically licenses as BSD 1. A quick git blame indicates that you will also need permission from @maxamillion to relicense this code to `BSD`
I think just use a dummy value, if Windows does introduce a different method in the future we can deal with it then
and restart, of course
Remove as not needed (default)
Please use proper Ansible doc: ``` You must provide either C(vm) parameter or C(template) parameter." ```
This seems like it would break galaxy which needed expand_paths
the message here looks like a failure case rather than an exit case... Perhaps it should use module.fail_json or the message should be changed? Stylistically, exit_json() cases should retun back to the main function in the module and let the exit_json() occur there. It's more flexible to changing needs inside of the module than calling exit_json() here.
Do these values even need to exist in most of the plugins? Only reason I can see that they'd need to is if `transport_test` were defined on the base connection (and override-able by plugins that don't use a TCP port). Otherwise, `transport_test` can just use the existing `self._winrm_(host/port)`. If they do stay, I'd prefer that these values be init'd in `set_host_overrides` off the existing values instead of duplicating the logic here (at least for this plugin- IIRC nobody else uses `set_host_overrides` ATM). I've verified that it works with that change (since you're using the play's existing connection, it's already been run by the time it gets there).
It will be easy for debugging if we print `exp` exception to user. Use `to_native(exp)`
assumes native strings in line, you should convert to_native or ensure regex matches 'line' string type
```suggestion - name=db_1,db_2 May only be provided if I(state) is C(dump) or C(import) ```
style wise, the ansible imports go below the hpOneView imports.
This wording doesn't really clarify the issue. It's probably easier to change the "won't" to "may".
dont need getattr here, extend/prepend are always part of FAs
Have you considered using YAML booleans for boolean values ? I am not sure if @dsoper2 had been doing this already. IMO it provides a more native look and feel. We implemented this for ACI as well (where internally different values were used for booleans). Beware though that some values may look boolean, but sometimes allow for other values (e.g. None, empty, or different flags, etc...).
```suggestion - Subnets associated with the virtual network. ```
also this is different than errors ignore, while skip=false will produce an error (after all terms are processed) errors=ignore deals with more global issues with the lookup, not just 'non of the terms matched a file'.
This isn't really clear to me. Are the '*'s separating the valid values? Commas might be more clear.
I think @gundalow means that you can add that information to the `mutually_exclusive` parameter that is there: mutually_exclusive=[('xml', 'src'), ('password', 'key_filename')]
instead of fail_json we might want to separate message construction to be able to use from other points, like existing fail_json or an exception hook. Also i would add 'hostname' as people get confused by that also not knowing if it is on controller or target where the requirement is unmet.
should be remove and replaced with explicit import
Ah. I see. OTOH I'm not sure whether it's really faster since the interpreter still needs to attempt accessing the keys in `globals()` AFAIU.
Do this as a oneline instead: `return camel_dict_to_snake.....` no need to assign.
This is unnecessary as error checking is handled in `get_hosts_by_host_name` as well. I think you can remove it completely with the whole `is_host_exist` method to save a few lines of code. Basically you want to do the same as with `get_hosts_by_ip`.
Do we need to add an additional check specifically for the `CParser` import? I don't know if it's possible to have `CLoader` without `CParser`.
Parameters that are not required, don't need a `required: False`. This is implied.
Preferably, we first check if the directory exists, if not, we just return a `changed=False` proper exit
I would like to see tower-cli and the tower modules optionally take this environment variable as a replacement for the `--inventory` option. I do find it somewhat confusing that this is expecting an id, whereas other inputs all allow for lookup by name.
```suggestion - CloudGenix API AUTH_TOKEN. If not set, then the value of the C(X_AUTH_TOKEN) environment variable is used. ```
it should be returned in response though
However this may may not be possible with your usecase
This would fail if UMASK has no value. like: "UMASK ". Not sure if that's a valid configuration file.
```suggestion - Managed Object ID of the vm/template instance to manage if known, this is a unique identifier only within a single vCenter instance. ```
None of these errors ever happen. Please update to the latest AWS connection guidelines.
It doesn't make sense in case of template as there is no run-once, so plaese remove it.
```suggestion dpkg_options=expand_dpkg_options(DPKG_OPTIONS), autoremove=False, fail_on_autoremove =False, ```
```suggestion - The consumer key to use. ```
You should be able to know the length too (either the default or specify it) and then you don't have to loop through each character in result.
As above get_exception is deprecated in favor of native error handling.
Use ```python from ansible.module_utils.basic import env_fallback ... auth_token=dict(aliases=['x_auth_token'], no_log=True, fallback=(env_fallback, ['X_AUTH_TOKEN'])), ```
Is this needed? You were the author and if you used code from win_psmodule the copyright is enough.
`choices` must be used for `proto` parameter ```suggestion - The protocol to use. choices: [ampqs, ampq] ```
The new format here is: ```python # Copyright: (c) 2017, Wei Gao <gaowei3@qq.com> ```
It's more about readability. When you see two if-branches it's different than just one and then following scenario. Plus it's less indentation, which is less important in this simple case, but in general helps to have such habit :)
redundant with the is_string check below now; just meld those two together (so you're keeping the more declarative "any" rather than the explicit loop) and you're good to go
I would do to_native here (wrap the join), as the rest of the appended messages are also lacking it.
If you're going to catch Exception, please include a traceback by adding `, exception=traceback.format_exc()` to the fail_json so it can be debugged. You'll also have to `import traceback`.
I think it will be `None` and not `{}` if the network does not exist.
This breaks backward compatibility.
Missed one space cleanup here: `inv.update({env: []})`
please add a not about `xz`support was added in version 2.5 ~~~diff - The type of compression to use. + - Support for xz was added in version 2.5. ~~~
<nod> I use this instead of a dict comprehension: ``` python return dict((key, str(value)) for key, value in config_systctls.items()) ``` It's not more readable than the expanded for loop, though, so merging as is.
this is not quite correct, should be `verify_ssl=validate_certs`
Also to tack this on, I really feel the API should be responsible for this, as opposed to pushing this off to clients responsibility. Potentially the assumption is being made that only `ansible-galaxy` will ever have to suffer this burden, but it's an API, and others who may interact with it will then be burdened. Consolidating this functionality into the API is less obtrusive, and less burdensome on clients of the API.
Use a yaml list instead of a python list.
Yes in some cases the error is always the same so we return False to ease module development. In other cases there are multiple error possibilities from API, some of which we ignore in one case and not another.
i've seen plenty of 'dummies', i just have not seen a pattern to them.
Sorry didn't notice this first time around but I think should this be a boolean not a string. ```suggestion cascade=dict(type='bool', default=False), ```
ah, well. that works for me
Please remove the traling space before `Enables`
And here as well.
Please don't add new options in this PR, please remove this
```suggestion value = super().__get__(obj, obj_type=obj_type) ```
i mean the entry in the default that check encrypted, now that it is in encode, it should never get there.
Not sure - why to add `removed_in_version` in new module
in your commit message, explain why this change is useful (lets users control fine details of Linux bonding)
```suggestion - Manage Alpine Linux Local Backup Utility while Alpine Linux is in a run-from-RAM configuration mode. ```
Usually, testing private interfaces doesn't make sense.
i'm not sure this should not be an error as we still get an empty inventory while parameters for 'non empty' were supplied
I wonder if this (and any other instance of `private_key`) should have `no_log=true` I might have missed this in some other PRs, so feel free to raise one PR that updates all the modules.
I've removed the unnecessary `str()` usage. I've kept the rest as-is since that matches the current implementation for the pytest < 6 case.
```suggestion self.mock_run_nvos_commands.stop() self.mock_run_check_cli.stop() ```
There are 3 AWS partitions: aws, aws-cn, and aws-us-gov. Organizations is not yet available in China but it is in GovCloud, so we should also check for `arn:aws-us-gov:organizations:`.
This is not required as the `remount` function always returns some value.
+1 it's better to just patch `time.time`
This needs `type: str`. Also please move `version_added` below `choices`.
Maybe better test ```suggestion if mount.get('tmpfs_size') is not None: ``` ? (same for next)
```suggestion iscsi_ports = module.params.get('iscsi_name', []) ```
Several modules rely on this, but they won't error out as they are using `mksdtemp(dir=module.tmpdir)` based on this value, when `None` it falls back to `$TEMP, $TMP, /tmp` discovery .. also now modules that were not cleaning up their own temps will now be leaving them behind.
```suggestion - A string containing the base URL of the server hosting the Central Credential Provider type: str ```
It is still supported, and we should offer the advanced options that are only available through the API i think. Or at least not remove them if they were exposed.
`self.base_command` is already list so I think this is useless.
Can you move the global declarations to one place? Easy for the future maintainer.
```suggestion qz_: "I won't show either" ```
We discourage using `global`. Please pass the variables to the required functions.
```suggestion support (for example 'type vcan'). ``` f.e. isn't generally used. I'd either use 'for example' or 'e.g.' ( if you listed the only examples you could also use 'i.e.')
Should this be using config on newer releases, or is that problematic for backports? Functionally I suppose it makes no difference at the moment...
As suggested below, maybe make `certificate`, `certificate_chain` and `private_key` top level return values
I'd prefer following EAFP principle (try/except)
If you use the `mutually_exclusive` function you can remove this line
```suggestion - URL to be checked. ```
```suggestion replace: ```
```suggestion This will always return changed=true. ```
When I look at your above example: ```.yaml action_groups_redirection: another_group: redirect: exact_match ``` then `redirected_groups` would be a `dict`, and `redirected_group` will be `redirect`. If I use ```.yaml action_groups_redirection: another_group: - exact_match ``` instead, it works.
Yes. The new method is inside `IniInventory` class, it could be moved in another class (`YamlInventory` ?), then `setUp` and `tearDown` methods could be used in order to 1. save, 2. set (in `setUp`) and 3. restore (in `tearDown`) `C.INVENTORY_ENABLED`.
```suggestion module.fail_json_aws(e, msg="Failed to delete organizational unit") ```
Can you explain what this option does and why it is needed? From the implementation, it looks like this can be used to overwrite arbitrary module options, without any type checks or other sanity checks. I don't think modules should have such options.
yes, because if it's not 'tomcat' it will fail in previous statement
```suggestion - Container registry server URL, for example C(mydockerregistry.io). ```
```suggestion - Create or modify an organization. type: str ``` Please add types for all parameters !
`required=False` is the default value and not required to be passed explicitly. Applies to other places as well.
not sure this is correct, in theory there sould only be one reason for being in pending_declarations so we should not need the extra check for 'children' ... but now I'm thinking of dupicate vars entries ....
@bcoca Having present, absent and null seems also the wrong thing to do here IMO. I think this deserves a general think-over on how to tackle this for all modules.
Define as `choices:` and don't list in `description`
That can throw tracebacks without a lot of control possibilities from us. Using to_unicode and to_bytes is better. Since we're dealing with it as text in this case, to_unicode is what we should be using.
Please add `version_added: "2.4"`
You want `changed` to be `True` here if *at least* one DB was created, not if *all* DBs in `non_existence_list` were created (and there has been at least one).
```suggestion default: 1 type: int ```
```suggestion raise AnsibleError('Become plugin (%s) error: %s' % (self.become.name, self._flags['become_error'])) ```
please adjust the version to `version_added: "2.9"`
Are this requirements right, I don't see a shade import
I think it's confusing having enabled and present
Pass the self.permissions as parameter directly
add you here, seriously!
This still needs addressing.
f is already at 0, the `truncate()` is uselesss.
It works fine to collapse the expand and execute into one shot- makes interactive debugging easier. We could still support them independently too, but the pycharm thing works a lot easier if it's all in one.
I think you could move this check inside of `to_boolean` as well.
Instead of repeating the import try/except here, just add `cmd_quote` to the `from lib.util import` below.
Sometimes it is easier to do it like this: ```python module.fail_json(msg="Unable to set power state for non-existing virtual machine '%s'" % (module.params.get('uuid') or module.params.get('name'))) ```
Is there some built-in method for comparing the `pkg_spec` against an `exclude` entry with a wildcard? There's obviously support for it somewhere in `dnf`, but it may or may not be exposed.
not sure why you moved all the code to _version ... why not keep here? seems like useless jump
Ah, sorry again for not noticing this earlier. For `type: bool`, you should never add `choices`, since the `choices` are clear from the type. Both for here and the other `bool` options.
We should note that it holds for YUM version 3 and below.
This never gets raised so you can remove it and where it's used in main().
Description has default. But not specified in argspec or doc entry.
it should show that we failed to get this value, not ignore and not set it at all
What kind of values are valid here? I would expect this to be `float` based on the `0.0` in the description.
New module_utils should have the standard boilerplate as well: ``` from __future__ import absolute_import, division, print_function __metaclass__ = type ``` Once you use the ```__metaclass__ = type```, you no longer need to have ```class Foo(object):```. You can just use ```class Foo:``` instead.
Also add parameter `VMWARE_PORT`. Sometime vCenter is located on custom port rather than `443`. https://github.com/ansible/ansible/blob/a2eb227970b5f53a648af3daf58d745d2f33067e/lib/ansible/plugins/doc_fragments/vmware.py#L85
'line' var here is going to be a string, so a name like 'vernum' may be clearer.
We used dd rather than cat in the jail, chroot, and zone plugins. Can use similar code here. I believe that code also does this without a shell which could be nice for making this more generic (not that most installs will be lacking bash but it's always nice to avoid) and potentially avoiding shell quoting issues.
`uuid` is missing there.
```suggestion except ImportError: HAS_OVH = False OVH_IMPORT_ERROR = traceback.format_exc() ```
remove dump state
You can just change this to ``` if not self.location: self.location = resource_group.location ```
I think 'DelegationSetId' needs to be 'Id'.
This will have detrimental effects on operations like 'modify' and 'delete', which does not require connection type of 'connection' or 'network device'. Also, it will break backward compatibility.
The shebang should be `#!/usr/bin/env python`, unless it's not possible for this script to run on python 3 due to dependencies lacking support for python 3. CI will catch this once the earlier mentioned python 3 syntax error is fixed.
We tend to not add mixed-cased parameters, because YAML is case-sensitive and it makes it harder for people to remember how it should be properly written. I would go for **v2c_enabled** and **v3_authpass** and **perr_ips**.
```suggestion author: "Pluribus Networks (@rajaspachipulusu17)" ```
Here also if a parameter is not required, we do not add `required=False`, we only add `required=True` when it is required.
Raw string (preface w/ `r`)
Each of these functions creates a command but uses the relative executable `flatpak` but you have the absolute path below as `location` and you fail if it's not found. You could pass that location as an agrument or create a class wrapper around the functions. It would ensure that the initial flatpak path would always be used and possibly prevent environment issues.
Note that a _plugin option_ should be used for this configuration path. This would require: - add a new parameter in plugin metadata ([example](https://github.com/ansible/ansible/blob/03794864c2c3267f1fbff6ac49e2d883090284ad/lib/ansible/plugins/connection/ssh.py#L188)) - use `get_option` method in order to fetch option value ([example](https://github.com/ansible/ansible/blob/03794864c2c3267f1fbff6ac49e2d883090284ad/lib/ansible/plugins/connection/ssh.py#L973))
```suggestion - Determines which facts are to be returned. - If the C(status_filter) is C(self-heal), status of self-heal, along with the number of files still in process are returned. - If the C(status_filter) is C(rebalance), rebalance status is returned. ```
This construction seems a bit awkward as it's using a loop that will only happen once when no loop is needed. Probably better to rewrite so it's clear what is really being looked for: ``` python if data.get(u'Members'): systems_service = data[u'Members'][0][u'@odata.id'] self.systems_uri = systems_service return {'ret': True} ``` Since this is fixing a bug and has already been merged to devel, I'm merging it but please consider updating the code so it's easier to work on it in the future.
please remove the extra space at the start of the line to fix the failing tests
The right order should be: ``` # Copyright 2017-2018 Keller Fuchs (@kellerfuchs) <kellerfuchs@hashbang.sh> # Copyright 2016 Jiri Tyr <jiri.tyr@gmail.com> # Copyright 2016 Peter Sagerson <psagers@ignorare.net> ```
This is a new module so `version_added` is not required.
Same here, 2 separate items in description.
If it is an integer, don't add the quotes because that would make it a string.
Just to note, this also fixes an error I have had previously when passing a blank string to resource_pool (from a Tower Survey variable). Previously I would have to resort to completely removing the entry if blank. `resource_pool: "{{ vCenterResourcePool|default(omit, True) }}"`
use 'exception' key which is already there for this kind of thing, 'details' is not something ansible recognizes.
I'd prefer if you put the imports at the top, and only imports the functionality you use. I think that is the new best practice nowadays.
Oh right, trailing colon.
This needs to be a raw string for these to display properly in ansible-doc / HTML doc (preface with `r`). Actually it might be ok in this case, since `\v` isn't a valid escape sequence, but making it a raw string will prevent any future paths from having that issue...
Perhaps you could drop the `cloud_front_` prefix for methods and variables, since everything refers to Cloudfront properties? Unless of course it is has something to do with being consistent with the corresponding AWS API response.
Please add ` version_added: "2.4"`
So all the entries for descriptions should have a trailing dot. Only the short_description must not have a trailing dot. (To keep the index clean).
@zikalino are you able to answer this, it doesn't make sense to have 2 options that specify the same object. That's unless I'm mistaking the intention.
Probably not related to this diff but what is the use of this if command when command is already declared so it seems like a if True type of check.
```suggestion version_added: "2.10" ```
Missing full stop at end of sentence, applies to multiple `descriptions:`
Yep, it should really be there. I thought I added a suggestion for it, but apparently I forgot...
```suggestion aliases: [ filesets ] ```
You should be able to remove a few transformations here: ``` python elif isinstance(value, tuple(chain(integer_types, (float, bool, NoneType)))): ```
Not sure you want to do this if in_data is None
Default to `None`: ~~~python grants=dict(type='list') ~~~
We don't need the logging import anymore
use elif, its a minor optimization but will avoid overwriting errors. Same below.
This regex is going to break for cases where the rule is against an IPv6 CIDR range
Missing full stop at the end of this sentence, and the one later on
need to change this for python3 compatibility. We've imported the iteritems function from six earlier so we can just do this:: ``` python for suffix, limit in sorted(iteritems(SIZE_RANGES), key=lambda item: -item[1]): ```
`removed_in_version` for `force` should be `2.6`. We follow deprecated version + 4 for removed_in_version.
1) What format would username/password take 2) Need to add `no_log` to the argument_spec if credentials can be supplied via this options
That's how AWS credentials are handled too. https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/ec2.py#L187 Besides that, this looks good to me.
If the minimum value is `1.17` as per module docs, shouldn't this be a float? ```suggestion video_memory_mb=dict(type='float'), ```
Unnecessary, this check is performed for you at the line 205 by ansible itself.
```suggestion - The endpoint to use (for instance ovh-eu). ```
The module claims to support check mode but never actually checks if the module is being executed in check mode.
We could fall back to `__file__` or something in that case at minimum. Could be useful to include that regardless.
What if `connected` attribute is set to `false` ? It's ignored!
Please use double quotes.
Might want to change to `HAS_HEROKU` to match other Ansible modules code.
Link to docs would be helpful.
```suggestion - Authentication key provided by the dashboard. - Required if environment variable C(MERAKI_KEY) is not set. ```
might be a good idea to have a 3rd option like `default` or `human` which is the current behaviour. You can also have a `choices=[]` kwarg where you define the valid choices. This helps both on validation and people using argcomplete to tab complete the options.
Also, it's a classical property. Refactor it in a more elegant way: ```python @property def valid(self): try: return os.path.getmtime(self.file) + self.max_age > time() except IOError: return False ``` P.S. When reusing this snippet, please add the trailer to the long commit description: ``` Co-authored-by: Sviatoslav Sydorenko <wk@sydorenko.org.ua> ```
I think it would also be nice to show an example using a lookup plugin to read the keys from a file so that these don't have to be inlined. ``` java_keystore: certificate: "{{lookup('file', '/path/to/certificate.crt') }}" private_key: "{{lookup('file', '/path/to/private.key') }}" password: changeit dest: /etc/security/keystore.jks ```
Typo? ```suggestion versions_url = base_url + 'versions/' ```
This import should likely be moved back where the original code was, so that it trips early, and other places that import `_json_compat` don't cause pre-mature exceptions that aren't handled
~use the plugin config infrastructure instead, it will allow the user to set it multiple ways~ nvmd, thought this was an inventory plugin
I'm not talking about upstream. This is about this PR, which currently doesn't need to have duplicate code, like one in devel.
This isn't used.
add continue after each match, as there is no need to check other matches
The name of this variable implies that it could also contain `"present"`, but it doesn't currently do that. I feel like it could be made clearer.
please remove `Note that these parameters are not idempotent.` It facts module, so we don't care about that.
Please mention this is for GCE eg. `description: Google Compute Engine project id`. Without context, "project id" means nothing...
```suggestion - If set to C(present) and library does not exists, then content library is created. ```
Never mind, I now see the change to galaxy further down.
gallery_images -> `"images"`
You cannot just remove wait_timeout, if we do need to remove this it should be deprecated first to allow users to migrate
pythonic style, use: ``` python for i, suffix in enumerate(suffixes): ``` rather than tracking i outside of the loop control.
most of this already exists in ec2.py (badly named, but that is used by most aws modules)
Currently we could just use a local variable in the filter function that has a list of filesystems whose mounts don't always start with `/` that we would like to include. That could _potentially_ be a user configurable list of filesystem types to include in fact gathering, but let's just keep it hard coded for now.
This is failing because `match` takes a regular expression, which is interpreting the `()` as grouping characters, not as literal parenthesis. Another issue here is the error message can be two different values. ```suggestion with pytest.raises(TypeError, match=r'(no ordering relation is defined for complex numbers)|(unsupported operand type\(s\) for /)'): ```
This will still result in a command like `git config --unset foo ''`. According to the git config man page, that extra argument is a "value_regex" and its presence means only those values matching this regex will be unset. Luckily the empty string is a regex that matches everything, so it all works out fine in the end.
```python if state == "disabled": if current_state == "enabled": self._commands.append('interface {0} {1} no traffic-class {2} congestion-control'.format(if_type, if_id, tc)) continue ```
Please add `version_added: "2.4"`, that will fix CI
Yup, you got it. :1st_place_medal:
```suggestion description: If True, system firmware will use the specified device beyond next boot. ```
Should not be quoted. It might confuse people to think this is needed. It is not.
Here, `outdated` is a `dict` (or `list` in mheap/ansible#3).
small typo ```suggestion # table availability in check_src/dst. ```
Please add `no_log=True`
You should also make it exclusive with `vault_credential`, which would be another tuple in this list.
You need to ensure it is a string, so msg=str(e) !
pass original exception as orig_exc so traceback can be shown with -vvv
```suggestion - There is no support for binary content, everything read will be transformed to Python unicode text internally. ```
Full stop at end
I think we could add a few additional return fields to indicate the location of the bare repo.
this swallows the exception from the user's perspective. maybe: ```python else: raise ``` applies to the next change down too
specifying `type='int'` removes the need for this, so you only need to check the range.
Please wrap the line after the `(`.
Yep. That's a bug. Fixing.
Hmm, that could improve it a bit. It will be still a bit complex, though :) (Also, never underestimate users which will specify something which doesn't make sense ;) )
Ok, I checked, It should be "scale set"
Note: We never use the double underscore private convention. We just use the single underscore private convention.
`webook_url` is still wrong here, should be `webhook_url`
I wouldn't say "must", since most values do not need to be quoted to be parsed correctly. Maybe something like: `Make sure to quote values which might be parsed as numbers, booleans or other types by a YAML parser.`
I still don't get it. This was taken care of also in the arg_spec. So I would have left line 60 as it was and removed this.
Print exception using `get_exception()`, it will easy for debugging purpose.
I like it!
Please add link to the platform guide here as added in other modules.
I think that renaming the ouput variable `project_variable` is engouht
module_utils files should be licensed as BSD
This should be a string.
Manage server groups on the cloudscale.ch IaaS service
You could create the dict with the entry in one go: ```python kwargs = dict(ident_pool_name=san_connectivity['wwn_pool']) ``` Same below.
```suggestion - This parameter can be used without I(url_password) for sites that allow empty passwords. ```
you are missing indentation here, this should be: options: config:
This should be part of `description`, after line 894
we might want also `_paramiko_` versions for each var/env var/ini entry that has higher precedence, JIC people use both connections but need different configuration
```suggestion version_added: '2.9' ```
```filename, file_extension = os.path.splitext('/path/to/somefile.ext')```
Ah! I am OK with this approach as well. Go ahead with changes - `record_value` replacing `record_ip`.
Also, the key/value parens aren't necessary.
For algorithmic code, it can make sense to test private methods and private functions in isolation from the rest of the code. This does seem to be a place where that could be justified. The code being tested is functional (meaning it operates via parameters and return values rather than callbacks) and it plugs into a larger framework which is outside of our control. What I'll sometimes do is push all the permutations of data that I care about at the private function and then push a small subset at the public interface to make sure that the interaction between the public and private code is working as expected.
So to me cdrom is part of the hardware, so under the hardware parameter.
this won't always give the same result, it depends on env vars, that can vary by user and even task .. or task loop: ``` loop: [1,2,3] envioronment: '{{ difftempvar[item]}}' ```
```suggestion # value: "{{ item.value | map('regex_replace', '^(.*)$', '\"\\1\"' ) | list }}" ``` (I don't know why github thinks the original line has a leading space...)
Could you include an integration test for the parsing failure? I know it's not a new code path, but it should be tested.
we could just have _set_composite_vars return the new vars
Add a new line: "- This option is deprecated, using I(ports) under I(containers)"
This is essentially lying. Because with nmcli we can't know whether the config changes without actually applying it. Maybe we should declare this module not check mode capable.
Descriptions should end with a dot. (Yes, the original module is doing this wrong as well because we weren't that strict in the olden days :-p)
Please update tests to not use unittest, and instead use pytest style tests.
I'd sort the set when showing the error message, to guarantee consistent results for the same package list.
`InvalidInternetID` doesn't seem to exist according to botocore's source
I tried to use/test it without success. I get the following error: ``` fatal: [localhost]: FAILED! => {"msg": "lookup plugin (skydive_lookup) not found"} ``` Is there a good (doc ?) way to deploy it properly so that we could test it and maybe create a CI job.
Might be worth adding a note here to say *why* defaults are not set here, and direct people to ARGS_DEFAULT_VALUE
The fact that `use_proxy` is an explicit kwarg, means that `module` is not the right place to get the arg from. What needs to happen, is that the `uri` module needs to explicitly pass `module.params['use_proxy']` to `fetch_url` instead. We've effectively stopped using the ability to just use `module.params` directly here, and have instead been making them explicit kwargs.
I believe it's never true, because environ values are strings. ```suggestion if os.environ.get('_ANSIBLE_SDIST_FROM_MAKEFILE', False) != '1': ```
The URL path should be customizable (or the API version), I guess `v1beta1` won't stay forever (meaning: the path will change without implying a new behavior).
you should check for `if extra_vars_opt` on top and `continue` otherwise, if it would fail here, we could have a exception on the previous startswith (if `None`), also that lets us change it to a array ref on all counts
This is repeated from above and could be extracted to a function or called earlier..
This usage of filter won't work on python3. filter on python3 will return a generator which will evaluate to true in the conditional below. Use a list comprehension so that found_networks ends up with an empty list on python3 which will evaluate to false.
I think this logic is wrong: it should probably be ```suggestion if not self.check_mode and (result['changed'] or self.remove_orphans): ``` You don't want this to execute in check mode.
I don't feel this is correct. This looks like the same code twice. This may need `recurse: yes` in order to delete directories.
hmm, with making traffic type required, it would also been required for state=absent, but technically, it wouldn't be a hard requirement. We could either define a `required_if('state', 'present', ['traffic_type'])`and update the doc accordantly. Alternatively we could set a default to a value, and remove the required=true
Use the ec2 helper function `camel_dict_to_snake_dict` to ensure the results are returned in snake_case format
Can you add: ``` type: path ```
These calls too.
same as above also check it for all "get" calls below
I don't think this works. In case `db_create` returns `False`, it can be that some of the DBs were created, or none (because they were already created between the existence check and the CREATE DATABASE command). In case `db_create` didn't fail and `non_existence_list` is not empty, `any_db_exists(non_existence_list)` will *always* return `True`. But `changed` might still have to be `False`.
aggregate, if you have collections in the code replace it as well
Same here, not needed.
Not a blocker, I like better: ``` if self.module.params['update_password'] == 'on_create': password = None if password is not None: resource['password'] = password ``` I doed the exact thing, with less words :-)
Should this be `response` since that is what is returned? I don't see `result` used within this function.
I find these kinds of long line less readable, harder to work with, and less helpful with `git blame`, but I realise that this is all subjective, so I'm going to try to resist arguing about the colour of this particular bikeshed.
```suggestion password = self.params.get('password') ```
If we are going to raise an error for codes 1-6, then this conditional can be combined with the previous. Originally, this was implemented to _only_ fail for incorrect password (error code 5) to prevent account lockouts. But if we're going to raise an exception for any error 1-6, then we should deduplicate this code.
Why not simplify this? ```suggestion if sys.version_info[:2] < (3, 7): ```
I don't know either. Usually such questions are discussed in the public project meeting, if nobody from core team decides before that happens (looking at @sivel :) ). In any case, if an empty author is not acceptable, you should better fix the schema and don't do this error reporting in the `author` function, or you change the schema to just run this function and not do other checks, and do better error reporting (right now there's only a generic `Specify author as a string or a list of strings, or not specify author at all` error which doesn't tell what it actually encountered, only that it didn't like the input).
```suggestion requirements: - psutil options: ```
Thanks @Fred-sun for the details!
required is by-default False so no need to mention explicitly.
It is unclear to me what **replace_dest** means. It does not feel very idempotent, and it does not match any functionality of the git module.
These two have been fixed in 2.8 and more recent. 2.7 is currently critical fixes only so this does not need to be backported.
Change this to something - 'pyvmomi is required for this module'
Add note to the description that this changes in v2.3, it was a required parameter before that.
I would default to multiline regex that parses the expected output of the default tool used.
This should use `AnsibleError` like the other errors to pass back a nicely formatted message to the user.
I suspect this would pass tests if this only set the value if the parameter wasn't None
```suggestion - If set to C(True), return settings of all network adapters, other parameters are ignored. ```
@bcoca I tested this in our environment overnight and it looks like it works because it took this code path, but it ultimately failed due to a typo :) `s/modulw/module/`
Bonus points for a link to the `re` man page ð
Remove as not needed (default)
`zone=managed_disk.zones[0] if managed_disk.zones and len(managed_disk.zones) > 0 else ''`
Well, my remark was not just for this one parameter, but for all parameters. And also for all Meraki modules.
It is not cover the remove nsg
should this be: pytestmark = pytest.mark.skip('skipping as missing required netapp_lib')
``` if 'autoselect_datastore' in disk: self.module.fail_json(â¦) elif 'autoselect_datastore' not in disk: â¦ ``` â ``` if 'autoselect_datastore' in disk: self.module.fail_json(â¦) â¦ ```
Regarding single/double quotes used across the code, there is non-written convention to use double quotes only for text with placeholders (e.g. `"%s "`) or longer text messages (e.g. `msg="Failed executing lspv command."`). When a text contains double quotes, to avoid escaping the quotes, single quotes should be used (e.g. `my_var = 'This is "my" variable.'`). The rest of cases should use single quotes. Please walk through your code and unify the quotes according this convention.
An maybe put it directly to create call like: ```python ret = templates_module.create( entity=entity, # When user want to create new template subversion, we must make sure template is force created as it already exists, but new version should be created. force_create=entity is None and module.params['version'] is not None, ... ) ```
There doesn't seem to be any additional parsing happening for this file. If it's not the same format as os-release then we'd need additional code below to parse it. (Or perhaps your new code doesn't rely on debian_version so we don't need to add it here.)
we should already be inside a copy of the task, not sure why we would need to copy args again.
I see double backslashes here, that is not needed and actually unwanted. Also fix this for the other examples.
Why was the second `%s` changed to `%r`? This results in messages like: ``` version_added should be '2.8'. Currently StrictVersion ('2.7') ``` Instead of: ``` version_added should be '2.8'. Currently 2.7 ```
What if there is no self.resource_group set.
cow puns welcome!
Hmm, that could well be. It might be better to leave it away when we're not sure, though; if someone puts an invalid value here, Docker will complain anyway.
CI failure due to missing module metadata: ``` 2017-02-03 18:02:56 ============================================================================ 2017-02-03 18:02:56 lib/ansible/modules/cloud/dimensiondata/dimensiondata_firewall.py 2017-02-03 18:02:56 ============================================================================ 2017-02-03 18:02:56 ERROR: No ANSIBLE_METADATA provided ```
which is why we normally use `ansilbe_` to ensure the reserved namespace, there would be 'no deprecation period' ... but i know you loathe the extra typing
This doesn't seem to be the same thing: ``` In [1]: s = "abcdef" In [2]: [map(str.upper, s)] Out[2]: [['A', 'B', 'C', 'D', 'E', 'F']] In [3]: [str.upper(v) for v in s] Out[3]: ['A', 'B', 'C', 'D', 'E', 'F'] ```
This isn't clear to me.
`required=False` is not required (I know other lines have it but they're wrong ;) )
```suggestion if host_network_info.atBootIpV6Enabled is False: if host_network_info.ipV6Enabled is False: ... elif host_network_info.ipV6Enabled: ... ```
The `-` padding won't be separated by a space from the task name: ``` before ------------------------------------------------------------------ 0.00s after-------------------------------------------------------------------- 0.00s ```
required doesn't mean 'requried in config', it means a value MUST be provided, any way you allow to set it is fine
Suggest to add the alias for backward compatibility (including in the doc)
```suggestion description: Whether the domain is eligible for submission of "OV" certificates. Will never be C(false) if I(ov_eligible) is C(true) ```
That is why we have the `use` option, even if the 'general service manager' is chosen that does not mean the specific service you are using might be using an alternate one. Also I recommend using the specific service manager modules vs the generic 'service', specially now that collections exist and the names wont match (no fqcn). FYI, the `service` module should mostly never be used, the `service` action pre reroutes based on this fact, the module does it's own detection based on existing tools (which is a lot more fallible).
should be called single_placement_group to follow ansible standards
If it is not required, you don't have to add `required: false`. This is implicit (and makes it easier to see what is required).
nit: lower_case_with_underscores preferred over CamelCase per PEP8 (cur_value, set_value).
`add_group` returns a sanitized name, to ensure the `add_child` below doesn't error out either use that name or sanitize `name` beforehand. You can use `self._sanitize_group_name()`
I assume that if this is a container ID, it will identify the node where the container runs on? Maybe the description could be a bit more explicit.
no need to change. To handle these terms, you can search it in google with quote, for instance, you search âAzure CDN endpointâ instead of Azure CDN endpoint, you can find what should the case be
You should check whether the aks exist first, or it will crush
``` from ansible.module_utils.aws.core import AnsibleAWSModule ```
Please make this: ```yaml default: 'no' ``` as the default list of choices for booleans are `[ 'no', 'yes' ]`.
this is already a copy ... tempted to just add it in for templating and removing it after.
This needs the same alias treatment as timeout_sec has
Good question. That's one of the things we have to decide, I guess. And when decided we will modify all other modules to comply with this for consistency IMO.
Add a link to Online website.
This should be a string
Since `default` + `choices` are used, it's guaranteed that the key exists and so there's no point in defaulting to `False`. There's no way it's useful. So let's not assume a missing key. If somebody refactors things and it'll start failing, then this must start failing loudly too. ```suggestion output_format = context.CLIARGS['output_format'] ```
Great suggestion. Refactoring the code now.
To be consistent with other modules please use: ``` validate_certs: description: - If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates. ```
The examples are formatted as code, i.e. this won't work; better do ```suggestion # Example using constructed features to create a group per Docker Machine driver # (https://docs.docker.com/machine/drivers/), e.g.: ```
I like that idea as well!
pep8 warning: E305 expected 2 blank lines after class or function definition, found 1
raise AnsibleActionSkip('Check mode is not supported for this task.', result=result)
Oh, spoke too soon: the module name and description need to be updated since this isn't a security group module.
the AnsibleModule class has a method to find executables. Use that method: kinit_cmd = module.get_bin_path("kinit", required=True)
actually, that is not really the limit (just the limit of internally created aliases), verbosity does not have a hardcoded limit at this point (indirectly python int max value)
I don't have any preference. The only thing is that it probably shouldn't use underscores instead of plain old whitespace. It's not an identifier, after all. But I won't insist on changing this.
I'm not super sure, but everything I've seen seems to indicate the name is not actually hyphenated
again, this syntax we should phase out ``` asks_file: "{{ lookup('first_found', files=['tasks.yaml', 'other_tasks.yaml'], errors='ignore') }}" ```
disk_params['zones'] = [self.zones] if self.zones and self.zones != 'None'
You automatically exit on a rename, even while other values might change? Is that required? Other way could be to do the rename at the end? After reconf has happened if that is necessary
This method seems very fragile, and I think we'd want to avoid this pattern as we look at expanding the set of modules... It seems like we should be able to have a more generic method in module_utils for comparing and generating a patch (or updating an instantiation of a model based on the diff).
Thanks @mattclay. I'll remove these three lines when I get the files moved.
Not needed. `required: false` should be removed for all params.
This function is called in a number of places and auth is set elsewhere as well, so it looks like auth gets set to the same thing a few times for every playbook run. Not a blocker, just making note that it could be set once instead.
```suggestion version_added: "2.8" ```
We should fill the RETURN variable, but right now it should be `RETURN = ''' # '''` > If your module doesnât return anything (apart from the standard returns), you can use RETURN = ''' # '''.
This existence check executes on the ansbile controller, e.g 'your workstation', while the remote_tmp happens on the target machine, e.g 'webserver'. Even if this was being executed on the correct machine you would still have a race condition between check and creation. In any case, I already have a code change that fixes this correctly and it will soon be a PR.
I kind of don't like this sort of wrapping. What about to use the following style? ```python module.fail_json( msg="Failed executing lspv command.", rc=rc, err=err) ``` The same for all similar cases bellow.
```suggestion short_description: CLI command to create/delete access-list ```
CI failure due to PEP 8 issue: ``` 2017-02-13 21:48:33 ERROR: PEP 8: lib/ansible/modules/cloud/atomic/atomic_container.py:122:1: W293 blank line contains whitespace (current) ```
Not a must fix. I know I'm probably the one who named the response 'r' but I'd be explicit with the name since it's read on 134 and 137. Just easier on the eyes.
This doesn't need to be extracted out of try/except. You could've just changed only `raise` statement.
Typically, anything that can be reused by other modules, should be in the `anisble.module_utils.vmware` module. For now, this is the only module using it, so it can stay here.
Can you add `if self.param('qos')` at the top of the method, so we don't query `dcs`, in case it's not needed.
I'm not a huge fan of this formatting, it's actually rather confusing and doesn't read well. Our line length limit is 160 for this project, so you can mostly just inline it. The original line is more readable than what this became. ```suggestion module.fail_json(msg="The checksum for %s did not match %s; it was %s." % (tmpsrc, checksum, tmpsrc_checksum), **result) ```
This can instead be `continue` and let the `else` unnest.
Same here: if you want a `tuple`, you need to add a fake comma (or however that thing is called :D ). (There are some more, also in other files.)
'10' is missing from the list
```suggestion module.exit_json(**result) ``` More in line with a lot of modules.
use `to_text()` instead of `str()` as it is Python 'version safe'
Technically this sets the proper value for `url` but it's doing so twice. s/url = url/url/
```suggestion ``` You probably want to reference `ansible.builtin.systemd` instead.
I believe you will need to quote this as YAML may interpret it as null.
Thanks for spotting and fixing this one!
Pretty sure you shouldn't be removing ANSIBLE_METADATA.
I'm on the fence about holding this up to try and come up with something clever that seems like we know what the future will hold. With this being the only use case now, it's hard to know what another warning could look like in the future, and how we might need to represent that.
(looks like it's not `:ref:` role anymore looking at the change)
Use ``` ds = json.loads(to_text(r.read(), errors='surrogate_or_strict')) ``` instead of `decode()`
The 1.29 API change might only refer to allowing to *filter* by scope, though I'd be surprised that the API only allows to filter when you can't *create* a network with a given scope. It looks to me more and more like the docker API docs are kind of a mess ;-) Anyway, going to 1.30 is probably safe. If someone reports it also works with 1.29, we can still change it back.
```suggestion from ansible.module_utils.network.netvisor.pn_nvos import pn_cli, booleanArgs, run_cli ```
Is this right? `grep -r "u'prompts'" lib/ansible` -> zero results `grep -r "u'prompt'" lib/ansible` -> many results
flake8 will moan about this - and apologies for not being clearer. Leave this section where it was, and then everything should be fine. One thing to note while I'm in the area,but it's not a blocker, is that flake8 will complain less if you add HAS_BOTO3 to the list of imports and don't import boto3 (in the `except ImportError` part, just `pass`, as you'll handle that using HAS_BOTO3 later)
Classes don't inherently make things easier to extend, since in a module you'rd basically storing state in `self.[name]` in a program where there's only ever one instance.
It isn't mentioned in the dev guide but very often `present` is the default value of `state` parameter (and then the parameter isn't required).
Not necessary to break into two lines.
I think this is only returned on changed, again, diff against eos_banner in devel
https://github.com/openstack/openstacksdk/blob/master/openstack/cloud/openstackcloud.py#L3382-L3386 `availability_zone_hints` comes after `project_id` so you need to fix the order, or use a keyword argument.
Maybe. I couldn't find any instances of paging() being used with boto. And it can work with boto3, depending on the AWS API. But you're right, there is built-in paginator for this. http://boto3.readthedocs.io/en/latest/reference/services/rds.html#RDS.Paginator.DescribeDBInstances
I believe more explicit top-level dirs would read better: ```suggestion DEFAULT_TEMPLATE_DIR = ( pathlib.Path(__file__) / '..' / '..' / '..' / '..' / 'docs/templates' ).absolute() ```
This might not work well for Windows paths with drive letters.
I would simply call this `app_profile` as well.
I would leave this as is and focus first on getting multiple systems supported. After this is working, you can create another PR and add optional parameter for selecting a single system.
Omit `default` if there isn't one. But instead, please add `type`: ```suggestion node=dict(type='str'), ```
I'd prefer the name `create_timeout` since this only applies on create, and I wouldn't want users to mix it up with how long the module itself waits for the stack, but is a stack-level timeout.
`ansible-tower-cli` is both
The flatpak command is listed as a requirement but the module doesn't check if it is before proceeding. It would be a good idea to `module.fail_json()` with a useful message when that occurs. You can actually even get the full path with the function `module.get_bin_path()` as illustrated here: https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/system/service.py#L451 That would also get you a full path to execute so that you don't run into relative path issues.
Use of `'{}'.format` is not python 2.6 compatible. In 2.6 you must give a position, such as `'{0}'`
If we need `sys.exit(1)` one layer up, I'd prefer raising an exception to signal this. It could be caught and turned into an AnsibleError up the stack. During the latest refactoring it was quite clear that there's overuse of `AnsibleError` all over the place instead of doing the exit on the right level of abstraction but fixing this was out of scope...
I think we want to deprecate NUMBERTYPES so instead of moving it, just use its definition here (list(ansible.module_utils.six.integer_types) + [float])
dashboardId parameter is missing.
```suggestion default: "org.graylog2.indexer.rotation.strategies.TimeBasedRotationStrategy" type: str ```
It would be so much easier to read if it wasn't on diff
Not your fault, but can you remove the aliases[] please, since its the same value
This is where it is failing ``` cmd: /usr/bin/ovs-vsctl -t 5 set port br-test tag=None msg: 'ovs-vsctl: "None" is not a valid integer or range' ``` You will need a similar condition like `if want['vlan'] and want['vlan'] != have['vlan']:`
if its already a pvimomi dependency its ok to use, but then you really dont need to manage it this way, just import it in same block you do pyvimomi and only deal with missing pyvimomi
This one looks wrong
We tend to use `to_native()` for Python 2/Python 3 compatibility. For this you need to also add at the top: ``` from ansible.module_utils._text import to_native ``` ```suggestion module.fail_json(msg=to_native(e)) ```
we still want message if it exists, another way to fix this: ``` msg = getattr(e, 'message', to_native(e)) or to_native(e) ```
I think it should be on line 284 as well.
Missing full stop. `descriptions:` must be sentences.
```suggestion - Can be a dict containing the I(name) and I(resource_group) of the I(route_table). ```
Why do you only add `blkio_weight` for `docker-py >= 3.0.0`? This should be supported since `docker-py == 1.9.0`, according to the [changelog](https://docker-py.readthedocs.io/en/stable/change-log.html).
It's probably better to add this in the modules themselves, in case you ever want to add a module which can't have check mode (for whatever reason). Also, the way you set this, it will have no effect. You either have to change the line below to `super(HwcModule, self).__init__(*args, supports_check_mode=True, **kwargs)`, or you have to replace this line with `kwargs['supports_check_mode'] = True`, or (my favorite solution) change the module to add this argument when calling `HwcModule.__init__`.
If you could wrap an `awsretry` around this, that would be great, but not going to block on it.
```suggestion description: List of Python regex patterns to search for in variable names. ```
We should add a note by saying win_service will run idempotency checks on the actions as a whole and not as individual entries. This is because the list order is important to determine the order of the actions themselves. Hopefully this makes sense? Also what happens when someone specifies an empty list. In my mind this should just remove the recovery actions from the service but the code seems like it expects 3 or fails when not null.
we normally use display instead of print
We do have guidelines on boto3 exception handling https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-2 `botocore.exceptions.ClientError` covers most needs, and is a little better than just catching `Exception`
No trailing dot on short_description. Keep the index clean.
Don't use `dict()` here; use `None`. It will be overwritten anyway.
It seems `AMQPConnectionError` could be used instead of `Exception`.
result is too close to 'results' which we use internally, i recommend changing the name
```suggestion - Vhost to apply access privileges. ```
actually, we probably want to template all loop_control fields, not just pause
Please put this on a single line. Lines can be 159 characters wide.
pass doesn't advance result to the next layer of the object, though. Imagine a data structure like this: ``` python class Alice: foo = 1 class Bob: bar = Alice() foo = 2 obj = Bob() del obj.bar result = _get_vm_props(obj, ('bar', 'foo') # with return None: result == None # with pass result == 2 ``` For snapshot, what are you calling? This seems right and it seems like it would do the right thing: ``` snapshot = _get_vm_prop(vm, ['snapshot']) ```
This should be a method call, `response.raise_for_status()`
This is covered by `assert self.hostA != other` ```suggestion ```
I don't think owner should be an option. I'll check tower-cli to make sure we have this right.
You are missing the part about introducing a wrapper function that will iterate over the array and call. What I had in mind is something similar to this: ```diff diff --git a/lib/ansible/module_utils/redfish_utils.py b/lib/ansible/module_utils/redfish_utils.py index adbb3316d2..8e4d43db06 100644 --- a/lib/ansible/module_utils/redfish_utils.py +++ b/lib/ansible/module_utils/redfish_utils.py @@ -124,23 +124,23 @@ class RedfishUtils(object): response = self.get_request(self.root_uri + uri) if response['ret'] is False: return response - data = response['data'] - if 'Systems' not in data: + if 'Systems' not in response['data']: return {'ret': False, 'msg': "Systems resource not found"} - else: - systems = data["Systems"]["@odata.id"] - response = self.get_request(self.root_uri + systems) - if response['ret'] is False: - return response - data = response['data'] - if data.get(u'Members'): - for member in data[u'Members']: - systems_service = member[u'@odata.id'] - self.systems_uri = systems_service - return {'ret': True} - else: - return {'ret': False, - 'msg': "ComputerSystem's Members array is either empty or missing"} + + response = self.get_request(self.root_uri + data["Systems"]["@odata.id"]) + if response['ret'] is False: + return response + + self.system_uris = [ + i["@odata.id"] for i in response["data"].get("Members", []) + ] + if not self.system_uris: + return { + 'ret': False, + 'msg': "ComputerSystem's Members array is either empty or missing", + } + + return {'ret': True} def _find_updateservice_resource(self, uri): response = self.get_request(self.root_uri + uri) @@ -275,7 +275,16 @@ class RedfishUtils(object): return response return {'ret': True} - def get_storage_controller_inventory(self): + def get_multi_storage_controller_inventory(self): + ret = True + entries = {} + for system_uri in self.system_uris: + inventory = self.get_storage_controller_inventory(system_uri) + ret = inventory.pop("ret") and ret + entries[system_id] = inventory + return dict(ret=ret, entries=entries) + + def get_storage_controller_inventory(self, system_uri): result = {} controller_list = [] controller_results = [] @@ -283,7 +292,7 @@ class RedfishUtils(object): properties = ['Name', 'Status'] # Find Storage service - response = self.get_request(self.root_uri + self.systems_uri) + response = self.get_request(self.root_uri + system_uri) if response['ret'] is False: return response data = response['data'] diff --git a/lib/ansible/modules/remote_management/redfish/redfish_facts.py b/lib/ansible/modules/remote_management/redfish/redfish_facts.py index 9e8d088195..50a6d7bae0 100644 --- a/lib/ansible/modules/remote_management/redfish/redfish_facts.py +++ b/lib/ansible/modules/remote_management/redfish/redfish_facts.py @@ -218,7 +218,7 @@ def main(): elif command == "GetNicInventory": result["nic"] = rf_utils.get_nic_inventory(category) elif command == "GetStorageControllerInventory": - result["storage_controller"] = rf_utils.get_storage_controller_inventory() + result["storage_controller"] = rf_utils.get_multi_storage_controller_inventory() elif command == "GetDiskInventory": result["disk"] = rf_utils.get_disk_inventory() elif command == "GetBiosAttributes": ``` Repeat this for all the functions that access `self.systems_uri` directly and you should be gold. But before you finalize anything, get some input from the maintainers about the final result structure. What I did here is just an example merge that felt at least reasonably useful.
I don't like this warning. If the force parameter is given, this is expected behavior. So no warning is needed. It just clutters the Ansible output. Logging something that is not shown by default seems enough if needed.
s/Gets or sets// s/that/the specified/
changes like this should be clear about version: 'Since version 2.3 this module depends on boto3'
`aliases: []` lines are not needed, please remove
> Line 446 handles this. No line 446 handles `TypeError` and `ValueError`. But if disk['size'] don't match the regex, `expected` isn't defined and `if "." in expected:` raise a `NameError` (which you don't catch).
if module is going to create this i would say that it should remove it in the end, but only if it created it during this run. Thankfully apt db requires locking so it would not affect 'concurrent' package installations, though there might be a race condition depending on how it is implemented.
`_ssh_retry` is at fault here, as it wraps `_run`. And `_ssh_retry` raises `AnsibleConnectionFailure`. We can see if it is feasible to have `_ssh_retry` return the "return tuple" if it has reached it's max attempts. I don't know how much that would affect the rest of the code though. The current approach is pretty targeted.
```suggestion version_added: "2.12" ```
i think the main issue is detecting 'unset' for this keyword, which having a default makes harder
```suggestion already contains some attributes, then new attributes overwrite existing attributes. ```
i would avoid using requests, introduced dep that is not needed, as functions in urls.py should cover what this plugin uses.
`http://developers.typetalk.com/` does NOT work for me. `http://developers.typetalk.in` works fine.
I wouldn't default parameters that are passed to AWS. It leads to unexpected consequences. For example, imagine someone used your module to start managing a cluster they'd already created with a m3.medium type. They didn't specify the `instance_type` parameter. When they run the play, your module *might* (i haven't checked your code) change the type to a t2.medium which is not what was wanted. Instead just make it a required field so the user has to be explicit.
This change will break existing playbooks if they rely on the default username being `'admin'`.
The fix has been merged. Please fetch, rebase and push the commits. :)
Marvelous ! ð
Given that this module didn't exist before, no need to keep this.
This does not need to be wrapped.
```suggestion options: - SYSTEM=LDAP - registry= ```
If it is not required, you don't have to mention it because that is the default.
required: False is the default, so can be omitted. ```suggestion ```
If you add ```suggestion keyfile=dict(type='str', required=False), ``` then the next diff will be simpler. (Here, the `headers` line was touched even though the PR does not concern that line.)
```suggestion - The repository owner. ```
The provided tags should be compared with the current tags on the resource and only set tags if they are not a subset or equal to those that exist
well, not die with unexpected exception .. tempted to say there is no real reason the type should be incorrect for any keys. So ending in an error should be fine, just not an unhandled one.
Since changed will always be True to get here you can return True and remove the changed variable assignments.
I don't think this should be a supported option, the source should also be set when `state: present`.
Would be better formatted as "When I(state) is absent this switch will use the C(-f) [...]" and there's a missing full stop.
return value does not match RETURN doc string
`configured on the trunk, i.e. C(2-10,15).`
I think you can't create imutable role, and all roles created by users are mutable, so this parameter is not needed.
Same here as `create` method
Again, this will only retrieve disks for a single system.
Please add: ``` if not self._module.check_mode: ```
It's more common to use the helper camel_dict_to_snake_dict here https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#camel_dict_to_snake_dict. You can just do `camel_dict_to_snake_dict(**domain_status)`
This can be removed since the same line has been added recently: https://github.com/ansible/ansible/blob/83bf90e/lib/ansible/modules/system/systemd.py#L343
Please remove this line, it is used for replacing the keys for the return values of the virtualmachine API response. this is not meant to set a default.
before using 'datastore': ``` if datastore is None: self.module.fail_json(msg="Unable to find a datastore for diskâ¦ ```
stdout and stderr are being returned by suprocess.Popen().communicate() so they should be bytes already, I think.
I added 4d4553bbb035ee1d49bff7925876c1dd88282bb6 so you can remove the try/except and just keep the contents of the try.
When a project variable does not exist, it will be created.
_action_on_failure_ should be in the same level as _hadoop_jar_step_
Descriptions should have a trailing dot. (Exception is `short_description`)
Should this be `response` since that is what is returned? I don't see `result` used within this function.
I would recommend to keep these keys and their values and let them go through deprecation cycle like we did other module. This is mainly for maintaining backward compatibility.
Display should use text strings, will need a to_text in the format and u prefix the string so we don't have any ASCII encoding errors on Python 2.
These three dicts are almost identical. I feel like you could generate some of it in common code.
possibly add compose/groups for constructed vars and groups (see virtualbox for example)
I believe Service instance is right object to return after Connection to API Endpoint. Content can always be retrieved at module level.
@mrmagooey so this is what I meant
In that particular example you should be able to use this instead: ```python mocked_xenapi = mocker.patch.object(fake_xenapi.Session, 'xenapi', create=True) ```
I think that the whole playbook should fail if the get fail, rather than silently forgetting some information.
This module creates domains but doesn't have the ability to remove them. Is this incomplete? I would expect a `state` option that allows the choices 'present' or 'absent'.
Try ```suggestion :type mutually_exclusive: Optional[list] ```
No need for quotes here.
You could import this from ansible.module_utils.ec2 instead of manually setting it here and in the except ImportError.
Referring specifically to the kubeconfig definition, the remote file path will cover a lot of use cases but I was wondering if it would be useful to be able to specify it inline as well, which would open the door for keeping your authentication with your ansible playbooks/roles.
type='str' is not needed as it's the default
this is not used and shouldn't be imported
While fixing this could just do `module.fail_json(msg="Failed to modify tags.", exception=traceback.format_exc(), e.message)` (+ import traceback) to be uniform with the boto2 guidelines. https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto-2
@resmo it is, but they are not using the results to compare, so same group will never be in inventory.groups (which you don't need to do since add_group already checks this).
@Qalthos it won't bury the original exception, it's just a way to spell `raise ConnectionError from orig_exc` without actually using a syntax, unavailable under Python 2.
Not sure why this and the one above it start out as an empty dict, but you are matching the surrounding code...
Disk caching policy controlled by VM. WIll be used when attached to the VM defined by C(managed_by)
why not `if key not in ('recursive', 'reverse'):`? that's also easier to extend in the future.
``` rc_code == 0 ```
exited seems to be reasons for failed/stopped, not really different states, unsure also about dead/failed
```suggestion version_added: "2.11" ```
Error message seems wrong, if I understand the plugin
`Install and remove grafana plugins.`
You can leave out required: false (false is the default :-)
could create a function that take a tag_name entry (so, dict, or string). and return `(category_obj, tag_obj)`. This way we can simplify the loop. Basically line 239 to 265 should move in the function.
Grammar nitpick... Quick fix here would be to swap the comma for a semi-colon. The more detailed version is that this forms an invalid dependent clause the way it is written right now. A semi-colon would fix that, as would splitting off the `use the ...` content into its own sentence.
For integers please: use `type='int` remove the `isdigit` check from `check_params`
And thanks also correcting "it's" to "its".
remove unnecessary code.
"is" goes one word to the left, between "force" and "set" :-)
It might be nice to be explicit here just to be safe, even though copr currently prevents `/` in names. ```suggestion copr_user, copr_project = module.params['copr'].split('/', 1) ```
default=None is the default
And then after line 71: ``` python assert makedirs_called == 1 ```
brackets in the URL
return status from this and handle accordingly in `module.exit_json`
Yeah, a name can either be a global or a local in a scope, and Python determines that during compilation time by looking for certain statement types (such as assignments or imports). You could do this at the top level: ``` python try: # Python 3 from importlib import reload except ImportError: # Python 2 pass ``` or use `six.moves.reload_module`. (Hm, [importlib.reload](https://docs.python.org/3/library/importlib.html#importlib.reload) appeared in Python 3.4, before that it was [imp.reload](https://docs.python.org/3/library/imp.html#imp.reload). I suppose it's fine to require Python 3.4+ for Ansible -- people who don't have it can fall back to 2.7.)
This should be a lot simpler and take in differently named options than what is currently here. When having options like this it is best to keep them in a snake_case format that is simple to understand. The other point is you have predefined combination values like `Key, Secret, & Certificate Management`. This option should take in a list of values and they are combined together to form the final permissions. While some of these values may not go together (I don't know enough about access policies), the module should be able to handle that. You trade complexity in the module code for easier use by end users. For example I would set the choices to be something like ``` default: - key - secret - certificate choices: - key - secret - certificate - sql_server - backup - data_lake_store ```
Hi I am not a maintainer, this is just opinion of "esthetics" and how comfy is to track down changes later down the line.
Please set a `name:` for all EXAMPLES ```suggestion - name: Example iptables_raw: ```
Add a note that - `path should not start with '/'`
you might also want to use the `warn` method to let the user know of issues.
I think `if module.params.get("targets"):` is right here. It indicates that the module needs to compare the current targets with the targets the user provided and remove any that the user hasn't provided. If the comparison within this `if` is wrong and the wrong targets get removed then that should be fixed. If I provide ``` ... purge_targets: true targets: - Id: i-01234567 Port: 80 - Id: i-98765432 Port: 80 ``` and then in a second playbook: ``` ... purge_targets: true targets: - Id: i-01234567 Port: 80 ``` I would expect target i-98765432 to be purged after the second playbook. But with this patch this if would now be false, so the path on line 538 would be used and all targets would be purged regardless of the target I want to keep. I was thinking this line should be changed: https://github.com/ansible/ansible/pull/39715/files#diff-c008972f0ccccd4a4d9b8c1de95c4d08L538 to `elif module.params.get("targets") == []` or `elif module.params.get("targets") is not None`
fail if `root` is used.
That functionality should be added to `urls.py`
Since it's a sentence, start it with an uppercase letter. Also, it looks like the proper docstring would sound like `Normalize boolean option value.`
Since the name of the parameter uses 'state', I'd use it in the description as well, to make things consistent. ```suggestion - The state of the virtual network peering. ```
```suggestion - You cannot remove the default gateway from the (vMotion) TCP/IP stack, if you have a VMkernel adapter configured for this TCP/IP stack. ```
convention for the name of the first argument of a classmethod is "cls". If the parameter isn't used at all, make it a @staticmethod instead and remove the parameter altogether.
That said, it seems some other modules do this too. Still a bad practice IMO.
You can replace this with `type: bool`
Is this function used to retrieve large files? If so, I suggest redirecting directly to the file, instead of using PIPE -> 'stdout' variable and writing to the file only then.
instead of wrapping subprocess_with_retry with `to_text`, wrap this `std_out`
Cool. So this seems like the right strategy for accessing files on the controller.
please use list literal `[ ]`
a list of dictionaries
```suggestion options.extend(['--label', label]) type = 'luks2' ```
I think there's a dot too many: ```suggestion visit our L(Getting Started with Docker Guide,../scenario_guides/guide_docker.html). ```
Looks like you've got an extra space prefixed here !
There is another place where this function is called. Would you mind fixing that also? https://github.com/eakman/ansible/blob/2a22085b2b4af6aa9de4b82311e9586d75611bb9/lib/ansible/module_utils/network/eos/eos.py#L423 Thanks.
probably a better error would be 'Specified hosts and/or --limit does not provide any targetable hosts'
This code basically repeats one above, which supports my previous point that having a separate class for distribution entity would be a good abstraction to have.
```suggestion - Use with I(state) C(present) to purge the endpoint. Set to C(true) to have the endpoint be purged. ```
If it's not required, don't add this please.
shouldn't you only check if it does not already match the choices? Just in case 'False' or 'True' are valid choices
`password = dict(no_log=True),`
The first line of docstring is a title and should be one sentence fitting 70 chars as per PEP 257
and this is my workaround https://github.com/swisstxt/ansible-role-cloud-infra/blob/master/tasks/main.yml#L99
There is no guarantee something was changed here. So this would mean the module can only either fail or report changes.
Note: If the only way you end up using changes is as a boolean condition it's better to just use boolean values. ie: instead of making it an integer and incrementing, do this: ``` python changes = False [...] if new_targete_name not in dependent_target_names: changes = True [...] if not changes: break ```
This should just force strict and leave unchanged on typeerror ```diff --git a/lib/ansible/plugins/action/set_fact.py b/lib/ansible/plugins/action/set_fact.py index d7fe573c1a..934245d07c 100644 --- a/lib/ansible/plugins/action/set_fact.py +++ b/lib/ansible/plugins/action/set_fact.py @@ -51,8 +51,11 @@ class ActionModule(ActionBase): "letters, numbers and underscores." % k) return result - if not C.DEFAULT_JINJA2_NATIVE and isinstance(v, string_types) and v.lower() in ('true', 'false', 'yes', 'no'): - v = boolean(v, strict=False) + if not C.DEFAULT_JINJA2_NATIVE and isinstance(v, string_types): + try: + v = boolean(v, strict=True) + except TypeError: + pass # not valid bool string facts[k] = v result['changed'] = False```
Can lead to a KeyError - maybe `for current_option in current_option_group.get('OptionGroupsList', []):`
A simple `crypto.Error` doesn't work? That would also remove the doubled import from OpenSSL...
There is no benefit to wrap these get, post, put, delete methods inside this class. We can just use the api client accessible from this class, and be able to catch the exceptions raised from the ovh python package. This is not possible the way it is now, because all api exceptions are normalized to a less useful OvhApiError
All `description:` should be full sentences, ie. start with a capital letter and end with a full stop.
It's on the agenda for London, so I am confident that once we have decided about the plan, we can collaborate quickly on the implementation. Exciting times !
```suggestion type: list aliases: [ 'host_groups' ] ```
`self.module.fail_json` should be called right here (`fail_json` is called within an `except` block, no need to use `exception` parameter): ``` except OnlineException as exc: self.module.fail_json(msg="A problem occurred while fetching: %s (%s)" % (server_path, exc)) ```
To be inline with other modules please change to validate_certs: description: If set to C(no), the SSL certificates will not be validated. This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site. The default should be True (e.g. require valid cert) This means playbook writers need to explicitly write `validate_certs: False`, e.g. the default is to be secure
What is this for? kubectl is not used at all by ansible, afaik
```suggestion - The resource ARNs. ```
- Slicing creates a copy so it might be better to avoid doing that inside of the inner loop - We can move some calculations outside the loop (although it probably won't make much difference with just 3 passes). - Instead of assert, we probably want to write a unittest to check that this does the right thing. I'm okay with leaving the assert in until we write a unittest, though. So it would look something like this: ``` python chunk_len = min(1024 * 1024 * 2, file_len) with open(tmp_path, "wb") as fh: for _ in range(passes): fh.seek(0, 0) # get a random chunk of data data = os.urandom(chunk_len) for _ in range(0, file_len // chunk_len): fh.write(data) fh.write(data[:file_len % chunk_len]) assert(fh.tell() == file_len) # Remove this assert once we have unittests to check its accuracy os.fsync(fh) ``` Hopefully that's right and I'm not off by one byte :-)
not a list of dicts, just pass a dict to the with: ```yaml with_cyberark_password: appid: 'Application1' query: 'safe=...;' output: 'password ....' ```
switch to overriding `reset` on ConnectionBase
This is only used on the line immediately below, so just use it there instead of assigning.
Glancing over the code, `packages_to_remove` might be a clearer name here- I saw the `packages.remove('setuptools')` below and was like, "wait, I thought we wanted to keep it?!" until I realized what was happening...
I think the module should also return something sensible (which is not an error) when it is not a manager node, or the docker daemon is not in swarm mode at all. Or, if that makes implementation too complicated, `docker_host_facts` should return something like that :-)
```suggestion - name: TCP whitelist violation debug: msg: TCP port {{ item.port }} by pid {{ item.pid }} violates the whitelist vars: tcp_listen_violations: "{{ ansible_facts.tcp_listen | selectattr('port', 'in', tcp_whitelist) | list }}" tcp_whitelist: - 22 - 25 loop: "{{ tcp_listen_violations }}" ```
I'm not sure this function is useful
```suggestion - The administrator username for the BIG-IP device. ```
On Python 3 `ConfigParser` is `configparser`, so you'll need something like this: ```python try: import ConfigParser except ImportError: import configparser as ConfigParser ```
typo ```suggestion - Can be a dict containing the I(name) and I(resource_group) of the security group. ```
Bravo on tackling one of the gnarlier test setups ;-> :+1:
no, iirc at that point you have `task_result._task` which is 'already templated and same structure' as you need , no need to retemplate, specially since vars CAN change and you might get diff results
Shouldn't this go before the part above this where you are setting `self.results`. I'm struggling to see how this even affects the results in the facts module case.
That makes perfect sense to me.
Please use a real world example, also having more than 1 to handle the different create_mode scenarios would be great.
We have removed checks like this in the past. One thing to note is that the key need not exist on the filesystem to work if it has already been loaded into the agent. We would need to ensure that missing files are allowed.
I think this option is deprecated - https://www.vmware.com/support/developer/converter-sdk/conv51_apireference/vim.vm.RelocateSpec.Transformation.html
Please remove this line, it repeats whats in `choices:`.
+1 to spelling out virtual machine
List comprehensions create unnecessary throw-away lists in memory. It's better to use generator expressions because they are lazy. Also, this is a great case for using `all()`/`any()` (these two exit iterating through generators early, when possible): ```suggestion return all(part != ".." for part in path.split(os.sep)) ```
What does qubes do if the file already exists in QubesIncoming? If it overwrites, I think this code will work. If it errors, we'd have to deal with the error here.
This should stay in each file to ensure the file is considered UTF-8 by Python. Don't remove those lines.
Is this msg necessary for backwards compatibility? Seems a little misleading since launch permissions may not have been updated.
Patch looks good as is. So :shipit: for me. But was thinking it might be a good time to move this to a helper method, since then it could return early and lose a few indention levels if you wanted to. ``` python def _collect_dmi(self): dmi_virt_facts = {} dmi_bin = self.module.get_bin_path('dmidecode') if not dmi_bin: return dmi_virt_facts (rc, out, err) = self.module.run_command('%s -s system-product-name' % dmi_bin) if rc != 0: return dmi_virt_facts # I might split this into two methods, one for finding and running dmi, and another for parsing it. # and passing in the dmidecode output to the parsing method # that would make the parsing code easy to test vendor_name = ''.join([line.strip() for line in out.splitlines() if not line.startswith('#')]) if vendor_name in ['VMware Virtual Platform', 'VMware7,1']: dmi_virt_facts['virtualization_type'] = 'VMware' dmi_virt_facts['virtualization_role'] = 'guest' return dmi_virt_facts ``` with ``` python dmi_virt_facts = self._collect_dmi() virtual_facts.update(dmi_virt_facts) ``` or if split into two ``` python dmi_bin_output = self._run_dmidecode() dmi_virt_facts = self._collect_dmi(dmi_bin_output) virtual_facts.update(dmi_virt_facts)
If you do decide to only support the newer version, it would be a good idea to detect older, unsupported versions of `pypuppetdb` and raise an appropriate error message.
Because the user needs to be able to force `false` in module params and have that *not* get overridden by an environment variable. You need to have a check like: `insecure = params.get('insecure') if params.get('insecure') is not None else bool(ca_file)` So that way a user can supply a CA file but also ask for insecure transit.
@Akasurde ``` + if user_folder in [None, '', '/']: + # User provided blank value or + # User provided only root value, we fail + self.module.fail_json(msg="vmware_guest found multiple virtual machines with same " + "name [%s], please specify folder path other than blank " + "or '/'" % self.params['name']) + elif user_folder == '/vm' or user_folder.startswith('/vm/'): + # User provided VMware default vm folder with / or + # User provided nested folder under VMware default vm folder i.e. folder = /vm/india/finance + user_desired_path = "%s%s%s" % (dcpath, user_defined_dc, user_folder) + elif user_folder == 'vm' or user_folder == '%s' % user_defined_dc: + # User provided VMware default vm folder + # User defined folder is datacenter i.e. folder = 'DC0' + user_desired_path = "%s%s/vm" % (dcpath, user_defined_dc) + else: + # User defined datacenter is not nested i.e. dcpath = '/' , or + # User defined datacenter is nested i.e. dcpath = '/F0/DC0' or + # User provided folder starts with / and datacenter i.e. folder = /ha-datacenter/ or + # User defined folder starts with datacenter without '/' i.e. + # folder = DC0/vm/india/finance or + # folder = DC0/vm + user_desired_path = user_folder + + for vm in vms: + # Check if user has provided same path as virtual machine + actual_vm_folder_path = self.get_vm_path(content=self.content, vm_name=vm) + if not actual_vm_folder_path.startswith("%s%s" % (dcpath, user_defined_dc)): + continue + if user_desired_path in actual_vm_folder_path: + vm_obj = vm + break ``` * `if user_folder in [None, '', '/']` â fail OK, I am good with that. * `elif user_folder == '/vm' â¦` â `user_desired_path = "%s%s%s" % (dcpath, user_defined_dc, user_folder)` If user_folder == '/vm', user_desired_path will be = to "/dcpath/user_defined_dc/vm". So if `actual_vm_folder_path.startswith("%s%s" % (dcpath, user_defined_dc))`, user_desired_path will always be in actual_vm_folder_path. The case `user_folder == '/vm'` is useless since we get the same result with user_desired_path = user_folder. * `or user_folder.startswith('/vm/'):` â `user_desired_path = "%s%s%s" % (dcpath, user_defined_dc, user_folder)` It bring a bit of precision (compared to user_desired_path = user_folder), so Ok for me * `elif user_folder == 'vm' â¦` â `user_desired_path = "%s%s/vm" % (dcpath, user_defined_dc)` Same as before, the case `user_folder == 'vm'` is useless since we get the same result with user_desired_path = user_folder. * `or user_folder == '%s' % user_defined_dc:` â `user_desired_path = "%s%s/vm" % (dcpath, user_defined_dc)` Side note: `user_folder == '%s' % user_defined_dc` should be written `user_folder == user_defined_dc`. Same as before, the case `user_folder == user_defined_dc` is useless since we get the same result with user_desired_path = user_folder.
Should also handle BotoCoreError
`required=True` does not ensure that strings are not empty. It only makes sure that they aren't `None`. So it's better to keep this test.
looks good to me
This would add a dependency which is not desired. There is `retry_with_delays_and_condition` function that you might be able to use in https://github.com/ansible/ansible/blob/7830e5308e85707b5527f0769836ccfb3c8b1fb3/lib/ansible/module_utils/api.py#L138.
super minor, but the team attribute isn't actually idempotent (not work fixing)
``` hostname: '{{ vcenter_hostname }}' username: '{{ vcenter_username }}' password: '{{ vcenter_password }}' ```
This line isn't needed, `required: false` is the default.
Error message could mention the erroneous value (`len(self.topic)`). DONE
I would write it as - ``` self.module.params.get('uuid') or self.module.params.get('name') ```
`organization` must be required
I dislike the hack but accept your reasons for it :)
This method's name is misleading, since last manager returned is stored, or method body is broken.
updatedâuptodate It's easier to understand.
This should be `'supported_by': 'community'`
```suggestion - Set to C(present) to check that the machine exists with the requested configuration. If the configuration of the existing machine does not match, ```
After some thought, I would like to see this is as a private or static method. Nested functions cannot be tested independently and are a bit harder to understand when reading since they are less common.
Minor consistency nit- our stuff seems to be using `[action]_[backend]()`, where these aliased imports have that reversed. I'd vote for `[action]_[backend]()` over this- makes the code a little easier to read...
```suggestion required: false default: GB ```
Not needed with AnsibleAWSModule
else is unnecessary here because we raise an exception before
This needs to be updated with `api_url`
Missing `"..."` `set_fact: pubkey_string="{{ pubkeys.results | map(attribute='ansible_facts.pubkey_list') | join('\n') }}"`
(nit, your call) this is not just endpoints but all params. that works fine, but consider dropping this var and directly using `module.params`.
I believe that is tentatively slated for 2.11
Please remove `required=False`.
So add `type='str'` here too. And we tend to sort lists if the order is of no importance.
We should add a point here and for `filter`, and `ldap_filter` saying they are mutually exclusive.
there is no need to version params for new modules
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
I'd like to see the return include a data structure of /etc/hosts content. Maybe a serializeable version of the EtcHosts object? (not a requirement, just a nice to have)
It looks like params are not only moved, some are added.
Please add in the description what the task is doing in detail. E.g. **Enable all firewall profiles.**
Here, 'datastore' can't be in expected_disk_spec as: ``` if expected_disk_spec.get('datastore'): â¦ elif expected_disk_spec.get('autoselect_datastore', False): we are here ```
```suggestion self.existing = to_text(f.read(), errors='surrogate_or_strict') ```
Do this in two statements instead of one for clarity. also use to_native instead of str for safety: ``` python args = args or argv args = [to_native(arg, errors='surrogate_or_strict', nonstring='simplerepr') for arg in args] ``` str can traceback with non-ascii characters on Python2. to_native will use utf-8 as it's default encoding so it's what we should choose. If you care about details, run_command always uses bytes internally so you could use to_bytes here to transform into bytes instead of native strings. However, the code uses args verbatim in some of the ```exit_json()``` calls below and those would have to use text on Python3 (and should use text on Python2) so native strings are the best choice.
This should probably be `reset` now (to work with non-winrm), and arguably both still need to be in an AttributeError catch block (for theoretical old plugins that don't extend ConnectionBase, though I don't know if we're bothering to support those. Regardless, `_reset` will fail on most plugins, and since `reset` is now on ConnectionBase...
You can save some indentation by reverting this clause: ```suggestion if not os.path.isdir(collection_path): continue ```
We tend to quote names and values in messages for readability. ```suggestion meraki.fail_json(msg="Parameters 'org_name' or 'org_id' parameters are required") ```
Actually this is not entirely true. In fact if a service is stopped it needs to be started since load won't bring it up again.
```suggestion have full control about whether a value should be masked, protected or both. ```
typo of sample
thanks. but there has a lint error `trailing spaces`.
I think that's the point, it needs to mutate the existing reference, or the code needs refactored in a larger scale.
I think it would be better to use ``params`` with ``requests.get`` rather than building url query.
This doesn't cover the case where the protocol is still the same, but the port changed (ie, http_port: 80 to http_port: 8080)
As stated above I would recommend to have one recommended way to specify the version, i.e change this to `name: bottle==0.11`
I will leave it to smarter people than I to tell me if this is right.
It's optional, and required by the **vmware_guest** module.
It seems this option was missed out. We can remove it since `authorize` is also part of `provider`
I'd rephrase: "Path to an initial ramdisk to be used with the kernel specified by `kernel_path` option".
The `if want['vlan']` test isn't needed. That value will default to `None` per the `argument_spec`.
need to catch BotoCoreError here too.
I think this will add additional overhead of separate library to both user and maintainer. So -1 from my side.
boto3_conn never throws a ClientError at this point. You need to handle missing Profile (botocore.exceptions.ProfileNotFound) and presumably if `region` is not set too.
the keep consistency across modules, my suggestion is to name this param `state`. If you'd like to keep `operation`, an alias would be fine. Also consider to set the default to `present`
Add a note that 'apply' is added in version 2.6.
Please sort the items in a list (in those case where the order is of no meaning)
2.7 at this point
The current meaning of the `force` option is to indicate that the key should always be (re-)generated, even if an existing key already has the required properties.
```numa_nodes_service = self._service.service(entity.id).numa_nodes_service()```
No, the real solution is to know which type of Exception (in the previous try-catch block) returns an error as a list. We know socket.error is in this case, but it seems another type of exception does this as well. So we should catch that Exception as the right type, and handle it accordingly (and not bother with handling the general Exception type). I would even remove that `except Exception as e` part completely. (And test different type of error conditions to see what other type of Exceptions are common).
How about calling it `nonleaders` instead of `nonloader`? The other groups with more than one entry also have plural names.
Maybe we could call this something like load_data or load content? since it may not actually be reading files at all.
Style note: toplevel functions should be placed above class definitions)
yes, but quote it as string, otherwise it will be read as float
so this assertion looks incorrect, i would expect and empty string as the ssh args
not that, i'm talking about `become_methods` list class variable.
why remove this? modules might still return rc as fail condition
use type=path for files
Please add dot a the end. ... all host networks ...
not a fan of the aligned assignments (is that a pep8 thing? I'm not really a python guy)
```suggestion - The path and name of the project. ```
the lookupfile should not presume a templates/ subdir so we may want to add it always after appending it, not before
`waitfor` alias not required, added in other platform for legacy reasons
Technically since we're doing this in a fixture, either `monkeypatch` should be used to insert these into `globals()`, or you should return `mod`, and then just use `mod.Template` and `mod.AnsibleNativeEnvironment` in your tests.
```suggestion # Note: These examples do not set authentication details, see the AWS Guide for details. ``` It's helpful to hint the AWS Guide here so folks know about it.
`if doc.get('options') is not None:`
So we tend to not do the else if the previous if-block returns from the function. The else is unneeded.
`check_args()` is no longer required.
@annikulin it needed more work than I initially thought to get httpapi plugin host var working. Probably we can commit this code as is and I will commit a followup PR to make it configurable using ansible host vars
Something like: ```suggestion if path.endswith(['nmap' + e for e in C.YAML_FILENAME_EXTENSIONS]): ``` would keep a users pref for yaml extensions.
Would use a dict comprehension here: ``` return {key: str(value) for key, value in config_systctls.items()} ```
Shorter version of header can be used [here](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/network/mlnxos/mlnxos_config.py#L4)
this expands variables as per the controller, not the proxy itself, if this is the case it is prefereable to just use a `lookup('env' ..` and allow configuration to be explicit as we don't want environment variable expansion in general in the options.
Please be consistent while mixing up single and double quotes in strings. Always try to mimic the style of surrounding code, so that it would look like it all was written by the person.
```suggestion assert isinstance(wrap_var(['foo']), list) ```
Are these common aliases with maven? Generally with modules we just use `user:` and `password`
you should not need this as connectionbase already has self._display
@tstoner You can just do `if device_info`? same for os_version and os_platform.
unless we need this to be specifically a check that the option *is not None* I think we should do something like this: ``` python if not module.params[key]: ```
I would be tempted to extract this check into a method or two. (To simplify reading the logic, and also to make it easier to easier to unit test).
we might still need to flush, small messages that fit in the buffer won't make it to user until some other messages pushes the limit and/or the program ends
version_added: "2.3", If you could fix that, then I'll merge.
I would prefer a more specific parameter name, like `ntp_server`, you can still keep `name` as alias.
Wrong module names in examples.
absent state also need to return `changed` field.
instead of assuming that if not found this path does exist, just pass the search pat as an option to get_bin_path and it will error out if even this fallback is not present
```suggestion priv, append_privs, module) ```
Matt may not OK with these choices. Refer: https://github.com/ansible/ansible/pull/51320#discussion_r267579389
Ah, good eye.
not a blocker but there are many helper codes for mutually_exclusive, required_if, required_one_of etc. args in AnsibleModule
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific version_added when the options have been added in a newer release.
I'd rephrase: 'Create a connection with options defined in ini file:'
I think this example can be removed.
Using http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.Client.revoke_security_group_egress is more usual for most of our boto3 module (and more similar to the existing code). This is just one example, the same applies for other actions on the `SecurityGroup` class
Instead of removing, just scope down to only catch botocore errors.
You can also simply write `param_p['mode']` here. Ansible will put in `None` if the user didn't specify it.
I was going off my knowledge of EC2, I've not worked with Lightsail. Fair enough if you can't use custom AMIs (today). At the same time, adding additional 'requirements' on top of boto3's only risks breaking use cases you might not have thought of.
Please use `self.param('')` instead of self._module.params()
Although the name says "nano", it would be interesting to tell the unit. In this case is 1e-9.
This function and the function bellow (`semanage_port_get_type`) are probbaly leftovers from the seport.py module. Neither of them is used in this module and ports have no relation to SELinux login mappings.
Add description like with all possible combinations - ``` If set to C(present) and heroku user is already collaborator, then ... ```
Also you may get here(or on many other places) an exception, and you don't catch any. AFAIK Ansible modules should return always with `module.exit_json` or `module.fail_json` rather then raising `Exception`.
`Create or remove a dvSwitch.`
The more common variant for this option name is ```suggestion username: ```
Drop the extra "Mac" here
Better to write this like this: ``` python import itertools [...] list(frozenset(itertools.chain(a.keys(), b.keys()))) ``` Or if you want to write it out: ``` python retries = set(a.keys()) retries.update(b.keys()) retries = list(retries) ``` Either of those avoid instantiating two extra lists.
Should be `ansible_shell_type: powershell`
```suggestion - "Cluster to create VM-Host rule." ```
And as the return is a dictionary of headers, instead of tracking `self._ccsrftoken` here, you should be able to set your return dictionary to be `{'x-csrftoken': csrftoken_search.group(1)}`, and everything should work as expected.
The description should be starting with an upper case character and end with a dot.
```suggestion - Use HTTPS to connect. ```
I think your PR is against best practices (http://docs.ansible.com/ansible/dev_guide/developing_modules_best_practices.html#common-pitfalls) _"Modules should be the building blocks. Instead of creating a module that does the work of other modules, use Plays and Roles instead."_
This should also look for `openstack.yml` and also account for `yaml` and `yml` file extensions.
The problem is that timeouts are useless when a process is stuck in 'blocking' mode in the kernel, which is why we really want to avoid NFS in particular, but most 'network file systems' in general.
Add example of boot order in EXAMPLE section.
It's possible to get a `jenkins.JenkinsException: job[your_job] number[1] does not exist` here. Maybe adding a try/catch for this? ```python try: if self.server.get_build_info(self.name, self.build_number)['building']: time.sleep(1) else: return except jenkins.JenkinsException as e: time.sleep(1) ```
this line break is .. awful. Can you find another pep8 way to do it? maybe start the second line with 'module'
Add condition here to check if role_id is `None` or not. If I specify `admin` as `local_user_role` then I get ``` fatal: [localhost]: FAILED! => { "changed": false, "invocation": { "module_args": { "hostname": "10.76.33.226", "local_user_description": null, "local_user_name": "aa", "local_user_password": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "local_user_role": "admin", "password": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "port": 443, "propagate": true, "state": "present", "update_password": false, "username": "root", "validate_certs": false } }, "msg": "Required field \"roleId\" not provided (not @optional)" } ```
```suggestion if VROUTER_EXISTS is False: module.fail_json(failed=True, msg='vRouter %s does not exist' % vrouter_name) ```
Another test that I would move into version specific classes with pytest skipifs
Is the order of the options important? I think it should be alphabetically or by priority - wait is not the 1st one in either cases, I reckon.
```suggestion - Create a backup file including a timestamp so you can get ```
Python 2.6 ruins all the fun. :smile:
Default value not specified in argspec.
```suggestion - Short Name. ``` Or possibly just 'Host name for the VM'.
This API does have a rate limit, so it'd be good to add a backoff here. I'm not sure if boto3 paginators handle that automatically.
Oh.... It derives from `unittest.TestCase` which is almost incompatible with pytest..
also, this should not be by default as it changes current operations and might surprise users that expect it to fail when the path is 'polluted'.
Is it not vim.vApp.PropertySpec ? https://github.com/vmware/pyvmomi/blob/575ab56eb56f32f53c98f40b9b496c6219c161da/docs/vim/vApp/PropertySpec.rst
This is pre-existing in the code but there should be a check whether module_args is None otherwise this loop will traceback. I think it should be fixed in the argument_spec, I'll make a note there.
Oops, that is correct.
```suggestion module.fail_json(msg="Either the 'name' or the 'copr' parameter needs to be set") ```
If we decide to deprecate, then we should have additional logic to detect that the action came in via _raw_params rather than name and issue a deprecation warning. However, we may want to do this via a "long deprecation cycle" which we've talked about the need for but haven't nailed down any rules for yet.
> unsure what you mean This (from the link above): > Directive Types "attention", "caution", "danger", "error", "hint", "important", "note", "tip", "warning", "admonition" You could do `_RST_ADMONITION = re.compile(r".. (attention|caution|danger|error|hint|important|note|tip|warning|admonition)::")` to cover all the admonitiona types, not just "note".
This should probably just be: ``` from ansible.utils.path import cleanup_tmp_dir, makedirs_safe, unfrackpath ``` Not sure why it was on 2 lines previously.
```suggestion direct_rule=dict(type='str'), ```
Needs error handling here for if no launch configs match the search, since later the `[0]` element is used without bounds-checking.
Use the [boto3 exception guidelines](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-2)
```suggestion sample: b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f ```
Out of curiosity, when was `remove` added? Is there a chance that this will crash on a systems that `remove` isn't a thing yet? In that case it might be better to have a fallback to `unregister`.
This env name should probably be plural, to match the option and ini key.
`get_capabilities` is called in `check_args` as well. Instead of calling the function twice in the module, please call the function in `main()` as pass the return value as argument to the methods.
Are we guaranteed to only receive ascii text via self.client.recv? If not, then this could fail if we get the first half of a multi-byte character in buf and the second half is coming in the next chunk. Encoding and decoding is also faster when you do it a single time on a larger buffer rather than multiple times on smaller buffers. Between those two thoughts, perhaps it would be better to code this like: ``` python self.client.sendall(to_bytes('%s\n' % cmd)) result = b'' buf = b'' buf = self.client.recv(RECV_SIZE) while buf: result += buf buf = self.client.recv(RECV_SIZE) result = to_text(result, errors='surrogate_or_strict') if capture_output: [...] ```
I would suggest using ``` python from six.moves import configparser ``` Currently inventory scripts aren't real consistent about how they handle compat issues like configparser, but thats closest to how the app code and modules do it (they use the six provided in module_utils, but that is not recommended for external inv scripts) ``` python from ansible.module_utils.six.moves import configparser ```
Cool, I didn't knew we had `deprecated_aliases`! Thanks @tremble!
The problem I'm trying to spot is that you have wrapped a number of imports here, so if **any** of them fails: 1) next (import) lines in try block **won't be executed at all** 2) control flow will jump into except block, so that you'll have other import which will be executed and then `display` var initialized After that, all other code in module will get executed and it seems to rely on the fact that all of other imports succeeded. In case if they failed you'll get a `NameError`, which will state that it doesn't know about `AnsibleError`, for example, and it doesn't exist. That workaround is designed to provide a fallback for `display` if importing it from `__main__` module fails. But by wrapping all the imports you're simply masking lots of different errors, which would have to be processed separately. So the rule of thumb would be to narrow down try block to some concrete piece of code, which you expect to raise an exception. It is considered harmful to "swallow" arbitrary errors without proper handling of corresponding situations.
Yes, so I think we just need to `strict` compare these two options.
If you're getting rid of unused variables you could get rid of this line.
To use Constructable options you can add something like ``` self._set_composite_vars(self.get_option('compose'), item, hostname) self._add_host_to_composed_groups(self.get_option('groups'), item, hostname) self._add_host_to_keyed_groups(self.get_option('keyed_groups'), item, hostname) ``` to this method.
No need to copy this to a local variable. Yes, the existing code does that for a few args, but it's unnecessary. No need to fix those though.
*sigh* Oh well...
I opened the backport PR against `stable-2.9` (#61786) and added the commit to this PR. Sorry I did not catch this during review. Thank you, as always, @abadger.
```suggestion - Strip empty lines from the end of stdout/stderr in result. ```
This code mixes 2 and 4-space tabs, which isn't in line with the style guide (pretty much PEP8) that we use.
It doesn't look like you need an OrderedDict here. A regular dict will do (and be faster and take up less memory).
That sounds totally fine. A single PR which updates all PostgreSQL modules to fix this would be good.
```suggestion required: true type: str ```
It'll look more clean if you name these `returncode`, `out`, and `_` (the underscore denotes you're not going to use that, and it's a common pattern in Python). You can also drop the parenthesis, they're not needed
I would simply use units_si and units_iec here. ```python 'choices': units_si + units_iec + ['', 'compact', 'cyl', 'chs'], ``` In fact, make these global variables anyhow.
``` This module can be used to manage distributed vSwitch Network IO control configurations.
Maybe this function could be in `docker_swarm_facts` module because it's all nodes in a swarm environment.
This whole block should be changed into: ```python module = AnsibleModule( argument_spec=dict( name=dict(type='str', required=True), remote=dict(type='str'), state=dict(type='str', default="present", choices=['absent', 'present']) ), supports_check_mode=True, ) ``` Assuming that **name** is always required, and **repo** is required when **state == 'present'**. - Put the type-option first, as this one is usually always added - Lines in Ansible can be 160 chars wide, so there's usually no need to split it a line
version_added would be 2.14 at this point
Remove the parenthesis from the conditional, as they're not needed.
```suggestion self.to_do = Actions.UpdateAppSettings ```
Yes, but it's also worth prefixing literals with `b`
please don't add this extra whitespace
not a blocker but `required: false` can be omitted
Passing here for exception will be result in unexpected results.
Note (not a blocker): type overrides the builtn "type". It's better to use a different name even if it's ```type_```.
Let's use the terminology known for INI files: ``` This option corresponds to the "name" property in the repo file. ```
Ahh, just noticed one more thing. ec2_connect() is boto2 only. Going to need to add a thing to make an ec2 client with appropriate exception handling `region, ec2_url, aws_connect_kwargs = get_aws_connection_info(module, boto3=True)` `ec2_connection = boto3_conn(module, 'client', 'ec2', region, ec2_url, **aws_connect_kwargs)` then replace ec2_connect(module) with ec2_connection
That would be a Python module in lib/ansible/module_utils, not a Ansible module (in case this confuses anyone). I guess just naming it `docker_swarm` would be fine, too (everything in module_utils is already expected to be common to multiple modules).
Add `Locks/Unlocks` - as both operations are allowed
Typo? ```suggestion msg="Argument 'state' includes the value '%s' as an invalid choice" % bad_state) ```
I think the `return` isn't necessary (you don't use it in ExitMaintenanceMode).
I think this should be `_return_if_object` since it isn't part of the public API.
You can avoid this case of the try/except by using `to_text`
Use "guard expression" style here to reduce nesting ```suggestion if not super(InventoryModule, self).verify_file(path): return False ```
Include a URL detailing how to get the required libraries ` - pan-python can be obtained from U(http://example.com).`
Looks like you've got 3 characters of whitespace before all the examples, please remove.
Maybe we could do something like this to let us determine the our own precedence order. ```suggestion for s in ['KqueueSelector', 'DevpollSelector', 'EpollSelector', 'PollSelector', 'SelectSelector']: try: selector = getattr(selectors, s)() break except (OSError, AttributeError): continue ``` This is the same precedence order in `selectors`, but we could change it. Maybe this fix should be in `selectors` rather than here. Open to feedback.
im not sure syntax check makes any sense in this context, why do it via pull? the playbook should be checked by ansible-playbook, using pull as a proxy for a check seems contrived.
I don't see code returning podid, I usually do not return the ids for the arguments. When you looks at the integration tests, you'll see I compare the return values with the arguments to make sure the API used the same. I see no benefit in returning id for subelements.
In most cases data_xml object is present the resp object, returning `xml` object is catch all type of scenario, hence in former code result variable is assigned twice most of the times.
Huh, I haven't the foggiest idea. I didn't do any editing of that content that I recall. Funny that it works. I guess we submit a patch and fix it in the backports? Funny that everything still works. I wish this was all handled in one place...
Missing . at end of statement.
`gluster_peer_ops` is unconditionally called and this method always calls `get_nodes`. `get_nodes` fails when `nodes` parameter isn't set: this parameter must be mandatory (and non empty). For that, you could use a custom method, meaning something like that: ``` class AnsibleModuleCheckListNotEmpty(AnsibleModule): def _check_type_list_not_empty(self, value): value = self._check_type_list(value) # default checks for a list if not value: raise ValueError("list must not be empty") return value [...] module = AnsibleModuleCheckListNotEmpty( argument_spec=dict( force=dict(type='bool', required=False), nodes=dict(type=self._check_type_list_not_empty, required=True), [...] ``` Once implemented you could remove the `get_nodes` method.
Note to self: if this is not discussed elsewhere in the docs, we should add it.
A quick look suggests that the rest of the classes in this file would be better written as python modules instead. What I'd do is create a hponeview package and make several python modules inside of there: ``` + module_utils |--+ hponeview |--+ __init__.py <= Empty file |--+ oneviewmodule.py <= Contains the HpOneView module and immediate support |--+ serverprofile.py <= Contains the methods from server profile as functions. The pieces of the resource classes could also go here or into their own file. ``` It looks like these classes are being used to establish separate namespaces for the resources, not really as objects to hold stateful data. In Python, namespaces are usually implemented as python modules (the separate files above). classes are reserved for things that need to be instantiated to hold stateful data.
This creates a circular import, which can be seen in the following traceback in unit tests on Python 2.7: ``` 02:24 ImportError while loading conftest '/root/ansible/test/units/plugins/become/conftest.py'. 02:24 test/units/plugins/become/conftest.py:12: in <module> 02:24 from ansible.cli.arguments import option_helpers as opt_help 02:24 lib/ansible/cli/__init__.py:18: in <module> 02:24 from ansible.cli.arguments import option_helpers as opt_help 02:24 lib/ansible/cli/arguments/option_helpers.py:17: in <module> 02:24 from ansible import constants as C 02:24 lib/ansible/constants.py:19: in <module> 02:24 from ansible.config.manager import ConfigManager, ensure_type, get_ini_config_value 02:24 lib/ansible/config/manager.py:32: in <module> 02:24 from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode 02:24 lib/ansible/parsing/yaml/objects.py:25: in <module> 02:24 from ansible import constants as C 02:24 E ImportError: cannot import name constants ```
This can be updated to AnsibleAWSModule from ansible.module_utils.aws.core That will also mean you can remove the imports and uses of get_aws_connection_info, boto3_conn, and HAS_BOTO3. You can create the client with `connection = module.client('emr')` (which does not need exception handling around it)
Needs testing, though I thinnk you want something like: ```suggestion pytest.skip("skipping as missing required netapp_lib") ```
@jborean93 My preference here would be to allow to put the unit as part of the value (which obviously means we ought to have helper-functions to translate the values to the needed format). If the unit is missing, I would assume it is in bytes. But I can see how that could be difficult in cases where values in bytes make little sense. So maybe the module could provide a different default unit (and specify it in the parameter docs). I am not a big fan for having the unit in the parameter name, or having a separate parameter that stores the unit (usually done to avoid the need for parsing). The unit as part of the value is definitely the most user-friendly and concise option.
lots of mixed space/tabs through here.
These shouldn't be mutually exclusive - if they're passed in with state=present then a presigned url should be returned.
Looking for outside counsel on this one ;-)
I think this should also be available as a direct option. Many Ansible users make use of `ansible-vault` where they can store secrets as variables instead of plaintext in a config. For example, a user might prefer to use Vault and: ``` - spotinst_aws_elastigroup: token: "{{ sp_inst_token }}" availability_zones: [......] ..... ```
present/absent could be used here, just to keep it in line with other 'state' fields
don't use a catchall, if there are other errors we need to capture here please use specific exception captures
Typically the keywords for state we use are `started`, `stopped`, `present`, and `absent` since these are states rather than commands.
I'm also learning this as I go :smile:
Return ``None`` is also valid? ð
Similarly there's a required_one_of argument when creating the module too.
Style-wise, I like to make the thing being tested the last import and visually separate from the other imports (a blank line between them and the import for the thing(s) being tested.
Maybe something along these lines might be useful? ```suggestion assert name.lower() not in _NORMALIZE_NAMES or _NORMALIZE_NAMES[name.lower()] == names[0] _NORMALIZE_NAMES[name.lower()] = names[0] ```
so this changes the point of coverage of unsafe_writes, it will not be used as fallback except for the narrower error on temp file renaming.
Extra space in error message.
'enabled' no need for state_enabled
instead of extended we might want `logic=python|jinja|yaml|ansible`
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` required_together ```
I was asking for `persistent_buffer_read_timeout` to be returned to `network_cli`, and _not_ `persistent_command_timeout`.
```suggestion - Use VMware tools to run tasks in, or put/fetch files to VM running in VMware infrastructure. ```
I think you've got an dodgy quote in that line, I think you need: `block: "{{ lookup(âfile', './local/ssh_config') }}"` That should fix the Shippable error
I was unable to find examples of a `default` that is not listed in `choices` on the internet. This may need to be checked experimentally.
Since this is now happening here and on [line 426](https://github.com/ansible/ansible/pull/30322/files#diff-cc1ca32d3b556628c6b2562406c7478dL426) does it make sense to change [line 407](https://github.com/ansible/ansible/pull/30322/files#diff-cc1ca32d3b556628c6b2562406c7478dL407) instead? Smaller net diff. Besides that, tested this and works for me.
This is a port number, not a URI.
You may want to consider using set operations here.
```suggestion # Copyright: (c) 2019, F5 Networks Inc. ```
`if device_type in nic_dict:`
is that actually correct? virtual network peering is a subresource of virtual network, so I think this param should be just a **virtual_network_name** The description looks like description for **virtual_remote_network**
this might end up confusing users as to which error produced the failure, i suggest pushing the conditional error into a debug statement
This is not python3 compliant.
I'm not sure. Normally, the year in the year of content creation (first publication) and 2016 means "copyright protected 2016 and forward". If there's content created during a period of time it'd be a range or a list of years. https://smallbusiness.chron.com/year-copyright-statement-mean-62027.html https://www.copyrightlaws.com/copyright-notice-year/
There should be no empty line here.
It effectively works this way anyway, but probably best to add an explicit `else: return None`, just in case any other logic were to be added to this function in the future.
It is. So rather than passing name and tag to this method, perhaps modules should pass the full name option (i.e., don't do the split), and this method should inspect the name, and decide how to best find the image.
`size` is optional parameter so adding check against `None` would help here. ```python if not module.params.get('size', False): module.fail_json(msg="Size is required to update volume")
from core meeting, the vote is in and we would like the new option to be named `template_vars`
This needs to be un-indented by one space.
Is this different from the tenant that is hypothetically used to authenticate and make these changes on Azure? If it is I think the name is too similar to the `tenant` option that is set on all Azure modules, I would consider prefixing it with `keyvault_tenant`.
HAS_BOTO3 is not needed with AnsibleAWSModule
<our-subscription-id> -> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx to be consistent with other modules
To restore almost the old behavior, add `import errno` at the top and apply this change: ```suggestion except EnvironmentError as exc: if exc.errno == errno.ENOENT: self.fail("Error opening image %s - %s" % (self.load_path, str(exc))) self.fail("Error loading image %s - %s" % (self.name, str(exc))) except Exception as exc: ```
```suggestion - Required when I(state=present). ```
Use `Pyvmomi` class, just like other Vmware modules.
I think this change might be the cause of all the import sanity test failures
This is unneeded and unwanted, the default is always `None` when unset, so it doesn't have to be set.
@abadger The behavior of hasattr changed in Python 3.2 (http://stackoverflow.com/questions/903130/hasattr-vs-try-except-block-to-deal-with-non-existent-attributes/16186050#16186050) so it only catches AttributeError. We may want to solve this a different way, but without this an exception will be raised when prop_name doesn't exist under Python 3.
It's worth returning the launch permissions (you need to run `describe_image_attribute` separately to get this)
Note: better to do this like: ``` python attrs[name] = [to_bytes(v) for v in value] ``` * map() is slower than a list comprehension (and map + list() would be even slower) * list comprehensions are more pythonic than map() or filter()
I don't think this works? block_id defaults to the boolean False in the parameters to this function. So you probably need to check: ``` python if block_id is not False: ``` rather than checking against a string.
I think we want to sort on create-time here, or something equally deterministic. I'm not sure how sorting works with lists of dictionaries if you don't specify `key=....`
This can be changed to ``` if not all((replication_id, cluster_id)): module.fail_json(....) ```
~~typo result~~ fixed
It is valid.
That part of basic.py is there for backwards compatibility. Using six is the current way we do things.
This isn't actually checking all those values though, would only pop the error if plan wasn't specified at all.
Typo: `exluding` should be `excluding`
> The only case when that is not usable is when someone set's it to a non-default value that uses an absolute path. No, there are other ways, for example, since different privilege escalation setups can translate `$HOME` and `~/` in different ways so sometimes (we hope most times) it resolves to the final user, but it can be configured to use the data from the login user. >If they are doing that they are wrong today. Say they are using _ansible_tmpdir directly and ignoring _ansible_remote_tmp In many cases they don't use either, but I used those to point out it is currently a CHOICE module authors have made, it is not something we forced. I'm against removing a option we provided, if you want to change the modules to use a different directory or logic, that can be done at module level, but changing a provided feature of the controller that they opted into is not the way. We already provide the option you want in the form of the other variable. > Once again, if they are relying on this behaviour they are getting silently failures today as _ansible_tmpdir is not always set to a value. And this is a bug, it should not return `None` on that condition as I stated above, since it should fallback on `system_tempdirs` which are also configurable by the user.
Following choices are missing but available in argument spec - 'cluster', 'ClusterComputeResource', 'DistributedVirtualPort', 'DistributedVirtualSwitch'
typo: ot -> to
Resolved in 0595acc4f78f55103e406b523b7fd67115105162
This is handled by the Azure module utils so isn't needed in the module arg spec
please use here `self.param('version').get('number')`
Please revert the non-functional changes in this PR, it makes reviewing the git blame very difficult when we are trying to identify bugs
It looks like there's a race condition here. The log file could be read before supervisord has reopened it.
Likewise this expects to come back in JSON format
I think it would be more portable to update the regular expression below rather than using `grep`
`except (botocore.exceptions.NoCredentialsError, botocore.exceptions.ProfileNotFound) as e:`
Remove the double quotes and this can just simply become `- DomainBBB.cloud\UserInDomainBBB`
ditto about s/no/'no'/
please add some more examples for e.g. for state=absent
plz don't use EOL escaping, wrap with braces instead.
Please only import what you need.
This works but in general I don't really like it as it doesn't give us any control over decoding the file (trying different encodings or using different error strategies). How about doing it like this: ``` python from ansible.module_utils._text import to_native [...] for line in open(self.SHADOWFILE, 'rb'): line = to_native(line, errors='surrogate_or_strict') fields = line.strip().split(':') [...] ```
If you're using autouse on your fixture then you won't need to reference the fixture for it to inject the XenAPI import. Forgetting it will only mean you won't have a local reference to it.
enable is imperative 512emulation: yes|no is a more declarative
Also, if we are trying to enforce string types, that needs to be addressed in the schema also. Right now we have: ``` version_added': Any(float, *string_types), ``` So a `float` is a legal value currently.
`user_data_list.body` is `None` when an error occurs (same as [here](https://github.com/ansible/ansible/pull/45121#discussion_r217891190)): ``` "msg": "Error during user_data fetching: 400 None" ```
```suggestion type: int version_added: '2.8' ```
use ```from ansible.module_utils.vmware import get_cluster```
```python func("one " "string", "another" " string") ```
The PR is still open, just add another commit to the branch that this change is attached to and push it again, or even edit the file through the web editor in the PR itself, which essentially does the same thing
You will need to indicate what version `yaml` was added as a choice.
This check is invalid because strings are iterable sequences. `len('CherryPy') == 8`, `len(['aiohttp', 'aiohttp_jinja2']) == 2`. Please use some of: ```python from ansible.module_utils.common._collections_compat import is_sequence ... is_sequence(..., include_strings=False) ``` or ```python from ansible.module_utils.common._collections_compat import is_string ... not is_string(...) ```
```suggestion - name: Remove registry option from stanza ```
since this is all for dealing with a TaskResult._result, move the _result processing code to it's own method and call from here? ``` python def _clean_result(self, result, ignore): <...> ``` It could even be staticmethod or module scope method ``` python def clean_result_dict(result_dict, ignore): <..> return result_dict ``` so, clean_result() could: ``` python if self._result: result._result = clean_result(result._result, ignore) return result ```
This needs to be a string: `"2.3"`
This can just be `return set(hashable_policy(new_policy, [])) != set(hashable_policy(current_policy, []))`
and security_groups, which is a list
Oops, sorry missed that.
`enabled` should mean the same as `present` and make sure the plugin is enabled, i.e. if it is not installed, install it. (Same for `disabled`.) `present` means "make sure it is there, I don't care if enabled or not".
Experimenting here shows that salt must be ascii-only text-type on python3. password can be either text or bytes on both python2 or python3. I'd suggest: ``` python # passlib allows either text or byte strings for password but salt must be ascii-only text on python3 encrypted = cls.encrypt(to_text(password, errors='surrogate_or_strict'), salt=to_text(salt, errors='surrogate_or_strict')) ```
Perhaps this should be `userid` to match the MIQ side. Also, `name` on the MIQ side is the user's actual full name and not sign on name.
Python 3 example of why it may be harmful: ```python >>> str(b'test') "b'test'" ```
Thanks for clearing it!
Well, the reason it would be private is that this isn't the location we want people to find it. It's not related to sys_info. It's only used by sys_info functions.
This and `launch_config_name` should be added to the `mutually_exclusive` list to prevent users from using both.
`auth_source` and `cloud_environment` are already in base class, remove them here.
The query should be something like ``` G.V().Has('TID', 'bd7f5334-115c-5943-487d-a77c486fa854') ``` according to the `name`
Our code formatting standards allow for 160 character width, move this onto the same line to make it more readable.
version added requires quotes, otherwise it will be processed as number
Please remove these `()` here, they aren't needed.
```suggestion self._exec_cli_command(b'screen-length 0 temporary') ```
You should probably turn this around- pick up all the `group/{thing}` prefixed module defaults, then chain lookup `{thing}` -> group -> collection list. It both cuts down on the amount of stuff you're having to resolve, and is more compatible with the v.next version of the feature where we're directly querying things from collections (otherwise we'd have to pre-scan all collections for their action_groups, which is a Bad Thing). It would also reduce the need for intermediate lookups of the group in question when it's time to apply the defaults themselves, since you'd be looping over the defaults you're looking to apply, if that makes sense...
Instead of using an external link which points to `latest` version so might not be accurate from another version please use an internal link https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#ref-role
Can you add: ``` type: str ```
Still waiting for it
No need for quotes here, we only tend to add quotes where they are required by YAML. This is the best way to ensure Ansible users learn when quotes are really required and when not. ```suggestion repo: ftp://download.nvidia.com/opensuse/12.2 ``` Please modify the other examples as well :-)
Instead of storing `equal`, just `return True` here and `return False` where the `break` is on line 159.
Since these refer to state, I think it would make more sense to have `enabled` and `disabled` (instead of `enable`/`disable`)
You can also do `for key in kwargs:`. By default, Python will only iterate over the keys; you have to explicitly specify `.items()` to iterate over `key, value` pairs.
```suggestion default: null version_added: '2.10' ```
And add some useful examples.
It's more readable to write this out into multiple if-then statements.
We should use to_text here instead of .decode. to_text is resistant to unicode errors in a way that .decode is not. ``` python from ansible.module_utils._text import to_native, to_text [...] try: result = json.loads(to_text(content, errors='surrogate_then_strict')) except (json.JSONDecodeError, UnicodeError) as e: error_msg += "; Failed to parse API response with error {0}: {1}".format(to_native(e), content)
not blocker: string is the 'default type' no need to specify it
good point, i would have expected that yes.
I would write: ```python else: if self.fstype == 'XFS': ... else: ... return out ```
This doesn't seem right
just a little hint, there is a cloudstack optimized fail_json `self.fail_json` which would also return the zone on failure as return value. But this is fine as well
remove empty string, default to null and return info if null (other modules use list/query, but not a fan of those either)
please remove `choices=BOOLEANS`, it's obsolete and not needed. I would also set the default to True, e.g. `default=True`
Here you go https://smallbusiness.chron.com/year-copyright-statement-mean-62027.html
I think this needs to include both the vars args and vars file. Looks like excluding the vars_file in the preflight command was an oversight on my part when implementing this originally.
We might want this to be the first thing we check since `if REPLACER in module_data` is substituting something in the file.
e.message fails on Python3 so all cases of that should be removed from this module. AnsibleAWSModule has a fail_json_aws call, and that will help with exception handling. Should also handle BotoCoreError for any boto3 calls. ``` try: # boto3 call except (BotoCoreError, ClientError) as e: # pass in the exception as the first argument and it will safely use message and response if they are available module.fail_json_aws(e, msg="Optional custom error message here") ``` The lifecycle configuration could be formatted in the msg.
Should not assign TargetType if Boto version doesn't support it and it is "Instance" (the default).
Ah, sorry, I apparently completely missed the `or None`. Yes, you are totally right!
This wording is confusing. Did you mean to say "even if you use insertbefore or insertafter, only the last line found will be replaced"? If so, please remove the parenthesis. Thanks.
Oh, I misread this. I thought it was returning the path not the result of an evaluation. I tend to try and avoid `lambda` at all costs (harder to read/maintain usually), but I don't see a better way to write the test.
type should be `int`
please make the imports explicit
Better: **The** 'version' argument conflicts with any version specifier provided along with a package name. Please keep **the** version specifier, but remove the 'version' argument.
TIL you can index a tuple with a boolean: ``` In [1]: ("no", "yes")[True] Out[1]: 'yes' ``` I do wonder if we can get the report to accept real booleans since they're JSON encoded.
`from ansible.module_utils.aws.core import AnsibleAWSModule`
CI failure due to python 2.4 syntax error: ``` 2017-02-11 00:37:22 Compiling ./lib/ansible/modules/network/aos/aos_blueprint.py ... 2017-02-11 00:37:22 File "./lib/ansible/modules/network/aos/aos_blueprint.py", line 151 2017-02-11 00:37:22 msg = 'likely missing dependencies' if 'UNPROCESSABLE ENTITY' in exc.message \ 2017-02-11 00:37:22 ^ 2017-02-11 00:37:22 SyntaxError: invalid syntax ```
you need to quote : as it is a 'yaml' delimiter
```suggestion :other_args: dict of, value pairs passed as arguments to the ssh binary ```
Once https://github.com/KushalP/serfclient-py/pull/17 is cleaned up and merged, you can simplify this method to be: ``` python def _serf_client(): environment_config = EnvironmentConfig() return SerfClient(host=env.host, port=env.port, rpc_auth=env.auth_key) ```
The removal of this final raising of `HTTPError` means that there are some scenarios that can succeed, such as when given invalid redirection options. ``` RedirectHandlerFactory(follow_redirects='invalid', validate_certs=True) ``` Previous behavior was to raise an `HTTPError` in this situation, somewhat similar to `follow_redirects='none'`
you could also write this as: h_item = search_obj_in_list(w_item['member'], h, key='member') or {}
just wondering about one scenario. what if get() fails because of network error? what kind of errors are possible here? I am mostly concerned about errors other than 404, when resource exists, but query failed for some other reason.
Looks good, but right now group_id can't be used with state present. `"msg": "state is present but the following are missing: name"`
nothing in module_utils should have deps outside of it, but its fine for stuff in ansible to depend on module_utils.
Ah, i'd expect a bool to always be True/False, if that is not the case (no time to test really right now :)), then indeed, this needs to stay (and this goes for my other bool remarks)
MORTypes is not imported or defined.
As you've noticed, we don't want to do this here because in this case the pkg_mgr is coming from a pre-existing fact.
Default isn't specified in argspec.
Yup, that looks correct.
just use the constant directly, no need to reassign
```suggestion version_added: "2.12" ```
you name by content, not by function, this would be better as _ACTION_HAS_CMD
This is more than just a URI, it can be a local path (and potentially other types I'm not aware of)
by convention the state should be defaulted to `present` whenever possible, as a result th ~~~diff - required: true + default: present ~~~
We could probably add another check for the argument spec being `None`.
`delegate_to` at target level should be removed (tasks will inherit `deletage_to` from parent block).
```suggestion - UUID of the vm/template instance to clone from, this is VMware's unique identifier. ```
Add `create_only` to the type hints in the docstring.
Also, for posterity: ``` $ ipa --version VERSION: 4.4.0, API_VERSION: 2.213 ```
This implies that constructing some callbacks doesn't result in an instance, but also doesn't raise an Exception? That doesn't sound right...
```suggestion ``` small nit
`Copyright (c) 2018, Prasanna Nanda < pnanda@cloudsimple.com >`
Could you create a function? The line is very long to read. Something like : `server_or_ip_should_be_changed`
```suggestion - Name or resource ID of the virtual network to be peered. ```
please add a `version_added: "2.8"`
This function will only ever throw an AttributeError, as `edit_config` is not implemented.
I don't like the `: ` here
FYI, in case you switch to working on whole config, `get_config.config` gives you the whole tree. (`get_config(:foo).config` is generally equivalent to `get_config.config[:foo]`.) Also, VMDB::Config is deprecated. May be better to use `::Settings.to_hash`.
```suggestion 'after': '{0} created\n'.format(user.name), ```
You could add boto3/botocore as requirements.
not sure why you are removing this, i can see issues with invalid shell/blocker shells set (nologin, /bin/false) but we can work around that.
I can't think of any reason off the top of my head that we'd need to customize the module object creation, so just having create_module return `None` *should* be fine. IIRC `exec_module` is literally just about populating the module (already created by create_module or the base import machinery) from the code; the 3.x import machinery takes care of the transactional insertion/removal from `sys.modules` on fresh imports and reloads, so we should probably never mess with that in the 3.x loader code at all. It's been awhile, but I think it basically just calls create_module (and does the stock creation if we didn't return something), provisionally inserts the module to `sys.modules`, calls exec_module under an exception handler, and removes the module on an error if it inserted it.
Rather than setting to True, can you do what's happening for check mode `result['changed'] = (before_realm != updated_realm)` and check it's True before making the API call to update? Or is that not necessarily accurate for check mode? I'm not sure what the format of before_realm versus updated_realm is.
All descriptions, except the short_description end with a dot.
Please only import what you need, rather than `*`
Awesome ð both can now be moved to the top
`choices` list seems incomplete here
I think I'd like to see this consolidated with `find_module`. They are about 99% the same. My recommendation is to drop everything from `find_module` and then do: ```python def find_module(self, fullname, path=None): spec = self.find_spec(fullname, path=path) if spec: return spec.loader return None ```
I suggest the following change, to make clear the two parameters are ignored: ```diff diff --git a/lib/ansible/plugins/httpapi/vmware.py b/lib/ansible/plugins/httpapi/vmware.py index 1e20d667a1..a4164a6fd3 100644 --- a/lib/ansible/plugins/httpapi/vmware.py +++ b/lib/ansible/plugins/httpapi/vmware.py @@ -31,13 +31,16 @@ BASE_HEADERS = { class HttpApi(HttpApiBase): - def login(self, username, password): - if username and password: - payload = {} - url = '/rest/com/vmware/cis/session' - response, response_data = self.send_request(url, payload) - else: - raise AnsibleConnectionFailure('Username and password are required for login') + def login(self, *args): + if not self.connection.get_option('remote_user'): + raise AnsibleConnectionFailure('remote_user option is required for login') + + if not self.connection.get_option('password'): + raise AnsibleConnectionFailure('password option is required for login') + + payload = {} + url = '/rest/com/vmware/cis/session' + response, response_data = self.send_request(url, payload) if response == 404: raise ConnectionError(response_data) ```
This needs to be a `module.fail_json`
Similar to the logic changes requested above, this check should take into account the permissions of the directory in check mode if it exists. If it does not exist, check the nearest parent directory instead.
No, `None is not False` (yes, it's valid Python statement bwt :smiley:) Basically, `None` *value* **is casted to False**. *But* `if var` check is using a built-in pythonic protocol for casting bool value out of expression given. So it does `bool(val)`, which internally does `var.__bool__()` call. And then it uses whatever this method returns for the `if` clause. `NoneType` (`type(None)`) is always falsy, `[]` is falsy, `0` is falsy, `{}` is falsy. `1` is truthy, `[0]` is truthy, `{'k': 'v'}` is truly. The end-user can implement whatever logic they want in their classes for casting their instances into boolean. That is why it's important to check for `val is None` or `val is not None`, sometimes you'll even want `val is False`. `None` is often used for default arg value for functions/methods, which then do `is None` check to ensure the user didn't override them (cause you cannot put mutable defaults in function definitions).
Or ```suggestion pytest.fail("Should not execute") ```
```suggestion "Error: " + to_text(err)) ```
`machine-man` is not related to the device auth flow (it used to be necessary for GitHub Apps). Besides, they've made those APIs stable already: https://developer.github.com/changes/2020-08-20-graduate-machine-man-and-sailor-v-previews/.
I don't think this works does it? Doesn't it need a `register` (or the `this` proposal) Either: ``` failed_when: not this.cloudformation ``` or ``` register: cloudformation_facts failed_when: not cloudformation_facts.cloudformation ```
on a side note, ansible-core mustn't depend on third-party collections
This is weird. I definitely remember coding a module that didn't use Key or key. I thought it was merged but maybe not. We definitely need to keep the parameters to specify. Previously this module did what is proposed as (a) but I changed it because it doesn't satisfy all cases
Add an example for this parameter so that the user will know how to use this parameter.
i would not even make this an option, specially since it behaves differntly than other 'backup' options, we should just 'do this'
~~~ type: str version_added: '2.8' ~~~ I have a pending PR that fixes the other params.
Can we add an alias for `private_token` for the modules that used to accept it? (Also applies to `gitlab_hooks`)
you might want to get the module/action as the include can be given a name that does not match `include:`
Support for `api_version` [was removed](https://github.com/voxpupuli/pypuppetdb/releases/tag/v0.2.0) a little over a year ago.
We are trying to eliminate contractions (we're, it's, isn't) to make translating the docs easier. Also, description lines should end with a period. Please change all three lines to: ```suggestion - Usable with oVirt 4.3 and lower; removed in oVirt 4.4. ```
```suggestion type: int version_added: '2.8' ```
No need to quote
is this right? src= in fetch module is still the path for the file to be copied. eg: fetch: src=/etc/resolv.conf dest=/tmp would become scp {{remote_hostname}}:/etc/resolv.conf /tmp So the correct translation would be: cmd = self._build_command('scp', u'{0}:{1}'.format(host, shlex_quote(in_path)), out_path) // Anderson
```suggestion - Controls the state of interface. Up or down. ```
This is unnecessary, AnsibleAWSModule automatically merges the argument_spec that you pass with ec2_argument_spec().
I'm not sure whether that's the same nomenclature the Docker docs are using, but I think it is good enough for us :)
you could just use this function instead https://github.com/ansible/ansible/blob/devel/lib/ansible/utils/helpers.py#L37
what will happen if modification of `.git` file fails while `.git/` dir is already moved? I think we could try to roll it back.
This is missing a state, so the group is created instead of being deleted.
This class looks like it would be useful in module_utils/vmware.py or in its own module_utils/vmware_lease.py file so other modules could use it.
confused as to what this is doing
should be ONTAP
```suggestion if ci is True: ```
rather than removing parameter, add `alias` as ``` aliases: ['switch_name'] ```
```suggestion - The ESXi login user must have the appropriate rights to administer permissions. ```
I see that other get_dmi_decode() methods are using this pattern as well but it seems very inefficient as well. json.dumps() is not cheap and here we're just throwing away the value. Perhaps it would be better to do something like: ``` python if isinstance(str, thisvalue): thisvalue = unicode(thisvalue, encoding='utf-8', errors='replace').encode('utf-8') ```
yes, both not required, but put a note in the doc that "Either C(dest) or C(fullchain_dest) is required."
Also, you can do ```python lv_type=dict(default='jfs2'), # ...snip... opts=dict(default=''), ```
Throwing a exception do not seems like great UX for users.
I think there is an unneeded `if device:` there.
Would be great just to have an example of configuring an IPv6 address as well
Might be better to define this as `type='list'`
Please include the traceback with the failure here, by adding `exception=traceback.format_exc()` to the `fail_json` call.
Given this can add/remove do we want to say `update`? ```suggestion - Name of the database to connect to and update the schema. ```
```suggestion - If not specified then the value of the C(AWS_REGION) or C(EC2_REGION) environment variable, if any, is used. ```
```suggestion response=None, # type: t.Optional[t.Dict[str, t.Any]] ```
the `url` should be `URL`. The same bellow.
```suggestion try: TimeoutError except NameError: class TimeoutError(OSError): """TimeoutError shim for Python 2.""" def _raise_timeout(signum, frame): ```
My only suggestion is that I think it could be easier in the long run to do the following instead of duplicating the transaction logic, but at the same time the current code is saving cycle by not evaluating the `if module.check_mode` conditional multiple times so it's purely preference and I don't care to block the PR on it. ð ```python if state == "present": if not shard_find(client, shard): if not module.check_mode: shard_add(client, shard) changed = True else: changed = False elif state == "absent": if shard_find(client, shard): if not module.check_mode: shard_remove(client, shard) changed = True else: changed = False ```
I think this will cause issues https://github.com/ansible/ansible/pull/35756/files
you can also add: "and `espeak --voices` on a Linux host."
```suggestion - Status of the secondary location of the storage account. Possible values are C(available) or C(unavailable). ```
In my point of view, it is better to use `rabbitmqctl version` command. It was introduced in some 3.7 release. It seems `status` output is an unreliable source of information - status format can be changed from one release to another. I suggest the following workflow: * try to find a version in `rabbitmqctl version` (use --node option like with other commands) * if this command return error - try `status` with old regex Anyway, I'm not maintainer here ) I don't think that my approval can change anything.
only FYI. We found this not to be very useful, and we now prefer to assign the whole params dictionary to a single variable.
Better do an explicit `return None`.
`aws_connect_kwargs` won't be defined at this point unless `ec2_url` is set, which is the unlikelier of the code paths
I think we can set it to True by default so that we can just ignore warnings as user set `validate_certs` to `False`
Please add alias for _uid_.
tag might be 'float' or other types, i recommend: ``` if no isinstance(tags, string_types): tags = to_text(tags) ``` string_types and to_text can be imported from module_utils, they are Ansible specific ways to deal with strings across encoding and Python version issues.
To be consistent with other modules each of the options should be on a single line (unless they have many choices)
Since the very first thing that both of the above do is create a ```PasswordManagerPro``` object and then they just lightly wrap a method call on that object, it seems like they should really be integrated into the methods they're calling.
ACk. Just FYI OS discovery can be done after CLICONF is implemented.
use a single loop? ~~~python for server in _retrieve_servers(api_key): server = Vultr.normalize_result(server, SCHEMA) .... ~~~ ~~~
bcoca's patch has been merged so we can use `play_context.executable` instead of C.DEFAULT_EXECUTABLE. And the default value should be built in so no need for the final `else /bin/sh`
Any options defined in docs_fragments should he defined in code in module utils, rather than in the arg spec of each module. See other examples in module_utils.
Should this be a warning? The resource is not in a manageable (or possibly usable) state...
```suggestion - name: Allocate spot and lpp_source to the nimclient ```
This does fix the float issue, but will result in a trackback instead of a proper error message if the `removed_in` value isn't a valid version number. There should be an error code for that.
Tests are failing due to the presence of the shebang. Since this is a plugin the shebang should be omitted.
I would use a different var name, `file` is a builtin within Python. I also don't know anything about Kubernetes but should this path be hard coded.
```suggestion - This is useful in scenarios where pool member FQDNs can only be resolved from service engines and not from the controller. ```
change to `zone`
My mistake. Timelines are beginning to blur for me.
Please include the `DO_OAUTH_TOKEN` environment variable as one of the `env_fallback` values.
I've move all of this into the EXAMPLES block
```suggestion version_added: "2.4" # If this is part of a collection, you need to use semantic versioning, i.e. the version is of the form "2.5.0" and not "2.4". ```
raw string literals should use lowercase `r`
Shouldn't the url begin with `https://` when TLS is enabled? At least that's what `module_utils/docker/common.py` is doing.
This should be trail_arn. The camel_dict_to_snake_dict should be used to convert boto3 objects to ansible objects before returning them through module.exit_json
As there different levels of user permissions on Infinibox, if so it's worth saying "Infinibox User username with FOO permissions" Also say, if not specified C(INFINIBOX_USER) will be used, or C(~/.infinidat/infinisdk.ini).
Typo in the help message
Looks like test failures are due to extra `]` just before the end of this line
the `module.params.get('tags') will be None if no tags here. Then break the rulesconditional check return False directly
not a blocker but `local_action` is a thing the ansible_linter suggest to change. That is why I would prefer: ~~~yaml - name: Update the name of a Keycloak group keycloak_group: id: '9d59aa76-2755-48c6-b1af-beb70a82c3cd' name: an-updated-kc-group-name state: present auth_client_id: admin-cli auth_keycloak_url: https://auth.example.com/auth auth_realm: master auth_username: USERNAME auth_password: PASSWORD delegate_to: localhost ~~~
Why are you doing another fetch? When the host is fetched, the config_context attribute already exists in the host
nitpick: I think this could have less nesting. ```suggestion if finder is None: return None if toplevel_pkg == 'ansible_collections': return finder.find_spec(fullname, path=[self._pathctx]) return finder.find_spec(fullname) ```
```suggestion choices: [ VirtualMachine, Datacenter, ClusterComputeResource, HostSystem, DistributedVirtualSwitch, DistributedVirtualPortgroup ] ```
No problem. In fact, removing it shouldn't hurt, since `luks` is the default. But I guess it's better to keep it, just in case somewhen in the future, the default changes.
```suggestion - Allows a static UUID to be defined for the VM when cloning. ```
I don't think this verbose logic is necessary. Just use ``` if str(current_version) != str(existing_version): ```
s/type: string/type: str/g
I was testing this in my threading fact gathering branch, the .get method won't help with 'blocked' processes and will inconsistently return or just hang forever (I'm still trying to get a reliable reproducer). I found this by 'simulating' bad NFS mounts by throttling the traffic to the nfs server the VMs are using.
Since this is a generic exception, I think we need a specific error code or something to ensure that if someone else tosses this down the line for another reason, that the associated retry doesn't get triggered.
Is `user_id` something secret, just wondering why it has `no_log`
The vmware modules only support Python 2.7 because of pyvmomi.
opt for `user` over `username` unless there's a good reason to differ
```suggestion module.deprecate("Alias \'{aliase}\' is deprecated".format(aliase=aliase), "2.10") ```
you also have to take into account actions that have 'remote_src=true' as they might not rely on peek
Python 2.6 is no longer supported on the controller. Modules (and therefore module_utils) still support Python 2.6.
you can deprecate it and add a new one
not as much a suggestion as a first draft of the solution i have not finished yet
```suggestion - Scott Buchanan (@scottsb) - Andrew Zenk (@azenk) - Sam Doran (@samdoran) ```
I didn't want you to remove everything, just the incorrect sample. ```yaml instance: description: system info about the host machine returned: always type: dict ```
Since these are being passed directly to boto3 we should fix the docs to reflect what is expected. Only accepts `Protocol` and `HTTP` as opposed to `protocol` and `http` right now. CamelCase all the listeners options.
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific version_added when the options have been added in a newer release.
Probably because it does an additional API call per host which makes it a lot slower.
@limakzi I also liked that it set it to the right version instead of just defaulting to 4. So 5 would be 5 and 6 would be 6.
also don't use `if self.params.get('secure_boot_enabled') is True â¦`, `self.params.get('secure_boot_enabled')` is already a boolean so `if self.params.get('secure_boot_enabled') â¦` is sufficient.
Well, for most 'standard' systems 'service' is fine, it is only an issue when you deviate from rh/ubuntu standard setups, then is where it gets 'fun'. The symlink detection used to be part of the code until we moved to the 'better' proc inspection, but we can readd as a fallback.
Here as well. `required=False` is not strictly necessary. Sometimes it is easier to find what is required, if only those options have required :)
This would look more elegant: ```python import itertools ... for nic_section in itertools.chain((nic, ), nic['secondaryip']): try: ip_address = nic_section['ipaddress'] except KeyError: continue network_ip_addresses[networkname].append(ip_address) ```
Even better: ```suggestion optional_kwargs = {'ExtraArgs': {'VersionId': version}} if version else {} for x in range(0, retries + 1): ```
My fault with that initial code, maybe it's better to try & except for AttributeError here? ```python try: self.custom_field_mgr = self.content.customFieldsManager.field except AttributeError: pass ``` I can't check it right now against ESXi, but this definitely would be nice to have.
`tag_resource` is *very* new to botocore, we cannot assume everyone has it. That might not even be a ClientError, it might be an AttributeError. Can you test with botocore 1.5.39 and see how this behaves. It's fine to fail if someone is passing tags with an old version of botocore, but we should say "Could not set tags - please upgrade to botocore 1.5.40 or higher" ``` if tags is not None: if not hasattr(client, 'tag_resource'): module.fail_json(msg="Tags are not supported by your version of botocore. " "Please update to 1.5.40 or newer") ```
A more appropriate fix would just be ``` 'Tags': boto3_tag_list_to_ansible_dict(dhcp_option.get('Tags', {})) ``` which doesn't create a fake empty tag.
we use -o for output file elsewhere, it is not good to overload options with diff meanings
```suggestion return nic_device_type[device_type]() ```
Use `C` formatting function for URL.
I would prefer ```python self.cgmodels = self.client.container_groups.models ``` like you did for NSG. And yes, this requires a new release of `azure-mgmt-containerinstance`, but I can do that today. Eventually all new packages released since 2 months have the `models` attribute in the operation_group, it's just that when I have no update I didn't release a new package, but I prefer to do that, and not force you to handle this manually with hack. And when this package goes to multi-api, you will be ready since the syntax is the same.
```suggestion purge: false ``` Docs should use either `true`/`false` or `yes`/`no`, but not other boolean variants.
had not realized that using the class itself made the validation recursive, if so +1
please remove spaces
The functionality should still exist with the new python-hpilo, so simply allowing to disable it removes the functionality for people with older iLO systems and a newer python-hpilo. I don't think that's a good proposition.
str.join() accepts an iterable. You use a list comprehension which first creates a `list()` in memory and then gets fed to `str.join()`. You can use a generator expression which will gen unwinded by `str.join()` internally without consuming memory for an intermediate list representation. ```suggestion "\t%s - '%s:%s'" % (to_text(p) if p else 'base', str(self), r) for p, r in self.required_by ```
I do think this could be useful for any module (not just cloud modules).
Change this argument from bool to choices with the following choices `[never, always, if-supported]` In the `never` case, do not attempt to lock the conf data store In the `always` case, try to lock the conf data store and error if the lock operation failes In the `if-supported` case, try to lock the conf data store and continue unlocked if the lock operation fails The default value should be `never`
Please turn this into a list, without the quotes (as we tend to only add quotes when they are required by YAML). So it should become: ```yaml author: - Andre Bindewald (@tiwood) ```
It's possible to specify a username on the query string to the GET /users API call. The server will do filtering and return a reduced list of users. Could we use that instead of fetching down the full list to convert username to UUID? It will save us bringing down large lists of users when we only need to select one. This is something I need to implement in the keycloak_group module as well.
Something like: ``` patch --- test/units/module_utils/facts/test_collectors.py +++ test/units/module_utils/facts/test_collectors.py @@ -258,12 +258,8 @@ class TestPkgMgrFactsAptFedora(BaseFactsTest): "ansible_pkg_mgr": "apt" } - import ansible.module_utils.facts.system.pkg_mgr - ansible.module_utils.facts.system.pkg_mgr.os = Mock() - ansible.module_utils.facts.system.pkg_mgr.os.path = Mock() - ansible.module_utils.facts.system.pkg_mgr.os.path.exists = Mock(side_effect=_sanitize_os_path_apt_get) - - def test_collect(self): + @patch('ansible.module_utils.facts.system.pkg_mgr.os.path.exists', side_effect=_sanitize_os_path_apt_get) + def test_collect(self, mock_os_path_exists): module = self._mock_module() fact_collector = self.collector_class() facts_dict = fact_collector.collect(module=module, collected_facts=self.collected_facts) ```
Deduplicate: ```suggestion - Whether to automatically install python apt or not, if it is not already installed. ```
> This toggle allows those migration from the old ec2.py just not for region names.
Yes. The service is still present but stopped. And will be restarted. It is the "enable" that it's a bit weird, as it will create and start the service if it does not exist. Or only start it if it exists, A lot of this complexity comes from below. With 25 years of history.
Much nicer solution :+1:
`str` is not python version compatible, use one of the `to_` functions
It gets further if you change 'self._play_context' to just play_context, but still fails.
You maybe able to extra/better validation this with the built in option validations. I've got some draft docs for this https://github.com/gundalow/ansible/blob/docs-argspec/docs/docsite/rst/dev_guide/developing_modules_general.rst#main-and-ansiblemodule-argument-spec For other examples have a look at existing modules
This gets called in check mode too and might change attributes on disk
When you don't refer to the fixture return value, it's better to inject it via `usefixtures` so that there's no unused argument in the function. Also, the name is misleading. It's being injected into the test functions and it looks like the returned object is an instance of `BaseFactCollector` while in fact, it's a dict. You could improve this as follows: ```suggestion @pytest.mark.usefixtures('fake_now') def date_facts(monkeypatch): """Return a predictable instance of collected date facts.""" ```
OTOH this all can be made way easier: ```suggestion return max(v for v in self.versions if v != '*', default='*', key=LooseVersion) ``` (no need for sorting, faster)
version_added needs to be a string.
Hi @calfonso shouldn't we want a real check mode if the module says it supports it? This blindly returns changed=True in check mode all the time. /cc @dagwieers @devarshishah3
Please change to ``` description: - Specifies if backup plan generation is enabled. type: bool ```
Same changes above would be required here, too.
I would prefer not to use a variable that is not defined in the examples. I would just write `password: mysecretstring`. But YMMV, this is just a minor nitpick and by no means a blocker for merging this.
checking compatibility can be a different method. It doesn't have to be under `sanitize_params`. Or change the method name to something more appropriate
Manager schema does not list `Attributes` property anywhere, so this is either something Dell specific or just plain wrong, since none of the two Dell system recordings that I have contain this key.
``` from ansible.module_utils._text import to_text ```
Looks like we always have project_id defined now because of your 'else' above.
Strictly speaking the `default=None` is not needed.
You can import HAS_BOTO3 from module_utils.ec2 as well instead of setting it in your try/except below.
I'm a bit baffled - the `async_wrapper` module exists, so I don't understand why the `seealso` reference to it would fail.
version_added should be a string, as specified in the module checklist
``` module = AnsibleModule( argument_spec=dict( state=dict(default='present', choices=['present', 'absent']), username=dict(type='str'), password=dict(no_log=True), token=dict(no_log=True), src=dict(type='path'), priority=dict(type='int'), ), mutually_exclusive=(['password', 'token'],), required_together=(['username', 'password'],), required_one_of=[['password', 'token']], required_if=[('state', 'present', ['src', 'priority'])], supports_check_mode=True )``` `required_together` looks like it should work
This should probably just be botocore.exceptions.ClientError here since fail_json_aws is called? Or the inner Exception, at least (plus an else).
`try` block should contain fewer statements. `Exception` should be replaced with a more precise exception type.
`For example C(@timestamp).`
You should catch the error twice to produce an error message suitable for each query
A validation on values of each input parameter can be good addition here, if there is one available.
This should aggregate
Capital letter in the value.
this would be '2.7' at this point
```suggestion - Exactly one of I(name) or I(group_id) must be provided. ```
Could you please use Python regex instead of external egrep command ? egrep command may not be installed on given system.
Would this read better as: `wrong context '<%s>', sending exit to device.`
This is still flipped, this will grab the environment var and use it over something a user specifies on the CLI. To pick CLI first, try `self.boto_profile = self.args.boto_profile or os.environ.get('AWS_PROFILE')` then if that fails, the below conditional will try to use the config file.
Looking at https://github.com/ansible/ansible/pull/47971/files, which attempts the same thing, perhaps it would be good to include `groups_added` in the output, so give data on what new groups have been associated. However, I wonder if a list of all groups may be more helpful.
as this is a common return, please remove from the return doc
Would it be possible to clarify what would raise an AttributeError instead of "this should never happen" ? Wouldn't this be perhaps a bit more precise ? ``` distfunc = getattr(self, 'get_distribution_' + name, None) if distfunc is not None: parsed = distfunc(name, data, path) if parsed is None or parsed: break ```
isn't this more pythonic ```py if isinstance(module.params.get('containers'), list): for container in module.params['containers']: if 'environment' in container: for environment in container['environment']: environment['value'] = str(environment['value'])
I'd rephrase this into `'version' argument conflicts with version specifier provided along with a package name. Please keep a version specifier, but remove the 'version' argument.`
```suggestion from ansible.module_utils._text import to_native ... module.fail_json(msg='Vexata API access failed: {0}'.format(to_native(e))) ```
Also note that implementing your suggestion essentially requires a revert of #60912 because calling `original_safe` directly bypasses `self._sanitize_group_name`, so you'll see this reflected in my PR.
description should have something like: Before 2.3 this option was only usable as 'name'
Prefer to use something like `hasattr(client, "update_security_group_rule_descriptions_ingress")` to test whether we have a new enough botocore.
You can avoid this if/else if you initialize `cdroms` this way: ``` cdroms = {'ide': [], 'sata': []} ```
```suggestion version_added: "2.10" ```
This whole section would be much simpler if you started with `set`s and continued with them ``` new_settings = set([item['OptionName'] for item in new_options]) old_settings = set([item['OptionName'] for item in current_option['Options']) if new_settings != old_settings: to_be_added = list(new_settings - old_settings) to_be_removed = list(old_settings - new_settings) ```
like @bcoca I suggest to use the Ansible provided functions instead of adding more dependencies..
try/catch a ValueError here, in case the user try something funny (like '1gb500mb', or '1.5gb').
Please add spaces around the equal sign.
That's why I said "wouldn't it be better to *add* it".
Call `f.close()` in case of failure (the API doesn't provide a context manager).
I really hate that is the case, we never got a real good standard around 'number of v' to use for each case, most connections print all output at 3, winrm is one of the few that goes higher
`enable_3D` is a bool, so it will always be set, i think this can be a little simplified as well ```suggestion video_spec.device.enable3DSupport = self.params['enabled_3D'] enabled_3d = self.params['enabled_3D'] if self.params['enable_3D'] != video_card_facts['enable_3D_support']: self.change_detected = True ```
Default not set in argspec.
I suggest you use your real name here.
```suggestion Kwargs: ```
This should return {} instead of None so camel_dict_to_snake_dict works.
This looks like more than a docs change.
It would be good to have a try/except around this call.
Noticed inconsistency between ``add_host_to_inventory`` and ``add_host_to_group`` with regard to return value.
[] is False, so I don't think you need the `and len(launch_configs) > 0`.
yeah, please fix warning and deprecated. Those need to use text strings when they concatenate. (They really should use text strings everywhere and if I was fixing it, I would change all the literal strings into text strings but the concatenation is only thing I saw that causes an actual problem due to the various ways that Python2 and Python3 handle string formatting). The way warning and deprecated are now, they could either traceback or cause tracebacks inside of display() when used with non-ascii strings of the wrong time.
I don't want to hold up the PR but you could use a loop instead of a nested KeyError like ```suggestion member_names = [to_native(dirname, errors='surrogate_or_strict')] if not member_names[-1].endswith(os.path.sep): member_names.append(member_names[-1] + os.path.sep) for name in member_names: try: tar_member = tar.getmember(name) except KeyError: continue break else: raise AnsibleError("Unable to extract '%s' from collection" % member_names[0]) ``` Potentially allows us to try more options in the future if need be.
Should we state that it will be removed in a major release after x like? ```suggestion new_msg = "[DEPRECATION WARNING]: %s. This feature will be removed in a major release after %s." % (msg, date) ```
There is one problem with doing it this way. If json.dumps() raises an exception then policy_json_string won't be set to a value. Instead, you return the repr of the policy dict: ``` python raise Exception("{0} // {1}".format(e, repr(policy)) ``` (I also remembered that the "{}" format string isn't legal on python-2.6 so we have to use the numbers inside of them.
please describe what the disk format is
```suggestion self.module.fail_json(msg="vmdk full path '{0}' is not in the canonical form '[datastore_name] /path/to/vm_name.vmdk'".format(vmdk_path)) ```
If `self._module.params['name'] is None`, this will never match and the module fails.
The way the multi-inventory methods are working, the resulting payload looks like this: ``` { "ansible_facts": { "redfish_facts": { "system": { "entries": [ { "entries": { "AssetTag": "free form asset tag", "BiosVersion": "P79 v1.00 (09/20/2013)", ... }, { "entries": { "AssetTag": "free form asset tag", ... ``` Note that there 2 levels of `"entries"`. This isn't necessarily bad but could be confusing. If you changed line 1030 above to this: ``` entries.append(inventory['entries']) ``` You would get output like this: ``` { "ansible_facts": { "redfish_facts": { "system": { "entries": [ { "AssetTag": "free form asset tag", "BiosVersion": "P79 v1.00 (09/20/2013)", ... }, { "AssetTag": "free form asset tag", ... ``` And I think that would be simpler and more straightforward.
`True if foo in bar else False` â `(foo in bar)` it's already a boolean
Add a note from which version `ports` alias is added like ``` Alias C(nics) is added in version 2.4. ```
Example of such handler should be provided. This is what I normally user as the handler: ``` - name: Clean YUM cache shell: env yum clean all ``` The `env` is there to prevent Ansible from displaying warning that the `yum` module should be used instead. The same can be used for `service` commands (e.g `env service postgresql init`).
I haven't actually used stepfunctions myself so I'm just going off the docs. AIUI, `ExecutionAlreadyExists` would only be returned on a running execution if the `execution_input` is different, not in a case where the input is the same. As an ansible user who is new to step functions, I feel like if I gave the same input and ran the playbook twice I would expect the 2nd time to be `changed=false` if the first execution is still running. But that doesn't mean that's how AWS users familiar with step functions will expect it.
No need to quote.
Prefer: ``` if desired_capacity is None: if as_group['DesiredCapacity'] is None: desired_capacity = min_size else: desired_capacity = as_group['DesiredCapacity'] ```
I'm just wondering whether we need to explicit set to DEBUG when DEFAULT_DEBUG is enabled considering that's what it does right now. We should probably just set to INFO when not C.DEFAULT_DEBUG.
yaml is also not core nor requried on targets, should also be 'exception wrapped'
sorry for the delay, but this one was dropped in my queue as it was closed/reopppened
I'd put `(self._flags['become_success'] or chan.exit_status_ready())` into a `@property` for readability so that it'd look like ```suggestion while not self._cmd_finished: ```
```suggestion assert item is None ```
```suggestion - If both I(namespace) and I(netns) are set, the module ```
`@unittest.skipUnless(basic.has_journal, ...)` might be clearer.
Please put this on a single line. Lines can be 159 characters wide.
I highly recommend using printf style formatting or using `.format()` instead of `+` concatenation. There is a performance hit for python to try and understand if it can do the operation by type inspecting the parts, figuring out how to do it, and what to do in the case of a failure.
set supports_check_mode=True after the check mode implementation
may as well change this to tar_path now that you have converted it above ```suggestion display.display(u'Created collection for %s at %s' % (collection_name, tar_path)) ```
This are really good `notes`, thank you.
You can move this out of both if statements and just set if before as both branches set it to true
type=str is not needed. ```suggestion extra_args_precommand=dict(), ```
Looks like we do need to guard against an empty `instids` list: ``` ----> 1 ec2.create_tags([],{}) /usr/lib/python2.7/site-packages/boto/ec2/connection.pyc in create_tags(self, resource_ids, tags, dry_run) 4217 if dry_run: 4218 params['DryRun'] = 'true' -> 4219 return self.get_status('CreateTags', params, verb='POST') 4220 4221 def delete_tags(self, resource_ids, tags, dry_run=False): /usr/lib/python2.7/site-packages/boto/connection.pyc in get_status(self, action, params, path, parent, verb) 1225 boto.log.error('%s %s' % (response.status, response.reason)) 1226 boto.log.error('%s' % body) -> 1227 raise self.ResponseError(response.status, response.reason, body) EC2ResponseError: EC2ResponseError: 400 Bad Request <?xml version="1.0" encoding="UTF-8"?> <Response><Errors><Error><Code>MissingParameter</Code><Message>The request must contain the parameter resourceIdSet</Message></Error></Errors><RequestID>62f52f6f-c907-412a-a4d0-68ce1f54acc2</RequestID></Response> ```
Since this is the only key in the dict that provides helpful info you can unnest it for ease of use. `result = S3ServiceManager(module).get_bucket_list()`
```suggestion - Public IP allocation method. ```
i would add the aliases to the options in this way: option1 (alias1, alias2), option2 (alias1, .... Or simpler to direct them to `ansible-doc -l <module name>` for 'valid options', specially if you consider 'sub options'
```suggestion short_description: Gather information about vSphere storage profile defined storage policy information. ```
A boolean should default to 'no' or 'yes', so: ```yaml default: 'no' ```
```suggestion if match in (data['module_stderr'], data['module_stdout']): ```
module_utils files should be licences under BSD https://docs.ansible.com/ansible/dev_guide/developing_modules_in_groups.html#before-you-start-coding
How about this - ``` reconfig_vm = False for key, val in new_values.items(): key = key.replace(key_prefix, "") current_value = current_values.get(key, '') if key == 'enabled': current_value = current_value.lower() val = val.lower() if current_value != val: reconfig_vm = True if not reconfig_vm: return result ```
~though we do seem to have some code that ends up limiting this ...~ ``` - hosts: localhost gather_facts: false tasks: - command: echo notify: - h3 handlers: - name: h3 debug: msg=h3 changed_when: true notify: h4 - name: h4 debug: msg=h4 changed_when: true notify: h3 ``` ~causes extra executions (each is run 3 times) but not infinite loop (runs h3 2 and h4 3 times if i notify h4 from command task)~ as @mkrizek noted, not a bug, each invocation is from a separate 'flush_handlers' from pre_tasks/roles/tasks/post_tasks
Hmm, or slightly better: `... and will be inherited from the host machine if it is (re-)created.`, because in case the container already exists but is recreated (because something else changed), it will also change.
You should mention that `post_copy` was added in 2.4.
Not something you can use now, but since I know the rdundancy of calling `strip()` twice probably drove you nuts. In python-3.8+, you can use the walrus operator: ``` return [stripped_pat for pat in patterns if (stripped_pat := pat.strip())] ``` That particular example might be a bit obfuscated, though. I'm not sure if it's just the unfamiliarity of the walrus operator that makes it less readable or that it leads to too much going on in too little space. Time will tell.
`boto3_conn`, `ec2_argument_spec`, and `get_aws_connection_info` are unnecessary once you switch to AnsibleAWSModule. The rest are already unused.
his is still a trail ...
The version_added on an existing module should not be changed.
This should use `module.deprecate`, there's a good example in https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/aws_kms.py#L954:L956
Thanks for making this Python3 compatible. You can remove this line and the line below. Catching boto.exception.NoAuthHandlerFound and Exception should be fine.
One small nit pick: required by default is False so no need to specify for false values.
```suggestion type: list default: [] ```
So we tend to remove things like `required=False` and `default=None`.
when you opt-in to using a CM like this, make sure you only patch lines that you really need to patch. and put any assertions outside, whenever possible: ```suggestion assert ret == [] ```
This should be bellow the `RETURN` block together with the other imports.
Remove debugging content "bhujay here". Also, iface['subnet'] is not valid when iface is a str.
That does not look correct to me.
Thanks for reviewing this @rubentsirunyan
Version added would be 2.6
The properties' key-value and default/required can be defined in the spec.
These checks are unnecessary. You can just call `self._set_composite_vars(self.get_option('compose'), host, hostname)`, etc, and it will only create those composite vars and groups if constructed options have been provided. Here's a pull request in which I'm fixing it for aws_ec2: https://github.com/ansible/ansible/pull/38229/files#diff-fde53b7bca9c303ec46c0a71219bab47R442
You could use an abstractbaseclass to enforce the requirement for subclasses to implement execute_module() instead of raising an exception inside of the function. The advantage of an abc is that it will raise when the class is parsed rather than when the function is called. https://docs.python.org/2/library/abc.html
Well, by default if you pass `wait=true`, we use some condtion to happen, but you need to write that condition. We already rely in audit log messages, because unfurtunatelly sometimes we must. Take a look here, how to implement it using audit log: https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/ovirt/ovirt_hosts.py#L474
We are defining the state so the option should be `enabled` not `enable`
@sivel I took a look at what it would look like to do this in the caller last night. In the end I discarded that approach as it seemed to break the concept of GalaxyAPI as an abstraction layer for galaxy versions. We end up needing to push knowledge of what urls look like in v2 and v3 outside of the GalaxyAPI class and into the caller. (I'll post what that would have looked like in a moment)
Indentation doesn't look right here
same as above _ACTION_ALLOWS_RAW_ARGS .. also can be built better by leveraging existing vs repeating the work ``` _ACTION_ALLOWS_RAW_ARGS = _ACTION_HAS_CMD_ARG + add_internal_fqcns(('raw')) ```
Please update the method doc to reflect this change
Our preference is to use YAML lists, instead of comma separated values: ``` - name: install the latest version of Apache and MariaDB dnf: name: - httpd - mariadb-server state: latest ``` While we support CSV, YAML is recommended.
```suggestion ``` I don't believe you actually mean to remove the reference to your parent connection plugin. If you ever attempt to reuse the plugin after logging out, `send_request` will throw an AttributeError, and if you don't, then the connection plugin's `close()` method will be disposing of this object anyway.
You can simplify with `config["state"] = "suspend" if conf["status"] == "SUSPENDED" else conf["status"].lower()
```suggestion client.post('/ip/{0}/move'.format(urllib.parse.quote_plus(name)), to=service) ```
Should also have trailing dot :-/
no sample for what an ipspace should look like
If the values can contain a colon we'll want to change the second line.split() so that we don't truncate the value. Something like this: ``` python smbios_dict = dict((line.split(':')[0].strip(), line.split(':', 1)[1].strip()) for line in out.splitlines() if ':' in line ) ```
Please do this everywhere. ```suggestion - Only required if no server I(name) is given. ```
I don't like that this is uppercase. Why don't we set it to generated by default if it wasn't provided. (So set it to None by default).
resource group should be parsed from image.id, considering the list_all scenario.
Does github_url will be different for enterprise use ? If it is going to be common for all then no need to provide this option.
missing version_added, also from examples (nice to add in the 'name' field)
Under what circumstances would the `or {}`? An empty entry point inside the `argument_specs.yml` file? ```yaml main: short_description: My role does amazing things other_entry: ```
Do not do this. If you want parameters to fallback to environment variables then you can do the following in your TETRATION_PROVIDER_SPEC ``` 'server_endpoint': dict(type='str', required=True, aliases=['endpoint', 'host'], fallback=(env_fallback, ['TETRATION_SERVER_ENDPOINT'])), ```
Is an IP address acceptable, state either way.
Good catch. I'll add a check. edit: Nevermind. Found that this check isn't necessary since `connection.transport` will never equal `'local'`, as this check lives in `class Httpapi`. I simplified the check in the rewrite.
This will only filter out requests where exception occurred. If the user for example, passed in invalid credentials and server returns valid JSON back, response will be treated as a success.
@wrouesnel CI failure due to PEP 8 issue: ``` 2017-01-28 07:26:38 ERROR: PEP 8: lib/ansible/modules/cloud/amazon/ec2.py:930:1: W293 blank line contains whitespace (legacy) ```
return values do not match RETURN doc string
from my testing we should switch the order of these: ``` python b_filename = to_bytes(filename, errors='surrogate_then_strict') if expand: b_filename = os.path.expanduser(os.path.expandvars(b_filename)) # Optional: only needed if the method uses filename instead of b_filename later filename = to_text(b_filename, errors='surrogate_then_strict') ```
This mechanism has been dropped lately. The correct way of doing it is by following the pattern introduced here https://github.com/ansible/ansible/commit/ed15a0e9a7bf237786634cc5dd89d9448031c86f
this also supports async
All of these cases where an exception is converted into a message should be `to_native`. `ensure_str` would raise a `TypeError`
Spelling typos ;-)
just use `as e`, controller supports >=2.6 so no need for this work around
Is this module included with Python? If not needs putting in a try block. Search other modules for `HAS_LIB`
well, the problem only exists if we try to report on the arguments BEFORE executing the module, which we really should not need, that entry was original a debug entry that was added because we rewrote the whole engine, we should not need this anymore.
I would simplify this to: ```python org_id = meraki.params['org_id'] if not org_id: org_id = meraki.get_org_id(meraki.params['org_name']) ```
Couple of typos: remporary & copites
can you add default value of 'False' to force ``` force=dict(type='bool', default=False), ```
it is a float, I just wondered if it would make any difference from user perspective. But it AFAICS not. LGTM
These don't appear to be "public" attributes, so we should stay consistent with indicating their privateness by prepending their names with an `_` character.
Shouldn't this be `ANSIBLE_CONNECTION_PLUGINS`? `ANSIBLE_CONNECTION_PATH` is the path to `ansible-connection` itself, not the envvar used by the loader.
any reason why we should not use a simplified loop? ~~~python for vpc_offer in vo['vpcoffering']: ~~~
please wrap in `if` block
This "multi" method isn't needed in this PR since this is for a "set" method called from redfish_config.
`normalize_interfaces` is aimed at sanitizing user input, and seems to be redundant while parsing running-config where the interface names are already normalized.
Could/should this return an extra item for headers? ``` python module.fail_json(msg='error in end_point=>' + endpoint, headers=headers) ```
Typically we organize code so that callers are closer to the bottom and callees are near the top (```__init__``` being the exception... it's always at the top). This organization puts methods like ```run()``` near the bottom of the class and helpers above it.
You seem to alternate between the terms backup, import and restore. Picking two will make this easier for people to follow.
The value of `version_added` should be the version of Ansible in which the feature is expected to be added.
Should be vpc_info[-1]['tags'] = boto3_tag_list_to_ansible_dict(vpc.get('Tags', [])) in case there are no tags
@Akasurde That's exactly what we are doing.
Move to the L416's dict construct is OK, no need another conditional check
Group should be lower case
I'm trying to understand why the login parameter here is needed. I'm assuming the intent is to avoid a request to the server which is guaranteed to fail. It is a bit harder to determine intent without altering the signature here, but it would still seem more robust to inspect the params for a valid pattern rather than effectively allowing methods to opt-in to bad behavior. Alternately, if `format_request()` is done in this method rather than all around it, you could just test `url` before passing it on.
Anything going through Display() needs to use to_text()
A simpler fix is `boto_params[param] = u"{0}".format(value)`
I figure we wait until we have multiple endpoints before implementing this. Depending on how long it is before that happens, the way we implement this may change.
This statement is not required as it's handled by Ansible parameter checking... you've already specified the choices.
```suggestion - Minimum API timeout value. If this value is not 60, it will be the default timeout for all APIs that do not have a specific timeout. ```
A link to server's Conjur identity website could be added.
not sure this debug is useful
Same with this one, we can just pass in `scm_credential` instead of `execinfo`
proc/mounts is not guaranteed, so its should fallback to fstab and/or make the source configurable since fstab can be in different locations ... though really a parsable `mount` output would be the perfect solution
check_mode is something that is AnsibleModule knowledge. lock and unlock are about file operations. So erally, a caller who only wants to lock when not in check_mode should do: ``` python if not module.check_mode: lock_file(filepath) ``` check_mode should not be part of the lock_file() and unlock_file() API.
@resmo the shrink option is only for changing the disk size to a smaller partition. It requires more actions from the user if it should success: - https://github.com/apache/cloudstack/blob/756a7e89cbcec7a1aa98b3f470cbdf8181af75ad/server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java#L1022 - http://libguestfs.org/virt-resize.1.html (section "SHRINKING A VIRTUAL MACHINE DISK")
All modules in VMware space uses Jinja variables like the current implementation. I would stick to this naming scheme as this will make all modules same and readable. Adding arbitary values does not make sense to me.
All Ubuntu versions or only certain ones? That will make it clearer if someone needs to update this in the future to know what needs testing
If you (also) specify your GitHub nick, you will be informed in case bugs/issues/PRs are filed against this plugin. The syntax is ```suggestion - Stefan HeitmÃ¼ller (@morph027) <stefan.heitmueller@gmx.com> ```
The final command should probably return its stdout, stderr and rc back to the playbook.
The issue with this is the timestamp in the filename and the actual timestamp for file changed might not be the same. Thus returning the wrong timestamp within the filename. To avoid this you can check if configurable backup path is given as input to the module. Refer https://github.com/ansible/ansible/pull/50801
Do not remove alias `nic_name`
Make this: ```python result = dict( changed=False, ) ```
```suggestion - To grow XFS filesystem mount point required. version_added: "2.10" ```
Could you have a syntax close to : ``` if not re.match(): raise ... ``` That we don't have as much indentation levels.
Botocore is a dependency of boto3, but this belt-and-suspenders approach of checking both is ok. Can you swap the order so that a user will be prompted to install boto3, which would also resolve a lack of botocore? Basically just swap this conditional with lines 394/395.
Please change back.
Or if you want your module to fail if the prefix sent as parameter doesn't have a netmask, you should handle the error.
Either C(disk_id) or C(disk_name) is required when C(upload_image_path) or C(download_image_path) is specified.
Same here. `self.api_client` instead of `client`
Explicit is better than what's happening implicitly: ```suggestion host=to_text(host), err=to_text(err), url=to_text(self.foreman_url))) ```
Not a problem, though wasn't obvious
The authors should include a Github handle, like: ```suggestion - Remy Mudingay (@rmudingay) ``` This is needed so you are properly notified as a maintainer.
I guess this might raise an `OSError`
Since you're screenscraping, set the locale to C before scraping. See: gluster_peer
~~why stat and return the data when you are dropping it on caller?~~ 2nd caller does use
Rather than this, you can add "required_if" to the module definition
Yes - this looks good. You do need to put these back into `dict` format since `delete_tags` needs a dictionary format.
Would there be any utility to sorted() on files/sub_folders? AFAICT, os.walk will use the os.listdir() results directly for filenames. os.listdir() is doc'ed as 'arbitrary order' (iirc, more or less up to fs). Wondering if sorting those results would make for more reproducible behavior when trying to replicate errors. It shouldn't matter at all if there are no bugs, but it could make tracking down odd failures easier.
```suggestion - Refresh the storage system in vCenter/ESXi Web Client. ```
Please indent it by 2 spaces only.
If this docstring is for the `_cluster_stable()` method, it must be *inside* that method.
I would drop the `required: false`. It is no longer needed to specify this for parameters that are not required.
The code is the same, just the data differs, so I think it would be clearer to move the loop outside the if. ``` python output_data = self.py3_output_data if sys.version_info[0] >= 3 else self.py2_output_data for msg, param in output_data.items(): ... ```
```suggestion - Whether the key should be automatically rotated every year. ```
I haven't tested what this code change does exactly, but I think this example is off. Purge_tags is used with state: present, because it usually means 'remove any tags except these which listed here which should be present'.
```suggestion if self.client.module.params[docker_object]: ```
I don't think we should use the word `yet`, as that indicates we have already made the decision that it should, and we are actively working on changing it. Also, we need to work a little on the grammar. "Empty archive files are not supported"
Required=false are implicit could you remove them ? Default=None too in case of string
Please use `msg` instead of `result`. Also the standard casing for both parameters as well as return values is snail_case. So it would become `deploy_key` instead of `deployKey`.
I'd put this caveat below the option descriptions, and say something like `Use the started/allocated/restarted arguments to manage the VM's power state`. (note the distinction of module argument to valid options for those arguments)
nothing outside the fail_json/exit_json should write to stdout/stderr
```suggestion if not os.path_exists(to_bytes(xdg_path, errors='surrogate_or_strict')) and euid != 0: ```
filtrate is very liquid specific, use 'filter' instead
That the implementation runs top-down is without a doubt, but it doesn't really process the items sequentially. All items for the same runlevel are started in parallel. So the order should not matter and therefore there is no need to ask the user IMO. So I would remove that option.
Ah, sorry, I forgot one more: `timeout` is missing the `DOCKER_TIMEOUT` fallback.
This is a dirty C-style hack. Please return things that you then use. It's completely confusing to not know what's happening to results.
set the parameters to `default` by prepending `no`, not appending default values.
please change version_added to "2.4"
add note that 'absent' state was added in 2.4
Group names must not contain dashes.
```suggestion - name: Commit fileset OpenGL.OpenGL_X.rte.soft ```
```suggestion return not self.running ```
Alphabetize imports. ```suggestion from ansible.module_utils._text import to_native, to_bytes from ansible.module_utils.basic import AnsibleModule from ansible.module_utils.common.sys_info import get_platform_subclass ```
Since the error handling is effectively the same beyond slight tweaks to the messaging, you could collapse all this with ```python except (SCMRException,PDUException,PypsexecException,SMBException) as exc: ... ```
but this is only for the 'inline' function? .. that might be easier to get away with
Maybe this? if params['state']: config_state = params['state'] else: config_state = None The AnsibleModule class has already verified that the value in params['state'] (if specified) is one of 'present' or 'absent', so you don't need to check that again yourself.
I thought that IIS didn't require the key to be exportable, just that a key is imported and usable.
should catch BotoCoreError here too. Using AnsibleAWSModule means you can just do module.fail_json_aws(e, msg="Couldn't list images")
default value is false, can be removed here
Is it possible ? For me it would mean that it exist a package without version.
I'm not a fan of facts, so I am okay with returning the list and require register.
I'd put this at the end and just make it an else so that it's the default if an invalid (or no option) is chosen.
Please remove this line, for various reasons. - We use examples to showcase possible values - It shows the old key=value syntax If you remove this, you also do not need to quote the whole paragraph.
this line will probably not generate an exception and should be outside of try/except block
The *following* examples
Can you explain this a bit more? I don't think anything is wrong, I just don't understand :)
This should behave the same as the identically named option on the `user` module.
These imports need to be moved back to where they were. As you can see moving it has caused CI to fail.
I prefer to have a trailing comma everywhere, it makes further diff review easier. ```suggestion 'eos': re.compile(r'^Arista'), ```
```suggestion - Whether remote gateways can be used on this Virtual Network. ```
[`path`](https://github.com/ansible/ansible/blob/ac56a2f1385d0f7e5b22e3b6b1d79d56da319b80/lib/ansible/module_utils/basic.py#L856) type could be used (some vars would be [expanded](https://github.com/ansible/ansible/blob/ac56a2f1385d0f7e5b22e3b6b1d79d56da319b80/lib/ansible/module_utils/basic.py#L1884)) for `path` parameter.
ditto about s/no/'no'/
Group names are supposed to be named similar to variables, i.e. alphanumeric and underscore. So at least the prefix should adhere to that. Besides that, look at this PR: https://github.com/ansible/ansible/pull/52748
When running check mode and a stack does not yet exist, this call fails. If you catch botocore.exceptions.ClientError in a separate `except` you can check if the error is that the stack doesn't exist, then return None and show the state as "changed"
In 2.5.0 we've added a way for modules to put temporary files into a directory that the controller would clean up in case where the module fails unexpectedly. To make use of that here, use this: ``` python tmpfd, tmpfile = tempfile.mkstemp(dir=module.tmpdir) ```
Should state that `curl` is only required for Linux hosts
It looks like you're double-nesting `ansible_facts` dictionary, on line 406/409/412 you have the facts being saved in `result = { 'ansible_facts': { 'cloudfront':...` but then here you pass to exit_json under `ansible_facts` so your output looks like: ``` localhost | SUCCESS => { [479/1550] "ansible_facts": { "ansible_facts": { "cloudfront": { "E22CS9R7XQ0CWU": { "distribution": { .... ``` To fix this you can instead do `module.exit_json(msg="Retrieved cloudfront facts.", **result)` or stop nesting the `cloudfront` key under `ansible_facts` on 402/405/408/411.
result is attempted to be used below
User will get break if this field name is modifies.
```suggestion wwn = validate_wwn(module) ```
Maybe you just need to separate such things into functions so that low-level implementation details wouldn't leak into the higher-level abstraction confusing the reader.
CI failure due to PEP 8 issue: ``` 2017-02-15 10:09:55 ERROR: PEP 8: lib/ansible/modules/cloud/atomic/atomic_container.py:158:161: E501 line too long (302 > 160 characters) (current) ``` Also, that path value is wrong.
you don't need parens here
Please don't turn the Examples-section not in a integration test playbook. Consider how the end-user would be using your module. They won't be *uploading* test files to a target node to run Pester, but run it remotely where those files are being stored. So I'd remove this from the Examples.
I think all the `serial_` prefixes are repetitive. I think this module should be renamed `cpm_serial_port` then you can just remove all the `serial_` prefixes. This would also remove confusion on whether this module is configuring serial or network ports.
```suggestion - The passphrase for the I(privatekey_path). - This may be required if the private key is password protected. ```
Divide this like ``` - The version of the switch to create. - Needed if you have a vCenter version > ESXi version to join DVS. If not specified version=version of vCenter ```
Don't you simply want an `else:` here? Or do you explicitly want to have the case that you call `self._has_migs(local)` twice in a row (without a sleep inbetween), and once it returns `False` and then `True`? Otherwise this `elif` makes no sense.
`pass` seems useless to me.
@nitzmahone to confirm, since my info might be out of date
Remove spaces before operator.
`str(e)` pretty much contains "AWS profile not found", but not a blocker
The regular expression object should not be created every time this check is performed.
This syntax with parens isn't supported in outdated pip
It would be nice UI/UX by having return values of the modules.
I think we want to match the specific options that we're utilizing here (project_urls and python_requires). Using this more general regex would mean that we are not warned if we typo an option name in a future change (like ```autor_email='info@ansible.com',``` )
```suggestion performed an initial sign in (meaning C(~/.op/config) exists), then only the C(master_password) is required. ```
this needs to be ported to version 2.0 type lookups, as is it won't load
The lun param has always been there. Shouldn't need to check for ActiveCluster support just to send the vol LUN ID.
yep, that's the fault of tower-cli. I made a PR to remove it there.
I would put these variables into the function which is using them. No reason to have them as global vars if you don't share them across multiple functions.
Setting default value to `ha-datacenter` results in unwanted outputs as people tend to forget to provide value as it is not required.
Per bcoca: please switch this over to `to_native()` instead of `str`
Should this be using the `changed` and `msg` values from `result`? e.g.: ``` module.exit_json(changed=result['changed'], msg=to_native(result['msg'])) ```
I'm not proficient in openshift nomeclature, but it seems that resource_name makes more sense as a list an object_type as a parameter? i.e i want to get data for project1 and project2 which are Project type ... this seems to be reversed to me. (_terms vs resource_name)
Well, as long as we support Python 2.6 and older on nodes (so still a couple of years), this change will be required. http://docs.ansible.com/ansible/intro_installation.html#managed-node-requirements Unless this module cannot work on Python 2.6 and older for other reasons that are not easy to fix. https://pyformat.info/
You don't need to state default=None as this is the default value.
Style note, I finally convinced people a year or so ago that ```{}``` is superior to ```dict()```. So new code should use the literal syntax.
we normally call this option `validate_certs`
How would you unassign, set `node:` to empty, null? Would be worth adding an example for that. If it's not possible then I think `short_description` may need updating
Not catching non-200 responses.
Also here, I don't know why you are splitting lines. It does not make it easier to read. Usually it is done out of necessity (e.g. PEP8 rules require it), but in this case there is no need to make this weird.
version should be 2.4, as that's the version being on devel now.
Please add spaces around the `+=`.
I see that some blocks are wrapped at the 80 characters but for example this line is not. It would be nice to have all wrapped the same way.
this seems to assume a single level of sub specs, in some cases we might want 2 or 3 so making it recursive with the top options seems like the best approach
get_current_function should be updated to return tags in ansible form
duh ... missed that ...
`default=None` does not make sense together with `required=True`.
Can we reduce the complexity of this block by splitting it? Also put the keys in lowercase
`... and not (namespace == 'user' and re.match(r'^user\.', key)):`
This will never happen: 'a' is a defined local variable, so Python will never raise NameError. In effect the `mandatory` filter is now a no-op.
```suggestion - name: Make sure there is neither a databases with name 'foo', nor one with name 'bar' ```
If `force:` is deprecated, just remove it (from here and in the docs) so we can use `match: none`
to make change backwards compatible with modules not in repo, make `warnings=None`
I would be more specific on what is only supported by the cryptography backend
use `to_native` instead of `str` to avoid python version issues
It looks good. - [read_docstring](https://github.com/ansible/ansible/blob/0e4e7de0001c3b53c586e6b9bafcd3f15bb862c0/lib/ansible/plugins/loader.py#L214) is called for `lookup` plugins - [AnsiblePlugin.get_option](https://github.com/ansible/ansible/blob/0e4e7de0001c3b53c586e6b9bafcd3f15bb862c0/lib/ansible/plugins/__init__.py#L56) calls `config.get_config_value`: - [get_config_value](https://github.com/ansible/ansible/blob/0e4e7de0001c3b53c586e6b9bafcd3f15bb862c0/lib/ansible/config/manager.py#L282) calls: - [get_config_value_and_origin](https://github.com/ansible/ansible/blob/0e4e7de0001c3b53c586e6b9bafcd3f15bb862c0/lib/ansible/config/manager.py#L287) calls: - [ensure_type](https://github.com/ansible/ansible/blob/0e4e7de0001c3b53c586e6b9bafcd3f15bb862c0/lib/ansible/config/manager.py#L352) calls - [resolve_path](https://github.com/ansible/ansible/blob/0e4e7de0001c3b53c586e6b9bafcd3f15bb862c0/lib/ansible/config/manager.py#L79) `redis` lookup does the [same](https://github.com/ansible/ansible/blob/0fda2b504ad831e49b66fe45421006a23420838c/lib/ansible/plugins/lookup/redis.py#L40).
This may not always be the correct user account and may differ from the value in `XDG_RUNTIME_DIR`.
This line looks like it only introduces a typo ;-)
`required: false` lines can be removed
Whole function body can be just `return bool(self.specs)`
This is implicit, and can be left-out.
Sorry about that, alexlo03. Had my head in the uh clouds. :/ Not a request for boto3! I'd prefer to see the bugfixes make it into 2.3 and fix make the exceptions better in another PR if willthames's suggestion above doesn't catch timeouts.
@bcoca The comparing is done in `check_boot_time()`. This method just gets the boot time and returns it.
While we may have done it in the past we don't want to be adding non host based facts to the `ansible_facts` return value. It's a bit confusing as this is technically a "facts" module but because we are getting facts on something that isn't the host we are running on, this should just be returning a dict. This is mainly because we can run this module on multiple SQL servers to get facts for different resources and we don't want to overwrite existing calls to this module. This is similar to the `stat` module where we can call stat on multiple objects and save the results in a variable using `register`
Function name can be different, IMHO this is returning boolean if policy is enabled or not. You can rename as `is_policy_enabled` or something.
It should be `if self._module.params.get('sparse') is not None`, because if `sparse` is `False` it won't send `sparse=False`
Use this: ```yaml version_added: "2.0" author: - Jonathan Davila <jdavila(at)ansible.com> - Drew Mullen (@drewmullen) <mullen.drew@gmail.com> ``` `version_added` is the version of Ansible the module was added.
Note: Looks like setting dest here can be removed as well.
As this is in a loop, the message will be overwritten on each iteration, with only the last snapshot created being reported.
I don't think boto_params will include access_key or secret_key if a profile is being used (which might be through passing `profile` parameter or with `AWS_PROFILE` set) Looking at https://github.com/jmenga/requests-aws-sign the way to do it is to use ``` session = session.Session() credentials = session.get_credentials() ``` but even there, we'd need to cope with the `profile` parameter.
As mentioned on IRC, you really need this: ```suggestion if len(cert_exts) < len(csr_exts): ```
Feel free to add here as well something along the lines of `prior to 2.6 all targets were drained if this option was None and I(purge_targets) was True. As of 2.6, to drain all targets this option must be set to an empty list to use in conjunction with I(purge_targets).`
maybe we can move the `type: str`after the choices to make it consistent with the another options.
Doesn't isatty bomb on none? It does for me...
This will need to be bumpet up to `2.3`
Otherwise this PR looks good!
Key name should stay "user": ``` creds = {'user': module.params['username'], ```
Looks like an extra dict
I would reword this message to indicated a path to a file was provided. Something like "ssh_key_data should be a string, not a path to a file". Also add `version=2.12` the `deprecate()` call.
``` oif_ps: description: - Configure prefixes and sources for static outgoing interface (OIF). This is a list of dict where each dict has source and prefix defined or just prefix if source is not needed. The specified values will be configured on the device and if any previous prefix/sources exist, they will be removed. Keyword 'default' is also accpted which removes all existing prefix/sources. ``` Based on the option description, changing type=`list` to type=`raw` might not be the best of the fix. Since in addtion to `dict` as list elements it can accept a special str value `default` the option can be defined as `oif_ps=dict(required=False, type='list')`. This won't check the type of each element, later in the code if the value of `oif_ps` is assumed as `dict`, it might result in error, to avoid that if element value is not `['default']` it can be converted to list dict at line 598 ``` if oif_ps: if oif_ps == ['default']: delta['oif_ps'] = [] else: delta['oif_ps'] = <convert oif_ps to list of dict> ```
AnsibleAWSModule will handle this
Detail why this may be useful
I would say that the 'cannot read' is an incomplete error message .. 'tried to configure using X and but failed as I cannot read Y' seems a better error message for both cases. if you want to add an additional warning 'timedatectl found but not usable, falling back to other methods', it might help the user diagnose the issue on failure.
Why not something like: ```.py new_key = self.key_map.get(k) if new_key is None: new_key = re.sub('([a-z0-9])([A-Z])', r'\1_\2', k).lower() items[new_key] = self.sanitize_keys(v) ``` (instead of the whole `try/except` block)
You can wrap code snippets in `C()` and it will be stylized like in-line code in the generated HTML docs.
`required: false` is the default and can be removed
Why is changed=True here? Nothing should have changed on Zabbix's side...
Again with `BaseException`
`display.deprecated` takes a `version` kwarg that defines the version that the functionality will be removed in. Please use this as it will help us audit the code later to find items needing removed.
Ah, yes, I see that now
use AnsibleAWSModule and then ``` connection = module.client('codedeploy') ``` is enough to connect.
```suggestion - If an image does not exist locally, it will not appear in the results. If you want to check whether an image exists ```
There is probably no good reason to return this string.
Please look at other `short_descriptions` for examples. Capital letter, mention product name, etc.
I'd like to see more tests of the parsing, ideally with some examples of real os-release files. test/units/module_utils/test_distribtution.py[1] has some. [1] test_distribution.py file is in the wrong place but nonetheless
```suggestion # Copyright: (c) 2017, Larry Smith Jr. <mrlesmithjr@gmail.com> ```
Nesting under distribution ID is useful when you know it, but when returning a single item it's nice if you can make it available under the key the user asked for it with. Take for example: `ansible -m cloudfront_facts -a 'region=us-east-1 distribution=yes domain_name_alias=rsb.io' localhost`. As a user, I'd like to be able to say something like: `{{ cloudfront['rsb.io].ARN }}` to get the ARN, instead of (currently) `{{ cloudfront.[cloudfront.keys()[0]].distribution.ARN }}`. You could return both, so users could either use the ID or one of the CNAMEs to access the facts. They would be unique, since in CloudFront you can't have overlapping CNAMEs ever.
Not required according to doc and arg spec.
`Nothing to undeploy` nor `undeployed` are not valid states. You should use only `state` here.
This does not work if you have datacenter nested inside a folder. For example, datacenter `DC0` is nested under folder `F0` and name does not contain `/` then this will always returns `F0` with no vm name in list.
Looks like there is a mistake in the docs, are you able to change it to something like `C(always) will always update the password`.
Missing `disk_format=dict(default='COW', choices='COW, 'RAW'),` This makes me think that changing the disk_format may not have been tested...
If we're going to change every line here, let's also indent it right ``` argument_spec.update( dict( key_name=dict(aliases=['keypair']), ... ```
a loader doesn't make sense here cause you ALWAYS need to import them, container list == directory listing.
You are missing `skipped` not sure if that is covered under the common return values though
I would use more specific names as part of the module (e.g. org, organization or org_name) but keep an alias for name specific to what the module is managing.
This module is really a replacement for `urllib.openurl()` which should never be used because it suffers from security limitation. requests has similar security features as this module_util but is an external dependency and therefore would be an additional requirement on the remote machine.
I think you are trying to find a empty dict inside dict with max_depth=3 . better approach would be write a recursive function than to just write nested if/else loops
Is this form of username (name@vsphere.local) required? If there are requirements for the format of the username, it might be helpful to leave one example where a sample value is spelled out.
Just noting the second bare except
Check from line 177-181 is taken care of in cliconf run_command api. I think these lines can be replaced with `item['output'] = 'text'`
@HD650 I think it shouldn't be optional.
`update` is not ansible compliant A task defines a state, so `present` should already update the user according to the params given if needed (and return changed in this case). Please change the logic accordingly or provide some information why `update` is needed.
I explicitly reached out to @abadger for confirmation earlier: ``` sivel [4:15 PM] @abadger1999 when shelling out via Popen, should we be using bytes? I'm being lazy and just asking, instead of investigating :slightly_smiling_face: abadger1999 [4:15 PM] Yes subprocess.Popen() uses bytes. sivel [4:16 PM] twas what I thought abadger1999 [4:16 PM] bytes in bytes out. python will try to translate text in into bytes but on Python2 especially, it can get it wrong. ```
``` aci.construct_url( root_class=dict( aci_class='fvTenant', aci_rn='tn-{}'.format(tenant), filter_target='(fvTenant.name, "{}")'.format(tenant), module_object=tenant, ), subclass_1=dict( aci_class='fvBD', aci_rn='BD-{}'.format(bd), filter_target='(fvBD.name, "{}")'.format(bd), module_object=bd, ), subclass_2=dict( aci_class='dhcpLbl', aci_rn='dhcplbl-{}'.format(dhcp_label), filter_target='(dhcpLbl.name, "{}")'.format(dhcp_label), module_object=dhcp_label, ), ) ```
Correct spelling of response will reduce confusion elsewhere
i would actually add the exception message to_native(e) instead, which was my original intention
```suggestion - ZFS intent log device or devices when mirrored. ```
To ensure pyObjC lib is available even if the user has a homebrewed python version maybe add something like this: ```sys.path.insert(0, '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjc')```
Example should reflect the basic attribute (`portgroup`) instead of the alias
Instead of checking for json support and adding `network_os_json_support ` key to indicate json support please add `output` key which is a list of support output formats to be in sync with other cliconf plugins (ios, eos, vyos)
You can simply write - ```python cmd = [self.nmcli_bin, 'con', 'add', 'type', 'ip-tunnel', 'mode', 'ipip', 'con-name'] ```
redundant (+ all below)
missing default in several `required: false` fields
We really don't need a class for this. Connect to s3 in ma, and then have get_bucket_list as a top-level method.
Please add `type="str"`
default=None is not required
``` [dag@moria ansible.git]$ grep -r 'module.warn(' lib/ansible/modules/ lib/ansible/modules/system/systemd.py: module.warn('The service (%s) is actually an init script but the system is managed by systemd' % unit) ```
3 parameters here, only 2 supported.
Required when I(resource_group) not defined
this was correct before IMHO
not used by the caller. The error processing is weak. What if we are getting something different than done? We'll to validate how much is reported in 'error', and whether we need to support async and sync operations. (I confirmed there are sync operations, we are waiting for the command to complete)
Please restore, or the module will fail to work in v2.7+
Yeah, this is a quick fix that I understand will work. I'm not certain whether changing retries to create a new action plugin on every iteration will have unwanted (or just buggy) side-effects. I'd merge this and cherry-pick to 2.2. Then if we do decide that retries can be changed, we can make that change in devel only.
I would interpret it that way too. That's something we should test in an integration test, though ;)
I would add 'fstab' option to let user specify a specific fstab file, using the system default otherwise
This isn't ever going to be paginated. [docs](http://boto3.readthedocs.io/en/latest/reference/services/cloudfront.html#CloudFront.Client.create_cloud_front_origin_access_identity)
We recently found this breaks on iosxr, so we need to hold off on this backport until we fix this on devel
`module` isn't valid in this scope, you need to use the `cert_chain` parameter.
I think these need to be put back so the variables are always defined before creating an autoscaling group https://github.com/ansible/ansible/pull/27870/files#diff-da91568af8631cf0905f8dd43410a4d3L811
```suggestion parts = to_native(version.strip()).split(':', 1) ```
The various `CALLBACK_` prefixed class attributes are missing. Take a look at the other callbacks for an example. In particular, this is needed: ``` python CALLBACK_NEEDS_WHITELIST = True ```
The parens around `changed, instance_dict` are not needed.
It is now 2018....
Since you're using AnsibleAWSModule you can remove this line and client = boto3_conn(...) and replace it with `client = module.client('rds')`
There are various `aliases` listed here, sometimes just the upper case version. Not sure if they add much value.
So the Copyright line has a specific format: ```python # Copyright: (c) 2016-2017, Hewlett Packard Enterprise Development LP ``` Maybe also add a blank line before this one.
``` type: bool version_added: '2.10' ```
Can you add the exception path here, with `fail_json(msg=...., exception=traceback.format_ext())`
For integers please: use `type='int'` remove the `isdigit` check from `check_params`
Sounds like it's ```suggestion :type required_by: dict[str, list[str]] ```
Instead of all this, `client = module.client('route53')` will now get a properly configured Route53 client (or `module.resource('route53')` for the resource-style SDK if you need that).
```suggestion for b_path in b_colldirs: ```
Alternatively: use `sorted()`, i.e. ```suggestion elif current_condition['Field'] == condition['Field'] and sorted(current_condition['Values']) == sorted(condition['Values']): ```
This needs to be enforced in code via `required_together`, see other modules for examples.
(In fact, `run_command()` might already die when `ssh-keygen` returns a non-zero return code. I think there's a flag for `run_command()` to force it to not to do that.)
`required: False` is the default and so not required here
You're not doing anything with these values so instead of putting in all these if statements just change it to ``` for key in list(self.module_arg_spec.keys()) + ['tags']: setattr(self, key, kwargs[key]) ``` You would need to make sure you set `self.key = None` in the `__init__` constructor above but this is the common way Azure modules are done.
.message doesn't exist at all when running Python 3. The exception handling guidelines have also added BotoCoreError to exceptions that should be caught (which do not have a .response attribute). https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-1
End with period
Yes, never mind.
The default value is None, so you can leave this out. Adds no value.
1) It does make almost no sense to support this feature of Git only partially. 2) `GIT_DIR` env var does not affect fetch, since Git would already parse `gitdir: ...` from `.git` file to figure out where the repo is located. 3) Also, the very first snippet (and the issue description) in #30034 showcases `clone` happening there. Which happens because of `not os.path.exists(gitconfig)`, not because of env var.
@saichint I wonder why this check is even needed. `mutually_exclusive` can be just passed to AnsibleModule. ``` mutually_exclusive = [('suppress_arp', 'suppress_arp_disable'), ('assoc_vrf', 'multicast_group', 'suppress_arp', ...)] ```
Wouldn't it be better to adjust the name of the module to `hosts` ? It seems odd to effectively hardcode the filepath in the module name, while at the same time allowing to adjust the file path. This module might also be extended to add support for managing the Windows `hosts` file, Furthermore both Puppet and Salt call their analogue type/modules also `hosts`. Edit: I see this module used to be named `hosts` and was renamed after @abadger his feedback. However I wonder if Windows support and the more common naming in the larger ecosystem was considered at the time.
Should also have trailing dot :-/
Creating OData ids using concatenation is a no-go, so this needs to be reworked.
Please remove this line.
Actually, can you change it to: ```python achitecture=otypes.Architecture( self.param('cpu_arch') ) if self.param('cpu_arch') else None, ``` So if `cpu_arch` parameter isn't passed we don't try to sent empty `architecture` parameter.
use post_validate, since templating leaves out other processing and checks.
You are right. the following test case covers your code. > name: test HTTP HEAD request for file in check mode
inventory.cache has 'gone away', currently cache is disabled
I think this should be behind a conditional so that it only runs if `force_init` is true, since the TF docs state: > Though subsequent runs may give errors, this command will never delete your existing configuration or state. > -- https://www.terraform.io/docs/commands/init.html#usage So while I think it is safe to run, it may cause the module to error out when the user doesn't care to make sure plugins are `init`ed.
Please add spaces around the equal sign.
It's actually missing `--ignore-certs` CLI arg that implies `validate_certs=True` according to the code I saw...
Same here: `default: 'yes'`
Being a module_util, this will need a `try/except ImportError` block in case `yaml` isn't available.
This should be `false`
Probably this error message can be more informative by saying missing required argument : key for map type of column
I think, it would look better readable if you moved `for ...` part to separate line.
This is a forgotten, unclosed and unnecessary file descriptor. We need to wipe this line.
instead of hardcoding the command, use module.get_bin_path
dupe are not standard, when you want to do load balancing with DNS you should use SRV records, or have a load balancer
Yes, we can write a info module in separate PR.
I expected that much.
It is added in some other cases (but not all).
you can move the 'base' out of the if, its just a duplicate line
This should be string. ```yaml version_added: "2.3" ```
As per PEP257 you should have a sentence here, hence it should end with a period: ```suggestion """Test that lenient_lowercase() proper results.""" ``` Also, let's rephrase it to contain useful info.
I suggested yesterday something more convenient and readable: ```python self.url = '{protocol}://{host}/api/v0/{path}'.format(path=self.path.lstrip('/'), **self.params) ```
the amount of time in seconds
Thank you very much for your review of this! Will fix.
Would this not work?: ```python @staticmethod def _replace_escape(match): # Convert to integer using base8 and then convert to character return chr(int(match.group()[1:], 8)) def _replace_octal_escapes(self, value): return self.MTAB_FIELD_OCTAL_ESCAPE_RE.sub(_replace_escape, value) ```
```suggestion ssl_certfile=dict(type='path'), ```
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` required_together ```
You might save `dest` and `b_dest` as vars, as here you'll want to use `dest` as "native". Anywhere it's going back out through `fail/exit_json` we want native. This applies to the next several changes too.
your rigth ! when I developped this module, there was no `uid` in Grafana, so i've removed the `uid` same as was doing for the `id` field before when adding the Grafana 5 compatibility.
that was just a diff i spotted and was speculating as the issue (was wrong, it was prompt)
`min_version` also defaults to `0.12.0`
I'm not a huge fan of this, we should be able to build the result set from module.params and the response.
ok, just something for consideration, I trust your/the community's judgement on it
This isn't used anywhere
so currently we have many `is None` comparisons, should this inherit from NoneType? ``` from types import NoneType class Undefined(NoneType): ``` ignore, that does not work
i would use HASHIVAULT or some other way to avoid confusing with other 'vaults'
If no collection paths are found, this will output an empty `{}` before the help and error message. This should be after the `raise AnsibleOptionsError` below. ``` > ANSIBLE_COLLECTIONS_PATH='' ansible-galaxy collection list --format json {} usage: ansible-galaxy [-h] [--version] [-v] TYPE ... Perform various Role and Collection related operations. positional arguments: TYPE collection Manage an Ansible Galaxy collection. role Manage an Ansible Galaxy role. optional arguments: --version show program's version number, config file location, configured module search path, module location, executable location and exit -h, --help show this help message and exit -v, --verbose verbose mode (-vvv for more, -vvvv to enable connection debugging) ERROR! - None of the provided paths were usable. Please specify a valid path with --collections-path ```
Do you really need to write it character by character. Seems to be quite inefficient when you could write in chunks. Also use `to_bytes(c, errors='surrogate_or_strict')` instead of `.encode()`
unicode won't always work (Python 2/3 split) so please use the to_text from ansible's utils instead.
this should just be `db_instances=results` - otherwise the instance data gets resnakified and tag case won't be preserved.
This is not needed for parameters that are not required. Guideline dictates to leave it out.
I mentioned an idea below (well, more like restated your own) of introducing a prefix for base64-encoded data, so user can easily mark those as such. So maybe that'd sort this part out too.
Again, just leaving a note that this should call fail_json.
I realized this would not be idempotent and because this seems to be an issue in all modules, we should handle the "does the labels need an update" in module_utils.
This is a nice addition. I'd expand it by putting a note in line 25 above pointing people to the examples: ``` requirements: - whitelisting in configuration - see examples section below for details ```
Realised I've explained poorly: ``` if ou is None: result['changed'] = False else: result['changed'] = True if not module.check_mode: client.delete_ou(ou['Id']) result['state'] = 'absent' ```
```suggestion msg_format="Error scaling {0} - %s".format(service.name)) ```
deepcopy only if required, move it inside the conditional.
This is never used except to return at the end. Would it make more sense to make this a constant, since it's never modified.
Here also self.host is not defined.
Since the previous log entry is at the same verbosity, repeating the platform and version a second time isn't needed. I'd just add the uri to the existing log entry: ```python display.info('Loaded existing %s/%s instance from: %s' % (self.platform, self.version, self._uri), ``` Since the instance ID is in the uri, no need to show it twice.
```suggestion - Required if I(chart_repo_username) is specified ```
we need to add a bunch of new callback events, including this one
Interesting approach. I was thinking about catching a 404 on the `schedule_report`.
Interestingly, I don't think it's done in the code above. Instead, it rather franticly tries to do a lot of checks and remove the file. It actually also tries to remove the file if it doesn't exist (https://github.com/ansible/ansible/pull/35278/files#diff-914391d9e58eafc28fbb8234b9e00e17R335) ... I think that'll crash the module.
Also not correct English, missing an 'a' in there.
This condition is not necessary as `aggregate_spec` will never be an empty dictionary.
Does it really require sudo? Or just root? (for instance ssh'ing in as root or using a different program to escalate privileges)
I believe this is equivalent to `api_params = snake_dict_to_camel_dict(module.params)` - `pc` and `set_api_params` should not be required.
You have 2 cases, either the HTTP request fails (connection refused, host unreachable, ...) or the HTTP request worked. In the second case, the status could be 200, or something else. Normally fetch_url handle 3XX errors too. In this second case, resp will be returned and there's no exception.
should be `b_path = os.path.expanduser(os.path.expandvars(path))`
For consistency reasons, why not have the `try:` inside the `if ...:` block? (Or just have one global `try` for all operations ;-) )
What if some apps in the list `name` start with `https://` and some don't, with the `use_remote=False` case those that don't start with `https://` to fail installation? If so, there should be some book keeping done here to handle that.
If it's not required, you can leave out `required: false`.
```suggestion 'Unable to connect to socket %s. See the socket path issue category in ' ```
Can it be simpler? E.g. without nic_device/device_type ```python for device in vm.config.hardware.device: if device.macAddress == mac: return device ```
I like the approach you stated. I was going to suggest that it could be possible to get the partitions list from boto3 by using boto3's `session.get_available_partitions()` for the `if role.startswith` if you wanted to keep it simple.
Thanks much -- having the SDK as a separate library is great.
Either way, the list comprehension seems unnecessary
I prefer `if not group_members`.
i just realized this was already pointed out, but I would still like a response to it
This can just be `if t_opt:` since an empty list is false.
Line is too long.
```- hosts: - mailer - local1, [local2, localhost] ``` and then again, this is also legal, just does not do what people would expect
A paginator exists for list_vaults - you should use it: http://boto3.readthedocs.io/en/latest/reference/services/glacier.html#Glacier.Paginator.ListVaults https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#api-throttling-and-pagination
My only minor problem is that now we show both a warning and an error that essentially say the same thing. ``` [WARNING]: Collection at '/Users/sdoran/.ansible/collections/ansible_collections/openstack/cloud' does not have a MANIFEST.json file, cannot detect version. ERROR! Collection openstack.cloud does not appear to have the MANIFEST.json. A MANIFEST.json is expected if the collection has been built and installed via ansible-galaxy. ``` Since these are coming from two different places, there isn't currently a clear way to suppress the warning because we may later raise an error. That's my only minor issue with this change.
Should this say something like: Only supported on PanOS 6.1+ devices
Unless there's a reason, I'd put all these toplevel variable definitions right after the imports. They're also constants so they probably should be uppercase but I won't block on that.
You have wrong indentation here.
```suggestion # Copyright: (c) 2019, Francois Lallart (@fraff) ```
Please state that `I(changed) was added in Ansible 2.5.`
Default value not specified in argspec.
If the logic of generation object_url is common across VMware modules it can be moved either in VMware modules utils or within VMware httpapi plugin as a function (eg: get_info()) depending on how generic the functionality is across VMware supported products.
```suggestion - list of adirectory group strings. ```
```suggestion - Web (HTTP) to enable or disable. ```
```suggestion shutil.copyfile(path, first.config.path) ```
No spaces. s/new tag name/new_cluster_name
Remove these single-quotes.
The `short_description` must not have a trailing dot. Keep the index clean.
these would belong in the shared code in module_utils, not a show stopper at this point but consider moving them there as we already have 'decamelize' function also
Same like the above. Check `if existing_source_type and existing_source:` before hitting nested conditions.
I think this should be `boto3 >= 1.4.4`.
No need to import boto3, and if you use AnsibleAWSModule, no need to import or test HAS_BOTO3.
I think it should be enough just to add `default: True` to the docs, similarly as we have for example in ovirt_vm module: https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/ovirt/ovirt_vm.py#L42
Spelling error: directory -> directory. Also should mention that the directory will be created if it doesn't exist (but the path leading up to it won't be created).
`Provide functions for IP address or port range validating` https://github.com/ansible/ansible/pull/17731 may partly help with this.
In the notes section, you can point to the icx platform guide https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/network/user_guide/platform_icx.rst Refer: https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/network/junos/junos_interfaces.py#L107 Applicable for other icx modules as well.
We tend to sort the imports by name, but also by module.
This will fail on python3 for a similar reason as the conditional check noted above. filter returns a generator. The generator can't be indexed. Use a list comprehension instead: ``` python block = [b for b in blocks if b.base_ip == base_ip] ```
```suggestion def run_lbu(*args): lbu_path = module.get_bin_path('lbu', required=True) ```
This changes the return message of this function. It's a bit more accurate, but may be worth noting in a changelog in case folks are asserting on msg.
required: False, and default: null can be left out. These are the default anyway, and it's easier to read when only the specific stuff is in the overview.
the `if` isn't needed here
Shippable is failing with "undefined variable `display`" on this line.
I'd probably separate all of the states into their own methods. And then in this method, you'd keep only an action router. It could look like this: ```python action_map = { 'present': self.make_started, 'started': self.make_started, 'stopped': self.make_stopped, 'absent': self.make_stopped, } try: process_action = action_map[self.state] except KeyError: return { 'changed': False, 'fail': True, 'msg': 'Unexpected logic error happened, ' 'please contact maintainers ASAP!', } return process_action() ```
This is the key change to make - the other fixes can likely be removed
You may want to import to_text() from ansible.module_utils._text and use that instead of str() to be sure of python3 compatibility. (But having trouble testing that since boto3 isn't returning the created time for me...)
this will fail if there is no ':', it should probably check and emit a warning.
If you're just raising, you can skip the try/except since it's handled in the caller.
This condition can come early ``` if username is not None and password is not None: self.auth = (self.username, self.password) if self.otp is not None: self.headers = {"X-GitHub-OTP": self.otp} ```
If this is the path to the `netplan` file that will be created, I think the idiomatic parameter name to use would be `path`.
`_text.py` has a `to_bytes`, `to_text` and `to_native` methods which should be used instead of `encode` and `decode`. https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/_text.py `to_bytes` will encode the string as a bytes string `to_text` will encode the string as a unicode string `to_native` will encode the string as a text string, this calls to_bytes for Python 2 and to_text for Python 3
Maybe output the bad value here as well, to help the user find out which one was wrong.
Instead of a dict comprehension, which our CI has flagged as invalid, please use a `dict()` constructor with a generator expression: ``` dict((k, v) for k, v in thing.items()) ```
I would prefer `format` here.
If the TargetHealthDescriptions are an empty list this will fail. Maybe check if it exists and if not return an empty dict? Traceback: ``` The full traceback is: Traceback (most recent call last): File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_mqh88b9h/ansible_module_elb_target.py", line 245, in <module> main() File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_mqh88b9h/ansible_module_elb_target.py", line 242, in main deregister_target(connection, module) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_mqh88b9h/ansible_module_elb_target.py", line 205, in deregister_target target_descriptions = describe_targets(connection, module, target_group_arn, []) File "/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_mqh88b9h/ansible_module_elb_target.py", line 125, in describe_targets return connection.describe_target_health(TargetGroupArn=tg_arn, Targets=target)['TargetHealthDescriptions'][0] IndexError: list index out of range fatal: [localhost]: FAILED! => { "changed": false, "failed": true, "module_stderr": "Traceback (most recent call last):\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_mqh88b9h/ansible_module_elb_target.py\", line 245, in <module>\n main()\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_mqh88b9h/ansible_module_elb_target.py\", line 242, in main\n deregister_target(connection, module)\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_mqh88b9h/ansible_module_elb_target.py\", line 205, in deregister_target\n target_descriptions = describe_targets(connection, module, target_group_arn, [])\n File \"/var/folders/by/k8_fbl593dlctgqmwq5wzl2c0000gn/T/ansible_mqh88b9h/ansible_module_elb_target.py\", line 125, in describe_targets\n return connection.describe_target_health(TargetGroupArn=tg_arn, Targets=target)['TargetHealthDescriptions'][0]\nIndexError: list index out of range\n", "module_stdout": "", "msg": "MODULE FAILURE", "rc": 0 } PLAY RECAP ************************************************************************************************************* localhost : ok=0 changed=0 unreachable=0 failed=1 ```
We tend to use the first line in the description to explain what the option is for. Granted "File type." was not really helpful, but a short sentence would be nice. Rationale: In the future we want to highlight the first line from the description in the module docs.
You can delete this empty line.
Again, bios attributes are vendor-specific. This will only work on certain systems.
Dot at the end.
These checks are handled by AnsibleAWSModule.
```suggestion - The name of the object. Will be used to identify the entry. ```
You should be able to use `self.vmware_test_platform` here.
This doesn't seem right... It's ignoring the push and pull mode parameter altogether so I think it will break that functionality. IIRC, ternary also isn't available in python 2.6... just write it out as an if-then-else, it will be easier to understand as well.
could you please isolate the lines from 130 to 146 in a new function.
I could also add a noop `ssl_version` parameter to python_hpilo for backwards compatibility. Though as you're already writing 4.0+ specific code to handle certificate verification, I'm wondering if that would actually even be useful for you.
This change appears to be responsible for the CI failure.
Maybe make the first LUKS a link to https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup: ```suggestion - "Module manages L(LUKS,https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup) on given device. Supports creating, destroying, ```
In 2.5 all the top level connection arguments are deprecated and are added as sub-options of `provider` option. You can refer [here](https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/ios.py#L45) for more details. Similar to below spec ``` ironware_provider_spec = { 'host': dict(), 'port': dict(type='int'), 'username': dict(fallback=(env_fallback, ['ANSIBLE_NET_USERNAME'])), 'password': dict(fallback=(env_fallback, ['ANSIBLE_NET_PASSWORD']), no_log=True), 'ssh_keyfile': dict(fallback=(env_fallback, ['ANSIBLE_NET_SSH_KEYFILE']), type='path'), 'authorize': dict(fallback=(env_fallback, ['ANSIBLE_NET_AUTHORIZE']), type='bool'), 'auth_pass': dict(fallback=(env_fallback, ['ANSIBLE_NET_AUTH_PASS']), no_log=True), 'timeout': dict(type='int') } ironware_argument_spec = { 'provider': dict(type='dict', options=ios_provider_spec), } ```
P.S. In Python, we call installable bundles "distributions", we call `.py` files "modules" and we call folders, which contain `__init__.py` and other `.py` files "packages". Let's not confuse the term.
I think that is unnecessary. If you want a file just jinja it with lookup('file', 'path/to/file'). Providing more examples is preferred over a possibly confusing second parameter IMO. That's how i implemented s3_bucket
If there are no BlockDeviceMappings should an empty list be returned? If so, could get rid of this line and keep the following (though you'll need to change `for bdm in launch_config.get('BlockDeviceMappings'):` to `for bdm in launch_config.get('BlockDeviceMappings', []):` maybe.
The 0.001 sleep doesn't seem to to be sufficient for recv_ready() and after couple of runs results in an deadlock. Looking at performance improvement with this check it seems it not that significant at scale unless I am missing something. Considering 2sec/per command (optimistic estimation) for 1000 command will take around ~33.33 mins to complete playbook run. With this check added considering the best improvement estimate will be 1.95 sec/per command that is ~32.5 mins. The sleep in recv() doesn't result in deadlock, even if the `persistent_command_timeout` signal handler is missed it is bailed out from while loop by `socket.timeout` execption handling.
This needs to be a failure, the `OrderedDict` object is used. Maybe just do a straight import with the try / except ``` python try: from collections import OrderedDict except ImportError: from ordereddict import OrderedDict ```
resourcetypename was added in 4.11 to the API, I would suggest to stick with this mapping for a bit longer to support cloudstack versions < 4.11
```suggestion - Uses any YAML file which ends with onesixtyone.yml or onesixtyone.yaml as a configuration file. ```
Should be a conditional import in case requests isn't installed on the controller
If the whole module was added starting from v2.4, you do not have to add that to every option. The options only required a specific `version_added` when the options have been added in a newer release.
```suggestion - Generates a new guest name, and paths for new storage - default true. ```
And similarly `match-driver` is appropriate because this is used for matching against a specific driver.
You don't need to specify `required: false` as that is the default.
No cloud modules should return `ansible_facts`. All cloud `_facts` modules should be `_info` modules.
Just discovered, don't need the intermediate list here, either. sorted takes an iterable so `new_list = sorted(set((5,4,3,2,1)))` is perfectly valid.
I regularly check it anyways and you need one from the core team, you can ping people on IRC in the #ansible-devel channel. I like neither _out nor dummy, but `dummy` seems to be the one that the ansible project prefers...
```suggestion - Whether to add C(present) or remove C(absent) the channel. ```
fail if `root` is used: show seams not to take into account the --root parameter, so we are "showing" the wrong unit. ``` max@mde-oxalide % sudo systemctl --root /var/lib/machines/arch-64-tmp/ show org.cups.cupsd.service | grep LoadState LoadState=loaded max@mde-oxalide % sudo find /var/lib/machines/arch-64-tmp/ -name org.cups.cupsd.service max@mde-oxalide % ```
An example of using the `mocker` fixture. ```suggestion def mock_NamedTemporaryFile(mocker, **args): mock_ntf = mocker.MagicMock() mock_ntf.write = mocker.MagicMock() mock_ntf.close = mocker.MagicMock() ```
`except (crypto.Error, ValueError) as e: `
@rajput1991 Thanks for this PR. Could you please file an issue which describes your problem with appropriate playbooks and console log ? The given description does not makes sense right now.
Since there's no static simulator option, it would be convenient to keep the static (bare metal) auto-detection support. If the config file is present, default to static bare metal. If it's not, default to dynamic via govcsim. The env var would only be needed to force dynamic in the presence of the static config file, or to change the default dynamic provisioning mode.
HTTPS is default, so not required.
Does this need to be a local function? Several of the others are, because they are using context from `_process_pending_results`. I don't think this one needs to though, it would just require passing in `iterator` also. Not a blocker, just a potential improvement.
Do we need the `>` here? If not, remove from several other sample sections below as well.
metadata_version should safely be updatable to 1.1 for this new module :)
It just looks odd to me. I'd drop `and not self.image` part. In general, it's good to have your code structured with separate layers. When the user input enters your app flow, in the beginning, you should do its initial validation and fail immediately if needed. As it gets bypassed deeper into the next layers you can be sure that the input is already sanitized and 100% valid so that you don't need to do extra checks in the app internals, focusing on the actual logic.
@bcoca just wondering how to get your "cleaner" example working when files exist in vars directory. For me at least neither option you mentioned seemed to find the files in the vars directory. I had to switch to the below option to get it to work. I don't like the option I am currently using as I believe a) it does not not show a failure if the syntax of the included vars file has errors b) it doesn't show which file was loaded, in the other options that you mention it does show skipped when the file doesn't exist I much prefer your cleaner options but it doesn't seem to pass the "when" check when the files exist in the vars directory. ``` - name: "load os specific vars" include_vars: "{{ item }}" failed_when: false loop: - "{{ ansible_os_family | lower }}.yml" - "{{ ansible_distribution | lower }}.yml" - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml" - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version.replace('.', '-') | lower }}.yml" ```
Please remove this line
```suggestion ''' Wrapper function to update var sources dict and call combine_vars() See notes in VarsWithSources' docstring for caveats and limitations of the source tracking ''' ```
Would be good to have a registry example
Maybe I'm missing something, but it looks to me like setting egress_default_rules to absent will remove _all_ rules from the group that was just created (the default set of rules could be different things on different clouds iirc) Perhaps we should just make this a bool called "delete_default_rules" or something - and mention in the doc string that it only has any effect when you are creating a security group.
this actually redirects to https://www.ansible.com/products/tower, but I don't know if that's a very stable URL either.
To match the previous behavior, we should have `connection='smart'` instead of `local`
It's a `@staticmethod`/pure function
This will fail if terraform is installed.
one issue, '*' can be a legal characther at the start/end of a file name
You can use following, `get_id_by_name` will raise error for you in case not found: ```suggestion export_sd_id = get_id_by_name(export_sds_service, provider_name) return export_sds_service.service(export_sd_id) ```
You need to check here also if `lun is not None` before checking it has `id`.
Needs a period at end of the description
Please add a `- name: ` and left align the examples ``` - name: Add tower credentials tower_credential: name: Team Name ```
instead of hardcoding the groups, i suggest adding the 'compose' functionality and allow users to determine how they create/name groups based on jinja2 expressions.
A 's' is missing on 'array'
Should this be `"lines: hostname {{ inventory_hostname }}" `
Since we don't actually need those present and functional to build docs, could just set HAS_PYWINRM/HAS_XMLTODICT and check them in CP init instead of raising immediately (though I suspect we may run into similar dependency issues in other plugins)
Change this to: ```á»³aml default: 'no' ```
`logger` seems imported but not used.
Is there precedent for this alias? -- generally ansible like snake_case, and I'm not sure there's much camelCase, especially for module arguments.
Should the default be https, if so update docs
The listeners options all need to be CamelCase for the example to work.
`is` tests identity in python so if statement always produces a change. We need to use `!=` here to compare equality instead of identity.
I would just say "The path" (and remove the dangling "to").
should be 'bool'
These should be replaced along the lines of your existing imports earlier in the file (you'll need to add `get_aws_connection_info`, `ec2_argument_spec`, `camel_dict_to_snake_dict` and any others to the explicit import list)
This isn't necessary, since it isn't used in this module
Don't add this, we are deprecating this for modules that predate v2.4.
You should also add another sentence saying this is required if `C(type=attribute)`
```suggestion def create(module, base_url, headers): ```
If parameter is required, there is no default.
This have to match `scaleway_lb.py` and be 2.9
Creating dirs recursively has a number of security problems and we generally avoid this.
Can you use `if 'ipaddresses' in host` instead? We should use this where ever you have `has_key()`
Not needed with AnsibleAWSModule
I understand, but one of the reasons for returning information, is to be able to use it in future tasks. If you return 64MB, it is impossible to manipulate that data (say you want only half). That's why it is better to return absolute values (in bytes) so you can decide whether values ought to be MB or MiB, and have full control over what you sent back.
Please remove the uppwer case C. We use vcenter_hostname, vcenter_username and vcenter_password in the other modules.
There are some options to `AnsibleModule` which you may be able to use to validate options passed in. Look at existing modules for examples: ``` required_together required_one_of require_if ```
please keep quoting of version_added.
This is definitely the wrong place for this to happen. This function should not concern itself with YAML serialization. This is basically just Python conversion to text type, not special case modifications to non python types.
Please don't make lines longer! There was nothing really wrong with this line before
please reuse the code, it's very same
@cmrd-senya I've updated your branch with my implementation for now.
yep, for all 'plugin based options'
This should be a list: ```yaml author: - Noah Sparks (@nwsparks) ```
above 3 lines can be written as: ``` old_notes = old_profile.get('set_data', {}).get('notes')
use `get_vm` from PyVmomi helper base class.
got it. LGTM Thanks
There is a similar pattern in `vmware_guest` ( https://github.com/ansible/ansible/blob/622a493ae03bd5e5cf517d336fc426e9d12208c7/lib/ansible/modules/cloud/vmware/vmware_guest.py#L788 ). From my perspective, the `copy()` call just reproduces what was silently done before by Python2. So I don't think it introduces a performance hit. This being said, if Python3 behaves differently, it's to improve the performance. So we should indeed probably pay attention. I opened an issue to track that: https://github.com/ansible/ansible/issues/60399
@kassiansun python-3.x's re.sub has not changed. The basic rules of using it are even the same in python-2.x but python-2.x sometimes allows you to cheat (when the data you are operating on is ascii-only). You also are incorrect about the type of ```line``` in ```for line in f```. That depends on what ```f``` returns on iteration. In this case, ```f``` is a file which is opened in the default read mode. On Python-2.x, iterating f returns byte strings. On python3, it returns text strings. If desired, you can force it to return byte strings on both python2 and python3 by opening the file in binary mode (```'rb'```) but there is no way to force it to return text strings on both python2 and python3.
Please add `type='str'`
Remove this line. The default behaviour is that parameters are not required, unless you enable this.
quote, this should be a string, not a float
This could go into the `PodmanContainer` initialize or `execute` method
type='str' is the default if not otherwise specified, so you can omit it if you want
this one is whitelisted by default
~Since the connection is initiated even before task variable is read this option might not work for per task basis~
This will only initiate restart, which means that BMC will be in inconsistent state after this function is called, because there is no waiting for the operation to finish implemented here. And if we would like to keep ansible playbooks as declarative as possible, we should probably avoid such situations. Otherwise we are simply rewriting our bash scripts into yaml.
catchalls are not a good approach, also you should raise specific exceptions from plugin, not what you randomly got (either ansibleerror or ansibleparsererror)
we should definitely have something for this pattern, but not a blocker to merge.
The final command should probably return its stdout, stderr and rc back to the playbook.
I just dag deeper into the code and I don't understand why we don't support check mode in all situations where possible.
```suggestion - When creating a network interface, if you specify I(private_ip_allocation_method=Static), you must provide a value for I(private_ip_address). ```
User and password options would be good, if appropriate.
I am not able to create a new monitor - ``` fatal: [localhost]: FAILED! => { "changed": false, "invocation": { "module_args": { "apikey": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER", "check_type": null, "monitorid": null, "name": "myMonitor_002", "state": "present", "url": "http://www.my-domain.com" } }, "msg": "Could not perform action newMonitor" } ``
Use a name other than `file` so it doesn't conflict with the builtin.
The default is `None`, and in the docs no default will be shown. Especially since it is dangerous, I would show to the user explicitly that the default is `false`.
This looks a bit dirty. I would put only the `json.loads()` into the `try`/`exception` block and if the load was successful, I would test if if contains the `uuid`. The same applies to all places where you load JSON in this module.
I would prefer to reuse
`required=False` is default, no need to specify. Please use `required_if`: https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/ovirt/ovirt_auth.py#L198
Since this can interrupt the execution, plz move the check closer to the beginning of this method.
```suggestion - The module installs software using nimclient command, removes software using local commands, and updates all software to latest available version. ```
There are a *lot* of Ansible modules having exactly this line. (I guess @lolcube, like most people, just copied that from another module :) )
I think this if-else condition is to handle value of `size`. Can this be handled outside? This will reduce code duplication
~the options are not compatible, set `self.hostnamectl_cmd`, use that and appropriate options when populated, default to previous code when not~ nvmd, was only looking at the changes, reading the more general code, this is the systemd strategy and it always relies on hostnamectl being present, scratch what i mentioned before, just using hostnamectl in general should be fine
```suggestion # Most values convert cleanly to integers but if the field does ```
var-name bikeshed: ```suggestion action_group = _get_collection_metadata(collection_name).get('action_groups', {}) ```
You're checking for region where the connection is made so you can remove this.
You may use `search_by_name()' method: ``` search_by_name( self._connection.system_service().storage_domains_service(), self._module.params['storage_domain'] ) ``` https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/ovirt.py#L221
"flow-gen" listed twice
Intead of making a new function just replace the existing get_pgroupvolume, because the existing one looks broken, as it doesn't work if volumes are removed from a PG, or if hosts are used as the PG source, the existing function doesn't work at all. ```suggestion def get_pgroupvolume(module, array): try: snapvolname = module.params['name'] + "." + module.params['suffix'] + "." + module.params['restore'] for snapvol in array.list_volumes(snap='true',names=snapvolname): if snapvol['name'] == snapvolname: return snapvolname except: return None ```
missing required args in examples: type, network_zone
```suggestion return super(cls, new_cls).__new__(new_cls, *args, **kwargs) ```
shlex.split needs to use bytes on python2 (more specifically, on python-2.6. It's a bug that wasn't fixed until python-2.7). So you can use a conditional on six.PY3 to change this. In this (and indeed, in many cases), map is better done as a list comprehension. So: ``` python cmd_parts = [to_text(p) for p in cmd_parts] ```
To remain consistent with the `now()` function, this should be lowercased.
```suggestion 'before': '{0} does not exist\n'.format(user.name), ```
I think we've got double quotes in double quotes ```suggestion debug: msg="{{ 'the secret was:' ~ temp_secret | default('could not access secret') }}" ```
Having all these nearly identical wrappers around `send_request()` (and the only other bare use of `send_request()` also doing the same thing) makes me think perhaps you are using the wrong interface for `send_request()`. If it was instead `def send_request(self, method, url, *args, **kwargs)`, you could remove all these wrappers which appear to be almost entirely unused outside this plugin.
would be good to have an example for this as it is free form
I would rather see ValueError instead of general exception
@kaneda-fr so had a conversation about this with one of my internal vmware ppl and it seems to come from the fact that the image is attached to NAT, and so when the vapp gets spun up using that image, it gets NAT. We do this because we dont have an image per defined network. This may behave differently with routed networks, but we dont have routed networks. Some custom internal automation works around this by creating the vapp from the image, then editing the network on the vapp, then starting the vapp. Since I dont see any way to edit the network on the vapp after its created here, that means this likely wont work for us for now.
This takes a list but each entry is a dict. We should define the options in each dict. We can do this by adding ``` type: list suboptions: action: description: - The description of the action choices: - restart - reboot - run required: yes type: str delay: description: - The description of delay type: int required: yes ``` The values of `suboptions` is just like the normal module options at the root level, so you can set things like `description`, `type`, `choices`, `default`, `required`, `version_added` and so forth. Doing this allows people to see what they can specify for each action and what it actually means rather than trying to decipher the examples alone.
Need a space here for PEP8
Description for traffic manager
Okay, I just tested this and it looks like fd.close() does not cause an error. It's useless to have it there but not strictly necessary to remove it.
We usually use the logging facilities built into AnsibleModule instead of the stdlib's logging module. ``` module = AnsibleModule([...]) module.log() ```
I think a more elegant solution would be to add one more list element and `str.join()` will do the rest: ```suggestion b_outs.append(b'') self.editor.write_data(b'\n'.join(b_outs), context.CLIARGS['output_file'] or '-') ```
After this line, add: ``` if type(values) in ('bool', 'int', 'float', 'str'): # I may be missing some types here values = [values] if type(value_types) in ('bool', 'int', 'float', 'str'): values = [value_types] ``` With that we guarantee that whatever goes into the rest of the code is a list
If you're going to add docstrings, note that we use sphinx format for them: ``` python """ Filter files which contain the given expression :arg fsname: A filename to scan for lines matching a pattern :arg pattern: The pattern to look for inside of the file. :rtype: bool :returns: True if one of the lines in fsname matched the pattern. Otherwise, False. """
not a blocker, but I would rename `type` to `_type`, type is a reserved word in python
It's been quite a few months since I looked at this but I think this belongs in format_plugin_docs. The code should be organized roughly along the lines of the six stages of data processing: https://medium.com/@peerxp/the-6-stages-of-data-processing-cycle-3c2927c466ff Since this is taking raw data (a plugin_name and the list of action names) and creating a derived value from it, it should be done in the processing stage rather than the input stage.
I wouldn't say that I'm happy with that style but I understand your feelings and will merge this as is.
Please restore, or the module will fail to work in v2.7+
Create, update and delete an Azure Container Service (ACS) instance.
```console 04:24 ERROR: Found 1 pep8 issue(s) which need to be resolved: 04:24 ERROR: lib/ansible/plugins/callback/foreman.py:119:1: E302 expected 2 blank lines, found 1 (100%) ``` ```suggestion ```
Good catch @thomwiggers
Creating paths by concatenating them together is a no-go with Redfish. Paths should always come from the Redfish responses itself (`redfish/v1` being exception here).
```suggestion for line in data.split("\n"): ```
withot -> without
Yeah, as a non-native "clobbering" was a bit too complex for my taste. :-)
I can rework the [cleanup function](https://github.com/ansible/ansible/pull/56532/files#diff-2bbdfb98f5cef18b20f2bec519a4bfe3R109) I have in #56532 so you can use that if that is helpful.
This should be `'supported_by': 'community'`
```suggestion self.params[k] = 2 if v == 'dns' else 1 ```
please remove your email here.
add `version_added: "2.8"` here
This string is meant to show the version of Ansible when the module was added, it shouldn't change
Add a trailing dot.
```suggestion module.fail_json(msg="Multiple databases are not supported with only_tables=yes and state=dump") ```
```# Copyright: (c) 2018, VMware, Inc.```
issue a warning instead of a fail on the else: in case the user misspelled the package
My personal preference on this and the `self.no_log_values.update` is that we should make `list_no_log_values` and `list_deprecations` always return the correct type (which it looks like they may already), then you can just do: ``` self.no_log_values.update(list_no_log_values(spec, param)) self._deprecations.extend(list_deprecations(spec, param)) ``` This would remove 6 lines that are unnecessary.
Any reason you are using getattr instead of just accessing the method directly? getattr has no default, and unless a default is supplied explicitly, a getattr will raise an AttributeError if the method is missing.
Raw string needed (preface w/ `r`)
I might suggest use `conn.shell.has_trailing_slash` and `conn.shell.join_path` like the copy module for any path manipulations on `dest`.
also incorrectly indented, it applies to the whole option, not just the configuration entry
```suggestion display.vvv(u"No connection ot reset: %s" % to_text(stderr)) ``` ```suggestion display.vvv(u"No connection to reset: %s" % to_text(stderr)) ```
This should be an @staticmethod nad self removed.
I'd remove this comparison altogether, and after this just check if `_raw_params` is still empty.
This `else` is not needed, Ansible will verify that only present/absent are passed as the state.
`validate_config` call is missing
In what case should a path not be a string? I question the validity of just returning what was given, if it wasn't a string. I might instead expect this to raise a `TypeError` instead.
Nitpicking `Guest file %s does not exist`
Missing full stop
Even better, this whole thing can be rewritten as: ```suggestion return ( super(InventoryModule, self).verify_file(path) and path.endswith((self.NAME + ".yaml", self.NAME + ".yml")) ) ```
why not ? ``` display.vv((self.parser.get_version()) ``` config file below should also be ```display.v(...```
dot at end, please
You could remove the else since we won't get here regardless in the case of check mode.
paramlist needs to be instantiated before this line. Then after the loop len(terms) should be compared to the length of results. Also [line 172](https://github.com/ansible/ansible/pull/35569/files#diff-55e80dc4588cb031afcf2736c1338c47R172) should be removed or the 'return None' replaced with a continue
Have you considered using `@contextlib.contextmanager`? It would look cleaner.
this is a catchall, we normally frown on those. also note that for all of your `% e` they should be `% to_native(e)` to ensure proper character conversions
Since this defaults to 'present' if not provided, it shouldn't have `required: true`
@r1k0 Thanks for the PR! Can you import `to_list` and use that instead as it takes care of few other cases also? ``` from ansible.module_utils.network.common.utils import to_list data = data['TABLE_interface']['ROW_interface'] if isinstance(data, dict): data = to_list(data) for item in data: ```
Match the error message
I think it would make more sense to write this (and the later ones) as ```suggestion - Maps C(docker service create)'s C(IMAGE) parameter. ``` or ```suggestion - Corresponds to the C(IMAGE) parameter of C(docker service create). ``` ``` $ docker service create --help Usage: docker service create [OPTIONS] IMAGE [COMMAND] [ARG...] ```
Please add some spacing, i.e.: `msg: "PIDs of python: {{ pids_of_python.pids | join(',') }}"`
The value should be as list like in all cases above.
I think we should fix what modules are returning rather than adding more to this list.
We usually enclose options in the description with `C(openid-connect)` as the docs will automatically highlight them.
Oh, I had not connected those dots. I suppose that begs the question "What should the default be?". Hopefully sticking with what was defined in the `ini` file will be ok. I think that was effectively the default anyway since the script before would not run without an `ini` file. Thanks for the feedback.
No need to wrap this.
This would be a nice place to use tuple expansion `action, index = index_of_matching_route(....)`
Can you make this into a couple statements for easier readability? Something like: ``` invalid_entries = [x for x in statement['Principal']['AWS'] if not x.startswith('arn:aws:iam::)] if clean_invalid_entries and len(invalid_entries): for entry in invalid_entries: statement['Principal']['AWS'].remove(entry) ``` Or there's always: ``` original_size = len(statement['Principal']['AWS']) statement['Principal']['AWS'] = [x for x in statement['Principal']['AWS'] if x.startswith('arn:aws:iam::)] have_invalid_entries = (original_size == len(statement['Principal']['AWS'])) ```
rc is fine
I think he's suggesting a second error handler- currently this fall-through would be used for both "you tried to exec_module something that wasn't ansible.module_utils.basic" (for which the current message is fine), but also the case where the for loop completed without finding basic (in which case the error message will be incorrect and confusing). Basically just add an `else` clause to the end of the `for path in convert...` loop that raises a different ImportError that we couldn't find basic.
I wonder if this should be called `NETWORK_OS_INDENT`, or similar
3. seems to be not working as expected. It should be the 'same handler', the new one should override the old one since they share the same name, so its not first found, but 'only found' which should be the 'last one with the same name'. If the behaviour is as described above, it seems we are not doing the update correctly and this is what we should fix. We probably avoiding a re-import of handlers not realizing the 'signature' of the role is different, death by optimization ...
I know you didn't write the original module, but it would be good to switch this over to AnsibleAWSModule: ```suggestion module = AnsibleAWSModule(argument_spec=argument_spec, ``` Additionally: - `from ansible.module_utils.aws.core import AnsibleAWSModule` - Remove ec2_argument_spec (argument_spec only needs to include this module's extra options) - remove the "HAS_BOTO3" check below: it's handled automatically for you - Where the connections are initialized above (get_aws_connection_info, boto3_conn) can be simplified to: ``` self.ecr = module.client('ecr') self.sts = module.client('sts') ```
You need to raise this to 1.27.1 to match your commit message.
+1 to `end`
If we are using ESXi host as per condition on line number 157, then we should rename this as `{{ esxi_hostname }}`` and respectively other parameters.
Remember that these descriptions might be people's only interaction with a module - unit of data isn't very descriptive.
Okay, I've tested this and on python2, it needs to be a byte string. On python3 it needs to be a text string. ```str``` technically does that but can traceback on python2 if password contains non-ascii chars. to_native will do the right things here (at least, unless python3's crypt is changed to take a byte string. The python3 hashlib functions take byte strings so I would have thought this would take a byte string as well. Oh well, we'll cross that bridge if they change it). ``` python encrypted = crypt.crypt(to_native(password, errors='surrogate_or_strict'), saltstring) ```
```python if module.params["sync_networks"]: if needs_sync(nics_service): if not module.check_mode host_service.sync_all_networks() host_networks_module.changed = True ```
```suggestion - If your DNS servers are not yet installed or momentarily not available, you can set this option to I(true). ```
Convert this to the native type, not text. ```suggestion f = open(self.b_cron_file, 'rb') self.b_existing = to_native(f.read(), errors='surrogate_or_strict') ``` Ideally, this would be `bytes` and we would work with the data in bytes throughout the module. But there are many places using `self.lines` that need the native text type, so the least invasive change is to convert at the borders: read in the lines as bytes then immediately convert to native text type. Lastly, write the file out as bytes. Also, we like to prefix native strings with `n_` but that would result in similar ripple effect as using bytes, having to change the variable name throughout the module. I suppose we can omit the name change for now.
Can you add: ``` type: bool default: no ```
This one is `name` on the MIQ side.
Don't use `server_url` and `login_token` they will be deprecated on all gitlab modules in Ansible `2.10`. Instead use parameters from fragment `auth_basic` api and `from ansible.module_utils.api import basic_auth_argument_spec`
```suggestion - Can be the name of the virtual network. ```
Use `aliases` if you want to make these two synonymous.
typo 'exsist' -> exist
Please add dot at the end.
Should this be shared in the `run` method after `perform_reboot` is called? That way the same code is used for win_reboot and reboot.
The following indentation should pass pep8 (with the `==` starting under the `r` in `assert`): ``` assert constants.get_config(cfgparser, 'defaults', 'unknown', 'ANSIBLE_TEST_VAR', '~/local', value_type='path', expand_relative_paths=False) \ == os.path.join(user['home'], 'local') ```
I think `secrets` was only added in docker-py 2.3.0 (see docker/docker-py@d1038c422b2a069494476dd743cc06e11e8939e7).
Since this is in a vendored file, should we really be updating it like this? We have history of applying upstream patches to our vendored libs, but not modifying them to diverge.
We have been using sphinx format for docstrings. In sphinx format, this would be: ``` :arg terms: a list of lookups to run. e.g. ['parameter_name', 'parameter_name_too' ] :kwarg variables: ansible variables active at the time of the lookup :kwarg aws_secret_key: One part of AWS credentials :kwarg aws_access_key: The second part of AWS credentials :kwarg aws_security_token: Third part of the AWS credentials :kwarg region: AWS region in which to do the lookup :kwarg bypath: Set to True to do a lookup of variables under a path :kwarg recursive: Set to True to recurse into paths below the path (requires bypath=True) :returns: A list of parameter values or a list of dictionaries if bypath=True. ```
Please delete this line
The failing tests are due to the randomized order of the dict items on Python 3.5. Sorting them will fix that: ```suggestion @pytest.mark.parametrize('text, expected', sorted(TTY_IFY_DATA.items())) ```
`su_pass` is used in the getpass but `supass` without the underscore is used here. Probably needs to be `su_pass` in both places.
No need to quote strings here.
No it's part of python and should be available.
Here and below in other descriptions: use Use `C(valid_in)`, `C(keyUsage)`, `C(extendedKeyUsage)`, `C(subjectAltName)`.
The use of the '.' as a separator sounds a bit weird to me. It sounds like "name" is a domain and namespace is hostname. I suggest to add a new parameter `name_format`, with something like that by default: ```python name_format='{namespce}-{name}' ``` And use it here: ```python vm_name = name_format.format(namespace=vm.metadata.namespace, name=vm.metadata.name, uid=vm.metadata.uid) ```
An option to control `validate_certs` should be included and default to false
if it were not for the `-C` i would not say 'tempted' but actually request it
Generally for Ansible modules `state: present` will update the object to match what's in the task.
No need to change what you've done, you can drop this issue. The `ANSIBLE_METADATA` block you've got is consistent with the modules
you set choices, but this is actually not restricted in args spec
Make this two lines. The first line is always a summary of the parameter. Next options clarify its use, format, etc... ```suggestion - Authentication key provided by the dashboard. - Required if environment variable C(MERAKI_KEY) is not set. type: str ```
This should either have a note about the version of yum required to make this work (the version of yum in RHEL/CentOS6 does not have this functionality) or implement it in a way that makes use of `clean_requirements_on_remove` instead of the `autoremove` yum sub-command. If you do go the route of note about version requirements, I think it would be a good idea to have a check in the code that will do something like `module.fail_json(msg="YUM Version {} Required for autoremove".format(YUM_MIN_VERSION))` if an older version is found.
Again, can we name this `dest` better? Will help readability as the module grows.
```suggestion # Using gevent to parallelize reverse dns lookups and adding entries to inventory ```
Catch all exceptions should be avoided but it is not a "blocker"
This is never evaluated because you are already in the branch which matches `info['status'] == 200` only.
This doesn't look right. It's a bool, rather than a secret thing.
`this` has broken into two separate lines.
As stated below, this should become: ```python for store in host.datastore: _tmp = { 'name': store.summary.name, 'total': bytes_to_human(store.summary.capacity), 'free': bytes_to_human(store.summary.freeSpace), } facts['ansible_datastore'].append(_tmp) ```
break the loop in case we found the first match? ~~~diff if params['startip'] == ipr['startip'] and params['endip'] == ipr['endip']: self.ip_range = ipr + break ~~~
s/not exits!/does not exist./
As I indicated yesterday, here you could be doing: ```python built_path = build_path.format(org_id=org_id, net_id=net_id) ``` Rather than making a dict first, and then unfolding it for format(). For larger sets of variables you code is probably preferred.
I have one more suggestion, it would be good to replace ``` if vendor_name in ['VMware Virtual Platform', 'VMware7,1']: ``` with ``` if vendor_name.startwith('VMware'): ``` I am not sure about `VMware 7,1` uniqueness on other ESXi version. (I missed this in last commit)
the requirement of this identical to the modules arguments requirements (required=True), if a param if not always required, set `required: false`. The description has all information.
We generally use `absent` and `present` for `state`
instead of surrounding the method call, put the debug in the method itself and it won't be 'strategy plugin dependent'
Where are you using `HAS_LIB`? Generally after `argspec` you'd do something like ``` if not HAS_LIB: module.fail_json(msg="Missing requried pan-python module (check module docs)") ```
As discussed, @mamunozgonzalez will be fixing this as a part of a consolidated PR.
Since type is `str` how about `enable`, `disable`, `default`? Because there are PRs for e.g https://github.com/ansible/ansible/pull/57425/files where `bfd` type is bool which accepts `true/false`, and here `str` type also accepts bool value. I believe rather with `enable/disable`, bfd can be consistent across modules and maintainable in the long run than bool value as str.
yes, since users really want to control this globally, modules should not implement their own logging, think about no_log violations and remote target syslog controls.
Should this be `response` since that is what is returned? I don't see `result` used within this function.
Please make this easier to understand, like: 'Manage computers in Active Directory'
``` if hostsystem.runtime.connectionState != 'connected' or hostsystem.runtime.inMaintenanceMode: self.module.fail_json(msg='ESXi "%(esxi_hostname)s" is in invalid state or in maintenance mode.' % self.params) ``` Instead of ``` if hostsystem.runtime.connectionState == 'connected' and not hostsystem.runtime.inMaintenanceMode: pass else self.module.fail_json(msg='ESX host in invalid state.') ```
This function isn't used, and when you implement the same functionality in `eric_eccli_command` you probably shouldn't be doing it yourself anyway.
Yeah. That's a bit confusing as it's not clearwhat's `options` and what's `params`. If you check other modules you will see that the option names are decorated with `I()` (e.g. `I(state)`) and option values are decorated with `C()` (e.g. `C(present)`).
Good catch! This should also be changed to describe limits instead of reservations: ```suggestion - C(0) equals no limit. ```
This should probably be the last method in the class.
No need to put this in a try block, this is already done and handled in AzureRMCommon
Still concerned about the duplicate method (same code in `openssl_publickey` and `openssl_privatekey`).
This could be `elif`.
```suggestion short_description: retrieve info regarding domain objects of all kings ```
Default not set in argspec.
Same - please use `len`
No need to change this from what it was. All of the other unnecessary line breaks following this that can be undone too. There are a lot of them.
i'll wait for someone to name a host or group 'false' and cry when that ticket is opened
Again, this can be dangerous if any value can be `False`
Default value not specified in argspec.
Good to add another line saying `This value should always be greater than I(operation_timeout)` and that it requires pypsrp<=0.3.0.`
docs should reflect that 'absent' is only available in versions >=2.4
Setting changed is unnecessary since disks can't be updated.
Should this be something like `<synthetic package/module>`? I know that `eval()`/`python -c` does something like this.
Add same import error block for requests.
I clarified my position above, and this will spark a discussion. Don't worry, the best way to settle these cases once and for all is by doing them on the spot ;-) Let's hope we come to a consensus soon.
For facts modules, it usually makes sense to set `support_check_mode=True` as the facts module is `safe` to run in check mode or in other words, if not set to `True` this module will be skipped in check mode.
this is really 'prompting for a secret', we normally name these options `--ask-` and have a common method in base CLI class already for these. This also covers things like marking passwords as 'unsafe' to avoid templating errors on special characters.
get_exception is deprecated API (used for Python 2.4). Could you please use native Python syntax for exception handling `except Exception as e`
```suggestion - The URLs to retrieve the public I(blob), I(queue), or I(table) object from the secondary location. ```
Can you change this to just `description` and an alias of `portgroup_description` if you want.
Bump to 2.8.
Use the Ansible standard [exception handling guidelines for boto3](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/cloud/amazon/GUIDELINES.md#boto3-2)
ie this PR is fine, we can look at moving into Core at a later point
I see what you mean, maybe not having it defined (by default) keeps the same behaviour where touch will always update and the other states won't update. If a user explicitly defines, `now`, `same`, or `<timestamp>` then we can set accordingly.
I'm guessing because this doesn't use the existing vmware utils
Not catching non-200 responses.
`error` is not returned in either of them. The call to `fail_json` only returns `msg`.
```suggestion - Threshold for defining a lossy connection by total retransmitted packets. - A connection between client and Avi is considered lossy when more than this percentage of packets are retransmitted. ```
Oh! And because it's probably not obvious, the reason for the failure on Python 2 is that you start off with a byte string there and you tell it to re-encode it to a utf-8 encoded byte string. So Python2 takes the byte string, attempts to decode it to a text string (unconditionally, using the ascii encoding), and then will re-encode it to a byte string using utf-8 (the encoding that's specified in the code). The decoding step is what fails.
There is one downside to this approach: if a user passes a nonexistent file path, this module will error out with some variation of `400: invalid certificate`. In that case, we need to make sure the error message surfaces the information about what certs were invalid. A way to check this might be if the "cert" is less than 200 characters, we can be certain it's supposed to be a file path since the server certs have to be at least 1024 bit. Over that, it's a maybe, but we should print out the cert that's supposedly "invalid" so people can tell what's wrong.
I got the error msg `"value of multiplex must be one of: 0, 1, 2, got: 1"` The type `type='int'` is missing for multiplex.
hum, confused. I thought one of the advantages of moving to `EXAMPLES = r'''` was to avoid this
Is this correct? this would only be true when keystore_type is empty.
Same here. It should be: `value: "db1"`
You don't need to re-include some of these fixtures, as they are used in the `elb` fixture but never called in this test.
```suggestion - If the domain is already in the validation process but the I(verification_method) specified is different than the current I(verification_method), ```
I think these parameters are not related to this module.
Use `to_native()` rather than `.decode()` to ensure the correct native string type is used for Python 2 and Python 3.
I'd lose the "should be comma separated" and change this to "list of ports associated" (and alter the samples below to use native YAML instead of legacy Ansible key=value syntax).
```suggestion # Check if the service is indirect or alias and if out contains exactly 1 line of string 'indirect'/ 'alias' it's disabled ```
